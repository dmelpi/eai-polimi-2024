
ai_inertial_steval_mkboxpro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000222e4  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00060300  08022520  08022520  00023520  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08082820  08082820  00083820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08082828  08082828  00083828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0808282c  0808282c  0008382c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000b88  20000000  08082830  00084000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00044dc2  20000ba0  080833b8  00084ba0  2**5
                  ALLOC
  8 ._user_heap_stack 00001006  20045962  080833b8  00085962  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00084b88  2**0
                  CONTENTS, READONLY
 10 .debug_info   00064235  00000000  00000000  00084bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000b9a5  00000000  00000000  000e8df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000041a8  00000000  00000000  000f4798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002fad  00000000  00000000  000f8940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000416b2  00000000  00000000  000fb8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004e8aa  00000000  00000000  0013cf9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017544c  00000000  00000000  0018b849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000108  00000000  00000000  00300c95  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00012d80  00000000  00000000  00300da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000087  00000000  00000000  00313b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000083c9  00000000  00000000  00313ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 000001e0  00000000  00000000  0031bf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000ba0 	.word	0x20000ba0
 8000254:	00000000 	.word	0x00000000
 8000258:	08022504 	.word	0x08022504

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000ba4 	.word	0x20000ba4
 8000274:	08022504 	.word	0x08022504

08000278 <strcmp>:
 8000278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800027c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000280:	2a01      	cmp	r2, #1
 8000282:	bf28      	it	cs
 8000284:	429a      	cmpcs	r2, r3
 8000286:	d0f7      	beq.n	8000278 <strcmp>
 8000288:	1ad0      	subs	r0, r2, r3
 800028a:	4770      	bx	lr

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_drsub>:
 800029c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	e002      	b.n	80002a8 <__adddf3>
 80002a2:	bf00      	nop

080002a4 <__aeabi_dsub>:
 80002a4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002a8 <__adddf3>:
 80002a8:	b530      	push	{r4, r5, lr}
 80002aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b2:	ea94 0f05 	teq	r4, r5
 80002b6:	bf08      	it	eq
 80002b8:	ea90 0f02 	teqeq	r0, r2
 80002bc:	bf1f      	itttt	ne
 80002be:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ce:	f000 80e2 	beq.w	8000496 <__adddf3+0x1ee>
 80002d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002da:	bfb8      	it	lt
 80002dc:	426d      	neglt	r5, r5
 80002de:	dd0c      	ble.n	80002fa <__adddf3+0x52>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea80 0202 	eor.w	r2, r0, r2
 80002e6:	ea81 0303 	eor.w	r3, r1, r3
 80002ea:	ea82 0000 	eor.w	r0, r2, r0
 80002ee:	ea83 0101 	eor.w	r1, r3, r1
 80002f2:	ea80 0202 	eor.w	r2, r0, r2
 80002f6:	ea81 0303 	eor.w	r3, r1, r3
 80002fa:	2d36      	cmp	r5, #54	@ 0x36
 80002fc:	bf88      	it	hi
 80002fe:	bd30      	pophi	{r4, r5, pc}
 8000300:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000304:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000308:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800030c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x70>
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800031c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000320:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x84>
 8000326:	4252      	negs	r2, r2
 8000328:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032c:	ea94 0f05 	teq	r4, r5
 8000330:	f000 80a7 	beq.w	8000482 <__adddf3+0x1da>
 8000334:	f1a4 0401 	sub.w	r4, r4, #1
 8000338:	f1d5 0e20 	rsbs	lr, r5, #32
 800033c:	db0d      	blt.n	800035a <__adddf3+0xb2>
 800033e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000342:	fa22 f205 	lsr.w	r2, r2, r5
 8000346:	1880      	adds	r0, r0, r2
 8000348:	f141 0100 	adc.w	r1, r1, #0
 800034c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000350:	1880      	adds	r0, r0, r2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	4159      	adcs	r1, r3
 8000358:	e00e      	b.n	8000378 <__adddf3+0xd0>
 800035a:	f1a5 0520 	sub.w	r5, r5, #32
 800035e:	f10e 0e20 	add.w	lr, lr, #32
 8000362:	2a01      	cmp	r2, #1
 8000364:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000368:	bf28      	it	cs
 800036a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	18c0      	adds	r0, r0, r3
 8000374:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000378:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800037c:	d507      	bpl.n	800038e <__adddf3+0xe6>
 800037e:	f04f 0e00 	mov.w	lr, #0
 8000382:	f1dc 0c00 	rsbs	ip, ip, #0
 8000386:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038a:	eb6e 0101 	sbc.w	r1, lr, r1
 800038e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000392:	d31b      	bcc.n	80003cc <__adddf3+0x124>
 8000394:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000398:	d30c      	bcc.n	80003b4 <__adddf3+0x10c>
 800039a:	0849      	lsrs	r1, r1, #1
 800039c:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a4:	f104 0401 	add.w	r4, r4, #1
 80003a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ac:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b0:	f080 809a 	bcs.w	80004e8 <__adddf3+0x240>
 80003b4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003b8:	bf08      	it	eq
 80003ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003be:	f150 0000 	adcs.w	r0, r0, #0
 80003c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003c6:	ea41 0105 	orr.w	r1, r1, r5
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d0:	4140      	adcs	r0, r0
 80003d2:	eb41 0101 	adc.w	r1, r1, r1
 80003d6:	3c01      	subs	r4, #1
 80003d8:	bf28      	it	cs
 80003da:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003de:	d2e9      	bcs.n	80003b4 <__adddf3+0x10c>
 80003e0:	f091 0f00 	teq	r1, #0
 80003e4:	bf04      	itt	eq
 80003e6:	4601      	moveq	r1, r0
 80003e8:	2000      	moveq	r0, #0
 80003ea:	fab1 f381 	clz	r3, r1
 80003ee:	bf08      	it	eq
 80003f0:	3320      	addeq	r3, #32
 80003f2:	f1a3 030b 	sub.w	r3, r3, #11
 80003f6:	f1b3 0220 	subs.w	r2, r3, #32
 80003fa:	da0c      	bge.n	8000416 <__adddf3+0x16e>
 80003fc:	320c      	adds	r2, #12
 80003fe:	dd08      	ble.n	8000412 <__adddf3+0x16a>
 8000400:	f102 0c14 	add.w	ip, r2, #20
 8000404:	f1c2 020c 	rsb	r2, r2, #12
 8000408:	fa01 f00c 	lsl.w	r0, r1, ip
 800040c:	fa21 f102 	lsr.w	r1, r1, r2
 8000410:	e00c      	b.n	800042c <__adddf3+0x184>
 8000412:	f102 0214 	add.w	r2, r2, #20
 8000416:	bfd8      	it	le
 8000418:	f1c2 0c20 	rsble	ip, r2, #32
 800041c:	fa01 f102 	lsl.w	r1, r1, r2
 8000420:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000424:	bfdc      	itt	le
 8000426:	ea41 010c 	orrle.w	r1, r1, ip
 800042a:	4090      	lslle	r0, r2
 800042c:	1ae4      	subs	r4, r4, r3
 800042e:	bfa2      	ittt	ge
 8000430:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000434:	4329      	orrge	r1, r5
 8000436:	bd30      	popge	{r4, r5, pc}
 8000438:	ea6f 0404 	mvn.w	r4, r4
 800043c:	3c1f      	subs	r4, #31
 800043e:	da1c      	bge.n	800047a <__adddf3+0x1d2>
 8000440:	340c      	adds	r4, #12
 8000442:	dc0e      	bgt.n	8000462 <__adddf3+0x1ba>
 8000444:	f104 0414 	add.w	r4, r4, #20
 8000448:	f1c4 0220 	rsb	r2, r4, #32
 800044c:	fa20 f004 	lsr.w	r0, r0, r4
 8000450:	fa01 f302 	lsl.w	r3, r1, r2
 8000454:	ea40 0003 	orr.w	r0, r0, r3
 8000458:	fa21 f304 	lsr.w	r3, r1, r4
 800045c:	ea45 0103 	orr.w	r1, r5, r3
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	f1c4 040c 	rsb	r4, r4, #12
 8000466:	f1c4 0220 	rsb	r2, r4, #32
 800046a:	fa20 f002 	lsr.w	r0, r0, r2
 800046e:	fa01 f304 	lsl.w	r3, r1, r4
 8000472:	ea40 0003 	orr.w	r0, r0, r3
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	fa21 f004 	lsr.w	r0, r1, r4
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	f094 0f00 	teq	r4, #0
 8000486:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048a:	bf06      	itte	eq
 800048c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000490:	3401      	addeq	r4, #1
 8000492:	3d01      	subne	r5, #1
 8000494:	e74e      	b.n	8000334 <__adddf3+0x8c>
 8000496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049a:	bf18      	it	ne
 800049c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a0:	d029      	beq.n	80004f6 <__adddf3+0x24e>
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	d005      	beq.n	80004ba <__adddf3+0x212>
 80004ae:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b2:	bf04      	itt	eq
 80004b4:	4619      	moveq	r1, r3
 80004b6:	4610      	moveq	r0, r2
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	ea91 0f03 	teq	r1, r3
 80004be:	bf1e      	ittt	ne
 80004c0:	2100      	movne	r1, #0
 80004c2:	2000      	movne	r0, #0
 80004c4:	bd30      	popne	{r4, r5, pc}
 80004c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ca:	d105      	bne.n	80004d8 <__adddf3+0x230>
 80004cc:	0040      	lsls	r0, r0, #1
 80004ce:	4149      	adcs	r1, r1
 80004d0:	bf28      	it	cs
 80004d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004d6:	bd30      	pop	{r4, r5, pc}
 80004d8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004dc:	bf3c      	itt	cc
 80004de:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e2:	bd30      	popcc	{r4, r5, pc}
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004ec:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f0:	f04f 0000 	mov.w	r0, #0
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fa:	bf1a      	itte	ne
 80004fc:	4619      	movne	r1, r3
 80004fe:	4610      	movne	r0, r2
 8000500:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000504:	bf1c      	itt	ne
 8000506:	460b      	movne	r3, r1
 8000508:	4602      	movne	r2, r0
 800050a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800050e:	bf06      	itte	eq
 8000510:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000514:	ea91 0f03 	teqeq	r1, r3
 8000518:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	bf00      	nop

08000520 <__aeabi_ui2d>:
 8000520:	f090 0f00 	teq	r0, #0
 8000524:	bf04      	itt	eq
 8000526:	2100      	moveq	r1, #0
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000530:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000534:	f04f 0500 	mov.w	r5, #0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e750      	b.n	80003e0 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_i2d>:
 8000540:	f090 0f00 	teq	r0, #0
 8000544:	bf04      	itt	eq
 8000546:	2100      	moveq	r1, #0
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000550:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000554:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000558:	bf48      	it	mi
 800055a:	4240      	negmi	r0, r0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e73e      	b.n	80003e0 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_f2d>:
 8000564:	0042      	lsls	r2, r0, #1
 8000566:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056a:	ea4f 0131 	mov.w	r1, r1, rrx
 800056e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000572:	bf1f      	itttt	ne
 8000574:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000578:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800057c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000580:	4770      	bxne	lr
 8000582:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000586:	bf08      	it	eq
 8000588:	4770      	bxeq	lr
 800058a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800058e:	bf04      	itt	eq
 8000590:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800059c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a4:	e71c      	b.n	80003e0 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_ul2d>:
 80005a8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ac:	bf08      	it	eq
 80005ae:	4770      	bxeq	lr
 80005b0:	b530      	push	{r4, r5, lr}
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	e00a      	b.n	80005ce <__aeabi_l2d+0x16>

080005b8 <__aeabi_l2d>:
 80005b8:	ea50 0201 	orrs.w	r2, r0, r1
 80005bc:	bf08      	it	eq
 80005be:	4770      	bxeq	lr
 80005c0:	b530      	push	{r4, r5, lr}
 80005c2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005c6:	d502      	bpl.n	80005ce <__aeabi_l2d+0x16>
 80005c8:	4240      	negs	r0, r0
 80005ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ce:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005da:	f43f aed8 	beq.w	800038e <__adddf3+0xe6>
 80005de:	f04f 0203 	mov.w	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f6:	f1c2 0320 	rsb	r3, r2, #32
 80005fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000602:	fa01 fe03 	lsl.w	lr, r1, r3
 8000606:	ea40 000e 	orr.w	r0, r0, lr
 800060a:	fa21 f102 	lsr.w	r1, r1, r2
 800060e:	4414      	add	r4, r2
 8000610:	e6bd      	b.n	800038e <__adddf3+0xe6>
 8000612:	bf00      	nop

08000614 <__aeabi_dmul>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800061e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000622:	bf1d      	ittte	ne
 8000624:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000628:	ea94 0f0c 	teqne	r4, ip
 800062c:	ea95 0f0c 	teqne	r5, ip
 8000630:	f000 f8de 	bleq	80007f0 <__aeabi_dmul+0x1dc>
 8000634:	442c      	add	r4, r5
 8000636:	ea81 0603 	eor.w	r6, r1, r3
 800063a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000642:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000646:	bf18      	it	ne
 8000648:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000654:	d038      	beq.n	80006c8 <__aeabi_dmul+0xb4>
 8000656:	fba0 ce02 	umull	ip, lr, r0, r2
 800065a:	f04f 0500 	mov.w	r5, #0
 800065e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000662:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000666:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066a:	f04f 0600 	mov.w	r6, #0
 800066e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000672:	f09c 0f00 	teq	ip, #0
 8000676:	bf18      	it	ne
 8000678:	f04e 0e01 	orrne.w	lr, lr, #1
 800067c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000680:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000684:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000688:	d204      	bcs.n	8000694 <__aeabi_dmul+0x80>
 800068a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068e:	416d      	adcs	r5, r5
 8000690:	eb46 0606 	adc.w	r6, r6, r6
 8000694:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000698:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800069c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006ac:	bf88      	it	hi
 80006ae:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b2:	d81e      	bhi.n	80006f2 <__aeabi_dmul+0xde>
 80006b4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006b8:	bf08      	it	eq
 80006ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006be:	f150 0000 	adcs.w	r0, r0, #0
 80006c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006cc:	ea46 0101 	orr.w	r1, r6, r1
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006dc:	bfc2      	ittt	gt
 80006de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e6:	bd70      	popgt	{r4, r5, r6, pc}
 80006e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006ec:	f04f 0e00 	mov.w	lr, #0
 80006f0:	3c01      	subs	r4, #1
 80006f2:	f300 80ab 	bgt.w	800084c <__aeabi_dmul+0x238>
 80006f6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fa:	bfde      	ittt	le
 80006fc:	2000      	movle	r0, #0
 80006fe:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000702:	bd70      	pople	{r4, r5, r6, pc}
 8000704:	f1c4 0400 	rsb	r4, r4, #0
 8000708:	3c20      	subs	r4, #32
 800070a:	da35      	bge.n	8000778 <__aeabi_dmul+0x164>
 800070c:	340c      	adds	r4, #12
 800070e:	dc1b      	bgt.n	8000748 <__aeabi_dmul+0x134>
 8000710:	f104 0414 	add.w	r4, r4, #20
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f305 	lsl.w	r3, r0, r5
 800071c:	fa20 f004 	lsr.w	r0, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800072c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	fa21 f604 	lsr.w	r6, r1, r4
 8000738:	eb42 0106 	adc.w	r1, r2, r6
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f1c4 040c 	rsb	r4, r4, #12
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f304 	lsl.w	r3, r0, r4
 8000754:	fa20 f005 	lsr.w	r0, r0, r5
 8000758:	fa01 f204 	lsl.w	r2, r1, r4
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	f141 0100 	adc.w	r1, r1, #0
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f205 	lsl.w	r2, r0, r5
 8000780:	ea4e 0e02 	orr.w	lr, lr, r2
 8000784:	fa20 f304 	lsr.w	r3, r0, r4
 8000788:	fa01 f205 	lsl.w	r2, r1, r5
 800078c:	ea43 0302 	orr.w	r3, r3, r2
 8000790:	fa21 f004 	lsr.w	r0, r1, r4
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	fa21 f204 	lsr.w	r2, r1, r4
 800079c:	ea20 0002 	bic.w	r0, r0, r2
 80007a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f094 0f00 	teq	r4, #0
 80007b4:	d10f      	bne.n	80007d6 <__aeabi_dmul+0x1c2>
 80007b6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ba:	0040      	lsls	r0, r0, #1
 80007bc:	eb41 0101 	adc.w	r1, r1, r1
 80007c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c4:	bf08      	it	eq
 80007c6:	3c01      	subeq	r4, #1
 80007c8:	d0f7      	beq.n	80007ba <__aeabi_dmul+0x1a6>
 80007ca:	ea41 0106 	orr.w	r1, r1, r6
 80007ce:	f095 0f00 	teq	r5, #0
 80007d2:	bf18      	it	ne
 80007d4:	4770      	bxne	lr
 80007d6:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007da:	0052      	lsls	r2, r2, #1
 80007dc:	eb43 0303 	adc.w	r3, r3, r3
 80007e0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e4:	bf08      	it	eq
 80007e6:	3d01      	subeq	r5, #1
 80007e8:	d0f7      	beq.n	80007da <__aeabi_dmul+0x1c6>
 80007ea:	ea43 0306 	orr.w	r3, r3, r6
 80007ee:	4770      	bx	lr
 80007f0:	ea94 0f0c 	teq	r4, ip
 80007f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f8:	bf18      	it	ne
 80007fa:	ea95 0f0c 	teqne	r5, ip
 80007fe:	d00c      	beq.n	800081a <__aeabi_dmul+0x206>
 8000800:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000804:	bf18      	it	ne
 8000806:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080a:	d1d1      	bne.n	80007b0 <__aeabi_dmul+0x19c>
 800080c:	ea81 0103 	eor.w	r1, r1, r3
 8000810:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	bd70      	pop	{r4, r5, r6, pc}
 800081a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081e:	bf06      	itte	eq
 8000820:	4610      	moveq	r0, r2
 8000822:	4619      	moveq	r1, r3
 8000824:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000828:	d019      	beq.n	800085e <__aeabi_dmul+0x24a>
 800082a:	ea94 0f0c 	teq	r4, ip
 800082e:	d102      	bne.n	8000836 <__aeabi_dmul+0x222>
 8000830:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000834:	d113      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000836:	ea95 0f0c 	teq	r5, ip
 800083a:	d105      	bne.n	8000848 <__aeabi_dmul+0x234>
 800083c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000840:	bf1c      	itt	ne
 8000842:	4610      	movne	r0, r2
 8000844:	4619      	movne	r1, r3
 8000846:	d10a      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000850:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000854:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000862:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000866:	bd70      	pop	{r4, r5, r6, pc}

08000868 <__aeabi_ddiv>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800086e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000872:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000876:	bf1d      	ittte	ne
 8000878:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800087c:	ea94 0f0c 	teqne	r4, ip
 8000880:	ea95 0f0c 	teqne	r5, ip
 8000884:	f000 f8a7 	bleq	80009d6 <__aeabi_ddiv+0x16e>
 8000888:	eba4 0405 	sub.w	r4, r4, r5
 800088c:	ea81 0e03 	eor.w	lr, r1, r3
 8000890:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000894:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000898:	f000 8088 	beq.w	80009ac <__aeabi_ddiv+0x144>
 800089c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008bc:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c0:	429d      	cmp	r5, r3
 80008c2:	bf08      	it	eq
 80008c4:	4296      	cmpeq	r6, r2
 80008c6:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ca:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ce:	d202      	bcs.n	80008d6 <__aeabi_ddiv+0x6e>
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	1ab6      	subs	r6, r6, r2
 80008d8:	eb65 0503 	sbc.w	r5, r5, r3
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008e6:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000944:	ea55 0e06 	orrs.w	lr, r5, r6
 8000948:	d018      	beq.n	800097c <__aeabi_ddiv+0x114>
 800094a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000952:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000956:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000962:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000966:	d1c0      	bne.n	80008ea <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	d10b      	bne.n	8000986 <__aeabi_ddiv+0x11e>
 800096e:	ea41 0100 	orr.w	r1, r1, r0
 8000972:	f04f 0000 	mov.w	r0, #0
 8000976:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097a:	e7b6      	b.n	80008ea <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	bf04      	itt	eq
 8000982:	4301      	orreq	r1, r0
 8000984:	2000      	moveq	r0, #0
 8000986:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098a:	bf88      	it	hi
 800098c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000990:	f63f aeaf 	bhi.w	80006f2 <__aeabi_dmul+0xde>
 8000994:	ebb5 0c03 	subs.w	ip, r5, r3
 8000998:	bf04      	itt	eq
 800099a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a2:	f150 0000 	adcs.w	r0, r0, #0
 80009a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b8:	bfc2      	ittt	gt
 80009ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	popgt	{r4, r5, r6, pc}
 80009c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c8:	f04f 0e00 	mov.w	lr, #0
 80009cc:	3c01      	subs	r4, #1
 80009ce:	e690      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d0:	ea45 0e06 	orr.w	lr, r5, r6
 80009d4:	e68d      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009da:	ea94 0f0c 	teq	r4, ip
 80009de:	bf08      	it	eq
 80009e0:	ea95 0f0c 	teqeq	r5, ip
 80009e4:	f43f af3b 	beq.w	800085e <__aeabi_dmul+0x24a>
 80009e8:	ea94 0f0c 	teq	r4, ip
 80009ec:	d10a      	bne.n	8000a04 <__aeabi_ddiv+0x19c>
 80009ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f2:	f47f af34 	bne.w	800085e <__aeabi_dmul+0x24a>
 80009f6:	ea95 0f0c 	teq	r5, ip
 80009fa:	f47f af25 	bne.w	8000848 <__aeabi_dmul+0x234>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e72c      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a04:	ea95 0f0c 	teq	r5, ip
 8000a08:	d106      	bne.n	8000a18 <__aeabi_ddiv+0x1b0>
 8000a0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0e:	f43f aefd 	beq.w	800080c <__aeabi_dmul+0x1f8>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e722      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a1c:	bf18      	it	ne
 8000a1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a22:	f47f aec5 	bne.w	80007b0 <__aeabi_dmul+0x19c>
 8000a26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2a:	f47f af0d 	bne.w	8000848 <__aeabi_dmul+0x234>
 8000a2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a32:	f47f aeeb 	bne.w	800080c <__aeabi_dmul+0x1f8>
 8000a36:	e712      	b.n	800085e <__aeabi_dmul+0x24a>

08000a38 <__gedf2>:
 8000a38:	f04f 3cff 	mov.w	ip, #4294967295
 8000a3c:	e006      	b.n	8000a4c <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__ledf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	e002      	b.n	8000a4c <__cmpdf2+0x4>
 8000a46:	bf00      	nop

08000a48 <__cmpdf2>:
 8000a48:	f04f 0c01 	mov.w	ip, #1
 8000a4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a62:	d01b      	beq.n	8000a9c <__cmpdf2+0x54>
 8000a64:	b001      	add	sp, #4
 8000a66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6a:	bf0c      	ite	eq
 8000a6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a70:	ea91 0f03 	teqne	r1, r3
 8000a74:	bf02      	ittt	eq
 8000a76:	ea90 0f02 	teqeq	r0, r2
 8000a7a:	2000      	moveq	r0, #0
 8000a7c:	4770      	bxeq	lr
 8000a7e:	f110 0f00 	cmn.w	r0, #0
 8000a82:	ea91 0f03 	teq	r1, r3
 8000a86:	bf58      	it	pl
 8000a88:	4299      	cmppl	r1, r3
 8000a8a:	bf08      	it	eq
 8000a8c:	4290      	cmpeq	r0, r2
 8000a8e:	bf2c      	ite	cs
 8000a90:	17d8      	asrcs	r0, r3, #31
 8000a92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a96:	f040 0001 	orr.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__cmpdf2+0x64>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d107      	bne.n	8000abc <__cmpdf2+0x74>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d1d6      	bne.n	8000a64 <__cmpdf2+0x1c>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d0d3      	beq.n	8000a64 <__cmpdf2+0x1c>
 8000abc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_cdrcmple>:
 8000ac4:	4684      	mov	ip, r0
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4662      	mov	r2, ip
 8000aca:	468c      	mov	ip, r1
 8000acc:	4619      	mov	r1, r3
 8000ace:	4663      	mov	r3, ip
 8000ad0:	e000      	b.n	8000ad4 <__aeabi_cdcmpeq>
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_cdcmpeq>:
 8000ad4:	b501      	push	{r0, lr}
 8000ad6:	f7ff ffb7 	bl	8000a48 <__cmpdf2>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	bf48      	it	mi
 8000ade:	f110 0f00 	cmnmi.w	r0, #0
 8000ae2:	bd01      	pop	{r0, pc}

08000ae4 <__aeabi_dcmpeq>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff fff4 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000aec:	bf0c      	ite	eq
 8000aee:	2001      	moveq	r0, #1
 8000af0:	2000      	movne	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmplt>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffea 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000b00:	bf34      	ite	cc
 8000b02:	2001      	movcc	r0, #1
 8000b04:	2000      	movcs	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmple>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffe0 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpge>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffce 	bl	8000ac4 <__aeabi_cdrcmple>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpgt>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffc4 	bl	8000ac4 <__aeabi_cdrcmple>
 8000b3c:	bf34      	ite	cc
 8000b3e:	2001      	movcc	r0, #1
 8000b40:	2000      	movcs	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpun>:
 8000b48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b50:	d102      	bne.n	8000b58 <__aeabi_dcmpun+0x10>
 8000b52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b56:	d10a      	bne.n	8000b6e <__aeabi_dcmpun+0x26>
 8000b58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b60:	d102      	bne.n	8000b68 <__aeabi_dcmpun+0x20>
 8000b62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_dcmpun+0x26>
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0001 	mov.w	r0, #1
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_d2iz>:
 8000b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b7c:	d215      	bcs.n	8000baa <__aeabi_d2iz+0x36>
 8000b7e:	d511      	bpl.n	8000ba4 <__aeabi_d2iz+0x30>
 8000b80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d912      	bls.n	8000bb0 <__aeabi_d2iz+0x3c>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	4240      	negne	r0, r0
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d105      	bne.n	8000bbc <__aeabi_d2iz+0x48>
 8000bb0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb4:	bf08      	it	eq
 8000bb6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_d2uiz>:
 8000bc4:	004a      	lsls	r2, r1, #1
 8000bc6:	d211      	bcs.n	8000bec <__aeabi_d2uiz+0x28>
 8000bc8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bcc:	d211      	bcs.n	8000bf2 <__aeabi_d2uiz+0x2e>
 8000bce:	d50d      	bpl.n	8000bec <__aeabi_d2uiz+0x28>
 8000bd0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd8:	d40e      	bmi.n	8000bf8 <__aeabi_d2uiz+0x34>
 8000bda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d102      	bne.n	8000bfe <__aeabi_d2uiz+0x3a>
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	4770      	bx	lr
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	4770      	bx	lr

08000c04 <__aeabi_d2f>:
 8000c04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c0c:	bf24      	itt	cs
 8000c0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c16:	d90d      	bls.n	8000c34 <__aeabi_d2f+0x30>
 8000c18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c2c:	bf08      	it	eq
 8000c2e:	f020 0001 	biceq.w	r0, r0, #1
 8000c32:	4770      	bx	lr
 8000c34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c38:	d121      	bne.n	8000c7e <__aeabi_d2f+0x7a>
 8000c3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c3e:	bfbc      	itt	lt
 8000c40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	4770      	bxlt	lr
 8000c46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4e:	f1c2 0218 	rsb	r2, r2, #24
 8000c52:	f1c2 0c20 	rsb	ip, r2, #32
 8000c56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5e:	bf18      	it	ne
 8000c60:	f040 0001 	orrne.w	r0, r0, #1
 8000c64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c70:	ea40 000c 	orr.w	r0, r0, ip
 8000c74:	fa23 f302 	lsr.w	r3, r3, r2
 8000c78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c7c:	e7cc      	b.n	8000c18 <__aeabi_d2f+0x14>
 8000c7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c82:	d107      	bne.n	8000c94 <__aeabi_d2f+0x90>
 8000c84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c88:	bf1e      	ittt	ne
 8000c8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c92:	4770      	bxne	lr
 8000c94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_d2lz>:
 8000ca4:	b538      	push	{r3, r4, r5, lr}
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2300      	movs	r3, #0
 8000caa:	4604      	mov	r4, r0
 8000cac:	460d      	mov	r5, r1
 8000cae:	f7ff ff23 	bl	8000af8 <__aeabi_dcmplt>
 8000cb2:	b928      	cbnz	r0, 8000cc0 <__aeabi_d2lz+0x1c>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	4629      	mov	r1, r5
 8000cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cbc:	f000 b80a 	b.w	8000cd4 <__aeabi_d2ulz>
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cc6:	f000 f805 	bl	8000cd4 <__aeabi_d2ulz>
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	bd38      	pop	{r3, r4, r5, pc}
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_d2ulz>:
 8000cd4:	b5d0      	push	{r4, r6, r7, lr}
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <__aeabi_d2ulz+0x34>)
 8000cda:	4606      	mov	r6, r0
 8000cdc:	460f      	mov	r7, r1
 8000cde:	f7ff fc99 	bl	8000614 <__aeabi_dmul>
 8000ce2:	f7ff ff6f 	bl	8000bc4 <__aeabi_d2uiz>
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	f7ff fc1a 	bl	8000520 <__aeabi_ui2d>
 8000cec:	2200      	movs	r2, #0
 8000cee:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <__aeabi_d2ulz+0x38>)
 8000cf0:	f7ff fc90 	bl	8000614 <__aeabi_dmul>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	4630      	mov	r0, r6
 8000cfa:	4639      	mov	r1, r7
 8000cfc:	f7ff fad2 	bl	80002a4 <__aeabi_dsub>
 8000d00:	f7ff ff60 	bl	8000bc4 <__aeabi_d2uiz>
 8000d04:	4621      	mov	r1, r4
 8000d06:	bdd0      	pop	{r4, r6, r7, pc}
 8000d08:	3df00000 	.word	0x3df00000
 8000d0c:	41f00000 	.word	0x41f00000

08000d10 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8000d1a:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <BSP_SPI3_Init+0x54>)
 8000d1c:	4a12      	ldr	r2, [pc, #72]	@ (8000d68 <BSP_SPI3_Init+0x58>)
 8000d1e:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <BSP_SPI3_Init+0x5c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	4911      	ldr	r1, [pc, #68]	@ (8000d6c <BSP_SPI3_Init+0x5c>)
 8000d28:	600a      	str	r2, [r1, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d114      	bne.n	8000d58 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 8000d2e:	480d      	ldr	r0, [pc, #52]	@ (8000d64 <BSP_SPI3_Init+0x54>)
 8000d30:	f00e fc36 	bl	800f5a0 <HAL_SPI_GetState>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10e      	bne.n	8000d58 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8000d3a:	480a      	ldr	r0, [pc, #40]	@ (8000d64 <BSP_SPI3_Init+0x54>)
 8000d3c:	f000 f984 	bl	8001048 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d108      	bne.n	8000d58 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8000d46:	4807      	ldr	r0, [pc, #28]	@ (8000d64 <BSP_SPI3_Init+0x54>)
 8000d48:	f000 f90a 	bl	8000f60 <MX_SPI3_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000d52:	f06f 0307 	mvn.w	r3, #7
 8000d56:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000d58:	687b      	ldr	r3, [r7, #4]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000bbc 	.word	0x20000bbc
 8000d68:	46002000 	.word	0x46002000
 8000d6c:	20000cdc 	.word	0x20000cdc

08000d70 <BSP_SPI3_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI3_DeInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8000d76:	f06f 0307 	mvn.w	r3, #7
 8000d7a:	607b      	str	r3, [r7, #4]
  if (SPI3InitCounter > 0)
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <BSP_SPI3_DeInit+0x48>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d013      	beq.n	8000dac <BSP_SPI3_DeInit+0x3c>
  {
    if (--SPI3InitCounter == 0)
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <BSP_SPI3_DeInit+0x48>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	@ (8000db8 <BSP_SPI3_DeInit+0x48>)
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <BSP_SPI3_DeInit+0x48>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10a      	bne.n	8000dac <BSP_SPI3_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI3_MspDeInit(&hspi3);
 8000d96:	4809      	ldr	r0, [pc, #36]	@ (8000dbc <BSP_SPI3_DeInit+0x4c>)
 8000d98:	f000 f9e8 	bl	800116c <SPI3_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi3) == HAL_OK)
 8000d9c:	4807      	ldr	r0, [pc, #28]	@ (8000dbc <BSP_SPI3_DeInit+0x4c>)
 8000d9e:	f00d fff3 	bl	800ed88 <HAL_SPI_DeInit>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d101      	bne.n	8000dac <BSP_SPI3_DeInit+0x3c>
      {
        ret = BSP_ERROR_NONE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000dac:	687b      	ldr	r3, [r7, #4]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000cdc 	.word	0x20000cdc
 8000dbc:	20000bbc 	.word	0x20000bbc

08000dc0 <BSP_SPI3_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_Send(uint8_t *pData, uint16_t Length)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi3, pData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8000dd0:	887a      	ldrh	r2, [r7, #2]
 8000dd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <BSP_SPI3_Send+0x34>)
 8000dda:	f00e f813 	bl	800ee04 <HAL_SPI_Transmit>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d002      	beq.n	8000dea <BSP_SPI3_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000de4:	f06f 0305 	mvn.w	r3, #5
 8000de8:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000bbc 	.word	0x20000bbc

08000df8 <BSP_SPI3_Recv>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI3_Recv(uint8_t *pData, uint16_t Length)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hspi3, pData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8000e08:	887a      	ldrh	r2, [r7, #2]
 8000e0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	4806      	ldr	r0, [pc, #24]	@ (8000e2c <BSP_SPI3_Recv+0x34>)
 8000e12:	f00e fa15 	bl	800f240 <HAL_SPI_Receive>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d002      	beq.n	8000e22 <BSP_SPI3_Recv+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000e1c:	f06f 0305 	mvn.w	r3, #5
 8000e20:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000bbc 	.word	0x20000bbc

08000e30 <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]

  hspi2.Instance  = SPI2;
 8000e3a:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <BSP_SPI2_Init+0x54>)
 8000e3c:	4a12      	ldr	r2, [pc, #72]	@ (8000e88 <BSP_SPI2_Init+0x58>)
 8000e3e:	601a      	str	r2, [r3, #0]

  if(SPI2InitCounter++ == 0)
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <BSP_SPI2_Init+0x5c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	1c5a      	adds	r2, r3, #1
 8000e46:	4911      	ldr	r1, [pc, #68]	@ (8000e8c <BSP_SPI2_Init+0x5c>)
 8000e48:	600a      	str	r2, [r1, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d114      	bne.n	8000e78 <BSP_SPI2_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 8000e4e:	480d      	ldr	r0, [pc, #52]	@ (8000e84 <BSP_SPI2_Init+0x54>)
 8000e50:	f00e fba6 	bl	800f5a0 <HAL_SPI_GetState>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10e      	bne.n	8000e78 <BSP_SPI2_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI2_MspInit(&hspi2);
 8000e5a:	480a      	ldr	r0, [pc, #40]	@ (8000e84 <BSP_SPI2_Init+0x54>)
 8000e5c:	f000 fa1e 	bl	800129c <SPI2_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d108      	bne.n	8000e78 <BSP_SPI2_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI2_Init(&hspi2) != HAL_OK)
 8000e66:	4807      	ldr	r0, [pc, #28]	@ (8000e84 <BSP_SPI2_Init+0x54>)
 8000e68:	f000 f9a4 	bl	80011b4 <MX_SPI2_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <BSP_SPI2_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000e72:	f06f 0307 	mvn.w	r3, #7
 8000e76:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000e78:	687b      	ldr	r3, [r7, #4]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000c4c 	.word	0x20000c4c
 8000e88:	40003800 	.word	0x40003800
 8000e8c:	20000ce0 	.word	0x20000ce0

08000e90 <BSP_SPI2_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI2_DeInit(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8000e96:	f06f 0307 	mvn.w	r3, #7
 8000e9a:	607b      	str	r3, [r7, #4]
  if (SPI2InitCounter > 0)
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <BSP_SPI2_DeInit+0x48>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d013      	beq.n	8000ecc <BSP_SPI2_DeInit+0x3c>
  {
    if (--SPI2InitCounter == 0)
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <BSP_SPI2_DeInit+0x48>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed8 <BSP_SPI2_DeInit+0x48>)
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <BSP_SPI2_DeInit+0x48>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10a      	bne.n	8000ecc <BSP_SPI2_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI2_MspDeInit(&hspi2);
 8000eb6:	4809      	ldr	r0, [pc, #36]	@ (8000edc <BSP_SPI2_DeInit+0x4c>)
 8000eb8:	f000 fa70 	bl	800139c <SPI2_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi2) == HAL_OK)
 8000ebc:	4807      	ldr	r0, [pc, #28]	@ (8000edc <BSP_SPI2_DeInit+0x4c>)
 8000ebe:	f00d ff63 	bl	800ed88 <HAL_SPI_DeInit>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d101      	bne.n	8000ecc <BSP_SPI2_DeInit+0x3c>
      {
        ret = BSP_ERROR_NONE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000ecc:	687b      	ldr	r3, [r7, #4]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000ce0 	.word	0x20000ce0
 8000edc:	20000c4c 	.word	0x20000c4c

08000ee0 <BSP_SPI2_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pData, uint16_t Length)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8000ef0:	887a      	ldrh	r2, [r7, #2]
 8000ef2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	4806      	ldr	r0, [pc, #24]	@ (8000f14 <BSP_SPI2_Send+0x34>)
 8000efa:	f00d ff83 	bl	800ee04 <HAL_SPI_Transmit>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <BSP_SPI2_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000f04:	f06f 0305 	mvn.w	r3, #5
 8000f08:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000c4c 	.word	0x20000c4c

08000f18 <BSP_SPI2_Recv>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI2_Recv(uint8_t *pData, uint16_t Length)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8000f28:	887a      	ldrh	r2, [r7, #2]
 8000f2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <BSP_SPI2_Recv+0x34>)
 8000f32:	f00e f985 	bl	800f240 <HAL_SPI_Receive>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <BSP_SPI2_Recv+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000f3c:	f06f 0305 	mvn.w	r3, #5
 8000f40:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000c4c 	.word	0x20000c4c

08000f50 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000f54:	f008 fea6 	bl	8009ca4 <HAL_GetTick>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	75fb      	strb	r3, [r7, #23]
  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]

  hspi->Instance = SPI3;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a32      	ldr	r2, [pc, #200]	@ (8001044 <MX_SPI3_Init+0xe4>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f84:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2207      	movs	r2, #7
 8000f90:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f98:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000fa0:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fa8:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000fb0:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 0x7;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi->Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi->Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f00d fda8 	bl	800eb5c <HAL_SPI_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_SPI3_Init+0xb6>
  {
    ret = HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	75fb      	strb	r3, [r7, #23]
  }

  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP2_LPDMA_CH0_TCF_TRG;
 800101a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800101e:	60fb      	str	r3, [r7, #12]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  if (HAL_SPIEx_SetConfigAutonomousMode(hspi, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	4619      	mov	r1, r3
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f00e fbaf 	bl	800f78e <HAL_SPIEx_SetConfigAutonomousMode>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_SPI3_Init+0xda>
  {
    ret = HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800103a:	7dfb      	ldrb	r3, [r7, #23]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	46002000 	.word	0x46002000

08001048 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b0be      	sub	sp, #248	@ 0xf8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	22c8      	movs	r2, #200	@ 0xc8
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f01d fae1 	bl	801e620 <memset>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800105e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_SYSCLK;
 800106a:	2308      	movs	r3, #8
 800106c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001070:	f107 0318 	add.w	r3, r7, #24
 8001074:	4618      	mov	r0, r3
 8001076:	f00c fe3f 	bl	800dcf8 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800107a:	4b39      	ldr	r3, [pc, #228]	@ (8001160 <SPI3_MspInit+0x118>)
 800107c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001080:	4a37      	ldr	r2, [pc, #220]	@ (8001160 <SPI3_MspInit+0x118>)
 8001082:	f043 0320 	orr.w	r3, r3, #32
 8001086:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800108a:	4b35      	ldr	r3, [pc, #212]	@ (8001160 <SPI3_MspInit+0x118>)
 800108c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001090:	f003 0320 	and.w	r3, r3, #32
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001098:	4b31      	ldr	r3, [pc, #196]	@ (8001160 <SPI3_MspInit+0x118>)
 800109a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800109e:	4a30      	ldr	r2, [pc, #192]	@ (8001160 <SPI3_MspInit+0x118>)
 80010a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001160 <SPI3_MspInit+0x118>)
 80010aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001160 <SPI3_MspInit+0x118>)
 80010b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010bc:	4a28      	ldr	r2, [pc, #160]	@ (8001160 <SPI3_MspInit+0x118>)
 80010be:	f043 0302 	orr.w	r3, r3, #2
 80010c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010c6:	4b26      	ldr	r3, [pc, #152]	@ (8001160 <SPI3_MspInit+0x118>)
 80010c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PG9     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    PG10     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 80010d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 80010ee:	2306      	movs	r3, #6
 80010f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 80010f4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010f8:	4619      	mov	r1, r3
 80010fa:	481a      	ldr	r0, [pc, #104]	@ (8001164 <SPI3_MspInit+0x11c>)
 80010fc:	f009 fc4e 	bl	800a99c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8001100:	2320      	movs	r3, #32
 8001102:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8001118:	2306      	movs	r3, #6
 800111a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800111e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001122:	4619      	mov	r1, r3
 8001124:	4810      	ldr	r0, [pc, #64]	@ (8001168 <SPI3_MspInit+0x120>)
 8001126:	f009 fc39 	bl	800a99c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 800112a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800112e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8001144:	2306      	movs	r3, #6
 8001146:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 800114a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800114e:	4619      	mov	r1, r3
 8001150:	4804      	ldr	r0, [pc, #16]	@ (8001164 <SPI3_MspInit+0x11c>)
 8001152:	f009 fc23 	bl	800a99c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8001156:	bf00      	nop
 8001158:	37f8      	adds	r7, #248	@ 0xf8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	46020c00 	.word	0x46020c00
 8001164:	42021800 	.word	0x42021800
 8001168:	42020400 	.word	0x42020400

0800116c <SPI3_MspDeInit>:

static void SPI3_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <SPI3_MspDeInit+0x3c>)
 8001176:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800117a:	4a0b      	ldr	r2, [pc, #44]	@ (80011a8 <SPI3_MspDeInit+0x3c>)
 800117c:	f023 0320 	bic.w	r3, r3, #32
 8001180:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    /**SPI3 GPIO Configuration
    PG9     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    PG10     ------> SPI3_MISO
    */
    HAL_GPIO_DeInit(BUS_SPI3_SCK_GPIO_PORT, BUS_SPI3_SCK_GPIO_PIN);
 8001184:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001188:	4808      	ldr	r0, [pc, #32]	@ (80011ac <SPI3_MspDeInit+0x40>)
 800118a:	f009 fddf 	bl	800ad4c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI3_MOSI_GPIO_PORT, BUS_SPI3_MOSI_GPIO_PIN);
 800118e:	2120      	movs	r1, #32
 8001190:	4807      	ldr	r0, [pc, #28]	@ (80011b0 <SPI3_MspDeInit+0x44>)
 8001192:	f009 fddb 	bl	800ad4c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI3_MISO_GPIO_PORT, BUS_SPI3_MISO_GPIO_PIN);
 8001196:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800119a:	4804      	ldr	r0, [pc, #16]	@ (80011ac <SPI3_MspDeInit+0x40>)
 800119c:	f009 fdd6 	bl	800ad4c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	46020c00 	.word	0x46020c00
 80011ac:	42021800 	.word	0x42021800
 80011b0:	42020400 	.word	0x42020400

080011b4 <MX_SPI2_Init>:

/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80011bc:	2300      	movs	r3, #0
 80011be:	75fb      	strb	r3, [r7, #23]
  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]

  hspi->Instance = SPI2;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a32      	ldr	r2, [pc, #200]	@ (8001298 <MX_SPI2_Init+0xe4>)
 80011d0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011d8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2207      	movs	r2, #7
 80011e4:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80011ec:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011f4:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011fc:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001204:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 0x7;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2207      	movs	r2, #7
 800121c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi->Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi->Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f00d fc7e 	bl	800eb5c <HAL_SPI_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_SPI2_Init+0xb6>
  {
    ret = HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	75fb      	strb	r3, [r7, #23]
  }

  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800126e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001272:	60fb      	str	r3, [r7, #12]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]
  if (HAL_SPIEx_SetConfigAutonomousMode(hspi, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	4619      	mov	r1, r3
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f00e fa85 	bl	800f78e <HAL_SPIEx_SetConfigAutonomousMode>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_SPI2_Init+0xda>
  {
    ret = HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800128e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40003800 	.word	0x40003800

0800129c <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0bc      	sub	sp, #240	@ 0xf0
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	22c8      	movs	r2, #200	@ 0xc8
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f01d f9b7 	bl	801e620 <memset>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80012b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 80012be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80012c6:	f107 0310 	add.w	r3, r7, #16
 80012ca:	4618      	mov	r0, r3
 80012cc:	f00c fd14 	bl	800dcf8 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012d0:	4b30      	ldr	r3, [pc, #192]	@ (8001394 <SPI2_MspInit+0xf8>)
 80012d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001394 <SPI2_MspInit+0xf8>)
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012dc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80012e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001394 <SPI2_MspInit+0xf8>)
 80012e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80012ee:	4b29      	ldr	r3, [pc, #164]	@ (8001394 <SPI2_MspInit+0xf8>)
 80012f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012f4:	4a27      	ldr	r2, [pc, #156]	@ (8001394 <SPI2_MspInit+0xf8>)
 80012f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012fe:	4b25      	ldr	r3, [pc, #148]	@ (8001394 <SPI2_MspInit+0xf8>)
 8001300:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PI3     ------> SPI2_MOSI
    PI2     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 800130c:	2302      	movs	r3, #2
 800130e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001318:	2301      	movs	r3, #1
 800131a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 8001324:	2305      	movs	r3, #5
 8001326:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 800132a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800132e:	4619      	mov	r1, r3
 8001330:	4819      	ldr	r0, [pc, #100]	@ (8001398 <SPI2_MspInit+0xfc>)
 8001332:	f009 fb33 	bl	800a99c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8001336:	2308      	movs	r3, #8
 8001338:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 800134e:	2305      	movs	r3, #5
 8001350:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001354:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001358:	4619      	mov	r1, r3
 800135a:	480f      	ldr	r0, [pc, #60]	@ (8001398 <SPI2_MspInit+0xfc>)
 800135c:	f009 fb1e 	bl	800a99c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 8001360:	2304      	movs	r3, #4
 8001362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 8001378:	2305      	movs	r3, #5
 800137a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 800137e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001382:	4619      	mov	r1, r3
 8001384:	4804      	ldr	r0, [pc, #16]	@ (8001398 <SPI2_MspInit+0xfc>)
 8001386:	f009 fb09 	bl	800a99c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 800138a:	bf00      	nop
 800138c:	37f0      	adds	r7, #240	@ 0xf0
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	46020c00 	.word	0x46020c00
 8001398:	42022000 	.word	0x42022000

0800139c <SPI2_MspDeInit>:

static void SPI2_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <SPI2_MspDeInit+0x38>)
 80013a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <SPI2_MspDeInit+0x38>)
 80013ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80013b0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PI3     ------> SPI2_MOSI
    PI2     ------> SPI2_MISO
    */
    HAL_GPIO_DeInit(BUS_SPI2_SCK_GPIO_PORT, BUS_SPI2_SCK_GPIO_PIN);
 80013b4:	2102      	movs	r1, #2
 80013b6:	4808      	ldr	r0, [pc, #32]	@ (80013d8 <SPI2_MspDeInit+0x3c>)
 80013b8:	f009 fcc8 	bl	800ad4c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_MOSI_GPIO_PORT, BUS_SPI2_MOSI_GPIO_PIN);
 80013bc:	2108      	movs	r1, #8
 80013be:	4806      	ldr	r0, [pc, #24]	@ (80013d8 <SPI2_MspDeInit+0x3c>)
 80013c0:	f009 fcc4 	bl	800ad4c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_MISO_GPIO_PORT, BUS_SPI2_MISO_GPIO_PIN);
 80013c4:	2104      	movs	r1, #4
 80013c6:	4804      	ldr	r0, [pc, #16]	@ (80013d8 <SPI2_MspDeInit+0x3c>)
 80013c8:	f009 fcc0 	bl	800ad4c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	46020c00 	.word	0x46020c00
 80013d8:	42022000 	.word	0x42022000

080013dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e0:	f008 fbe8 	bl	8009bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e4:	f000 f80f 	bl	8001406 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e8:	f000 f920 	bl	800162c <MX_GPIO_Init>
  MX_CRC_Init();
 80013ec:	f000 f86a 	bl	80014c4 <MX_CRC_Init>
  MX_ICACHE_Init();
 80013f0:	f000 f88a 	bl	8001508 <MX_ICACHE_Init>
  MX_USB_OTG_FS_PCD_Init();
 80013f4:	f000 f8e8 	bl	80015c8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80013f8:	f000 f892 	bl	8001520 <MX_TIM1_Init>
  MX_X_CUBE_VESPUCCI_Init();
 80013fc:	f002 fb48 	bl	8003a90 <MX_X_CUBE_VESPUCCI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_VESPUCCI_Process();
 8001400:	f002 fc5c 	bl	8003cbc <MX_X_CUBE_VESPUCCI_Process>
 8001404:	e7fc      	b.n	8001400 <main+0x24>

08001406 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b09e      	sub	sp, #120	@ 0x78
 800140a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140c:	f107 0318 	add.w	r3, r7, #24
 8001410:	2260      	movs	r2, #96	@ 0x60
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f01d f903 	bl	801e620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141a:	463b      	mov	r3, r7
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
 8001428:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800142a:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800142e:	f00b f937 	bl	800c6a0 <HAL_PWREx_ControlVoltageScaling>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001438:	f000 f9e8 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 800143c:	2330      	movs	r3, #48	@ 0x30
 800143e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001440:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001444:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001446:	2301      	movs	r3, #1
 8001448:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800144a:	2310      	movs	r3, #16
 800144c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 800144e:	2300      	movs	r3, #0
 8001450:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001456:	2301      	movs	r3, #1
 8001458:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 800145a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800145e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001460:	2303      	movs	r3, #3
 8001462:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001464:	230a      	movs	r3, #10
 8001466:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001468:	2302      	movs	r3, #2
 800146a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800146c:	2302      	movs	r3, #2
 800146e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001470:	2301      	movs	r3, #1
 8001472:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001474:	230c      	movs	r3, #12
 8001476:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147c:	f107 0318 	add.w	r3, r7, #24
 8001480:	4618      	mov	r0, r3
 8001482:	f00b f9c9 	bl	800c818 <HAL_RCC_OscConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800148c:	f000 f9be 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001490:	231f      	movs	r3, #31
 8001492:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001494:	2303      	movs	r3, #3
 8001496:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014a8:	463b      	mov	r3, r7
 80014aa:	2104      	movs	r1, #4
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00c f88f 	bl	800d5d0 <HAL_RCC_ClockConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80014b8:	f000 f9a8 	bl	800180c <Error_Handler>
  }
}
 80014bc:	bf00      	nop
 80014be:	3778      	adds	r7, #120	@ 0x78
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <MX_CRC_Init+0x3c>)
 80014ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001504 <MX_CRC_Init+0x40>)
 80014cc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80014ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <MX_CRC_Init+0x3c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001500 <MX_CRC_Init+0x3c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80014da:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <MX_CRC_Init+0x3c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014e0:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <MX_CRC_Init+0x3c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <MX_CRC_Init+0x3c>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	@ (8001500 <MX_CRC_Init+0x3c>)
 80014ee:	f008 fd27 	bl	8009f40 <HAL_CRC_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80014f8:	f000 f988 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000ce4 	.word	0x20000ce4
 8001504:	40023000 	.word	0x40023000

08001508 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 800150c:	f009 fd6e 	bl	800afec <HAL_ICACHE_Enable>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8001516:	f000 f979 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001526:	f107 0310 	add.w	r3, r7, #16
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800153e:	4b20      	ldr	r3, [pc, #128]	@ (80015c0 <MX_TIM1_Init+0xa0>)
 8001540:	4a20      	ldr	r2, [pc, #128]	@ (80015c4 <MX_TIM1_Init+0xa4>)
 8001542:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3966;
 8001544:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <MX_TIM1_Init+0xa0>)
 8001546:	f640 727e 	movw	r2, #3966	@ 0xf7e
 800154a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154c:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <MX_TIM1_Init+0xa0>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8001552:	4b1b      	ldr	r3, [pc, #108]	@ (80015c0 <MX_TIM1_Init+0xa0>)
 8001554:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001558:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155a:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <MX_TIM1_Init+0xa0>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001560:	4b17      	ldr	r3, [pc, #92]	@ (80015c0 <MX_TIM1_Init+0xa0>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001566:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <MX_TIM1_Init+0xa0>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800156c:	4814      	ldr	r0, [pc, #80]	@ (80015c0 <MX_TIM1_Init+0xa0>)
 800156e:	f00e f94f 	bl	800f810 <HAL_TIM_Base_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001578:	f000 f948 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001580:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	4619      	mov	r1, r3
 8001588:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <MX_TIM1_Init+0xa0>)
 800158a:	f00e fb89 	bl	800fca0 <HAL_TIM_ConfigClockSource>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001594:	f000 f93a 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <MX_TIM1_Init+0xa0>)
 80015aa:	f00e fe39 	bl	8010220 <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80015b4:	f000 f92a 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	3720      	adds	r7, #32
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000d08 	.word	0x20000d08
 80015c4:	40012c00 	.word	0x40012c00

080015c8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015cc:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015ce:	4a16      	ldr	r2, [pc, #88]	@ (8001628 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80015d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80015d2:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015d4:	2206      	movs	r2, #6
 80015d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015da:	2202      	movs	r2, #2
 80015dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015e0:	2202      	movs	r2, #2
 80015e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015fc:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001602:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001604:	2200      	movs	r2, #0
 8001606:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800160e:	4805      	ldr	r0, [pc, #20]	@ (8001624 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001610:	f009 fd82 	bl	800b118 <HAL_PCD_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800161a:	f000 f8f7 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000d54 	.word	0x20000d54
 8001628:	42040000 	.word	0x42040000

0800162c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08c      	sub	sp, #48	@ 0x30
 8001630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001642:	4b6b      	ldr	r3, [pc, #428]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001644:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001648:	4a69      	ldr	r2, [pc, #420]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 800164a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800164e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001652:	4b67      	ldr	r3, [pc, #412]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001654:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001660:	4b63      	ldr	r3, [pc, #396]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001666:	4a62      	ldr	r2, [pc, #392]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800166c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001670:	4b5f      	ldr	r3, [pc, #380]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001672:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800167e:	4b5c      	ldr	r3, [pc, #368]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001680:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001684:	4a5a      	ldr	r2, [pc, #360]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800168a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800168e:	4b58      	ldr	r3, [pc, #352]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001690:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169c:	4b54      	ldr	r3, [pc, #336]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 800169e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016a2:	4a53      	ldr	r2, [pc, #332]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016ac:	4b50      	ldr	r3, [pc, #320]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	4b4d      	ldr	r3, [pc, #308]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016c0:	4a4b      	ldr	r2, [pc, #300]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016ca:	4b49      	ldr	r3, [pc, #292]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b45      	ldr	r3, [pc, #276]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016de:	4a44      	ldr	r2, [pc, #272]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016e8:	4b41      	ldr	r3, [pc, #260]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f6:	4b3e      	ldr	r3, [pc, #248]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016fc:	4a3c      	ldr	r2, [pc, #240]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 80016fe:	f043 0308 	orr.w	r3, r3, #8
 8001702:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001706:	4b3a      	ldr	r3, [pc, #232]	@ (80017f0 <MX_GPIO_Init+0x1c4>)
 8001708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_5, GPIO_PIN_SET);
 8001714:	2201      	movs	r2, #1
 8001716:	2120      	movs	r1, #32
 8001718:	4836      	ldr	r0, [pc, #216]	@ (80017f4 <MX_GPIO_Init+0x1c8>)
 800171a:	f009 fbf5 	bl	800af08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	2101      	movs	r1, #1
 8001722:	4834      	ldr	r0, [pc, #208]	@ (80017f4 <MX_GPIO_Init+0x1c8>)
 8001724:	f009 fbf0 	bl	800af08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800172e:	4832      	ldr	r0, [pc, #200]	@ (80017f8 <MX_GPIO_Init+0x1cc>)
 8001730:	f009 fbea 	bl	800af08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET);
 8001734:	2201      	movs	r2, #1
 8001736:	2102      	movs	r1, #2
 8001738:	4830      	ldr	r0, [pc, #192]	@ (80017fc <MX_GPIO_Init+0x1d0>)
 800173a:	f009 fbe5 	bl	800af08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI5 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_0;
 800173e:	2321      	movs	r3, #33	@ 0x21
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	4827      	ldr	r0, [pc, #156]	@ (80017f4 <MX_GPIO_Init+0x1c8>)
 8001756:	f009 f921 	bl	800a99c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 800175a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800175e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	4821      	ldr	r0, [pc, #132]	@ (80017f8 <MX_GPIO_Init+0x1cc>)
 8001774:	f009 f912 	bl	800a99c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001778:	2302      	movs	r3, #2
 800177a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	481b      	ldr	r0, [pc, #108]	@ (80017fc <MX_GPIO_Init+0x1d0>)
 8001790:	f009 f904 	bl	800a99c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001794:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800179a:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <MX_GPIO_Init+0x1d4>)
 800179c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	4816      	ldr	r0, [pc, #88]	@ (8001804 <MX_GPIO_Init+0x1d8>)
 80017aa:	f009 f8f7 	bl	800a99c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017ae:	2310      	movs	r3, #16
 80017b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017b2:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <MX_GPIO_Init+0x1d4>)
 80017b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4619      	mov	r1, r3
 80017c0:	4811      	ldr	r0, [pc, #68]	@ (8001808 <MX_GPIO_Init+0x1dc>)
 80017c2:	f009 f8eb 	bl	800a99c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	200f      	movs	r0, #15
 80017cc:	f008 fb75 	bl	8009eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80017d0:	200f      	movs	r0, #15
 80017d2:	f008 fb8c 	bl	8009eee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	2016      	movs	r0, #22
 80017dc:	f008 fb6d 	bl	8009eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 80017e0:	2016      	movs	r0, #22
 80017e2:	f008 fb84 	bl	8009eee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017e6:	bf00      	nop
 80017e8:	3730      	adds	r7, #48	@ 0x30
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	46020c00 	.word	0x46020c00
 80017f4:	42022000 	.word	0x42022000
 80017f8:	42021c00 	.word	0x42021c00
 80017fc:	42021800 	.word	0x42021800
 8001800:	10110000 	.word	0x10110000
 8001804:	42020c00 	.word	0x42020c00
 8001808:	42020000 	.word	0x42020000

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <Error_Handler+0x8>

08001818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <HAL_MspInit+0x30>)
 8001820:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001824:	4a08      	ldr	r2, [pc, #32]	@ (8001848 <HAL_MspInit+0x30>)
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_MspInit+0x30>)
 8001830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	46020c00 	.word	0x46020c00

0800184c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0b      	ldr	r2, [pc, #44]	@ (8001888 <HAL_CRC_MspInit+0x3c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d10e      	bne.n	800187c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800185e:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <HAL_CRC_MspInit+0x40>)
 8001860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001864:	4a09      	ldr	r2, [pc, #36]	@ (800188c <HAL_CRC_MspInit+0x40>)
 8001866:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800186a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800186e:	4b07      	ldr	r3, [pc, #28]	@ (800188c <HAL_CRC_MspInit+0x40>)
 8001870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001874:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	40023000 	.word	0x40023000
 800188c:	46020c00 	.word	0x46020c00

08001890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0e      	ldr	r2, [pc, #56]	@ (80018d8 <HAL_TIM_Base_MspInit+0x48>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d116      	bne.n	80018d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <HAL_TIM_Base_MspInit+0x4c>)
 80018a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80018a8:	4a0c      	ldr	r2, [pc, #48]	@ (80018dc <HAL_TIM_Base_MspInit+0x4c>)
 80018aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018ae:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80018b2:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <HAL_TIM_Base_MspInit+0x4c>)
 80018b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80018b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2100      	movs	r1, #0
 80018c4:	202a      	movs	r0, #42	@ 0x2a
 80018c6:	f008 faf8 	bl	8009eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80018ca:	202a      	movs	r0, #42	@ 0x2a
 80018cc:	f008 fb0f 	bl	8009eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40012c00 	.word	0x40012c00
 80018dc:	46020c00 	.word	0x46020c00

080018e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b0be      	sub	sp, #248	@ 0xf8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f8:	f107 0318 	add.w	r3, r7, #24
 80018fc:	22c8      	movs	r2, #200	@ 0xc8
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f01c fe8d 	bl	801e620 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a3c      	ldr	r2, [pc, #240]	@ (80019fc <HAL_PCD_MspInit+0x11c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d171      	bne.n	80019f4 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001910:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 800191c:	2300      	movs	r3, #0
 800191e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001922:	f107 0318 	add.w	r3, r7, #24
 8001926:	4618      	mov	r0, r3
 8001928:	f00c f9e6 	bl	800dcf8 <HAL_RCCEx_PeriphCLKConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001932:	f7ff ff6b 	bl	800180c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b32      	ldr	r3, [pc, #200]	@ (8001a00 <HAL_PCD_MspInit+0x120>)
 8001938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800193c:	4a30      	ldr	r2, [pc, #192]	@ (8001a00 <HAL_PCD_MspInit+0x120>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001946:	4b2e      	ldr	r3, [pc, #184]	@ (8001a00 <HAL_PCD_MspInit+0x120>)
 8001948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001954:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001958:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800196e:	230a      	movs	r3, #10
 8001970:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001974:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001978:	4619      	mov	r1, r3
 800197a:	4822      	ldr	r0, [pc, #136]	@ (8001a04 <HAL_PCD_MspInit+0x124>)
 800197c:	f009 f80e 	bl	800a99c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001980:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <HAL_PCD_MspInit+0x120>)
 8001982:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001986:	4a1e      	ldr	r2, [pc, #120]	@ (8001a00 <HAL_PCD_MspInit+0x120>)
 8001988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800198c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001990:	4b1b      	ldr	r3, [pc, #108]	@ (8001a00 <HAL_PCD_MspInit+0x120>)
 8001992:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199e:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <HAL_PCD_MspInit+0x120>)
 80019a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d119      	bne.n	80019e0 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ac:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <HAL_PCD_MspInit+0x120>)
 80019ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019b2:	4a13      	ldr	r2, [pc, #76]	@ (8001a00 <HAL_PCD_MspInit+0x120>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80019bc:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <HAL_PCD_MspInit+0x120>)
 80019be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80019ca:	f00a fef5 	bl	800c7b8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <HAL_PCD_MspInit+0x120>)
 80019d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001a00 <HAL_PCD_MspInit+0x120>)
 80019d6:	f023 0304 	bic.w	r3, r3, #4
 80019da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80019de:	e001      	b.n	80019e4 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80019e0:	f00a feea 	bl	800c7b8 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	2049      	movs	r0, #73	@ 0x49
 80019ea:	f008 fa66 	bl	8009eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80019ee:	2049      	movs	r0, #73	@ 0x49
 80019f0:	f008 fa7d 	bl	8009eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80019f4:	bf00      	nop
 80019f6:	37f8      	adds	r7, #248	@ 0xf8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	42040000 	.word	0x42040000
 8001a00:	46020c00 	.word	0x46020c00
 8001a04:	42020000 	.word	0x42020000

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <NMI_Handler+0x4>

08001a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <HardFault_Handler+0x4>

08001a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <MemManage_Handler+0x4>

08001a20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <BusFault_Handler+0x4>

08001a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <UsageFault_Handler+0x4>

08001a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5e:	f008 f90d 	bl	8009c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001a6a:	2010      	movs	r0, #16
 8001a6c:	f009 fa64 	bl	800af38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001a78:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001a7c:	f009 fa5c 	bl	800af38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <TIM1_UP_IRQHandler+0x10>)
 8001a8a:	f00d ffb9 	bl	800fa00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000d08 	.word	0x20000d08

08001a98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a9c:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <OTG_FS_IRQHandler+0x10>)
 8001a9e:	f009 fc8e 	bl	800b3be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000d54 	.word	0x20000d54

08001aac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return 1;
 8001ab0:	2301      	movs	r3, #1
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_kill>:

int _kill(int pid, int sig)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ac6:	f01c fec1 	bl	801e84c <__errno>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2216      	movs	r2, #22
 8001ace:	601a      	str	r2, [r3, #0]
  return -1;
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_exit>:

void _exit (int status)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ffe7 	bl	8001abc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aee:	bf00      	nop
 8001af0:	e7fd      	b.n	8001aee <_exit+0x12>

08001af2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	e00a      	b.n	8001b1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b04:	f3af 8000 	nop.w
 8001b08:	4601      	mov	r1, r0
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	60ba      	str	r2, [r7, #8]
 8001b10:	b2ca      	uxtb	r2, r1
 8001b12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3301      	adds	r3, #1
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	dbf0      	blt.n	8001b04 <_read+0x12>
  }

  return len;
 8001b22:	687b      	ldr	r3, [r7, #4]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	e009      	b.n	8001b52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	60ba      	str	r2, [r7, #8]
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dbf1      	blt.n	8001b3e <_write+0x12>
  }
  return len;
 8001b5a:	687b      	ldr	r3, [r7, #4]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_close>:

int _close(int file)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b8c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_isatty>:

int _isatty(int file)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ba4:	2301      	movs	r3, #1
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b085      	sub	sp, #20
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd4:	4a14      	ldr	r2, [pc, #80]	@ (8001c28 <_sbrk+0x5c>)
 8001bd6:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <_sbrk+0x60>)
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be0:	4b13      	ldr	r3, [pc, #76]	@ (8001c30 <_sbrk+0x64>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d102      	bne.n	8001bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be8:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <_sbrk+0x64>)
 8001bea:	4a12      	ldr	r2, [pc, #72]	@ (8001c34 <_sbrk+0x68>)
 8001bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bee:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <_sbrk+0x64>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d207      	bcs.n	8001c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bfc:	f01c fe26 	bl	801e84c <__errno>
 8001c00:	4603      	mov	r3, r0
 8001c02:	220c      	movs	r2, #12
 8001c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0a:	e009      	b.n	8001c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c0c:	4b08      	ldr	r3, [pc, #32]	@ (8001c30 <_sbrk+0x64>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c12:	4b07      	ldr	r3, [pc, #28]	@ (8001c30 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	4a05      	ldr	r2, [pc, #20]	@ (8001c30 <_sbrk+0x64>)
 8001c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200c0000 	.word	0x200c0000
 8001c2c:	00000800 	.word	0x00000800
 8001c30:	20001260 	.word	0x20001260
 8001c34:	20045968 	.word	0x20045968

08001c38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001c38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c70 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c3c:	f007 ff82 	bl	8009b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c42:	e003      	b.n	8001c4c <LoopCopyDataInit>

08001c44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c44:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c4a:	3104      	adds	r1, #4

08001c4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c4c:	480a      	ldr	r0, [pc, #40]	@ (8001c78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c54:	d3f6      	bcc.n	8001c44 <CopyDataInit>
	ldr	r2, =_sbss
 8001c56:	4a0a      	ldr	r2, [pc, #40]	@ (8001c80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c58:	e002      	b.n	8001c60 <LoopFillZerobss>

08001c5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c5c:	f842 3b04 	str.w	r3, [r2], #4

08001c60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c60:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <LoopForever+0x16>)
	cmp	r2, r3
 8001c62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c64:	d3f9      	bcc.n	8001c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c66:	f01c fdf7 	bl	801e858 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c6a:	f7ff fbb7 	bl	80013dc <main>

08001c6e <LoopForever>:

LoopForever:
    b LoopForever
 8001c6e:	e7fe      	b.n	8001c6e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001c70:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001c74:	08082830 	.word	0x08082830
	ldr	r0, =_sdata
 8001c78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c7c:	20000b88 	.word	0x20000b88
	ldr	r2, =_sbss
 8001c80:	20000ba0 	.word	0x20000ba0
	ldr	r3, = _ebss
 8001c84:	20045962 	.word	0x20045962

08001c88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c88:	e7fe      	b.n	8001c88 <ADC1_IRQHandler>
	...

08001c8c <USBD_Clock_Config>:
/**
  * @brief USB Clock Configuration
  * @retval None
  */
void USBD_Clock_Config(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b0d2      	sub	sp, #328	@ 0x148
 8001c90:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c92:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001c96:	22c8      	movs	r2, #200	@ 0xc8
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f01c fcc0 	bl	801e620 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001ca4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001ca8:	4618      	mov	r0, r3
 8001caa:	2360      	movs	r3, #96	@ 0x60
 8001cac:	461a      	mov	r2, r3
 8001cae:	2100      	movs	r1, #0
 8001cb0:	f01c fcb6 	bl	801e620 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct= {0};
 8001cb4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001cb8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	6053      	str	r3, [r2, #4]
 8001cc4:	6093      	str	r3, [r2, #8]
 8001cc6:	60d3      	str	r3, [r2, #12]
 8001cc8:	6113      	str	r3, [r2, #16]
 8001cca:	6153      	str	r3, [r2, #20]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ccc:	4b44      	ldr	r3, [pc, #272]	@ (8001de0 <USBD_Clock_Config+0x154>)
 8001cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cd2:	4a43      	ldr	r2, [pc, #268]	@ (8001de0 <USBD_Clock_Config+0x154>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001cdc:	4b40      	ldr	r3, [pc, #256]	@ (8001de0 <USBD_Clock_Config+0x154>)
 8001cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ce2:	f003 0204 	and.w	r2, r3, #4
 8001ce6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001cea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001cf4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001cf8:	681b      	ldr	r3, [r3, #0]
  /* Enable HSI48 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001cfa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001cfe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001d02:	2220      	movs	r2, #32
 8001d04:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001d06:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001d0a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001d0e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d12:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d14:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001d18:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	639a      	str	r2, [r3, #56]	@ 0x38
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001d20:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.IclkClockSelection  = RCC_CLK48CLKSOURCE_HSI48;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001d32:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001d36:	4618      	mov	r0, r3
 8001d38:	f00b ffde 	bl	800dcf8 <HAL_RCCEx_PeriphCLKConfig>
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8001d3c:	f107 0320 	add.w	r3, r7, #32
 8001d40:	4618      	mov	r0, r3
 8001d42:	f00a fd69 	bl	800c818 <HAL_RCC_OscConfig>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <USBD_Clock_Config+0xc4>
  {
    Error_Handler();
 8001d4c:	f7ff fd5e 	bl	800180c <Error_Handler>
  }
  /*Configure the clock recovery system (CRS)**********************************/
  /*Enable CRS Clock*/
  __HAL_RCC_CRS_CLK_ENABLE();
 8001d50:	4b23      	ldr	r3, [pc, #140]	@ (8001de0 <USBD_Clock_Config+0x154>)
 8001d52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d56:	4a22      	ldr	r2, [pc, #136]	@ (8001de0 <USBD_Clock_Config+0x154>)
 8001d58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d5c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001d60:	4b1f      	ldr	r3, [pc, #124]	@ (8001de0 <USBD_Clock_Config+0x154>)
 8001d62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d66:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8001d6a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001d6e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001d78:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001d7c:	681b      	ldr	r3, [r3, #0]

  /* Default Synchro Signal division factor (not divided) */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8001d7e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001d82:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]

  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 8001d8a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001d8e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d92:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001d96:	605a      	str	r2, [r3, #4]

  /* HSI48 is synchronized with USB SOF at 1KHz rate */
  RCC_CRSInitStruct.ReloadValue =  RCC_CRS_RELOADVALUE_DEFAULT;
 8001d98:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001d9c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001da0:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8001da4:	60da      	str	r2, [r3, #12]
  RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 8001da6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001daa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001dae:	2222      	movs	r2, #34	@ 0x22
 8001db0:	611a      	str	r2, [r3, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8001db2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001db6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]

  /* Set the TRIM[5:0] to the default value */
  RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 8001dbe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001dc2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	615a      	str	r2, [r3, #20]

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig (&RCC_CRSInitStruct);
 8001dca:	f107 0308 	add.w	r3, r7, #8
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f00c fd52 	bl	800e878 <HAL_RCCEx_CRSConfig>
}
 8001dd4:	bf00      	nop
 8001dd6:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	46020c00 	.word	0x46020c00

08001de4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  /* USB Clock Initialization */
   USBD_Clock_Config();
 8001de8:	f7ff ff50 	bl	8001c8c <USBD_Clock_Config>
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
//  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 8001dec:	2200      	movs	r2, #0
 8001dee:	4912      	ldr	r1, [pc, #72]	@ (8001e38 <MX_USB_Device_Init+0x54>)
 8001df0:	4812      	ldr	r0, [pc, #72]	@ (8001e3c <MX_USB_Device_Init+0x58>)
 8001df2:	f015 f831 	bl	8016e58 <USBD_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_USB_Device_Init+0x1c>
    Error_Handler();
 8001dfc:	f7ff fd06 	bl	800180c <Error_Handler>
  }
//  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8001e00:	490f      	ldr	r1, [pc, #60]	@ (8001e40 <MX_USB_Device_Init+0x5c>)
 8001e02:	480e      	ldr	r0, [pc, #56]	@ (8001e3c <MX_USB_Device_Init+0x58>)
 8001e04:	f015 f858 	bl	8016eb8 <USBD_RegisterClass>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_USB_Device_Init+0x2e>
    Error_Handler();
 8001e0e:	f7ff fcfd 	bl	800180c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8001e12:	490c      	ldr	r1, [pc, #48]	@ (8001e44 <MX_USB_Device_Init+0x60>)
 8001e14:	4809      	ldr	r0, [pc, #36]	@ (8001e3c <MX_USB_Device_Init+0x58>)
 8001e16:	f014 ff79 	bl	8016d0c <USBD_CDC_RegisterInterface>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_USB_Device_Init+0x40>
    Error_Handler();
 8001e20:	f7ff fcf4 	bl	800180c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8001e24:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <MX_USB_Device_Init+0x58>)
 8001e26:	f015 f86e 	bl	8016f06 <USBD_Start>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_USB_Device_Init+0x50>
    Error_Handler();
 8001e30:	f7ff fcec 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000014 	.word	0x20000014
 8001e3c:	20001264 	.word	0x20001264
 8001e40:	200008ac 	.word	0x200008ac
 8001e44:	20000000 	.word	0x20000000

08001e48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	4905      	ldr	r1, [pc, #20]	@ (8001e64 <CDC_Init_FS+0x1c>)
 8001e50:	4805      	ldr	r0, [pc, #20]	@ (8001e68 <CDC_Init_FS+0x20>)
 8001e52:	f014 ff70 	bl	8016d36 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8001e56:	4905      	ldr	r1, [pc, #20]	@ (8001e6c <CDC_Init_FS+0x24>)
 8001e58:	4803      	ldr	r0, [pc, #12]	@ (8001e68 <CDC_Init_FS+0x20>)
 8001e5a:	f014 ff8a 	bl	8016d72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8001e5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20001d34 	.word	0x20001d34
 8001e68:	20001264 	.word	0x20001264
 8001e6c:	20001534 	.word	0x20001534

08001e70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8001e74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	2b23      	cmp	r3, #35	@ 0x23
 8001e94:	d84a      	bhi.n	8001f2c <CDC_Control_FS+0xac>
 8001e96:	a201      	add	r2, pc, #4	@ (adr r2, 8001e9c <CDC_Control_FS+0x1c>)
 8001e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9c:	08001f2d 	.word	0x08001f2d
 8001ea0:	08001f2d 	.word	0x08001f2d
 8001ea4:	08001f2d 	.word	0x08001f2d
 8001ea8:	08001f2d 	.word	0x08001f2d
 8001eac:	08001f2d 	.word	0x08001f2d
 8001eb0:	08001f2d 	.word	0x08001f2d
 8001eb4:	08001f2d 	.word	0x08001f2d
 8001eb8:	08001f2d 	.word	0x08001f2d
 8001ebc:	08001f2d 	.word	0x08001f2d
 8001ec0:	08001f2d 	.word	0x08001f2d
 8001ec4:	08001f2d 	.word	0x08001f2d
 8001ec8:	08001f2d 	.word	0x08001f2d
 8001ecc:	08001f2d 	.word	0x08001f2d
 8001ed0:	08001f2d 	.word	0x08001f2d
 8001ed4:	08001f2d 	.word	0x08001f2d
 8001ed8:	08001f2d 	.word	0x08001f2d
 8001edc:	08001f2d 	.word	0x08001f2d
 8001ee0:	08001f2d 	.word	0x08001f2d
 8001ee4:	08001f2d 	.word	0x08001f2d
 8001ee8:	08001f2d 	.word	0x08001f2d
 8001eec:	08001f2d 	.word	0x08001f2d
 8001ef0:	08001f2d 	.word	0x08001f2d
 8001ef4:	08001f2d 	.word	0x08001f2d
 8001ef8:	08001f2d 	.word	0x08001f2d
 8001efc:	08001f2d 	.word	0x08001f2d
 8001f00:	08001f2d 	.word	0x08001f2d
 8001f04:	08001f2d 	.word	0x08001f2d
 8001f08:	08001f2d 	.word	0x08001f2d
 8001f0c:	08001f2d 	.word	0x08001f2d
 8001f10:	08001f2d 	.word	0x08001f2d
 8001f14:	08001f2d 	.word	0x08001f2d
 8001f18:	08001f2d 	.word	0x08001f2d
 8001f1c:	08001f2d 	.word	0x08001f2d
 8001f20:	08001f2d 	.word	0x08001f2d
 8001f24:	08001f2d 	.word	0x08001f2d
 8001f28:	08001f2d 	.word	0x08001f2d
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8001f2c:	bf00      	nop
	}

	return (USBD_OK);
 8001f2e:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	// Terminator sequence: "CR+LF".
	const char terminator[] = {'\r', '\n'};
 8001f46:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8001f4a:	813b      	strh	r3, [r7, #8]
	// Needed in case terminator sequence is split in two consecutive calls.
	static bool terminator_detected;

	// Search for terminator sequence.
	if (!terminator_detected) {
 8001f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002004 <CDC_Receive_FS+0xc8>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	f083 0301 	eor.w	r3, r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d038      	beq.n	8001fcc <CDC_Receive_FS+0x90>
		for (uint32_t i = 0; i < *Len; i++) {
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	e02f      	b.n	8001fc0 <CDC_Receive_FS+0x84>
			if (Buf[i] == terminator[0]) {
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4413      	add	r3, r2
 8001f66:	781a      	ldrb	r2, [r3, #0]
 8001f68:	7a3b      	ldrb	r3, [r7, #8]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d11b      	bne.n	8001fa6 <CDC_Receive_FS+0x6a>
				// First character of the terminator sequence detected.
				terminator_detected = true;
 8001f6e:	4b25      	ldr	r3, [pc, #148]	@ (8002004 <CDC_Receive_FS+0xc8>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
				if (i < *Len - 1) {
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d21c      	bcs.n	8001fba <CDC_Receive_FS+0x7e>
					if (Buf[i + 1] == terminator[1]) {
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3301      	adds	r3, #1
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	7a7b      	ldrb	r3, [r7, #9]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d106      	bne.n	8001f9e <CDC_Receive_FS+0x62>
						// Reset terminator detected flag.
						terminator_detected = false;
 8001f90:	4b1c      	ldr	r3, [pc, #112]	@ (8002004 <CDC_Receive_FS+0xc8>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
						// Signal main application to parse command buffer.
						command_received = true;
 8001f96:	4b1c      	ldr	r3, [pc, #112]	@ (8002008 <CDC_Receive_FS+0xcc>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
						break;
 8001f9c:	e025      	b.n	8001fea <CDC_Receive_FS+0xae>
					} else {
						// Reset terminator detected flag.
						terminator_detected = false;
 8001f9e:	4b19      	ldr	r3, [pc, #100]	@ (8002004 <CDC_Receive_FS+0xc8>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e009      	b.n	8001fba <CDC_Receive_FS+0x7e>
					}
				}
			} else {
				// Copy data to command buffer.
				*command_buffer_write_ptr++ = Buf[i];
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	441a      	add	r2, r3
 8001fac:	4b17      	ldr	r3, [pc, #92]	@ (800200c <CDC_Receive_FS+0xd0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	1c59      	adds	r1, r3, #1
 8001fb2:	4816      	ldr	r0, [pc, #88]	@ (800200c <CDC_Receive_FS+0xd0>)
 8001fb4:	6001      	str	r1, [r0, #0]
 8001fb6:	7812      	ldrb	r2, [r2, #0]
 8001fb8:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < *Len; i++) {
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d3ca      	bcc.n	8001f60 <CDC_Receive_FS+0x24>
 8001fca:	e00e      	b.n	8001fea <CDC_Receive_FS+0xae>
			}
		}
	} else {
		// Search for second character of the terminator sequence.
		if (Buf[0] == terminator[1]) {
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	781a      	ldrb	r2, [r3, #0]
 8001fd0:	7a7b      	ldrb	r3, [r7, #9]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d106      	bne.n	8001fe4 <CDC_Receive_FS+0xa8>
			// Reset terminator detected flag.
			terminator_detected = false;
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002004 <CDC_Receive_FS+0xc8>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
			// Signal main application to parse command buffer.
			command_received = true;
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <CDC_Receive_FS+0xcc>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	e002      	b.n	8001fea <CDC_Receive_FS+0xae>
		} else {
			// Reset terminator detected flag.
			terminator_detected = false;
 8001fe4:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <CDC_Receive_FS+0xc8>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
	}

	/* USER CODE END 6 */

	// Set the RX buffer.
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4808      	ldr	r0, [pc, #32]	@ (8002010 <CDC_Receive_FS+0xd4>)
 8001fee:	f014 fec0 	bl	8016d72 <USBD_CDC_SetRxBuffer>

	// Ready to receive the next packet.
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8001ff2:	4807      	ldr	r0, [pc, #28]	@ (8002010 <CDC_Receive_FS+0xd4>)
 8001ff4:	f014 ff06 	bl	8016e04 <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20002534 	.word	0x20002534
 8002008:	20042bc4 	.word	0x20042bc4
 800200c:	20042b54 	.word	0x20042b54
 8002010:	20001264 	.word	0x20001264

08002014 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002024:	4b0d      	ldr	r3, [pc, #52]	@ (800205c <CDC_Transmit_FS+0x48>)
 8002026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800202a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8002036:	2301      	movs	r3, #1
 8002038:	e00b      	b.n	8002052 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800203a:	887b      	ldrh	r3, [r7, #2]
 800203c:	461a      	mov	r2, r3
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4806      	ldr	r0, [pc, #24]	@ (800205c <CDC_Transmit_FS+0x48>)
 8002042:	f014 fe78 	bl	8016d36 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8002046:	4805      	ldr	r0, [pc, #20]	@ (800205c <CDC_Transmit_FS+0x48>)
 8002048:	f014 feac 	bl	8016da4 <USBD_CDC_TransmitPacket>
 800204c:	4603      	mov	r3, r0
 800204e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8002050:	7bfb      	ldrb	r3, [r7, #15]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20001264 	.word	0x20001264

08002060 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	4613      	mov	r3, r2
 800206c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8002072:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002076:	4618      	mov	r0, r3
 8002078:	371c      	adds	r7, #28
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2212      	movs	r2, #18
 8002094:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8002096:	4b03      	ldr	r3, [pc, #12]	@ (80020a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	20000030 	.word	0x20000030

080020a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2204      	movs	r2, #4
 80020b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80020ba:	4b03      	ldr	r3, [pc, #12]	@ (80020c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	20000044 	.word	0x20000044

080020cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d105      	bne.n	80020ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	4907      	ldr	r1, [pc, #28]	@ (8002100 <USBD_FS_ProductStrDescriptor+0x34>)
 80020e2:	4808      	ldr	r0, [pc, #32]	@ (8002104 <USBD_FS_ProductStrDescriptor+0x38>)
 80020e4:	f015 ff41 	bl	8017f6a <USBD_GetString>
 80020e8:	e004      	b.n	80020f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	4904      	ldr	r1, [pc, #16]	@ (8002100 <USBD_FS_ProductStrDescriptor+0x34>)
 80020ee:	4805      	ldr	r0, [pc, #20]	@ (8002104 <USBD_FS_ProductStrDescriptor+0x38>)
 80020f0:	f015 ff3b 	bl	8017f6a <USBD_GetString>
  }
  return USBD_StrDesc;
 80020f4:	4b02      	ldr	r3, [pc, #8]	@ (8002100 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20002538 	.word	0x20002538
 8002104:	08022520 	.word	0x08022520

08002108 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	4904      	ldr	r1, [pc, #16]	@ (8002128 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8002118:	4804      	ldr	r0, [pc, #16]	@ (800212c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800211a:	f015 ff26 	bl	8017f6a <USBD_GetString>
  return USBD_StrDesc;
 800211e:	4b02      	ldr	r3, [pc, #8]	@ (8002128 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20002538 	.word	0x20002538
 800212c:	08022544 	.word	0x08022544

08002130 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d105      	bne.n	800214e <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	4907      	ldr	r1, [pc, #28]	@ (8002164 <USBD_FS_SerialStrDescriptor+0x34>)
 8002146:	4808      	ldr	r0, [pc, #32]	@ (8002168 <USBD_FS_SerialStrDescriptor+0x38>)
 8002148:	f015 ff0f 	bl	8017f6a <USBD_GetString>
 800214c:	e004      	b.n	8002158 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	4904      	ldr	r1, [pc, #16]	@ (8002164 <USBD_FS_SerialStrDescriptor+0x34>)
 8002152:	4805      	ldr	r0, [pc, #20]	@ (8002168 <USBD_FS_SerialStrDescriptor+0x38>)
 8002154:	f015 ff09 	bl	8017f6a <USBD_GetString>
  }
  return USBD_StrDesc;
 8002158:	4b02      	ldr	r3, [pc, #8]	@ (8002164 <USBD_FS_SerialStrDescriptor+0x34>)
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20002538 	.word	0x20002538
 8002168:	08022558 	.word	0x08022558

0800216c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	6039      	str	r1, [r7, #0]
 8002176:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d105      	bne.n	800218a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	4907      	ldr	r1, [pc, #28]	@ (80021a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8002182:	4808      	ldr	r0, [pc, #32]	@ (80021a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8002184:	f015 fef1 	bl	8017f6a <USBD_GetString>
 8002188:	e004      	b.n	8002194 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	4904      	ldr	r1, [pc, #16]	@ (80021a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800218e:	4805      	ldr	r0, [pc, #20]	@ (80021a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8002190:	f015 feeb 	bl	8017f6a <USBD_GetString>
  }
  return USBD_StrDesc;
 8002194:	4b02      	ldr	r3, [pc, #8]	@ (80021a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20002538 	.word	0x20002538
 80021a4:	08022568 	.word	0x08022568

080021a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d105      	bne.n	80021c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	4907      	ldr	r1, [pc, #28]	@ (80021dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80021be:	4808      	ldr	r0, [pc, #32]	@ (80021e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80021c0:	f015 fed3 	bl	8017f6a <USBD_GetString>
 80021c4:	e004      	b.n	80021d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	4904      	ldr	r1, [pc, #16]	@ (80021dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80021ca:	4805      	ldr	r0, [pc, #20]	@ (80021e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80021cc:	f015 fecd 	bl	8017f6a <USBD_GetString>
  }
  return USBD_StrDesc;
 80021d0:	4b02      	ldr	r3, [pc, #8]	@ (80021dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20002538 	.word	0x20002538
 80021e0:	08022574 	.word	0x08022574

080021e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f014 fece 	bl	8016f9c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800221a:	78fa      	ldrb	r2, [r7, #3]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	78fb      	ldrb	r3, [r7, #3]
 8002230:	4619      	mov	r1, r3
 8002232:	f014 ff08 	bl	8017046 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	460b      	mov	r3, r1
 8002248:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	3348      	adds	r3, #72	@ 0x48
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	4619      	mov	r1, r3
 8002266:	f014 ff51 	bl	801710c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8002280:	4618      	mov	r0, r3
 8002282:	f015 f865 	bl	8017350 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8002296:	2301      	movs	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d001      	beq.n	80022a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80022a2:	f7ff fab3 	bl	800180c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f015 f80f 	bl	80172d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80022bc:	4618      	mov	r0, r3
 80022be:	f014 ffbb 	bl	8017238 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80022da:	4618      	mov	r0, r3
 80022dc:	f015 f80a 	bl	80172f4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if ((hpcd->Init.low_power_enable) && (((USBD_HandleTypeDef*)hpcd->pData)->dev_old_state == USBD_STATE_CONFIGURED))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d02b      	beq.n	8002340 <HAL_PCD_SuspendCallback+0x74>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80022ee:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d123      	bne.n	8002340 <HAL_PCD_SuspendCallback+0x74>
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, 0U);
    /* Set SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)(SCB_SCR_SLEEPDEEP_Msk);
    HAL_PWR_EnableSleepOnExit();
#else
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6013      	str	r3, [r2, #0]
    __HAL_RCC_USB_CLK_SLEEP_ENABLE();
 8002310:	4b0d      	ldr	r3, [pc, #52]	@ (8002348 <HAL_PCD_SuspendCallback+0x7c>)
 8002312:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002316:	4a0c      	ldr	r2, [pc, #48]	@ (8002348 <HAL_PCD_SuspendCallback+0x7c>)
 8002318:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800231c:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    /* Stop 1 mode */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_0);
 8002320:	4b0a      	ldr	r3, [pc, #40]	@ (800234c <HAL_PCD_SuspendCallback+0x80>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 0307 	bic.w	r3, r3, #7
 8002328:	4a08      	ldr	r2, [pc, #32]	@ (800234c <HAL_PCD_SuspendCallback+0x80>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6013      	str	r3, [r2, #0]
    /* Set SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)(SCB_SCR_SLEEPDEEP_Msk);
 8002330:	4b07      	ldr	r3, [pc, #28]	@ (8002350 <HAL_PCD_SuspendCallback+0x84>)
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	4a06      	ldr	r2, [pc, #24]	@ (8002350 <HAL_PCD_SuspendCallback+0x84>)
 8002336:	f043 0304 	orr.w	r3, r3, #4
 800233a:	6113      	str	r3, [r2, #16]
    HAL_PWR_EnableSleepOnExit();
 800233c:	f00a f9a0 	bl	800c680 <HAL_PWR_EnableSleepOnExit>
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	46020c00 	.word	0x46020c00
 800234c:	46020800 	.word	0x46020800
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <HAL_PCD_ResumeCallback+0x38>
  {
#ifdef USBD_LPM_SLEEP_CONFIG
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
#else
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002364:	4b0e      	ldr	r3, [pc, #56]	@ (80023a0 <HAL_PCD_ResumeCallback+0x4c>)
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	4a0d      	ldr	r2, [pc, #52]	@ (80023a0 <HAL_PCD_ResumeCallback+0x4c>)
 800236a:	f023 0306 	bic.w	r3, r3, #6
 800236e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8002370:	f000 fa30 	bl	80027d4 <SystemClockConfig_Resume>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	6013      	str	r3, [r2, #0]
#endif
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8002392:	4618      	mov	r0, r3
 8002394:	f014 ffc4 	bl	8017320 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f015 f810 	bl	80173e0 <USBD_LL_IsoOUTIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PreTreatment */
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80023da:	78fa      	ldrb	r2, [r7, #3]
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f014 ffd8 	bl	8017394 <USBD_LL_IsoINIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PostTreatment */
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PreTreatment */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80023fa:	4618      	mov	r0, r3
 80023fc:	f015 f816 	bl	801742c <USBD_LL_DevConnected>
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PostTreatment */
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PreTreatment */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8002416:	4618      	mov	r0, r3
 8002418:	f015 f813 	bl	8017442 <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PostTreatment */
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Enable USB power on Pwrctrl CR2 register. */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242c:	4b2e      	ldr	r3, [pc, #184]	@ (80024e8 <USBD_LL_Init+0xc4>)
 800242e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b00      	cmp	r3, #0
 8002438:	d119      	bne.n	800246e <USBD_LL_Init+0x4a>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800243a:	4b2b      	ldr	r3, [pc, #172]	@ (80024e8 <USBD_LL_Init+0xc4>)
 800243c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002440:	4a29      	ldr	r2, [pc, #164]	@ (80024e8 <USBD_LL_Init+0xc4>)
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800244a:	4b27      	ldr	r3, [pc, #156]	@ (80024e8 <USBD_LL_Init+0xc4>)
 800244c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddUSB();
 8002458:	f00a f9ae 	bl	800c7b8 <HAL_PWREx_EnableVddUSB>
    __HAL_RCC_PWR_CLK_DISABLE();
 800245c:	4b22      	ldr	r3, [pc, #136]	@ (80024e8 <USBD_LL_Init+0xc4>)
 800245e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002462:	4a21      	ldr	r2, [pc, #132]	@ (80024e8 <USBD_LL_Init+0xc4>)
 8002464:	f023 0304 	bic.w	r3, r3, #4
 8002468:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800246c:	e001      	b.n	8002472 <USBD_LL_Init+0x4e>
  }
  else
  {
    HAL_PWREx_EnableVddUSB();
 800246e:	f00a f9a3 	bl	800c7b8 <HAL_PWREx_EnableVddUSB>
  }
  hpcd_USB_OTG_FS.pData = pdev;
 8002472:	4a1e      	ldr	r2, [pc, #120]	@ (80024ec <USBD_LL_Init+0xc8>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a1b      	ldr	r2, [pc, #108]	@ (80024ec <USBD_LL_Init+0xc8>)
 800247e:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002482:	4b1a      	ldr	r3, [pc, #104]	@ (80024ec <USBD_LL_Init+0xc8>)
 8002484:	4a1a      	ldr	r2, [pc, #104]	@ (80024f0 <USBD_LL_Init+0xcc>)
 8002486:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002488:	4b18      	ldr	r3, [pc, #96]	@ (80024ec <USBD_LL_Init+0xc8>)
 800248a:	2206      	movs	r2, #6
 800248c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800248e:	4b17      	ldr	r3, [pc, #92]	@ (80024ec <USBD_LL_Init+0xc8>)
 8002490:	2202      	movs	r2, #2
 8002492:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002494:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <USBD_LL_Init+0xc8>)
 8002496:	2202      	movs	r2, #2
 8002498:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800249a:	4b14      	ldr	r3, [pc, #80]	@ (80024ec <USBD_LL_Init+0xc8>)
 800249c:	2200      	movs	r2, #0
 800249e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80024a0:	4b12      	ldr	r3, [pc, #72]	@ (80024ec <USBD_LL_Init+0xc8>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80024a6:	4b11      	ldr	r3, [pc, #68]	@ (80024ec <USBD_LL_Init+0xc8>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80024ac:	4b0f      	ldr	r3, [pc, #60]	@ (80024ec <USBD_LL_Init+0xc8>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Initialize LL Driver */
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80024b2:	480e      	ldr	r0, [pc, #56]	@ (80024ec <USBD_LL_Init+0xc8>)
 80024b4:	f008 fe30 	bl	800b118 <HAL_PCD_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <USBD_LL_Init+0x9e>
  {
    Error_Handler( );
 80024be:	f7ff f9a5 	bl	800180c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN FiFo_Configuration */

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80024c2:	2180      	movs	r1, #128	@ 0x80
 80024c4:	4809      	ldr	r0, [pc, #36]	@ (80024ec <USBD_LL_Init+0xc8>)
 80024c6:	f00a f89a 	bl	800c5fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80024ca:	2240      	movs	r2, #64	@ 0x40
 80024cc:	2100      	movs	r1, #0
 80024ce:	4807      	ldr	r0, [pc, #28]	@ (80024ec <USBD_LL_Init+0xc8>)
 80024d0:	f00a f84e 	bl	800c570 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80024d4:	2280      	movs	r2, #128	@ 0x80
 80024d6:	2101      	movs	r1, #1
 80024d8:	4804      	ldr	r0, [pc, #16]	@ (80024ec <USBD_LL_Init+0xc8>)
 80024da:	f00a f849 	bl	800c570 <HAL_PCDEx_SetTxFiFo>
//  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x10);
//  /* USER CODE END FiFo_Configuration */
//  /* USER CODE BEGIN FiFo_Configuration_HID */
//  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x10);
  /* USER CODE END FiFo_Configuration_HID */
  return USBD_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	46020c00 	.word	0x46020c00
 80024ec:	20000d54 	.word	0x20000d54
 80024f0:	42040000 	.word	0x42040000

080024f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800250a:	4618      	mov	r0, r3
 800250c:	f008 ff28 	bl	800b360 <HAL_PCD_Start>
 8002510:	4603      	mov	r3, r0
 8002512:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f964 	bl	80027e4 <USBD_Get_USB_Status>
 800251c:	4603      	mov	r3, r0
 800251e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002520:	7bbb      	ldrb	r3, [r7, #14]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	4608      	mov	r0, r1
 8002534:	4611      	mov	r1, r2
 8002536:	461a      	mov	r2, r3
 8002538:	4603      	mov	r3, r0
 800253a:	70fb      	strb	r3, [r7, #3]
 800253c:	460b      	mov	r3, r1
 800253e:	70bb      	strb	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8002552:	78bb      	ldrb	r3, [r7, #2]
 8002554:	883a      	ldrh	r2, [r7, #0]
 8002556:	78f9      	ldrb	r1, [r7, #3]
 8002558:	f009 fc22 	bl	800bda0 <HAL_PCD_EP_Open>
 800255c:	4603      	mov	r3, r0
 800255e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f93e 	bl	80027e4 <USBD_Get_USB_Status>
 8002568:	4603      	mov	r3, r0
 800256a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800256c:	7bbb      	ldrb	r3, [r7, #14]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f009 fc6b 	bl	800be70 <HAL_PCD_EP_Close>
 800259a:	4603      	mov	r3, r0
 800259c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 f91f 	bl	80027e4 <USBD_Get_USB_Status>
 80025a6:	4603      	mov	r3, r0
 80025a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80025aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f009 fd25 	bl	800c022 <HAL_PCD_EP_SetStall>
 80025d8:	4603      	mov	r3, r0
 80025da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f900 	bl	80027e4 <USBD_Get_USB_Status>
 80025e4:	4603      	mov	r3, r0
 80025e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80025e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b084      	sub	sp, #16
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f009 fd6a 	bl	800c0ea <HAL_PCD_EP_ClrStall>
 8002616:	4603      	mov	r3, r0
 8002618:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	4618      	mov	r0, r3
 800261e:	f000 f8e1 	bl	80027e4 <USBD_Get_USB_Status>
 8002622:	4603      	mov	r3, r0
 8002624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002626:	7bbb      	ldrb	r3, [r7, #14]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8002642:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8002644:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002648:	2b00      	cmp	r3, #0
 800264a:	da0b      	bge.n	8002664 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800264c:	78fb      	ldrb	r3, [r7, #3]
 800264e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002652:	68f9      	ldr	r1, [r7, #12]
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	333e      	adds	r3, #62	@ 0x3e
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	e00b      	b.n	800267c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800266a:	68f9      	ldr	r1, [r7, #12]
 800266c:	4613      	mov	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800267a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80026a2:	78fa      	ldrb	r2, [r7, #3]
 80026a4:	4611      	mov	r1, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f009 fb55 	bl	800bd56 <HAL_PCD_SetAddress>
 80026ac:	4603      	mov	r3, r0
 80026ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 f896 	bl	80027e4 <USBD_Get_USB_Status>
 80026b8:	4603      	mov	r3, r0
 80026ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80026bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	460b      	mov	r3, r1
 80026d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80026e4:	7af9      	ldrb	r1, [r7, #11]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	f009 fc5f 	bl	800bfac <HAL_PCD_EP_Transmit>
 80026ee:	4603      	mov	r3, r0
 80026f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f875 	bl	80027e4 <USBD_Get_USB_Status>
 80026fa:	4603      	mov	r3, r0
 80026fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80026fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	460b      	mov	r3, r1
 8002716:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8002726:	7af9      	ldrb	r1, [r7, #11]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	f009 fbea 	bl	800bf04 <HAL_PCD_EP_Receive>
 8002730:	4603      	mov	r3, r0
 8002732:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f854 	bl	80027e4 <USBD_Get_USB_Status>
 800273c:	4603      	mov	r3, r0
 800273e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8002740:	7dbb      	ldrb	r3, [r7, #22]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f009 fc0b 	bl	800bf7c <HAL_PCD_EP_GetRxCount>
 8002766:	4603      	mov	r3, r0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_Delay>:
  * implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  while (Delay)
 8002778:	e008      	b.n	800278c <HAL_Delay+0x1c>
  {
    if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 800277a:	4b09      	ldr	r3, [pc, #36]	@ (80027a0 <HAL_Delay+0x30>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <HAL_Delay+0x1c>
    {
      Delay--;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3b01      	subs	r3, #1
 800278a:	607b      	str	r3, [r7, #4]
  while (Delay)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f3      	bne.n	800277a <HAL_Delay+0xa>
    }
  }
}
 8002792:	bf00      	nop
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000e010 	.word	0xe000e010

080027a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80027ac:	4b03      	ldr	r3, [pc, #12]	@ (80027bc <USBD_static_malloc+0x18>)
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20002578 	.word	0x20002578

080027c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
 void SystemClockConfig_Resume(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80027d8:	f7fe fe15 	bl	8001406 <SystemClock_Config>
  USBD_Clock_Config();
 80027dc:	f7ff fa56 	bl	8001c8c <USBD_Clock_Config>
}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d817      	bhi.n	8002828 <USBD_Get_USB_Status+0x44>
 80027f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002800 <USBD_Get_USB_Status+0x1c>)
 80027fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fe:	bf00      	nop
 8002800:	08002811 	.word	0x08002811
 8002804:	08002817 	.word	0x08002817
 8002808:	0800281d 	.word	0x0800281d
 800280c:	08002823 	.word	0x08002823
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	73fb      	strb	r3, [r7, #15]
    break;
 8002814:	e00b      	b.n	800282e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002816:	2303      	movs	r3, #3
 8002818:	73fb      	strb	r3, [r7, #15]
    break;
 800281a:	e008      	b.n	800282e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
    break;
 8002820:	e005      	b.n	800282e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8002822:	2303      	movs	r3, #3
 8002824:	73fb      	strb	r3, [r7, #15]
    break;
 8002826:	e002      	b.n	800282e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8002828:	2303      	movs	r3, #3
 800282a:	73fb      	strb	r3, [r7, #15]
    break;
 800282c:	bf00      	nop
  }
  return usb_status;
 800282e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	2101      	movs	r1, #1
 800284a:	4829      	ldr	r0, [pc, #164]	@ (80028f0 <network_configure_activations+0xb4>)
 800284c:	f017 fec4 	bl	801a5d8 <ai_platform_get_activations_map>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d041      	beq.n	80028da <network_configure_activations+0x9e>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8002856:	4b26      	ldr	r3, [pc, #152]	@ (80028f0 <network_configure_activations+0xb4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a26      	ldr	r2, [pc, #152]	@ (80028f4 <network_configure_activations+0xb8>)
 800285c:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800285e:	4b24      	ldr	r3, [pc, #144]	@ (80028f0 <network_configure_activations+0xb4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a24      	ldr	r2, [pc, #144]	@ (80028f4 <network_configure_activations+0xb8>)
 8002864:	60d3      	str	r3, [r2, #12]
    
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8002866:	4b22      	ldr	r3, [pc, #136]	@ (80028f0 <network_configure_activations+0xb4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800286e:	4a22      	ldr	r2, [pc, #136]	@ (80028f8 <network_configure_activations+0xbc>)
 8002870:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 512);
 8002872:	4b1f      	ldr	r3, [pc, #124]	@ (80028f0 <network_configure_activations+0xb4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800287a:	4a1f      	ldr	r2, [pc, #124]	@ (80028f8 <network_configure_activations+0xbc>)
 800287c:	60d3      	str	r3, [r2, #12]
    
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800287e:	4b1c      	ldr	r3, [pc, #112]	@ (80028f0 <network_configure_activations+0xb4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a1e      	ldr	r2, [pc, #120]	@ (80028fc <network_configure_activations+0xc0>)
 8002884:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8002886:	4b1a      	ldr	r3, [pc, #104]	@ (80028f0 <network_configure_activations+0xb4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a1c      	ldr	r2, [pc, #112]	@ (80028fc <network_configure_activations+0xc0>)
 800288c:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 224);
 800288e:	4b18      	ldr	r3, [pc, #96]	@ (80028f0 <network_configure_activations+0xb4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	33e0      	adds	r3, #224	@ 0xe0
 8002894:	4a1a      	ldr	r2, [pc, #104]	@ (8002900 <network_configure_activations+0xc4>)
 8002896:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 224);
 8002898:	4b15      	ldr	r3, [pc, #84]	@ (80028f0 <network_configure_activations+0xb4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	33e0      	adds	r3, #224	@ 0xe0
 800289e:	4a18      	ldr	r2, [pc, #96]	@ (8002900 <network_configure_activations+0xc4>)
 80028a0:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80028a2:	4b13      	ldr	r3, [pc, #76]	@ (80028f0 <network_configure_activations+0xb4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a17      	ldr	r2, [pc, #92]	@ (8002904 <network_configure_activations+0xc8>)
 80028a8:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80028aa:	4b11      	ldr	r3, [pc, #68]	@ (80028f0 <network_configure_activations+0xb4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a15      	ldr	r2, [pc, #84]	@ (8002904 <network_configure_activations+0xc8>)
 80028b0:	60d3      	str	r3, [r2, #12]
    
    dense_2_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 224);
 80028b2:	4b0f      	ldr	r3, [pc, #60]	@ (80028f0 <network_configure_activations+0xb4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	33e0      	adds	r3, #224	@ 0xe0
 80028b8:	4a13      	ldr	r2, [pc, #76]	@ (8002908 <network_configure_activations+0xcc>)
 80028ba:	6093      	str	r3, [r2, #8]
    dense_2_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 224);
 80028bc:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <network_configure_activations+0xb4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	33e0      	adds	r3, #224	@ 0xe0
 80028c2:	4a11      	ldr	r2, [pc, #68]	@ (8002908 <network_configure_activations+0xcc>)
 80028c4:	60d3      	str	r3, [r2, #12]
    
    dense_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80028c6:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <network_configure_activations+0xb4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a10      	ldr	r2, [pc, #64]	@ (800290c <network_configure_activations+0xd0>)
 80028cc:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80028ce:	4b08      	ldr	r3, [pc, #32]	@ (80028f0 <network_configure_activations+0xb4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a0e      	ldr	r2, [pc, #56]	@ (800290c <network_configure_activations+0xd0>)
 80028d4:	60d3      	str	r3, [r2, #12]
    
    return true;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e005      	b.n	80028e6 <network_configure_activations+0xaa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80028da:	2213      	movs	r2, #19
 80028dc:	2130      	movs	r1, #48	@ 0x30
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f017 ff74 	bl	801a7cc <ai_platform_network_set_error>
  return false;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20002798 	.word	0x20002798
 80028f4:	200000b8 	.word	0x200000b8
 80028f8:	200000c8 	.word	0x200000c8
 80028fc:	200000d8 	.word	0x200000d8
 8002900:	200000e8 	.word	0x200000e8
 8002904:	200000f8 	.word	0x200000f8
 8002908:	20000108 	.word	0x20000108
 800290c:	20000048 	.word	0x20000048

08002910 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	2101      	movs	r1, #1
 800291e:	4841      	ldr	r0, [pc, #260]	@ (8002a24 <network_configure_weights+0x114>)
 8002920:	f017 fe06 	bl	801a530 <ai_platform_get_weights_map>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d071      	beq.n	8002a0e <network_configure_weights+0xfe>
    /* Updating weights (byte) offsets */
    
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800292a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a28 <network_configure_weights+0x118>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002932:	4a3d      	ldr	r2, [pc, #244]	@ (8002a28 <network_configure_weights+0x118>)
 8002934:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8002936:	4b3b      	ldr	r3, [pc, #236]	@ (8002a24 <network_configure_weights+0x114>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a28 <network_configure_weights+0x118>)
 800293c:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 800293e:	4b39      	ldr	r3, [pc, #228]	@ (8002a24 <network_configure_weights+0x114>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a39      	ldr	r2, [pc, #228]	@ (8002a28 <network_configure_weights+0x118>)
 8002944:	60d3      	str	r3, [r2, #12]
    
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002946:	4b39      	ldr	r3, [pc, #228]	@ (8002a2c <network_configure_weights+0x11c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800294e:	4a37      	ldr	r2, [pc, #220]	@ (8002a2c <network_configure_weights+0x11c>)
 8002950:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 28672);
 8002952:	4b34      	ldr	r3, [pc, #208]	@ (8002a24 <network_configure_weights+0x114>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800295a:	4a34      	ldr	r2, [pc, #208]	@ (8002a2c <network_configure_weights+0x11c>)
 800295c:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 28672);
 800295e:	4b31      	ldr	r3, [pc, #196]	@ (8002a24 <network_configure_weights+0x114>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8002966:	4a31      	ldr	r2, [pc, #196]	@ (8002a2c <network_configure_weights+0x11c>)
 8002968:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800296a:	4b31      	ldr	r3, [pc, #196]	@ (8002a30 <network_configure_weights+0x120>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002972:	4a2f      	ldr	r2, [pc, #188]	@ (8002a30 <network_configure_weights+0x120>)
 8002974:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 28896);
 8002976:	4b2b      	ldr	r3, [pc, #172]	@ (8002a24 <network_configure_weights+0x114>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f503 43e1 	add.w	r3, r3, #28800	@ 0x7080
 800297e:	3360      	adds	r3, #96	@ 0x60
 8002980:	4a2b      	ldr	r2, [pc, #172]	@ (8002a30 <network_configure_weights+0x120>)
 8002982:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 28896);
 8002984:	4b27      	ldr	r3, [pc, #156]	@ (8002a24 <network_configure_weights+0x114>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f503 43e1 	add.w	r3, r3, #28800	@ 0x7080
 800298c:	3360      	adds	r3, #96	@ 0x60
 800298e:	4a28      	ldr	r2, [pc, #160]	@ (8002a30 <network_configure_weights+0x120>)
 8002990:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002992:	4b28      	ldr	r3, [pc, #160]	@ (8002a34 <network_configure_weights+0x124>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800299a:	4a26      	ldr	r2, [pc, #152]	@ (8002a34 <network_configure_weights+0x124>)
 800299c:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 41440);
 800299e:	4b21      	ldr	r3, [pc, #132]	@ (8002a24 <network_configure_weights+0x114>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f503 4321 	add.w	r3, r3, #41216	@ 0xa100
 80029a6:	33e0      	adds	r3, #224	@ 0xe0
 80029a8:	4a22      	ldr	r2, [pc, #136]	@ (8002a34 <network_configure_weights+0x124>)
 80029aa:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 41440);
 80029ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002a24 <network_configure_weights+0x114>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f503 4321 	add.w	r3, r3, #41216	@ 0xa100
 80029b4:	33e0      	adds	r3, #224	@ 0xe0
 80029b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a34 <network_configure_weights+0x124>)
 80029b8:	60d3      	str	r3, [r2, #12]
    
    dense_2_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80029ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002a38 <network_configure_weights+0x128>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a38 <network_configure_weights+0x128>)
 80029c4:	6013      	str	r3, [r2, #0]
    dense_2_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 41664);
 80029c6:	4b17      	ldr	r3, [pc, #92]	@ (8002a24 <network_configure_weights+0x114>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f503 4322 	add.w	r3, r3, #41472	@ 0xa200
 80029ce:	33c0      	adds	r3, #192	@ 0xc0
 80029d0:	4a19      	ldr	r2, [pc, #100]	@ (8002a38 <network_configure_weights+0x128>)
 80029d2:	6093      	str	r3, [r2, #8]
    dense_2_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 41664);
 80029d4:	4b13      	ldr	r3, [pc, #76]	@ (8002a24 <network_configure_weights+0x114>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f503 4322 	add.w	r3, r3, #41472	@ 0xa200
 80029dc:	33c0      	adds	r3, #192	@ 0xc0
 80029de:	4a16      	ldr	r2, [pc, #88]	@ (8002a38 <network_configure_weights+0x128>)
 80029e0:	60d3      	str	r3, [r2, #12]
    
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80029e2:	4b16      	ldr	r3, [pc, #88]	@ (8002a3c <network_configure_weights+0x12c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029ea:	4a14      	ldr	r2, [pc, #80]	@ (8002a3c <network_configure_weights+0x12c>)
 80029ec:	6013      	str	r3, [r2, #0]
    dense_2_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 42112);
 80029ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002a24 <network_configure_weights+0x114>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f503 4324 	add.w	r3, r3, #41984	@ 0xa400
 80029f6:	3380      	adds	r3, #128	@ 0x80
 80029f8:	4a10      	ldr	r2, [pc, #64]	@ (8002a3c <network_configure_weights+0x12c>)
 80029fa:	6093      	str	r3, [r2, #8]
    dense_2_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 42112);
 80029fc:	4b09      	ldr	r3, [pc, #36]	@ (8002a24 <network_configure_weights+0x114>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f503 4324 	add.w	r3, r3, #41984	@ 0xa400
 8002a04:	3380      	adds	r3, #128	@ 0x80
 8002a06:	4a0d      	ldr	r2, [pc, #52]	@ (8002a3c <network_configure_weights+0x12c>)
 8002a08:	60d3      	str	r3, [r2, #12]
    
    return true;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e005      	b.n	8002a1a <network_configure_weights+0x10a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8002a0e:	2212      	movs	r2, #18
 8002a10:	2130      	movs	r1, #48	@ 0x30
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f017 feda 	bl	801a7cc <ai_platform_network_set_error>
  return false;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	2000279c 	.word	0x2000279c
 8002a28:	20000058 	.word	0x20000058
 8002a2c:	20000068 	.word	0x20000068
 8002a30:	20000078 	.word	0x20000078
 8002a34:	20000088 	.word	0x20000088
 8002a38:	20000098 	.word	0x20000098
 8002a3c:	200000a8 	.word	0x200000a8

08002a40 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f017 fe3b 	bl	801a6c4 <ai_platform_network_get_error>
 8002a4e:	4603      	mov	r3, r0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8002a62:	2300      	movs	r3, #0
 8002a64:	9301      	str	r3, [sp, #4]
 8002a66:	2305      	movs	r3, #5
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	4a04      	ldr	r2, [pc, #16]	@ (8002a80 <ai_network_create+0x28>)
 8002a6e:	6839      	ldr	r1, [r7, #0]
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f018 f883 	bl	801ab7c <ai_platform_network_create>
 8002a76:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	200006d0 	.word	0x200006d0

08002a84 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b096      	sub	sp, #88	@ 0x58
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8002a90:	2100      	movs	r1, #0
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f7ff ffe0 	bl	8002a58 <ai_network_create>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (err.type != AI_ERROR_NONE)
 8002a9c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <ai_network_create_and_init+0x24>
        return err;
 8002aa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002aa6:	e05d      	b.n	8002b64 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 f8dd 	bl	8002c6c <ai_network_data_params_get>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f083 0301 	eor.w	r3, r3, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d008      	beq.n	8002ad0 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff ffbc 	bl	8002a40 <ai_network_get_error>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
        return err;
 8002acc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ace:	e049      	b.n	8002b64 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d016      	beq.n	8002b04 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ada:	e00e      	b.n	8002afa <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8002adc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	330c      	adds	r3, #12
 8002aee:	4618      	mov	r0, r3
 8002af0:	f017 fd0a 	bl	801a508 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8002af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af6:	3301      	adds	r3, #1
 8002af8:	657b      	str	r3, [r7, #84]	@ 0x54
 8002afa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002afc:	461a      	mov	r2, r3
 8002afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b00:	4293      	cmp	r3, r2
 8002b02:	dbeb      	blt.n	8002adc <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d016      	beq.n	8002b38 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b0e:	e00e      	b.n	8002b2e <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8002b10:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002b12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	4413      	add	r3, r2
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	3304      	adds	r3, #4
 8002b22:	4618      	mov	r0, r3
 8002b24:	f017 fcf0 	bl	801a508 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8002b28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b2e:	8b7b      	ldrh	r3, [r7, #26]
 8002b30:	461a      	mov	r2, r3
 8002b32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b34:	4293      	cmp	r3, r2
 8002b36:	dbeb      	blt.n	8002b10 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f107 0214 	add.w	r2, r7, #20
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f846 	bl	8002bd4 <ai_network_init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	f083 0301 	eor.w	r3, r3, #1
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff71 	bl	8002a40 <ai_network_get_error>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    return err;
 8002b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3758      	adds	r7, #88	@ 0x58
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d104      	bne.n	8002b86 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8002b7c:	4b06      	ldr	r3, [pc, #24]	@ (8002b98 <ai_network_inputs_get+0x2c>)
 8002b7e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a06      	ldr	r2, [pc, #24]	@ (8002b9c <ai_network_inputs_get+0x30>)
 8002b84:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8002b86:	6839      	ldr	r1, [r7, #0]
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f017 fe25 	bl	801a7d8 <ai_platform_inputs_get>
 8002b8e:	4603      	mov	r3, r0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	200006d0 	.word	0x200006d0
 8002b9c:	a1c00100 	.word	0xa1c00100

08002ba0 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d104      	bne.n	8002bba <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8002bb0:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <ai_network_outputs_get+0x2c>)
 8002bb2:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a06      	ldr	r2, [pc, #24]	@ (8002bd0 <ai_network_outputs_get+0x30>)
 8002bb8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8002bba:	6839      	ldr	r1, [r7, #0]
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f017 fef7 	bl	801a9b0 <ai_platform_outputs_get>
 8002bc2:	4603      	mov	r3, r0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200006d0 	.word	0x200006d0
 8002bd0:	a1c00100 	.word	0xa1c00100

08002bd4 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8002bde:	6839      	ldr	r1, [r7, #0]
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f018 f8b1 	bl	801ad48 <ai_platform_network_init>
 8002be6:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <ai_network_init+0x1e>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e028      	b.n	8002c44 <ai_network_init+0x70>

  ai_bool ok = true;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8002bf6:	6839      	ldr	r1, [r7, #0]
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7ff fe89 	bl	8002910 <network_configure_weights>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	461a      	mov	r2, r3
 8002c02:	7afb      	ldrb	r3, [r7, #11]
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	bf14      	ite	ne
 8002c0a:	2301      	movne	r3, #1
 8002c0c:	2300      	moveq	r3, #0
 8002c0e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8002c10:	6839      	ldr	r1, [r7, #0]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f7ff fe12 	bl	800283c <network_configure_activations>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	7afb      	ldrb	r3, [r7, #11]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f018 f98e 	bl	801af4c <ai_platform_network_post_init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	461a      	mov	r2, r3
 8002c34:	7afb      	ldrb	r3, [r7, #11]
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	72fb      	strb	r3, [r7, #11]

  return ok;
 8002c42:	7afb      	ldrb	r3, [r7, #11]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f018 fa11 	bl	801b084 <ai_platform_network_process>
 8002c62:	4603      	mov	r3, r0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <ai_network_data_params_get+0x12>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e016      	b.n	8002cac <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8002c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb4 <ai_network_data_params_get+0x48>)
 8002c80:	f107 0310 	add.w	r3, r7, #16
 8002c84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c88:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb8 <ai_network_data_params_get+0x4c>)
 8002c8e:	f107 0308 	add.w	r3, r7, #8
 8002c92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c96:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8002c9a:	f107 0210 	add.w	r2, r7, #16
 8002c9e:	f107 0308 	add.w	r3, r7, #8
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f017 fceb 	bl	801a680 <ai_platform_bind_network_params>
 8002caa:	4603      	mov	r3, r0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	080225a4 	.word	0x080225a4
 8002cb8:	080225ac 	.word	0x080225ac

08002cbc <CUSTOM_ISPU_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_ISPU_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08e      	sub	sp, #56	@ 0x38
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  CUSTOM_ISPU_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d133      	bne.n	8002d40 <CUSTOM_ISPU_MOTION_SENSOR_Init+0x84>
  {
#if (USE_CUSTOM_MOTION_SENSOR_ISM330IS_0 == 1)
    case CUSTOM_ISM330IS_0:
      if (ISM330IS_0_Probe(Functions) != BSP_ERROR_NONE)
 8002cd8:	6838      	ldr	r0, [r7, #0]
 8002cda:	f000 f879 	bl	8002dd0 <ISM330IS_0_Probe>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <CUSTOM_ISPU_MOTION_SENSOR_Init+0x30>
      {
        ret = BSP_ERROR_NO_INIT;
 8002ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002cea:	e02e      	b.n	8002d4a <CUSTOM_ISPU_MOTION_SENSOR_Init+0x8e>
      }
      if (MotionDrv[Instance]->GetCapabilities(IspuMotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8002cec:	4a34      	ldr	r2, [pc, #208]	@ (8002dc0 <CUSTOM_ISPU_MOTION_SENSOR_Init+0x104>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	4933      	ldr	r1, [pc, #204]	@ (8002dc4 <CUSTOM_ISPU_MOTION_SENSOR_Init+0x108>)
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002cfe:	f107 010c 	add.w	r1, r7, #12
 8002d02:	4610      	mov	r0, r2
 8002d04:	4798      	blx	r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <CUSTOM_ISPU_MOTION_SENSOR_Init+0x58>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002d0c:	f06f 0306 	mvn.w	r3, #6
 8002d10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d12:	e01a      	b.n	8002d4a <CUSTOM_ISPU_MOTION_SENSOR_Init+0x8e>
      }
      if (cap.Acc == 1U)
 8002d14:	7b3b      	ldrb	r3, [r7, #12]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d103      	bne.n	8002d22 <CUSTOM_ISPU_MOTION_SENSOR_Init+0x66>
      {
        component_functions |= MOTION_ACCELERO;
 8002d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8002d22:	7b7b      	ldrb	r3, [r7, #13]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d103      	bne.n	8002d30 <CUSTOM_ISPU_MOTION_SENSOR_Init+0x74>
      {
        component_functions |= MOTION_GYRO;
 8002d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8002d30:	7bbb      	ldrb	r3, [r7, #14]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d108      	bne.n	8002d48 <CUSTOM_ISPU_MOTION_SENSOR_Init+0x8c>
      {
        component_functions |= MOTION_MAGNETO;
 8002d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d38:	f043 0304 	orr.w	r3, r3, #4
 8002d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8002d3e:	e003      	b.n	8002d48 <CUSTOM_ISPU_MOTION_SENSOR_Init+0x8c>
#endif /* USE_CUSTOM_MOTION_SENSOR_ISM330IS_0 */

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8002d40:	f06f 0301 	mvn.w	r3, #1
 8002d44:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8002d46:	e000      	b.n	8002d4a <CUSTOM_ISPU_MOTION_SENSOR_Init+0x8e>
      break;
 8002d48:	bf00      	nop
  }

  if (ret == BSP_ERROR_NONE)
 8002d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d131      	bne.n	8002db4 <CUSTOM_ISPU_MOTION_SENSOR_Init+0xf8>
  {
    for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 8002d50:	2300      	movs	r3, #0
 8002d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d54:	e02b      	b.n	8002dae <CUSTOM_ISPU_MOTION_SENSOR_Init+0xf2>
    {
      if (((Functions & function) == function) && ((component_functions & function) == function))
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d11f      	bne.n	8002da2 <CUSTOM_ISPU_MOTION_SENSOR_Init+0xe6>
 8002d62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d66:	4013      	ands	r3, r2
 8002d68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d119      	bne.n	8002da2 <CUSTOM_ISPU_MOTION_SENSOR_Init+0xe6>
      {
        if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(IspuMotionCompObj[Instance]) != BSP_ERROR_NONE)
 8002d6e:	4a16      	ldr	r2, [pc, #88]	@ (8002dc8 <CUSTOM_ISPU_MOTION_SENSOR_Init+0x10c>)
 8002d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d76:	4815      	ldr	r0, [pc, #84]	@ (8002dcc <CUSTOM_ISPU_MOTION_SENSOR_Init+0x110>)
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	440b      	add	r3, r1
 8002d82:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	490e      	ldr	r1, [pc, #56]	@ (8002dc4 <CUSTOM_ISPU_MOTION_SENSOR_Init+0x108>)
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002d90:	4610      	mov	r0, r2
 8002d92:	4798      	blx	r3
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <CUSTOM_ISPU_MOTION_SENSOR_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8002d9a:	f06f 0304 	mvn.w	r3, #4
 8002d9e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8002da0:	e008      	b.n	8002db4 <CUSTOM_ISPU_MOTION_SENSOR_Init+0xf8>
        }
      }
      function = function << 1;
 8002da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	633b      	str	r3, [r7, #48]	@ 0x30
    for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 8002da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002daa:	3301      	adds	r3, #1
 8002dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d9d0      	bls.n	8002d56 <CUSTOM_ISPU_MOTION_SENSOR_Init+0x9a>
    }
  }

  return ret;
 8002db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3738      	adds	r7, #56	@ 0x38
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	2000283c 	.word	0x2000283c
 8002dc4:	2000282c 	.word	0x2000282c
 8002dc8:	20000774 	.word	0x20000774
 8002dcc:	20002830 	.word	0x20002830

08002dd0 <ISM330IS_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t ISM330IS_0_Probe(uint32_t Functions)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b092      	sub	sp, #72	@ 0x48
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  ISM330IS_IO_t            io_ctx;
  uint8_t                  id;
  static ISM330IS_Object_t ism330is_obj_0;
  ISM330IS_Capabilities_t  cap;
  int32_t                  ret = BSP_ERROR_NONE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the driver */
  io_ctx.BusType     = ISM330IS_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8002ddc:	2301      	movs	r3, #1
 8002dde:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.Address     = 0x0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  io_ctx.Init        = CUSTOM_ISM330IS_0_Init;
 8002de6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f10 <ISM330IS_0_Probe+0x140>)
 8002de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.DeInit      = CUSTOM_ISM330IS_0_DeInit;
 8002dea:	4b4a      	ldr	r3, [pc, #296]	@ (8002f14 <ISM330IS_0_Probe+0x144>)
 8002dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.ReadReg     = CUSTOM_ISM330IS_0_ReadReg;
 8002dee:	4b4a      	ldr	r3, [pc, #296]	@ (8002f18 <ISM330IS_0_Probe+0x148>)
 8002df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.WriteReg    = CUSTOM_ISM330IS_0_WriteReg;
 8002df2:	4b4a      	ldr	r3, [pc, #296]	@ (8002f1c <ISM330IS_0_Probe+0x14c>)
 8002df4:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.GetTick     = BSP_GetTick;
 8002df6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f20 <ISM330IS_0_Probe+0x150>)
 8002df8:	643b      	str	r3, [r7, #64]	@ 0x40

  if (ISM330IS_RegisterBusIO(&ism330is_obj_0, &io_ctx) != ISM330IS_OK)
 8002dfa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4848      	ldr	r0, [pc, #288]	@ (8002f24 <ISM330IS_0_Probe+0x154>)
 8002e02:	f003 fbcf 	bl	80065a4 <ISM330IS_RegisterBusIO>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <ISM330IS_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002e0c:	f06f 0306 	mvn.w	r3, #6
 8002e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e12:	e077      	b.n	8002f04 <ISM330IS_0_Probe+0x134>
  }
  else if (ISM330IS_ReadID(&ism330is_obj_0, &id) != ISM330IS_OK)
 8002e14:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4842      	ldr	r0, [pc, #264]	@ (8002f24 <ISM330IS_0_Probe+0x154>)
 8002e1c:	f003 fcb6 	bl	800678c <ISM330IS_ReadID>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <ISM330IS_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002e26:	f06f 0306 	mvn.w	r3, #6
 8002e2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e2c:	e06a      	b.n	8002f04 <ISM330IS_0_Probe+0x134>
  }
  else if (id != ISM330IS_ID)
 8002e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e32:	2b22      	cmp	r3, #34	@ 0x22
 8002e34:	d003      	beq.n	8002e3e <ISM330IS_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002e36:	f06f 0306 	mvn.w	r3, #6
 8002e3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e3c:	e062      	b.n	8002f04 <ISM330IS_0_Probe+0x134>
  }
  else
  {
    (void)ISM330IS_GetCapabilities(&ism330is_obj_0, &cap);
 8002e3e:	f107 0308 	add.w	r3, r7, #8
 8002e42:	4619      	mov	r1, r3
 8002e44:	4837      	ldr	r0, [pc, #220]	@ (8002f24 <ISM330IS_0_Probe+0x154>)
 8002e46:	f003 fcb9 	bl	80067bc <ISM330IS_GetCapabilities>
    MotionCtx[CUSTOM_ISM330IS_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1)
 8002e4a:	7a7b      	ldrb	r3, [r7, #9]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	7a3b      	ldrb	r3, [r7, #8]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	431a      	orrs	r2, r3
                                             | ((uint32_t)cap.Magneto << 2);
 8002e54:	7abb      	ldrb	r3, [r7, #10]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4313      	orrs	r3, r2
    MotionCtx[CUSTOM_ISM330IS_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1)
 8002e5a:	4a33      	ldr	r2, [pc, #204]	@ (8002f28 <ISM330IS_0_Probe+0x158>)
 8002e5c:	6013      	str	r3, [r2, #0]

    IspuMotionCompObj[CUSTOM_ISM330IS_0] = &ism330is_obj_0;
 8002e5e:	4b33      	ldr	r3, [pc, #204]	@ (8002f2c <ISM330IS_0_Probe+0x15c>)
 8002e60:	4a30      	ldr	r2, [pc, #192]	@ (8002f24 <ISM330IS_0_Probe+0x154>)
 8002e62:	601a      	str	r2, [r3, #0]
    MotionDrv[CUSTOM_ISM330IS_0] = (MOTION_SENSOR_CommonDrv_t *)&ISM330IS_COMMON_Driver;
 8002e64:	4b32      	ldr	r3, [pc, #200]	@ (8002f30 <ISM330IS_0_Probe+0x160>)
 8002e66:	4a33      	ldr	r2, [pc, #204]	@ (8002f34 <ISM330IS_0_Probe+0x164>)
 8002e68:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8002e6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d11d      	bne.n	8002eac <ISM330IS_0_Probe+0xdc>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d018      	beq.n	8002eac <ISM330IS_0_Probe+0xdc>
 8002e7a:	7a7b      	ldrb	r3, [r7, #9]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d115      	bne.n	8002eac <ISM330IS_0_Probe+0xdc>
    {
      MotionFuncDrv[CUSTOM_ISM330IS_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)&ISM330IS_GYRO_Driver;
 8002e80:	4b2d      	ldr	r3, [pc, #180]	@ (8002f38 <ISM330IS_0_Probe+0x168>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	4a2d      	ldr	r2, [pc, #180]	@ (8002f3c <ISM330IS_0_Probe+0x16c>)
 8002e86:	492e      	ldr	r1, [pc, #184]	@ (8002f40 <ISM330IS_0_Probe+0x170>)
 8002e88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_ISM330IS_0]->Init(IspuMotionCompObj[CUSTOM_ISM330IS_0]) != ISM330IS_OK)
 8002e8c:	4b28      	ldr	r3, [pc, #160]	@ (8002f30 <ISM330IS_0_Probe+0x160>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a26      	ldr	r2, [pc, #152]	@ (8002f2c <ISM330IS_0_Probe+0x15c>)
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	4610      	mov	r0, r2
 8002e98:	4798      	blx	r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <ISM330IS_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002ea0:	f06f 0304 	mvn.w	r3, #4
 8002ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ea6:	e001      	b.n	8002eac <ISM330IS_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8002eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d11d      	bne.n	8002eee <ISM330IS_0_Probe+0x11e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d018      	beq.n	8002eee <ISM330IS_0_Probe+0x11e>
 8002ebc:	7a3b      	ldrb	r3, [r7, #8]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d115      	bne.n	8002eee <ISM330IS_0_Probe+0x11e>
    {
      MotionFuncDrv[CUSTOM_ISM330IS_0][FunctionIndex[MOTION_ACCELERO]] =
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f38 <ISM330IS_0_Probe+0x168>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f3c <ISM330IS_0_Probe+0x16c>)
 8002ec8:	491e      	ldr	r1, [pc, #120]	@ (8002f44 <ISM330IS_0_Probe+0x174>)
 8002eca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (MOTION_SENSOR_FuncDrv_t *)&ISM330IS_ACC_Driver;

      if (MotionDrv[CUSTOM_ISM330IS_0]->Init(IspuMotionCompObj[CUSTOM_ISM330IS_0]) != ISM330IS_OK)
 8002ece:	4b18      	ldr	r3, [pc, #96]	@ (8002f30 <ISM330IS_0_Probe+0x160>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a15      	ldr	r2, [pc, #84]	@ (8002f2c <ISM330IS_0_Probe+0x15c>)
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4798      	blx	r3
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <ISM330IS_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002ee2:	f06f 0304 	mvn.w	r3, #4
 8002ee6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ee8:	e001      	b.n	8002eee <ISM330IS_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8002eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d107      	bne.n	8002f04 <ISM330IS_0_Probe+0x134>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <ISM330IS_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002efe:	f06f 0304 	mvn.w	r3, #4
 8002f02:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 8002f04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3748      	adds	r7, #72	@ 0x48
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	08002f49 	.word	0x08002f49
 8002f14:	08002f6d 	.word	0x08002f6d
 8002f18:	08003001 	.word	0x08003001
 8002f1c:	08002f91 	.word	0x08002f91
 8002f20:	08000f51 	.word	0x08000f51
 8002f24:	20002844 	.word	0x20002844
 8002f28:	20002840 	.word	0x20002840
 8002f2c:	2000282c 	.word	0x2000282c
 8002f30:	2000283c 	.word	0x2000283c
 8002f34:	200007bc 	.word	0x200007bc
 8002f38:	20000774 	.word	0x20000774
 8002f3c:	20002830 	.word	0x20002830
 8002f40:	200007f0 	.word	0x200007f0
 8002f44:	200007cc 	.word	0x200007cc

08002f48 <CUSTOM_ISM330IS_0_Init>:
/**
  * @brief  Initialize SPI bus for ISM330IS
  * @retval BSP status
  */
static int32_t CUSTOM_ISM330IS_0_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002f4e:	f06f 0305 	mvn.w	r3, #5
 8002f52:	607b      	str	r3, [r7, #4]

  if(CUSTOM_ISM330IS_0_SPI_Init() == BSP_ERROR_NONE)
 8002f54:	f7fd fedc 	bl	8000d10 <BSP_SPI3_Init>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <CUSTOM_ISM330IS_0_Init+0x1a>
  {
    ret = BSP_ERROR_NONE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8002f62:	687b      	ldr	r3, [r7, #4]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <CUSTOM_ISM330IS_0_DeInit>:
/**
  * @brief  DeInitialize SPI bus for ISM330IS
  * @retval BSP status
  */
static int32_t CUSTOM_ISM330IS_0_DeInit(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002f72:	f06f 0305 	mvn.w	r3, #5
 8002f76:	607b      	str	r3, [r7, #4]

  if(CUSTOM_ISM330IS_0_SPI_DeInit() == BSP_ERROR_NONE)
 8002f78:	f7fd fefa 	bl	8000d70 <BSP_SPI3_DeInit>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <CUSTOM_ISM330IS_0_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8002f86:	687b      	ldr	r3, [r7, #4]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <CUSTOM_ISM330IS_0_WriteReg>:
  * @param  pdata the pointer to the data to be written
  * @param  len the length of the data to be written
  * @retval BSP status
  */
static int32_t CUSTOM_ISM330IS_0_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60ba      	str	r2, [r7, #8]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	81fb      	strh	r3, [r7, #14]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	81bb      	strh	r3, [r7, #12]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 8002faa:	89bb      	ldrh	r3, [r7, #12]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_ISM330IS_0_CS_PORT, CUSTOM_ISM330IS_0_CS_PIN, GPIO_PIN_RESET);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	4811      	ldr	r0, [pc, #68]	@ (8002ffc <CUSTOM_ISM330IS_0_WriteReg+0x6c>)
 8002fb6:	f007 ffa7 	bl	800af08 <HAL_GPIO_WritePin>

  if (CUSTOM_ISM330IS_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 8002fba:	f107 0313 	add.w	r3, r7, #19
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd fefd 	bl	8000dc0 <BSP_SPI3_Send>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <CUSTOM_ISM330IS_0_WriteReg+0x42>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002fcc:	f06f 0305 	mvn.w	r3, #5
 8002fd0:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_ISM330IS_0_SPI_Send(pdata, len) != BSP_ERROR_NONE)
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	68b8      	ldr	r0, [r7, #8]
 8002fd8:	f7fd fef2 	bl	8000dc0 <BSP_SPI3_Send>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <CUSTOM_ISM330IS_0_WriteReg+0x58>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002fe2:	f06f 0305 	mvn.w	r3, #5
 8002fe6:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_ISM330IS_0_CS_PORT, CUSTOM_ISM330IS_0_CS_PIN, GPIO_PIN_SET);
 8002fe8:	2201      	movs	r2, #1
 8002fea:	2102      	movs	r1, #2
 8002fec:	4803      	ldr	r0, [pc, #12]	@ (8002ffc <CUSTOM_ISM330IS_0_WriteReg+0x6c>)
 8002fee:	f007 ff8b 	bl	800af08 <HAL_GPIO_WritePin>

  return ret;
 8002ff2:	697b      	ldr	r3, [r7, #20]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	42021800 	.word	0x42021800

08003000 <CUSTOM_ISM330IS_0_ReadReg>:
  * @param  pdata the pointer to the data to be read
  * @param  len the length of the data to be read
  * @retval BSP status
  */
static int32_t CUSTOM_ISM330IS_0_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60ba      	str	r2, [r7, #8]
 8003008:	461a      	mov	r2, r3
 800300a:	4603      	mov	r3, r0
 800300c:	81fb      	strh	r3, [r7, #14]
 800300e:	460b      	mov	r3, r1
 8003010:	81bb      	strh	r3, [r7, #12]
 8003012:	4613      	mov	r3, r2
 8003014:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800301a:	89bb      	ldrh	r3, [r7, #12]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80;
 8003020:	7cfb      	ldrb	r3, [r7, #19]
 8003022:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003026:	b2db      	uxtb	r3, r3
 8003028:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_ISM330IS_0_CS_PORT, CUSTOM_ISM330IS_0_CS_PIN, GPIO_PIN_RESET);
 800302a:	2200      	movs	r2, #0
 800302c:	2102      	movs	r1, #2
 800302e:	4812      	ldr	r0, [pc, #72]	@ (8003078 <CUSTOM_ISM330IS_0_ReadReg+0x78>)
 8003030:	f007 ff6a 	bl	800af08 <HAL_GPIO_WritePin>

  if (CUSTOM_ISM330IS_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 8003034:	f107 0313 	add.w	r3, r7, #19
 8003038:	2101      	movs	r1, #1
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fec0 	bl	8000dc0 <BSP_SPI3_Send>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <CUSTOM_ISM330IS_0_ReadReg+0x4c>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003046:	f06f 0305 	mvn.w	r3, #5
 800304a:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_ISM330IS_0_SPI_Recv(pdata, len) != BSP_ERROR_NONE)
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	4619      	mov	r1, r3
 8003050:	68b8      	ldr	r0, [r7, #8]
 8003052:	f7fd fed1 	bl	8000df8 <BSP_SPI3_Recv>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <CUSTOM_ISM330IS_0_ReadReg+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800305c:	f06f 0305 	mvn.w	r3, #5
 8003060:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_ISM330IS_0_CS_PORT, CUSTOM_ISM330IS_0_CS_PIN, GPIO_PIN_SET);
 8003062:	2201      	movs	r2, #1
 8003064:	2102      	movs	r1, #2
 8003066:	4804      	ldr	r0, [pc, #16]	@ (8003078 <CUSTOM_ISM330IS_0_ReadReg+0x78>)
 8003068:	f007 ff4e 	bl	800af08 <HAL_GPIO_WritePin>

  return ret;
 800306c:	697b      	ldr	r3, [r7, #20]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	42021800 	.word	0x42021800

0800307c <CUSTOM_ISPU_MOTION_SENSOR_Read_Register>:
  * @param  Reg address to be read
  * @param  Data pointer where the value is written to
  * @retval BSP status
  */
int32_t CUSTOM_ISPU_MOTION_SENSOR_Read_Register(uint32_t Instance, uint8_t Reg, uint8_t *Data)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	460b      	mov	r3, r1
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  switch (Instance)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d112      	bne.n	80030b6 <CUSTOM_ISPU_MOTION_SENSOR_Read_Register+0x3a>
  {
#if (USE_CUSTOM_MOTION_SENSOR_ISM330IS_0 == 1)
    case CUSTOM_ISM330IS_0:
      if (ISM330IS_Read_Reg((ISM330IS_Object_t *)IspuMotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 8003090:	4a0d      	ldr	r2, [pc, #52]	@ (80030c8 <CUSTOM_ISPU_MOTION_SENSOR_Read_Register+0x4c>)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003098:	7af9      	ldrb	r1, [r7, #11]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	4618      	mov	r0, r3
 800309e:	f004 f840 	bl	8007122 <ISM330IS_Read_Reg>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <CUSTOM_ISPU_MOTION_SENSOR_Read_Register+0x34>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80030a8:	f06f 0304 	mvn.w	r3, #4
 80030ac:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 80030ae:	e006      	b.n	80030be <CUSTOM_ISPU_MOTION_SENSOR_Read_Register+0x42>
        ret = BSP_ERROR_NONE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
      break;
 80030b4:	e003      	b.n	80030be <CUSTOM_ISPU_MOTION_SENSOR_Read_Register+0x42>
#endif /* USE_CUSTOM_MOTION_SENSOR_ISM330IS_0 */

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80030b6:	f06f 0301 	mvn.w	r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
      break;
 80030bc:	bf00      	nop
  }

  return ret;
 80030be:	697b      	ldr	r3, [r7, #20]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	2000282c 	.word	0x2000282c

080030cc <CUSTOM_ISPU_MOTION_SENSOR_Write_Register>:
  * @param  Reg address to be read
  * @param  Data value to be written
  * @retval BSP status
  */
int32_t CUSTOM_ISPU_MOTION_SENSOR_Write_Register(uint32_t Instance, uint8_t Reg, uint8_t Data)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	70fb      	strb	r3, [r7, #3]
 80030d8:	4613      	mov	r3, r2
 80030da:	70bb      	strb	r3, [r7, #2]
  int32_t ret;

  switch (Instance)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d112      	bne.n	8003108 <CUSTOM_ISPU_MOTION_SENSOR_Write_Register+0x3c>
  {
#if (USE_CUSTOM_MOTION_SENSOR_ISM330IS_0 == 1)
    case CUSTOM_ISM330IS_0:
      if (ISM330IS_Write_Reg((ISM330IS_Object_t *)IspuMotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 80030e2:	4a0e      	ldr	r2, [pc, #56]	@ (800311c <CUSTOM_ISPU_MOTION_SENSOR_Write_Register+0x50>)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ea:	78ba      	ldrb	r2, [r7, #2]
 80030ec:	78f9      	ldrb	r1, [r7, #3]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f004 f833 	bl	800715a <ISM330IS_Write_Reg>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <CUSTOM_ISPU_MOTION_SENSOR_Write_Register+0x36>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80030fa:	f06f 0304 	mvn.w	r3, #4
 80030fe:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8003100:	e006      	b.n	8003110 <CUSTOM_ISPU_MOTION_SENSOR_Write_Register+0x44>
        ret = BSP_ERROR_NONE;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
      break;
 8003106:	e003      	b.n	8003110 <CUSTOM_ISPU_MOTION_SENSOR_Write_Register+0x44>
#endif /* USE_CUSTOM_MOTION_SENSOR_ISM330IS_0 */

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8003108:	f06f 0301 	mvn.w	r3, #1
 800310c:	60fb      	str	r3, [r7, #12]
      break;
 800310e:	bf00      	nop
  }

  return ret;
 8003110:	68fb      	ldr	r3, [r7, #12]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	2000282c 	.word	0x2000282c

08003120 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_BDR>:
 * @param  Function Motion sensor function
 * @param  Odr FIFO BDR value
 * @retval BSP status
 */
int32_t MY_CUSTOM_MOTION_SENSOR_FIFO_Set_BDR(uint32_t Instance, uint32_t Function, float Bdr)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	ed87 0a01 	vstr	s0, [r7, #4]
	int32_t ret;

	switch(Instance)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d133      	bne.n	800319c <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x7c>
		break;
#endif

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSV16X_0 == 1)
	case CUSTOM_LSM6DSV16X_0:
		if((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d012      	beq.n	8003164 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x44>
		{
			if(LSM6DSV16X_FIFO_ACC_Set_BDR(MotionCompObj[Instance], Bdr) != BSP_ERROR_NONE)
 800313e:	4a1c      	ldr	r2, [pc, #112]	@ (80031b0 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x90>)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003146:	ed97 0a01 	vldr	s0, [r7, #4]
 800314a:	4618      	mov	r0, r3
 800314c:	f005 faf0 	bl	8008730 <LSM6DSV16X_FIFO_ACC_Set_BDR>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x3e>
			{
				ret = BSP_ERROR_COMPONENT_FAILURE;
 8003156:	f06f 0304 	mvn.w	r3, #4
 800315a:	617b      	str	r3, [r7, #20]
		}
		else
		{
			ret = BSP_ERROR_WRONG_PARAM;
		}
		break;
 800315c:	e022      	b.n	80031a4 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x84>
				ret = BSP_ERROR_NONE;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
		break;
 8003162:	e01f      	b.n	80031a4 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x84>
		else if((Function & MOTION_GYRO) == MOTION_GYRO)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d012      	beq.n	8003194 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x74>
			if(LSM6DSV16X_FIFO_GYRO_Set_BDR(MotionCompObj[Instance], Bdr) != BSP_ERROR_NONE)
 800316e:	4a10      	ldr	r2, [pc, #64]	@ (80031b0 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x90>)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003176:	ed97 0a01 	vldr	s0, [r7, #4]
 800317a:	4618      	mov	r0, r3
 800317c:	f005 fb84 	bl	8008888 <LSM6DSV16X_FIFO_GYRO_Set_BDR>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x6e>
				ret = BSP_ERROR_COMPONENT_FAILURE;
 8003186:	f06f 0304 	mvn.w	r3, #4
 800318a:	617b      	str	r3, [r7, #20]
		break;
 800318c:	e00a      	b.n	80031a4 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x84>
				ret = BSP_ERROR_NONE;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
		break;
 8003192:	e007      	b.n	80031a4 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x84>
			ret = BSP_ERROR_WRONG_PARAM;
 8003194:	f06f 0301 	mvn.w	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
		break;
 800319a:	e003      	b.n	80031a4 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x84>
#endif

	default:
		ret = BSP_ERROR_WRONG_PARAM;
 800319c:	f06f 0301 	mvn.w	r3, #1
 80031a0:	617b      	str	r3, [r7, #20]
		break;
 80031a2:	bf00      	nop
	}

	return ret;
 80031a4:	697b      	ldr	r3, [r7, #20]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20002878 	.word	0x20002878

080031b4 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full>:
 * @param  Instance the device instance
 * @param  Status FIFO full interrupt on INT2 pin
 * @retval BSP status
 */
int32_t MY_CUSTOM_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full(uint32_t Instance, uint8_t Status)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	70fb      	strb	r3, [r7, #3]
	int32_t ret;

	switch(Instance)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d112      	bne.n	80031ec <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full+0x38>
		break;
#endif

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSV16X_0 == 1)
	case CUSTOM_LSM6DSV16X_0:
		if(LSM6DSV16X_FIFO_Set_INT2_FIFO_Full(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 80031c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003200 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full+0x4c>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	4611      	mov	r1, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f005 fa13 	bl	80085fe <LSM6DSV16X_FIFO_Set_INT2_FIFO_Full>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full+0x32>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 80031de:	f06f 0304 	mvn.w	r3, #4
 80031e2:	60fb      	str	r3, [r7, #12]
		}
		else
		{
			ret = BSP_ERROR_NONE;
		}
		break;
 80031e4:	e006      	b.n	80031f4 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full+0x40>
			ret = BSP_ERROR_NONE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
		break;
 80031ea:	e003      	b.n	80031f4 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full+0x40>
#endif

	default:
		ret = BSP_ERROR_WRONG_PARAM;
 80031ec:	f06f 0301 	mvn.w	r3, #1
 80031f0:	60fb      	str	r3, [r7, #12]
		break;
 80031f2:	bf00      	nop
	}

	return ret;
 80031f4:	68fb      	ldr	r3, [r7, #12]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20002878 	.word	0x20002878

08003204 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>:
 * @param  Instance the device instance
 * @param  Mode FIFO mode
 * @retval BSP status
 */
int32_t MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(uint32_t Instance, uint8_t Mode)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	70fb      	strb	r3, [r7, #3]
	int32_t ret;

	switch(Instance)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d112      	bne.n	800323c <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x38>
		break;
#endif

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSV16X_0 == 1)
	case CUSTOM_LSM6DSV16X_0:
		if(LSM6DSV16X_FIFO_Set_Mode(MotionCompObj[Instance], Mode) != BSP_ERROR_NONE)
 8003216:	4a0e      	ldr	r2, [pc, #56]	@ (8003250 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x4c>)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	4611      	mov	r1, r2
 8003222:	4618      	mov	r0, r3
 8003224:	f005 fa1c 	bl	8008660 <LSM6DSV16X_FIFO_Set_Mode>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x32>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800322e:	f06f 0304 	mvn.w	r3, #4
 8003232:	60fb      	str	r3, [r7, #12]
		}
		else
		{
			ret = BSP_ERROR_NONE;
		}
		break;
 8003234:	e006      	b.n	8003244 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x40>
			ret = BSP_ERROR_NONE;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
		break;
 800323a:	e003      	b.n	8003244 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x40>
#endif

	default:
		ret = BSP_ERROR_WRONG_PARAM;
 800323c:	f06f 0301 	mvn.w	r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
		break;
 8003242:	bf00      	nop
	}

	return ret;
 8003244:	68fb      	ldr	r3, [r7, #12]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20002878 	.word	0x20002878

08003254 <LSM6DSV16X_FIFO_Get_Data_Word>:
  * @param  pObj the device pObj
  * @param  Acceleration FIFO single data
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_FIFO_Get_Data_Word(LSM6DSV16X_Object_t *pObj, int16_t *data_raw)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint8_t data[6];

  if (LSM6DSV16X_FIFO_Get_Data(pObj, data) != LSM6DSV16X_OK)
 800325e:	f107 0308 	add.w	r3, r7, #8
 8003262:	4619      	mov	r1, r3
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f005 fa4b 	bl	8008700 <LSM6DSV16X_FIFO_Get_Data>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <LSM6DSV16X_FIFO_Get_Data_Word+0x22>
  {
    return LSM6DSV16X_ERROR;
 8003270:	f04f 33ff 	mov.w	r3, #4294967295
 8003274:	e01d      	b.n	80032b2 <LSM6DSV16X_FIFO_Get_Data_Word+0x5e>
  }

  data_raw[0] = ((int16_t)data[1] << 8) | data[0];
 8003276:	7a7b      	ldrb	r3, [r7, #9]
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	b21a      	sxth	r2, r3
 800327c:	7a3b      	ldrb	r3, [r7, #8]
 800327e:	b21b      	sxth	r3, r3
 8003280:	4313      	orrs	r3, r2
 8003282:	b21a      	sxth	r2, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	801a      	strh	r2, [r3, #0]
  data_raw[1] = ((int16_t)data[3] << 8) | data[2];
 8003288:	7afb      	ldrb	r3, [r7, #11]
 800328a:	021b      	lsls	r3, r3, #8
 800328c:	b219      	sxth	r1, r3
 800328e:	7abb      	ldrb	r3, [r7, #10]
 8003290:	b21a      	sxth	r2, r3
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	3302      	adds	r3, #2
 8003296:	430a      	orrs	r2, r1
 8003298:	b212      	sxth	r2, r2
 800329a:	801a      	strh	r2, [r3, #0]
  data_raw[2] = ((int16_t)data[5] << 8) | data[4];
 800329c:	7b7b      	ldrb	r3, [r7, #13]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	b219      	sxth	r1, r3
 80032a2:	7b3b      	ldrb	r3, [r7, #12]
 80032a4:	b21a      	sxth	r2, r3
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	3304      	adds	r3, #4
 80032aa:	430a      	orrs	r2, r1
 80032ac:	b212      	sxth	r2, r2
 80032ae:	801a      	strh	r2, [r3, #0]

  return LSM6DSV16X_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <MY_CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word>:
 *         - MOTION_GYRO or MOTION_ACCELERO
 * @param  Data FIFO single axis data
 * @retval BSP status
 */
int32_t MY_CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word(uint32_t Instance, uint32_t Function, int16_t *Data)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
	int32_t ret = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]

	switch(Instance)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d11f      	bne.n	8003312 <MY_CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x56>
		break;
#endif

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSV16X_0 == 1)
	case CUSTOM_LSM6DSV16X_0:
		if((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d011      	beq.n	8003300 <MY_CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x44>
		{
			if(LSM6DSV16X_FIFO_Get_Data_Word(MotionCompObj[Instance], Data) != BSP_ERROR_NONE)
 80032dc:	4a12      	ldr	r2, [pc, #72]	@ (8003328 <MY_CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x6c>)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff ffb4 	bl	8003254 <LSM6DSV16X_FIFO_Get_Data_Word>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <MY_CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x3e>
			{
				ret = BSP_ERROR_COMPONENT_FAILURE;
 80032f2:	f06f 0304 	mvn.w	r3, #4
 80032f6:	617b      	str	r3, [r7, #20]
		}
		else
		{
			ret = BSP_ERROR_WRONG_PARAM;
		}
		break;
 80032f8:	e00f      	b.n	800331a <MY_CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x5e>
				ret = BSP_ERROR_NONE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
		break;
 80032fe:	e00c      	b.n	800331a <MY_CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x5e>
		else if((Function & MOTION_GYRO) == MOTION_GYRO)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d107      	bne.n	800331a <MY_CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x5e>
			ret = BSP_ERROR_WRONG_PARAM;
 800330a:	f06f 0301 	mvn.w	r3, #1
 800330e:	617b      	str	r3, [r7, #20]
		break;
 8003310:	e003      	b.n	800331a <MY_CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x5e>
#endif

	default:
		ret = BSP_ERROR_WRONG_PARAM;
 8003312:	f06f 0301 	mvn.w	r3, #1
 8003316:	617b      	str	r3, [r7, #20]
		break;
 8003318:	e000      	b.n	800331c <MY_CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x60>
		break;
 800331a:	bf00      	nop
	}

	return ret;
 800331c:	697b      	ldr	r3, [r7, #20]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20002878 	.word	0x20002878

0800332c <MY_CUSTOM_MOTION_SENSOR_FIFO_Overrun_Set_INT2>:

	return ret;
}

int32_t MY_CUSTOM_MOTION_SENSOR_FIFO_Overrun_Set_INT2(uint32_t Instance, uint8_t Status)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	70fb      	strb	r3, [r7, #3]
	int32_t ret;

	switch(Instance)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d112      	bne.n	8003364 <MY_CUSTOM_MOTION_SENSOR_FIFO_Overrun_Set_INT2+0x38>
		break;
#endif

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSV16X_0 == 1)
	case CUSTOM_LSM6DSV16X_0:
		if(LSM6DSV16X_FIFO_Overrun_Set_INT2(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800333e:	4a0e      	ldr	r2, [pc, #56]	@ (8003378 <MY_CUSTOM_MOTION_SENSOR_FIFO_Overrun_Set_INT2+0x4c>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003346:	78fa      	ldrb	r2, [r7, #3]
 8003348:	4611      	mov	r1, r2
 800334a:	4618      	mov	r0, r3
 800334c:	f000 f816 	bl	800337c <LSM6DSV16X_FIFO_Overrun_Set_INT2>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <MY_CUSTOM_MOTION_SENSOR_FIFO_Overrun_Set_INT2+0x32>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 8003356:	f06f 0304 	mvn.w	r3, #4
 800335a:	60fb      	str	r3, [r7, #12]
		}
		else
		{
			ret = BSP_ERROR_NONE;
		}
		break;
 800335c:	e006      	b.n	800336c <MY_CUSTOM_MOTION_SENSOR_FIFO_Overrun_Set_INT2+0x40>
			ret = BSP_ERROR_NONE;
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
		break;
 8003362:	e003      	b.n	800336c <MY_CUSTOM_MOTION_SENSOR_FIFO_Overrun_Set_INT2+0x40>
#endif

	default:
		ret = BSP_ERROR_WRONG_PARAM;
 8003364:	f06f 0301 	mvn.w	r3, #1
 8003368:	60fb      	str	r3, [r7, #12]
		break;
 800336a:	bf00      	nop
	}

	return ret;
 800336c:	68fb      	ldr	r3, [r7, #12]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20002878 	.word	0x20002878

0800337c <LSM6DSV16X_FIFO_Overrun_Set_INT2>:
* @param  pObj the device pObj
* @param  Status FIFO overrun interrupt on INT2 pin status
* @retval 0 in case of success, an error code otherwise
*/
int32_t LSM6DSV16X_FIFO_Overrun_Set_INT2(LSM6DSV16X_Object_t *pObj, uint8_t Status)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_reg_t reg;

  if (lsm6dsv16x_read_reg(&(pObj->Ctx), LSM6DSV16X_INT2_CTRL, &reg.byte, 1) != LSM6DSV16X_OK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f103 0020 	add.w	r0, r3, #32
 800338e:	f107 020c 	add.w	r2, r7, #12
 8003392:	2301      	movs	r3, #1
 8003394:	210e      	movs	r1, #14
 8003396:	f006 f833 	bl	8009400 <lsm6dsv16x_read_reg>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <LSM6DSV16X_FIFO_Overrun_Set_INT2+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80033a0:	f04f 33ff 	mov.w	r3, #4294967295
 80033a4:	e017      	b.n	80033d6 <LSM6DSV16X_FIFO_Overrun_Set_INT2+0x5a>
  }

  reg.int2_ctrl.int2_fifo_ovr = Status;
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	7b3b      	ldrb	r3, [r7, #12]
 80033b0:	f362 1304 	bfi	r3, r2, #4, #1
 80033b4:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_write_reg(&(pObj->Ctx), LSM6DSV16X_INT2_CTRL, &reg.byte, 1) != LSM6DSV16X_OK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f103 0020 	add.w	r0, r3, #32
 80033bc:	f107 020c 	add.w	r2, r7, #12
 80033c0:	2301      	movs	r3, #1
 80033c2:	210e      	movs	r1, #14
 80033c4:	f006 f834 	bl	8009430 <lsm6dsv16x_write_reg>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <LSM6DSV16X_FIFO_Overrun_Set_INT2+0x58>
  {
    return LSM6DSV16X_ERROR;
 80033ce:	f04f 33ff 	mov.w	r3, #4294967295
 80033d2:	e000      	b.n	80033d6 <LSM6DSV16X_FIFO_Overrun_Set_INT2+0x5a>
  }

  return LSM6DSV16X_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <MY_CUSTOM_MOTION_SENSOR_FIFO_Watermark_Set_INT2>:

	return ret;
}

int32_t MY_CUSTOM_MOTION_SENSOR_FIFO_Watermark_Set_INT2(uint32_t Instance, uint8_t Status)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	70fb      	strb	r3, [r7, #3]
	int32_t ret;

	switch(Instance)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d112      	bne.n	8003418 <MY_CUSTOM_MOTION_SENSOR_FIFO_Watermark_Set_INT2+0x38>
		break;
#endif

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSV16X_0 == 1)
	case CUSTOM_LSM6DSV16X_0:
		if(LSM6DSV16X_FIFO_Watermark_Set_INT2(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 80033f2:	4a0e      	ldr	r2, [pc, #56]	@ (800342c <MY_CUSTOM_MOTION_SENSOR_FIFO_Watermark_Set_INT2+0x4c>)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f816 	bl	8003430 <LSM6DSV16X_FIFO_Watermark_Set_INT2>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <MY_CUSTOM_MOTION_SENSOR_FIFO_Watermark_Set_INT2+0x32>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800340a:	f06f 0304 	mvn.w	r3, #4
 800340e:	60fb      	str	r3, [r7, #12]
		}
		else
		{
			ret = BSP_ERROR_NONE;
		}
		break;
 8003410:	e006      	b.n	8003420 <MY_CUSTOM_MOTION_SENSOR_FIFO_Watermark_Set_INT2+0x40>
			ret = BSP_ERROR_NONE;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
		break;
 8003416:	e003      	b.n	8003420 <MY_CUSTOM_MOTION_SENSOR_FIFO_Watermark_Set_INT2+0x40>
#endif

	default:
		ret = BSP_ERROR_WRONG_PARAM;
 8003418:	f06f 0301 	mvn.w	r3, #1
 800341c:	60fb      	str	r3, [r7, #12]
		break;
 800341e:	bf00      	nop
	}

	return ret;
 8003420:	68fb      	ldr	r3, [r7, #12]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20002878 	.word	0x20002878

08003430 <LSM6DSV16X_FIFO_Watermark_Set_INT2>:
* @param  pObj the device pObj
* @param  Status FIFO watermark interrupt on INT2 pin status
* @retval 0 in case of success, an error code otherwise
*/
int32_t LSM6DSV16X_FIFO_Watermark_Set_INT2(LSM6DSV16X_Object_t *pObj, uint8_t Status)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_reg_t reg;

  if (lsm6dsv16x_read_reg(&(pObj->Ctx), LSM6DSV16X_INT2_CTRL, &reg.byte, 1) != LSM6DSV16X_OK)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f103 0020 	add.w	r0, r3, #32
 8003442:	f107 020c 	add.w	r2, r7, #12
 8003446:	2301      	movs	r3, #1
 8003448:	210e      	movs	r1, #14
 800344a:	f005 ffd9 	bl	8009400 <lsm6dsv16x_read_reg>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <LSM6DSV16X_FIFO_Watermark_Set_INT2+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8003454:	f04f 33ff 	mov.w	r3, #4294967295
 8003458:	e017      	b.n	800348a <LSM6DSV16X_FIFO_Watermark_Set_INT2+0x5a>
  }

  reg.int2_ctrl.int2_fifo_th = Status;
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	b2da      	uxtb	r2, r3
 8003462:	7b3b      	ldrb	r3, [r7, #12]
 8003464:	f362 03c3 	bfi	r3, r2, #3, #1
 8003468:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_write_reg(&(pObj->Ctx), LSM6DSV16X_INT2_CTRL, &reg.byte, 1) != LSM6DSV16X_OK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f103 0020 	add.w	r0, r3, #32
 8003470:	f107 020c 	add.w	r2, r7, #12
 8003474:	2301      	movs	r3, #1
 8003476:	210e      	movs	r1, #14
 8003478:	f005 ffda 	bl	8009430 <lsm6dsv16x_write_reg>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <LSM6DSV16X_FIFO_Watermark_Set_INT2+0x58>
  {
    return LSM6DSV16X_ERROR;
 8003482:	f04f 33ff 	mov.w	r3, #4294967295
 8003486:	e000      	b.n	800348a <LSM6DSV16X_FIFO_Watermark_Set_INT2+0x5a>
  }

  return LSM6DSV16X_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <CUSTOM_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08e      	sub	sp, #56	@ 0x38
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800349e:	2300      	movs	r3, #0
 80034a0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 80034a2:	2301      	movs	r3, #1
 80034a4:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  CUSTOM_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d131      	bne.n	8003514 <CUSTOM_MOTION_SENSOR_Init+0x80>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case CUSTOM_LSM6DSV16X_0:
      if (LSM6DSV16X_0_Probe(Functions) != BSP_ERROR_NONE)
 80034b0:	6838      	ldr	r0, [r7, #0]
 80034b2:	f000 f945 	bl	8003740 <LSM6DSV16X_0_Probe>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <CUSTOM_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 80034bc:	f04f 33ff 	mov.w	r3, #4294967295
 80034c0:	e064      	b.n	800358c <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80034c2:	4a34      	ldr	r2, [pc, #208]	@ (8003594 <CUSTOM_MOTION_SENSOR_Init+0x100>)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4932      	ldr	r1, [pc, #200]	@ (8003598 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80034d4:	f107 010c 	add.w	r1, r7, #12
 80034d8:	4610      	mov	r0, r2
 80034da:	4798      	blx	r3
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <CUSTOM_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80034e2:	f06f 0306 	mvn.w	r3, #6
 80034e6:	e051      	b.n	800358c <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 80034e8:	7b3b      	ldrb	r3, [r7, #12]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d103      	bne.n	80034f6 <CUSTOM_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 80034ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f0:	f043 0302 	orr.w	r3, r3, #2
 80034f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 80034f6:	7b7b      	ldrb	r3, [r7, #13]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d103      	bne.n	8003504 <CUSTOM_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 80034fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8003504:	7bbb      	ldrb	r3, [r7, #14]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d108      	bne.n	800351c <CUSTOM_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 800350a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350c:	f043 0304 	orr.w	r3, r3, #4
 8003510:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8003512:	e003      	b.n	800351c <CUSTOM_MOTION_SENSOR_Init+0x88>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8003514:	f06f 0301 	mvn.w	r3, #1
 8003518:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800351a:	e000      	b.n	800351e <CUSTOM_MOTION_SENSOR_Init+0x8a>
      break;
 800351c:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800351e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <CUSTOM_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 8003524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003526:	e031      	b.n	800358c <CUSTOM_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 8003528:	2300      	movs	r3, #0
 800352a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800352c:	e02a      	b.n	8003584 <CUSTOM_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003532:	4013      	ands	r3, r2
 8003534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003536:	429a      	cmp	r2, r3
 8003538:	d11e      	bne.n	8003578 <CUSTOM_MOTION_SENSOR_Init+0xe4>
 800353a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800353c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353e:	4013      	ands	r3, r2
 8003540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003542:	429a      	cmp	r2, r3
 8003544:	d118      	bne.n	8003578 <CUSTOM_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8003546:	4a15      	ldr	r2, [pc, #84]	@ (800359c <CUSTOM_MOTION_SENSOR_Init+0x108>)
 8003548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800354e:	4814      	ldr	r0, [pc, #80]	@ (80035a0 <CUSTOM_MOTION_SENSOR_Init+0x10c>)
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4413      	add	r3, r2
 8003558:	440b      	add	r3, r1
 800355a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	490d      	ldr	r1, [pc, #52]	@ (8003598 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003568:	4610      	mov	r0, r2
 800356a:	4798      	blx	r3
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <CUSTOM_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8003572:	f06f 0304 	mvn.w	r3, #4
 8003576:	e009      	b.n	800358c <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 8003578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800357e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003580:	3301      	adds	r3, #1
 8003582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003586:	2b02      	cmp	r3, #2
 8003588:	d9d1      	bls.n	800352e <CUSTOM_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 800358a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800358c:	4618      	mov	r0, r3
 800358e:	3738      	adds	r7, #56	@ 0x38
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20002888 	.word	0x20002888
 8003598:	20002878 	.word	0x20002878
 800359c:	20000794 	.word	0x20000794
 80035a0:	2000287c 	.word	0x2000287c

080035a4 <CUSTOM_MOTION_SENSOR_GetSensitivity>:
 *         - MOTION_MAGNETO
 * @param  Sensitivity pointer to sensitivity read value
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetSensitivity(uint32_t Instance, uint32_t Function, float *Sensitivity)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <CUSTOM_MOTION_SENSOR_GetSensitivity+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80035b6:	f06f 0301 	mvn.w	r3, #1
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	e029      	b.n	8003612 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80035be:	4a17      	ldr	r2, [pc, #92]	@ (800361c <CUSTOM_MOTION_SENSOR_GetSensitivity+0x78>)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4013      	ands	r3, r2
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d11d      	bne.n	800360c <CUSTOM_MOTION_SENSOR_GetSensitivity+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetSensitivity(MotionCompObj[Instance], Sensitivity) != BSP_ERROR_NONE)
 80035d0:	4a13      	ldr	r2, [pc, #76]	@ (8003620 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x7c>)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80035d8:	4812      	ldr	r0, [pc, #72]	@ (8003624 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x80>)
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4613      	mov	r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4413      	add	r3, r2
 80035e2:	440b      	add	r3, r1
 80035e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	490f      	ldr	r1, [pc, #60]	@ (8003628 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x84>)
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4610      	mov	r0, r2
 80035f6:	4798      	blx	r3
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80035fe:	f06f 0304 	mvn.w	r3, #4
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	e005      	b.n	8003612 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	e002      	b.n	8003612 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800360c:	f06f 0301 	mvn.w	r3, #1
 8003610:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8003612:	697b      	ldr	r3, [r7, #20]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	2000288c 	.word	0x2000288c
 8003620:	20000794 	.word	0x20000794
 8003624:	2000287c 	.word	0x2000287c
 8003628:	20002878 	.word	0x20002878

0800362c <CUSTOM_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003640:	f06f 0301 	mvn.w	r3, #1
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	e02a      	b.n	800369e <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8003648:	4a17      	ldr	r2, [pc, #92]	@ (80036a8 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4013      	ands	r3, r2
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	429a      	cmp	r2, r3
 8003658:	d11e      	bne.n	8003698 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800365a:	4a14      	ldr	r2, [pc, #80]	@ (80036ac <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003662:	4813      	ldr	r0, [pc, #76]	@ (80036b0 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4613      	mov	r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	4413      	add	r3, r2
 800366c:	440b      	add	r3, r1
 800366e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	490f      	ldr	r1, [pc, #60]	@ (80036b4 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800367c:	ed97 0a01 	vldr	s0, [r7, #4]
 8003680:	4610      	mov	r0, r2
 8003682:	4798      	blx	r3
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800368a:	f06f 0304 	mvn.w	r3, #4
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	e005      	b.n	800369e <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	e002      	b.n	800369e <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8003698:	f06f 0301 	mvn.w	r3, #1
 800369c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800369e:	697b      	ldr	r3, [r7, #20]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	2000288c 	.word	0x2000288c
 80036ac:	20000794 	.word	0x20000794
 80036b0:	2000287c 	.word	0x2000287c
 80036b4:	20002878 	.word	0x20002878

080036b8 <CUSTOM_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <CUSTOM_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80036ca:	f06f 0301 	mvn.w	r3, #1
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	e029      	b.n	8003726 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80036d2:	4a17      	ldr	r2, [pc, #92]	@ (8003730 <CUSTOM_MOTION_SENSOR_SetFullScale+0x78>)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	4013      	ands	r3, r2
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d11d      	bne.n	8003720 <CUSTOM_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 80036e4:	4a13      	ldr	r2, [pc, #76]	@ (8003734 <CUSTOM_MOTION_SENSOR_SetFullScale+0x7c>)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80036ec:	4812      	ldr	r0, [pc, #72]	@ (8003738 <CUSTOM_MOTION_SENSOR_SetFullScale+0x80>)
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4613      	mov	r3, r2
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4413      	add	r3, r2
 80036f6:	440b      	add	r3, r1
 80036f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	490f      	ldr	r1, [pc, #60]	@ (800373c <CUSTOM_MOTION_SENSOR_SetFullScale+0x84>)
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4610      	mov	r0, r2
 800370a:	4798      	blx	r3
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <CUSTOM_MOTION_SENSOR_SetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003712:	f06f 0304 	mvn.w	r3, #4
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	e005      	b.n	8003726 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	e002      	b.n	8003726 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8003720:	f06f 0301 	mvn.w	r3, #1
 8003724:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8003726:	697b      	ldr	r3, [r7, #20]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	2000288c 	.word	0x2000288c
 8003734:	20000794 	.word	0x20000794
 8003738:	2000287c 	.word	0x2000287c
 800373c:	20002878 	.word	0x20002878

08003740 <LSM6DSV16X_0_Probe>:
 * @param  Functions Motion sensor functions. Could be :
 *         - MOTION_GYRO and/or MOTION_ACCELERO
 * @retval BSP status
 */
static int32_t LSM6DSV16X_0_Probe(uint32_t Functions)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b094      	sub	sp, #80	@ 0x50
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  LSM6DSV16X_IO_t            io_ctx;
  uint8_t                    id;
  static LSM6DSV16X_Object_t lsm6dsv16x_obj_0;
  LSM6DSV16X_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 8003748:	2300      	movs	r3, #0
 800374a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSV16X_SPI_4WIRES_BUS; /* SPI 4-Wires */
 800374c:	2301      	movs	r3, #1
 800374e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = 0x0;
 8003750:	2300      	movs	r3, #0
 8003752:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = CUSTOM_LSM6DSV16X_0_Init;
 8003756:	4b4a      	ldr	r3, [pc, #296]	@ (8003880 <LSM6DSV16X_0_Probe+0x140>)
 8003758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = CUSTOM_LSM6DSV16X_0_DeInit;
 800375a:	4b4a      	ldr	r3, [pc, #296]	@ (8003884 <LSM6DSV16X_0_Probe+0x144>)
 800375c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = CUSTOM_LSM6DSV16X_0_ReadReg;
 800375e:	4b4a      	ldr	r3, [pc, #296]	@ (8003888 <LSM6DSV16X_0_Probe+0x148>)
 8003760:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = CUSTOM_LSM6DSV16X_0_WriteReg;
 8003762:	4b4a      	ldr	r3, [pc, #296]	@ (800388c <LSM6DSV16X_0_Probe+0x14c>)
 8003764:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = BSP_GetTick;
 8003766:	4b4a      	ldr	r3, [pc, #296]	@ (8003890 <LSM6DSV16X_0_Probe+0x150>)
 8003768:	647b      	str	r3, [r7, #68]	@ 0x44

  if (LSM6DSV16X_RegisterBusIO(&lsm6dsv16x_obj_0, &io_ctx) != LSM6DSV16X_OK)
 800376a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800376e:	4619      	mov	r1, r3
 8003770:	4848      	ldr	r0, [pc, #288]	@ (8003894 <LSM6DSV16X_0_Probe+0x154>)
 8003772:	f004 fbb7 	bl	8007ee4 <LSM6DSV16X_RegisterBusIO>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <LSM6DSV16X_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800377c:	f06f 0306 	mvn.w	r3, #6
 8003780:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003782:	e077      	b.n	8003874 <LSM6DSV16X_0_Probe+0x134>
  }
  else if (LSM6DSV16X_ReadID(&lsm6dsv16x_obj_0, &id) != LSM6DSV16X_OK)
 8003784:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8003788:	4619      	mov	r1, r3
 800378a:	4842      	ldr	r0, [pc, #264]	@ (8003894 <LSM6DSV16X_0_Probe+0x154>)
 800378c:	f004 fcd0 	bl	8008130 <LSM6DSV16X_ReadID>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <LSM6DSV16X_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003796:	f06f 0306 	mvn.w	r3, #6
 800379a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800379c:	e06a      	b.n	8003874 <LSM6DSV16X_0_Probe+0x134>
  }
  else if (id != (uint8_t)LSM6DSV16X_ID)
 800379e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80037a2:	2b70      	cmp	r3, #112	@ 0x70
 80037a4:	d003      	beq.n	80037ae <LSM6DSV16X_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80037a6:	f06f 0306 	mvn.w	r3, #6
 80037aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037ac:	e062      	b.n	8003874 <LSM6DSV16X_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSV16X_GetCapabilities(&lsm6dsv16x_obj_0, &cap);
 80037ae:	f107 030c 	add.w	r3, r7, #12
 80037b2:	4619      	mov	r1, r3
 80037b4:	4837      	ldr	r0, [pc, #220]	@ (8003894 <LSM6DSV16X_0_Probe+0x154>)
 80037b6:	f004 fcd1 	bl	800815c <LSM6DSV16X_GetCapabilities>
    MotionCtx[CUSTOM_LSM6DSV16X_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80037ba:	7b7b      	ldrb	r3, [r7, #13]
 80037bc:	461a      	mov	r2, r3
 80037be:	7b3b      	ldrb	r3, [r7, #12]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	431a      	orrs	r2, r3
 80037c4:	7bbb      	ldrb	r3, [r7, #14]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4313      	orrs	r3, r2
 80037ca:	4a33      	ldr	r2, [pc, #204]	@ (8003898 <LSM6DSV16X_0_Probe+0x158>)
 80037cc:	6013      	str	r3, [r2, #0]

    MotionCompObj[CUSTOM_LSM6DSV16X_0] = &lsm6dsv16x_obj_0;
 80037ce:	4b33      	ldr	r3, [pc, #204]	@ (800389c <LSM6DSV16X_0_Probe+0x15c>)
 80037d0:	4a30      	ldr	r2, [pc, #192]	@ (8003894 <LSM6DSV16X_0_Probe+0x154>)
 80037d2:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[CUSTOM_LSM6DSV16X_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSV16X_COMMON_Driver;
 80037d4:	4b32      	ldr	r3, [pc, #200]	@ (80038a0 <LSM6DSV16X_0_Probe+0x160>)
 80037d6:	4a33      	ldr	r2, [pc, #204]	@ (80038a4 <LSM6DSV16X_0_Probe+0x164>)
 80037d8:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80037da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d11d      	bne.n	800381c <LSM6DSV16X_0_Probe+0xdc>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d018      	beq.n	800381c <LSM6DSV16X_0_Probe+0xdc>
 80037ea:	7b7b      	ldrb	r3, [r7, #13]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d115      	bne.n	800381c <LSM6DSV16X_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSV16X_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSV16X_GYRO_Driver;
 80037f0:	4b2d      	ldr	r3, [pc, #180]	@ (80038a8 <LSM6DSV16X_0_Probe+0x168>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4a2d      	ldr	r2, [pc, #180]	@ (80038ac <LSM6DSV16X_0_Probe+0x16c>)
 80037f6:	492e      	ldr	r1, [pc, #184]	@ (80038b0 <LSM6DSV16X_0_Probe+0x170>)
 80037f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSV16X_0]->Init(MotionCompObj[CUSTOM_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 80037fc:	4b28      	ldr	r3, [pc, #160]	@ (80038a0 <LSM6DSV16X_0_Probe+0x160>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a26      	ldr	r2, [pc, #152]	@ (800389c <LSM6DSV16X_0_Probe+0x15c>)
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	4610      	mov	r0, r2
 8003808:	4798      	blx	r3
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <LSM6DSV16X_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003810:	f06f 0304 	mvn.w	r3, #4
 8003814:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003816:	e001      	b.n	800381c <LSM6DSV16X_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003818:	2300      	movs	r3, #0
 800381a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800381c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d11d      	bne.n	800385e <LSM6DSV16X_0_Probe+0x11e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d018      	beq.n	800385e <LSM6DSV16X_0_Probe+0x11e>
 800382c:	7b3b      	ldrb	r3, [r7, #12]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d115      	bne.n	800385e <LSM6DSV16X_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSV16X_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSV16X_ACC_Driver;
 8003832:	4b1d      	ldr	r3, [pc, #116]	@ (80038a8 <LSM6DSV16X_0_Probe+0x168>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	4a1d      	ldr	r2, [pc, #116]	@ (80038ac <LSM6DSV16X_0_Probe+0x16c>)
 8003838:	491e      	ldr	r1, [pc, #120]	@ (80038b4 <LSM6DSV16X_0_Probe+0x174>)
 800383a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSV16X_0]->Init(MotionCompObj[CUSTOM_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800383e:	4b18      	ldr	r3, [pc, #96]	@ (80038a0 <LSM6DSV16X_0_Probe+0x160>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a15      	ldr	r2, [pc, #84]	@ (800389c <LSM6DSV16X_0_Probe+0x15c>)
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	4610      	mov	r0, r2
 800384a:	4798      	blx	r3
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <LSM6DSV16X_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003852:	f06f 0304 	mvn.w	r3, #4
 8003856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003858:	e001      	b.n	800385e <LSM6DSV16X_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800385a:	2300      	movs	r3, #0
 800385c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800385e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d107      	bne.n	8003874 <LSM6DSV16X_0_Probe+0x134>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <LSM6DSV16X_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800386e:	f06f 0304 	mvn.w	r3, #4
 8003872:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 8003874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8003876:	4618      	mov	r0, r3
 8003878:	3750      	adds	r7, #80	@ 0x50
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	080038b9 	.word	0x080038b9
 8003884:	080038dd 	.word	0x080038dd
 8003888:	08003971 	.word	0x08003971
 800388c:	08003901 	.word	0x08003901
 8003890:	08000f51 	.word	0x08000f51
 8003894:	20002890 	.word	0x20002890
 8003898:	2000288c 	.word	0x2000288c
 800389c:	20002878 	.word	0x20002878
 80038a0:	20002888 	.word	0x20002888
 80038a4:	20000814 	.word	0x20000814
 80038a8:	20000794 	.word	0x20000794
 80038ac:	2000287c 	.word	0x2000287c
 80038b0:	20000848 	.word	0x20000848
 80038b4:	20000824 	.word	0x20000824

080038b8 <CUSTOM_LSM6DSV16X_0_Init>:
/**
 * @brief  Initialize SPI bus for LSM6DSV16X
 * @retval BSP status
 */
static int32_t CUSTOM_LSM6DSV16X_0_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80038be:	f06f 0305 	mvn.w	r3, #5
 80038c2:	607b      	str	r3, [r7, #4]

  if(CUSTOM_LSM6DSV16X_0_SPI_Init() == BSP_ERROR_NONE)
 80038c4:	f7fd fab4 	bl	8000e30 <BSP_SPI2_Init>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <CUSTOM_LSM6DSV16X_0_Init+0x1a>
  {
    ret = BSP_ERROR_NONE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
  }

  return ret;
 80038d2:	687b      	ldr	r3, [r7, #4]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <CUSTOM_LSM6DSV16X_0_DeInit>:
/**
 * @brief  DeInitialize SPI bus for LSM6DSV16X
 * @retval BSP status
 */
static int32_t CUSTOM_LSM6DSV16X_0_DeInit(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80038e2:	f06f 0305 	mvn.w	r3, #5
 80038e6:	607b      	str	r3, [r7, #4]

  if(CUSTOM_LSM6DSV16X_0_SPI_DeInit() == BSP_ERROR_NONE)
 80038e8:	f7fd fad2 	bl	8000e90 <BSP_SPI2_DeInit>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <CUSTOM_LSM6DSV16X_0_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	607b      	str	r3, [r7, #4]
  }

  return ret;
 80038f6:	687b      	ldr	r3, [r7, #4]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <CUSTOM_LSM6DSV16X_0_WriteReg>:
 * @param  pdata the pointer to the data to be written
 * @param  len the length of the data to be written
 * @retval BSP status
 */
static int32_t CUSTOM_LSM6DSV16X_0_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60ba      	str	r2, [r7, #8]
 8003908:	461a      	mov	r2, r3
 800390a:	4603      	mov	r3, r0
 800390c:	81fb      	strh	r3, [r7, #14]
 800390e:	460b      	mov	r3, r1
 8003910:	81bb      	strh	r3, [r7, #12]
 8003912:	4613      	mov	r3, r2
 8003914:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800391a:	89bb      	ldrh	r3, [r7, #12]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSV16X_0_CS_PORT, CUSTOM_LSM6DSV16X_0_CS_PIN, GPIO_PIN_RESET);
 8003920:	2200      	movs	r2, #0
 8003922:	2120      	movs	r1, #32
 8003924:	4811      	ldr	r0, [pc, #68]	@ (800396c <CUSTOM_LSM6DSV16X_0_WriteReg+0x6c>)
 8003926:	f007 faef 	bl	800af08 <HAL_GPIO_WritePin>

  if (CUSTOM_LSM6DSV16X_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 800392a:	f107 0313 	add.w	r3, r7, #19
 800392e:	2101      	movs	r1, #1
 8003930:	4618      	mov	r0, r3
 8003932:	f7fd fad5 	bl	8000ee0 <BSP_SPI2_Send>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <CUSTOM_LSM6DSV16X_0_WriteReg+0x42>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800393c:	f06f 0305 	mvn.w	r3, #5
 8003940:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_LSM6DSV16X_0_SPI_Send(pdata, len) != BSP_ERROR_NONE)
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	4619      	mov	r1, r3
 8003946:	68b8      	ldr	r0, [r7, #8]
 8003948:	f7fd faca 	bl	8000ee0 <BSP_SPI2_Send>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <CUSTOM_LSM6DSV16X_0_WriteReg+0x58>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003952:	f06f 0305 	mvn.w	r3, #5
 8003956:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSV16X_0_CS_PORT, CUSTOM_LSM6DSV16X_0_CS_PIN, GPIO_PIN_SET);
 8003958:	2201      	movs	r2, #1
 800395a:	2120      	movs	r1, #32
 800395c:	4803      	ldr	r0, [pc, #12]	@ (800396c <CUSTOM_LSM6DSV16X_0_WriteReg+0x6c>)
 800395e:	f007 fad3 	bl	800af08 <HAL_GPIO_WritePin>

  return ret;
 8003962:	697b      	ldr	r3, [r7, #20]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	42022000 	.word	0x42022000

08003970 <CUSTOM_LSM6DSV16X_0_ReadReg>:
 * @param  pdata the pointer to the data to be read
 * @param  len the length of the data to be read
 * @retval BSP status
 */
static int32_t CUSTOM_LSM6DSV16X_0_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60ba      	str	r2, [r7, #8]
 8003978:	461a      	mov	r2, r3
 800397a:	4603      	mov	r3, r0
 800397c:	81fb      	strh	r3, [r7, #14]
 800397e:	460b      	mov	r3, r1
 8003980:	81bb      	strh	r3, [r7, #12]
 8003982:	4613      	mov	r3, r2
 8003984:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800398a:	89bb      	ldrh	r3, [r7, #12]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80;
 8003990:	7cfb      	ldrb	r3, [r7, #19]
 8003992:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003996:	b2db      	uxtb	r3, r3
 8003998:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSV16X_0_CS_PORT, CUSTOM_LSM6DSV16X_0_CS_PIN, GPIO_PIN_RESET);
 800399a:	2200      	movs	r2, #0
 800399c:	2120      	movs	r1, #32
 800399e:	4812      	ldr	r0, [pc, #72]	@ (80039e8 <CUSTOM_LSM6DSV16X_0_ReadReg+0x78>)
 80039a0:	f007 fab2 	bl	800af08 <HAL_GPIO_WritePin>

  if (CUSTOM_LSM6DSV16X_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 80039a4:	f107 0313 	add.w	r3, r7, #19
 80039a8:	2101      	movs	r1, #1
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fd fa98 	bl	8000ee0 <BSP_SPI2_Send>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <CUSTOM_LSM6DSV16X_0_ReadReg+0x4c>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80039b6:	f06f 0305 	mvn.w	r3, #5
 80039ba:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_LSM6DSV16X_0_SPI_Recv(pdata, len) != BSP_ERROR_NONE)
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	4619      	mov	r1, r3
 80039c0:	68b8      	ldr	r0, [r7, #8]
 80039c2:	f7fd faa9 	bl	8000f18 <BSP_SPI2_Recv>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <CUSTOM_LSM6DSV16X_0_ReadReg+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80039cc:	f06f 0305 	mvn.w	r3, #5
 80039d0:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSV16X_0_CS_PORT, CUSTOM_LSM6DSV16X_0_CS_PIN, GPIO_PIN_SET);
 80039d2:	2201      	movs	r2, #1
 80039d4:	2120      	movs	r1, #32
 80039d6:	4804      	ldr	r0, [pc, #16]	@ (80039e8 <CUSTOM_LSM6DSV16X_0_ReadReg+0x78>)
 80039d8:	f007 fa96 	bl	800af08 <HAL_GPIO_WritePin>

  return ret;
 80039dc:	697b      	ldr	r3, [r7, #20]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	42022000 	.word	0x42022000

080039ec <CUSTOM_MOTION_SENSOR_Read_Register>:
 * @param  Reg address to be read
 * @param  Data pointer where the value is written to
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Read_Register(uint32_t Instance, uint8_t Reg, uint8_t *Data)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	460b      	mov	r3, r1
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  switch (Instance)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d112      	bne.n	8003a26 <CUSTOM_MOTION_SENSOR_Read_Register+0x3a>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case CUSTOM_LSM6DSV16X_0:
      if (LSM6DSV16X_Read_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 8003a00:	4a0d      	ldr	r2, [pc, #52]	@ (8003a38 <CUSTOM_MOTION_SENSOR_Read_Register+0x4c>)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a08:	7af9      	ldrb	r1, [r7, #11]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f005 fa2e 	bl	8008e6e <LSM6DSV16X_Read_Reg>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <CUSTOM_MOTION_SENSOR_Read_Register+0x34>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003a18:	f06f 0304 	mvn.w	r3, #4
 8003a1c:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8003a1e:	e006      	b.n	8003a2e <CUSTOM_MOTION_SENSOR_Read_Register+0x42>
        ret = BSP_ERROR_NONE;
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
      break;
 8003a24:	e003      	b.n	8003a2e <CUSTOM_MOTION_SENSOR_Read_Register+0x42>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8003a26:	f06f 0301 	mvn.w	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
      break;
 8003a2c:	bf00      	nop
  }

  return ret;
 8003a2e:	697b      	ldr	r3, [r7, #20]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20002878 	.word	0x20002878

08003a3c <CUSTOM_MOTION_SENSOR_Write_Register>:
 * @param  Reg address to be read
 * @param  Data value to be written
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Write_Register(uint32_t Instance, uint8_t Reg, uint8_t Data)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	70fb      	strb	r3, [r7, #3]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	70bb      	strb	r3, [r7, #2]
  int32_t ret;

  switch (Instance)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d112      	bne.n	8003a78 <CUSTOM_MOTION_SENSOR_Write_Register+0x3c>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case CUSTOM_LSM6DSV16X_0:
      if (LSM6DSV16X_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 8003a52:	4a0e      	ldr	r2, [pc, #56]	@ (8003a8c <CUSTOM_MOTION_SENSOR_Write_Register+0x50>)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5a:	78ba      	ldrb	r2, [r7, #2]
 8003a5c:	78f9      	ldrb	r1, [r7, #3]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f005 fa1f 	bl	8008ea2 <LSM6DSV16X_Write_Reg>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <CUSTOM_MOTION_SENSOR_Write_Register+0x36>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003a6a:	f06f 0304 	mvn.w	r3, #4
 8003a6e:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8003a70:	e006      	b.n	8003a80 <CUSTOM_MOTION_SENSOR_Write_Register+0x44>
        ret = BSP_ERROR_NONE;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
      break;
 8003a76:	e003      	b.n	8003a80 <CUSTOM_MOTION_SENSOR_Write_Register+0x44>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8003a78:	f06f 0301 	mvn.w	r3, #1
 8003a7c:	60fb      	str	r3, [r7, #12]
      break;
 8003a7e:	bf00      	nop
  }

  return ret;
 8003a80:	68fb      	ldr	r3, [r7, #12]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20002878 	.word	0x20002878

08003a90 <MX_X_CUBE_VESPUCCI_Init>:
static void SystemPower_Config(void);

/*
 * Initialization (sensor, pre-processing pipeline, AI-processing pipeline).
 */
int32_t MX_X_CUBE_VESPUCCI_Init(void) {
 8003a90:	b5b0      	push	{r4, r5, r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
	int32_t ret = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	607b      	str	r3, [r7, #4]

	// Configure the System Power.
	SystemPower_Config();
 8003a9a:	f000 f971 	bl	8003d80 <SystemPower_Config>

	// Inizializzazione del timer hardware.
    HAL_TIM_Base_Start_IT(&htim1);
 8003a9e:	486c      	ldr	r0, [pc, #432]	@ (8003c50 <MX_X_CUBE_VESPUCCI_Init+0x1c0>)
 8003aa0:	f00b ff0e 	bl	800f8c0 <HAL_TIM_Base_Start_IT>

	// Initializing USB.
	MX_USB_Device_Init();
 8003aa4:	f7fe f99e 	bl	8001de4 <MX_USB_Device_Init>

	// USB initialization timeout (required to stabilize the USB peripheral voltage and to open the terminal).
	HAL_Delay(500);
 8003aa8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003aac:	f7fe fe60 	bl	8002770 <HAL_Delay>

	// Use case default selection (MCU, MLC, ISPU).
	default_ai = MLC;
 8003ab0:	4b68      	ldr	r3, [pc, #416]	@ (8003c54 <MX_X_CUBE_VESPUCCI_Init+0x1c4>)
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	701a      	strb	r2, [r3, #0]

	// Setting Firmware ID
	PnPLSetFWID(default_ai == MCU ? 0x01 : (default_ai == MLC ? 0X02 : 0X03));
 8003ab6:	4b67      	ldr	r3, [pc, #412]	@ (8003c54 <MX_X_CUBE_VESPUCCI_Init+0x1c4>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d007      	beq.n	8003ace <MX_X_CUBE_VESPUCCI_Init+0x3e>
 8003abe:	4b65      	ldr	r3, [pc, #404]	@ (8003c54 <MX_X_CUBE_VESPUCCI_Init+0x1c4>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <MX_X_CUBE_VESPUCCI_Init+0x3a>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e002      	b.n	8003ad0 <MX_X_CUBE_VESPUCCI_Init+0x40>
 8003aca:	2303      	movs	r3, #3
 8003acc:	e000      	b.n	8003ad0 <MX_X_CUBE_VESPUCCI_Init+0x40>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f00d ffff 	bl	8011ad4 <PnPLSetFWID>

	// Initializing sensor.
	ispu_mounted = 0;
 8003ad6:	4b60      	ldr	r3, [pc, #384]	@ (8003c58 <MX_X_CUBE_VESPUCCI_Init+0x1c8>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
	ret = sensor_init();
 8003adc:	f000 fc26 	bl	800432c <sensor_init>
 8003ae0:	6078      	str	r0, [r7, #4]
	sensor_odr = compute_actual_odr();
 8003ae2:	f000 fee5 	bl	80048b0 <compute_actual_odr>
 8003ae6:	eef0 7a40 	vmov.f32	s15, s0
 8003aea:	4b5c      	ldr	r3, [pc, #368]	@ (8003c5c <MX_X_CUBE_VESPUCCI_Init+0x1cc>)
 8003aec:	edc3 7a00 	vstr	s15, [r3]

	// Initializing pre-processing.
	pre_processing_init_mcu(&pre_processing_data, sensor_odr);
 8003af0:	4b5a      	ldr	r3, [pc, #360]	@ (8003c5c <MX_X_CUBE_VESPUCCI_Init+0x1cc>)
 8003af2:	edd3 7a00 	vldr	s15, [r3]
 8003af6:	eeb0 0a67 	vmov.f32	s0, s15
 8003afa:	4859      	ldr	r0, [pc, #356]	@ (8003c60 <MX_X_CUBE_VESPUCCI_Init+0x1d0>)
 8003afc:	f002 fc72 	bl	80063e4 <pre_processing_init_mcu>

	// Initializing AI-processing.
	ai_init();
 8003b00:	f002 fbec 	bl	80062dc <ai_init>

	// Initializing PnPL.
	pnpl_init();
 8003b04:	f000 f962 	bl	8003dcc <pnpl_init>

	// Resetting and initializing buffers.
	memset((char *) command_buffer_static, 0, COMMAND_BUFFER_SIZE);
 8003b08:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4855      	ldr	r0, [pc, #340]	@ (8003c64 <MX_X_CUBE_VESPUCCI_Init+0x1d4>)
 8003b10:	f01a fd86 	bl	801e620 <memset>
	memset((char *) buffer_to_write, 0, PRINTED_BUFFER_SIZE);
 8003b14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4853      	ldr	r0, [pc, #332]	@ (8003c68 <MX_X_CUBE_VESPUCCI_Init+0x1d8>)
 8003b1c:	f01a fd80 	bl	801e620 <memset>
	command_buffer_ptr = &command_buffer_static[0];
 8003b20:	4b52      	ldr	r3, [pc, #328]	@ (8003c6c <MX_X_CUBE_VESPUCCI_Init+0x1dc>)
 8003b22:	4a50      	ldr	r2, [pc, #320]	@ (8003c64 <MX_X_CUBE_VESPUCCI_Init+0x1d4>)
 8003b24:	601a      	str	r2, [r3, #0]
	command_buffer_write_ptr = &command_buffer_static[0];
 8003b26:	4b52      	ldr	r3, [pc, #328]	@ (8003c70 <MX_X_CUBE_VESPUCCI_Init+0x1e0>)
 8003b28:	4a4e      	ldr	r2, [pc, #312]	@ (8003c64 <MX_X_CUBE_VESPUCCI_Init+0x1d4>)
 8003b2a:	601a      	str	r2, [r3, #0]
	command_buffer_size = 0;
 8003b2c:	4b51      	ldr	r3, [pc, #324]	@ (8003c74 <MX_X_CUBE_VESPUCCI_Init+0x1e4>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
	command_received = false;
 8003b32:	4b51      	ldr	r3, [pc, #324]	@ (8003c78 <MX_X_CUBE_VESPUCCI_Init+0x1e8>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
	mlc_register = 1;
 8003b38:	4b50      	ldr	r3, [pc, #320]	@ (8003c7c <MX_X_CUBE_VESPUCCI_Init+0x1ec>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]
	get_identity = 0;
 8003b3e:	4b50      	ldr	r3, [pc, #320]	@ (8003c80 <MX_X_CUBE_VESPUCCI_Init+0x1f0>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
	memset((char *) identity, 0, 1024);
 8003b44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b48:	2100      	movs	r1, #0
 8003b4a:	484e      	ldr	r0, [pc, #312]	@ (8003c84 <MX_X_CUBE_VESPUCCI_Init+0x1f4>)
 8003b4c:	f01a fd68 	bl	801e620 <memset>
	get_status = 0;
 8003b50:	4b4d      	ldr	r3, [pc, #308]	@ (8003c88 <MX_X_CUBE_VESPUCCI_Init+0x1f8>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]

	// Printing commands format.
	PRINT("COMMANDS\r\n"
 8003b56:	4844      	ldr	r0, [pc, #272]	@ (8003c68 <MX_X_CUBE_VESPUCCI_Init+0x1d8>)
 8003b58:	f7fc fb98 	bl	800028c <strlen>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	461a      	mov	r2, r3
 8003b60:	2100      	movs	r1, #0
 8003b62:	4841      	ldr	r0, [pc, #260]	@ (8003c68 <MX_X_CUBE_VESPUCCI_Init+0x1d8>)
 8003b64:	f01a fd5c 	bl	801e620 <memset>
 8003b68:	4a48      	ldr	r2, [pc, #288]	@ (8003c8c <MX_X_CUBE_VESPUCCI_Init+0x1fc>)
 8003b6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b6e:	483e      	ldr	r0, [pc, #248]	@ (8003c68 <MX_X_CUBE_VESPUCCI_Init+0x1d8>)
 8003b70:	f01a fc10 	bl	801e394 <sniprintf>
 8003b74:	4603      	mov	r3, r0
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	483a      	ldr	r0, [pc, #232]	@ (8003c68 <MX_X_CUBE_VESPUCCI_Init+0x1d8>)
 8003b80:	f7fe fa48 	bl	8002014 <CDC_Transmit_FS>
			"SWAP BANK: \r\n"
			"{\"controller*switch_bank\":\"\"}\r\n"
			"Terminate each command with CR+LF characters, you can set them within the client connected to the board.\r\n\r\n");

	// Copy the names of the original .ucf files
	strcpy(mlc_model_filename, "asset_tracking_mlc.ucf");
 8003b84:	4a42      	ldr	r2, [pc, #264]	@ (8003c90 <MX_X_CUBE_VESPUCCI_Init+0x200>)
 8003b86:	4b43      	ldr	r3, [pc, #268]	@ (8003c94 <MX_X_CUBE_VESPUCCI_Init+0x204>)
 8003b88:	4614      	mov	r4, r2
 8003b8a:	461d      	mov	r5, r3
 8003b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003b94:	6020      	str	r0, [r4, #0]
 8003b96:	3404      	adds	r4, #4
 8003b98:	8021      	strh	r1, [r4, #0]
 8003b9a:	3402      	adds	r4, #2
 8003b9c:	0c0b      	lsrs	r3, r1, #16
 8003b9e:	7023      	strb	r3, [r4, #0]
	strcpy(ispu_model_filename, "pedometer_ispu.ucf");
 8003ba0:	4a3d      	ldr	r2, [pc, #244]	@ (8003c98 <MX_X_CUBE_VESPUCCI_Init+0x208>)
 8003ba2:	4b3e      	ldr	r3, [pc, #248]	@ (8003c9c <MX_X_CUBE_VESPUCCI_Init+0x20c>)
 8003ba4:	4614      	mov	r4, r2
 8003ba6:	461d      	mov	r5, r3
 8003ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bac:	682b      	ldr	r3, [r5, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	8022      	strh	r2, [r4, #0]
 8003bb2:	3402      	adds	r4, #2
 8003bb4:	0c1b      	lsrs	r3, r3, #16
 8003bb6:	7023      	strb	r3, [r4, #0]

	// Load the default ucf files.
	if (default_ai == MLC) {
 8003bb8:	4b26      	ldr	r3, [pc, #152]	@ (8003c54 <MX_X_CUBE_VESPUCCI_Init+0x1c4>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d105      	bne.n	8003bcc <MX_X_CUBE_VESPUCCI_Init+0x13c>
		// Acquiring the MLC configuration and load the registers.
		load_mlc_configuration((ucf_line_t*) &mlc_configuration, current_mlc_configuration_size);
 8003bc0:	4b37      	ldr	r3, [pc, #220]	@ (8003ca0 <MX_X_CUBE_VESPUCCI_Init+0x210>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4837      	ldr	r0, [pc, #220]	@ (8003ca4 <MX_X_CUBE_VESPUCCI_Init+0x214>)
 8003bc8:	f000 fab0 	bl	800412c <load_mlc_configuration>
	}

	if (default_ai == ISPU && ret == BSP_ERROR_NONE) {
 8003bcc:	4b21      	ldr	r3, [pc, #132]	@ (8003c54 <MX_X_CUBE_VESPUCCI_Init+0x1c4>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d108      	bne.n	8003be6 <MX_X_CUBE_VESPUCCI_Init+0x156>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d105      	bne.n	8003be6 <MX_X_CUBE_VESPUCCI_Init+0x156>
		// Acquiring the ISPU configuration and load the registers.
		load_ispu_configuration((ucf_line_ext_t*)&ispu_configuration, current_ispu_configuration_size);
 8003bda:	4b33      	ldr	r3, [pc, #204]	@ (8003ca8 <MX_X_CUBE_VESPUCCI_Init+0x218>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4619      	mov	r1, r3
 8003be0:	4832      	ldr	r0, [pc, #200]	@ (8003cac <MX_X_CUBE_VESPUCCI_Init+0x21c>)
 8003be2:	f000 fb49 	bl	8004278 <load_ispu_configuration>
	}

	// Start sending the telemetries.
	if (mcu_inference == 0 && default_ai == MCU) {
 8003be6:	4b32      	ldr	r3, [pc, #200]	@ (8003cb0 <MX_X_CUBE_VESPUCCI_Init+0x220>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d111      	bne.n	8003c12 <MX_X_CUBE_VESPUCCI_Init+0x182>
 8003bee:	4b19      	ldr	r3, [pc, #100]	@ (8003c54 <MX_X_CUBE_VESPUCCI_Init+0x1c4>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10d      	bne.n	8003c12 <MX_X_CUBE_VESPUCCI_Init+0x182>
		// Set the FIFO to Continuous/Stream Mode.
		CHECK_BSP_FUNCTION(MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(SENSOR_0,  LSM6DSV16X_STREAM_MODE));
 8003bf6:	2106      	movs	r1, #6
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	f7ff fb03 	bl	8003204 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <MX_X_CUBE_VESPUCCI_Init+0x17a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	e01e      	b.n	8003c48 <MX_X_CUBE_VESPUCCI_Init+0x1b8>
		// Starting MCU inference.
		mcu_inference = 1;
 8003c0a:	4b29      	ldr	r3, [pc, #164]	@ (8003cb0 <MX_X_CUBE_VESPUCCI_Init+0x220>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	e019      	b.n	8003c46 <MX_X_CUBE_VESPUCCI_Init+0x1b6>
	} else if (mlc_inference == 0 && default_ai == MLC) {
 8003c12:	4b28      	ldr	r3, [pc, #160]	@ (8003cb4 <MX_X_CUBE_VESPUCCI_Init+0x224>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d107      	bne.n	8003c2a <MX_X_CUBE_VESPUCCI_Init+0x19a>
 8003c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003c54 <MX_X_CUBE_VESPUCCI_Init+0x1c4>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d103      	bne.n	8003c2a <MX_X_CUBE_VESPUCCI_Init+0x19a>
		// Starting MLC inference.
		mlc_inference = 1;
 8003c22:	4b24      	ldr	r3, [pc, #144]	@ (8003cb4 <MX_X_CUBE_VESPUCCI_Init+0x224>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e00d      	b.n	8003c46 <MX_X_CUBE_VESPUCCI_Init+0x1b6>
	} else if (ispu_inference == 0 && default_ai == ISPU && ret == BSP_ERROR_NONE) {
 8003c2a:	4b23      	ldr	r3, [pc, #140]	@ (8003cb8 <MX_X_CUBE_VESPUCCI_Init+0x228>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <MX_X_CUBE_VESPUCCI_Init+0x1b6>
 8003c32:	4b08      	ldr	r3, [pc, #32]	@ (8003c54 <MX_X_CUBE_VESPUCCI_Init+0x1c4>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d105      	bne.n	8003c46 <MX_X_CUBE_VESPUCCI_Init+0x1b6>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d102      	bne.n	8003c46 <MX_X_CUBE_VESPUCCI_Init+0x1b6>
		// Starting ISPU inference.
		ispu_inference = 1;
 8003c40:	4b1d      	ldr	r3, [pc, #116]	@ (8003cb8 <MX_X_CUBE_VESPUCCI_Init+0x228>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	601a      	str	r2, [r3, #0]
	}

	return BSP_ERROR_NONE;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c50:	20000d08 	.word	0x20000d08
 8003c54:	20044bc8 	.word	0x20044bc8
 8003c58:	200453e4 	.word	0x200453e4
 8003c5c:	200028d0 	.word	0x200028d0
 8003c60:	200028d4 	.word	0x200028d4
 8003c64:	20002b50 	.word	0x20002b50
 8003c68:	20042bc8 	.word	0x20042bc8
 8003c6c:	20042b50 	.word	0x20042b50
 8003c70:	20042b54 	.word	0x20042b54
 8003c74:	20042bc0 	.word	0x20042bc0
 8003c78:	20042bc4 	.word	0x20042bc4
 8003c7c:	20044bdc 	.word	0x20044bdc
 8003c80:	20044bd8 	.word	0x20044bd8
 8003c84:	20044be0 	.word	0x20044be0
 8003c88:	200453e0 	.word	0x200453e0
 8003c8c:	080225b4 	.word	0x080225b4
 8003c90:	20042b58 	.word	0x20042b58
 8003c94:	0802286c 	.word	0x0802286c
 8003c98:	20042b8c 	.word	0x20042b8c
 8003c9c:	08022884 	.word	0x08022884
 8003ca0:	200007ac 	.word	0x200007ac
 8003ca4:	080362ec 	.word	0x080362ec
 8003ca8:	200007b4 	.word	0x200007b4
 8003cac:	0802d7a8 	.word	0x0802d7a8
 8003cb0:	20044bcc 	.word	0x20044bcc
 8003cb4:	20044bd0 	.word	0x20044bd0
 8003cb8:	20044bd4 	.word	0x20044bd4

08003cbc <MX_X_CUBE_VESPUCCI_Process>:

/*
 * Processing data (reading commands from USB and sending telemetries to USB).
 */
int32_t MX_X_CUBE_VESPUCCI_Process(void) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0

	// Executing command.
	if (command_received) {                                                     // Check if command is received.
 8003cc0:	4b25      	ldr	r3, [pc, #148]	@ (8003d58 <MX_X_CUBE_VESPUCCI_Process+0x9c>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01e      	beq.n	8003d06 <MX_X_CUBE_VESPUCCI_Process+0x4a>
		command_received = false;
 8003cc8:	4b23      	ldr	r3, [pc, #140]	@ (8003d58 <MX_X_CUBE_VESPUCCI_Process+0x9c>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	701a      	strb	r2, [r3, #0]
		pnpl_process(command_buffer_ptr);                                       // Serve the command received.
 8003cce:	4b23      	ldr	r3, [pc, #140]	@ (8003d5c <MX_X_CUBE_VESPUCCI_Process+0xa0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 f892 	bl	8003dfc <pnpl_process>
		// Resetting command buffer.
		command_buffer_size = command_buffer_write_ptr - command_buffer_ptr;    // Size of the last command received.
 8003cd8:	4b21      	ldr	r3, [pc, #132]	@ (8003d60 <MX_X_CUBE_VESPUCCI_Process+0xa4>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8003d5c <MX_X_CUBE_VESPUCCI_Process+0xa0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8003d64 <MX_X_CUBE_VESPUCCI_Process+0xa8>)
 8003ce6:	601a      	str	r2, [r3, #0]
		memset((char *) command_buffer_ptr, 0, command_buffer_size);            // Resetting the command buffer.
 8003ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8003d5c <MX_X_CUBE_VESPUCCI_Process+0xa0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1d      	ldr	r2, [pc, #116]	@ (8003d64 <MX_X_CUBE_VESPUCCI_Process+0xa8>)
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f01a fc94 	bl	801e620 <memset>
		command_buffer_write_ptr = command_buffer_ptr;                          // Move the write pointer to point to the initial position of the command buffer.
 8003cf8:	4b18      	ldr	r3, [pc, #96]	@ (8003d5c <MX_X_CUBE_VESPUCCI_Process+0xa0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a18      	ldr	r2, [pc, #96]	@ (8003d60 <MX_X_CUBE_VESPUCCI_Process+0xa4>)
 8003cfe:	6013      	str	r3, [r2, #0]
		command_buffer_size = 0;
 8003d00:	4b18      	ldr	r3, [pc, #96]	@ (8003d64 <MX_X_CUBE_VESPUCCI_Process+0xa8>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
	}

	// Sending MCU telemetries.
	if (mcu_inference == 1) {
 8003d06:	4b18      	ldr	r3, [pc, #96]	@ (8003d68 <MX_X_CUBE_VESPUCCI_Process+0xac>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <MX_X_CUBE_VESPUCCI_Process+0x56>
		send_telemetries_mcu();
 8003d0e:	f000 f897 	bl	8003e40 <send_telemetries_mcu>
	}

	// Sending MLC telemetries.
	if (mlc_inference == 1) {
 8003d12:	4b16      	ldr	r3, [pc, #88]	@ (8003d6c <MX_X_CUBE_VESPUCCI_Process+0xb0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <MX_X_CUBE_VESPUCCI_Process+0x62>
		send_telemetries_mlc();
 8003d1a:	f000 f9ab 	bl	8004074 <send_telemetries_mlc>
	}

	// Sending ISPU telemetries.
	if (ispu_inference == 1) {
 8003d1e:	4b14      	ldr	r3, [pc, #80]	@ (8003d70 <MX_X_CUBE_VESPUCCI_Process+0xb4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <MX_X_CUBE_VESPUCCI_Process+0x6e>
		send_telemetries_ispu();
 8003d26:	f000 fa51 	bl	80041cc <send_telemetries_ispu>
	}

	if (get_identity == 1){
 8003d2a:	4b12      	ldr	r3, [pc, #72]	@ (8003d74 <MX_X_CUBE_VESPUCCI_Process+0xb8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <MX_X_CUBE_VESPUCCI_Process+0x7a>
		send_identity();
 8003d32:	f000 fce9 	bl	8004708 <send_identity>
	}

	if (get_status == 1){
 8003d36:	4b10      	ldr	r3, [pc, #64]	@ (8003d78 <MX_X_CUBE_VESPUCCI_Process+0xbc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <MX_X_CUBE_VESPUCCI_Process+0x86>
		send_status();
 8003d3e:	f000 fd13 	bl	8004768 <send_status>
	}

	if(tim_interrupt){
 8003d42:	4b0e      	ldr	r3, [pc, #56]	@ (8003d7c <MX_X_CUBE_VESPUCCI_Process+0xc0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <MX_X_CUBE_VESPUCCI_Process+0x94>
		tim_interrupt = 0;
 8003d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d7c <MX_X_CUBE_VESPUCCI_Process+0xc0>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
	}

	return BSP_ERROR_NONE;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20042bc4 	.word	0x20042bc4
 8003d5c:	20042b50 	.word	0x20042b50
 8003d60:	20042b54 	.word	0x20042b54
 8003d64:	20042bc0 	.word	0x20042bc0
 8003d68:	20044bcc 	.word	0x20044bcc
 8003d6c:	20044bd0 	.word	0x20044bd0
 8003d70:	20044bd4 	.word	0x20044bd4
 8003d74:	20044bd8 	.word	0x20044bd8
 8003d78:	200453e0 	.word	0x200453e0
 8003d7c:	200453e8 	.word	0x200453e8

08003d80 <SystemPower_Config>:
/**
 * @brief Power Configuration
 * @retval None
 */
static void SystemPower_Config(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0

	HAL_PWREx_EnableVddIO2();
 8003d84:	f008 fd28 	bl	800c7d8 <HAL_PWREx_EnableVddIO2>
	/*
	 * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
	 */
	HAL_PWREx_DisableUCPDDeadBattery();
 8003d88:	f008 fd36 	bl	800c7f8 <HAL_PWREx_DisableUCPDDeadBattery>
	/* USER CODE BEGIN PWR */
	/* USER CODE END PWR */
}
 8003d8c:	bf00      	nop
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_GPIO_EXTI_Rising_Callback>:

/*
 * Callback to serve the interrupt from the FIFO of the sensor.
 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_11){
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003da0:	d103      	bne.n	8003daa <HAL_GPIO_EXTI_Rising_Callback+0x1a>
		mems_event_detected = 1;
 8003da2:	4b08      	ldr	r3, [pc, #32]	@ (8003dc4 <HAL_GPIO_EXTI_Rising_Callback+0x34>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	701a      	strb	r2, [r3, #0]
	} else if(GPIO_Pin == GPIO_PIN_4){
		mlc_event_detected = 1;
	}
}
 8003da8:	e005      	b.n	8003db6 <HAL_GPIO_EXTI_Rising_Callback+0x26>
	} else if(GPIO_Pin == GPIO_PIN_4){
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d102      	bne.n	8003db6 <HAL_GPIO_EXTI_Rising_Callback+0x26>
		mlc_event_detected = 1;
 8003db0:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <HAL_GPIO_EXTI_Rising_Callback+0x38>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	701a      	strb	r2, [r3, #0]
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	200028c8 	.word	0x200028c8
 8003dc8:	200028c9 	.word	0x200028c9

08003dcc <pnpl_init>:

/*
 * PnPL initialization function.
 */
void pnpl_init(){
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
	static IAi_Application_Mcu_t ai_app_mcu_obj;
	static IAi_Application_Mlc_t ai_app_mlc_obj;
	static IAi_Application_Ispu_t ai_app_ispu_obj;
	static IController_t controller_obj;

	PnPL_Components_Alloc();
 8003dd0:	f001 fa92 	bl	80052f8 <PnPL_Components_Alloc>
	PnPL_Components_Init(ai_app_mcu_obj, ai_app_mlc_obj, ai_app_ispu_obj, controller_obj);
 8003dd4:	4b05      	ldr	r3, [pc, #20]	@ (8003dec <pnpl_init+0x20>)
 8003dd6:	4a06      	ldr	r2, [pc, #24]	@ (8003df0 <pnpl_init+0x24>)
 8003dd8:	4906      	ldr	r1, [pc, #24]	@ (8003df4 <pnpl_init+0x28>)
 8003dda:	4807      	ldr	r0, [pc, #28]	@ (8003df8 <pnpl_init+0x2c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	6809      	ldr	r1, [r1, #0]
 8003de2:	6800      	ldr	r0, [r0, #0]
 8003de4:	f001 fabe 	bl	8005364 <PnPL_Components_Init>
}
 8003de8:	bf00      	nop
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	200453f8 	.word	0x200453f8
 8003df0:	200453f4 	.word	0x200453f4
 8003df4:	200453f0 	.word	0x200453f0
 8003df8:	200453ec 	.word	0x200453ec

08003dfc <pnpl_process>:

/*
 * PnPL parsing function.
 */
void pnpl_process(char *command) {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08e      	sub	sp, #56	@ 0x38
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	PnPLCommand_t PnPLCommand;
	char *SerializedJSON;
	uint32_t size;

	// Parsing load/start/stop commands.
	PnPLParseCommand(command, &PnPLCommand);
 8003e04:	f107 0314 	add.w	r3, r7, #20
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f00e f98c 	bl	8012128 <PnPLParseCommand>

    if(PnPLCommand.comm_type == PNPL_CMD_GET){
 8003e10:	7d3b      	ldrb	r3, [r7, #20]
 8003e12:	2b10      	cmp	r3, #16
 8003e14:	d110      	bne.n	8003e38 <pnpl_process+0x3c>
		PnPLSerializeResponse(&PnPLCommand, &SerializedJSON, &size,0);
 8003e16:	f107 020c 	add.w	r2, r7, #12
 8003e1a:	f107 0110 	add.w	r1, r7, #16
 8003e1e:	f107 0014 	add.w	r0, r7, #20
 8003e22:	2300      	movs	r3, #0
 8003e24:	f00e fa3c 	bl	80122a0 <PnPLSerializeResponse>
		identify_get_cmd(&PnPLCommand,&SerializedJSON);
 8003e28:	f107 0210 	add.w	r2, r7, #16
 8003e2c:	f107 0314 	add.w	r3, r7, #20
 8003e30:	4611      	mov	r1, r2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fcc8 	bl	80047c8 <identify_get_cmd>
	}

}
 8003e38:	bf00      	nop
 8003e3a:	3738      	adds	r7, #56	@ 0x38
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <send_telemetries_mcu>:

/*
 * Reading sensor, pre-processing raw-data, AI-processing, sending telemetries.
 */
int32_t send_telemetries_mcu(){
 8003e40:	b580      	push	{r7, lr}
 8003e42:	f6ad 6d38 	subw	sp, sp, #3640	@ 0xe38
 8003e46:	af02      	add	r7, sp, #8

	// Interrupt from FIFO
	if(mems_event_detected == 1){
 8003e48:	4b85      	ldr	r3, [pc, #532]	@ (8004060 <send_telemetries_mcu+0x220>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	f040 80fa 	bne.w	8004046 <send_telemetries_mcu+0x206>

		mems_event_detected = 0;
 8003e52:	4b83      	ldr	r3, [pc, #524]	@ (8004060 <send_telemetries_mcu+0x220>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	701a      	strb	r2, [r3, #0]
		//int32_t time_elapsed2 = 0;
		//int32_t post_FIFO_read;
		//int32_t pre_FIFO_read;

		// Processing variables.
		int32_t ret = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f8c7 3e28 	str.w	r3, [r7, #3624]	@ 0xe28
		int16_t acc_sample[3];                                                                          // Data bytes of sensor FIFO

		// pre_FIFO_read = BSP_GetTick();

		// Getting data from the sensor.
		for(int jj=0;jj<INPUT_BUFFER_SIZE;jj++){
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f8c7 3e2c 	str.w	r3, [r7, #3628]	@ 0xe2c
 8003e64:	e088      	b.n	8003f78 <send_telemetries_mcu+0x138>

			// Reading samples from the FIFO.
			CHECK_BSP_FUNCTION(MY_CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word(SENSOR_0, MOTION_ACCELERO, acc_sample));
 8003e66:	f607 6308 	addw	r3, r7, #3592	@ 0xe08
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	2102      	movs	r1, #2
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f7ff fa24 	bl	80032bc <MY_CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word>
 8003e74:	f8c7 0e28 	str.w	r0, [r7, #3624]	@ 0xe28
 8003e78:	f8d7 3e28 	ldr.w	r3, [r7, #3624]	@ 0xe28
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <send_telemetries_mcu+0x46>
 8003e80:	f8d7 3e28 	ldr.w	r3, [r7, #3624]	@ 0xe28
 8003e84:	e0e0      	b.n	8004048 <send_telemetries_mcu+0x208>

			// Conversion from [mg] to [g].
			acc_sample_array[jj].x = ((float)acc_sample[0])*sensor_acc_sensitivity*0.001;
 8003e86:	f9b7 3e08 	ldrsh.w	r3, [r7, #3592]	@ 0xe08
 8003e8a:	ee07 3a90 	vmov	s15, r3
 8003e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e92:	4b74      	ldr	r3, [pc, #464]	@ (8004064 <send_telemetries_mcu+0x224>)
 8003e94:	edd3 7a00 	vldr	s15, [r3]
 8003e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9c:	ee17 0a90 	vmov	r0, s15
 8003ea0:	f7fc fb60 	bl	8000564 <__aeabi_f2d>
 8003ea4:	a36c      	add	r3, pc, #432	@ (adr r3, 8004058 <send_telemetries_mcu+0x218>)
 8003ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eaa:	f7fc fbb3 	bl	8000614 <__aeabi_dmul>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	f7fc fea5 	bl	8000c04 <__aeabi_d2f>
 8003eba:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 8003ebe:	f5a3 6143 	sub.w	r1, r3, #3120	@ 0xc30
 8003ec2:	f8d7 2e2c 	ldr.w	r2, [r7, #3628]	@ 0xe2c
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	6018      	str	r0, [r3, #0]
			acc_sample_array[jj].y = ((float)acc_sample[1])*sensor_acc_sensitivity*0.001;
 8003ed2:	f9b7 3e0a 	ldrsh.w	r3, [r7, #3594]	@ 0xe0a
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ede:	4b61      	ldr	r3, [pc, #388]	@ (8004064 <send_telemetries_mcu+0x224>)
 8003ee0:	edd3 7a00 	vldr	s15, [r3]
 8003ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee8:	ee17 0a90 	vmov	r0, s15
 8003eec:	f7fc fb3a 	bl	8000564 <__aeabi_f2d>
 8003ef0:	a359      	add	r3, pc, #356	@ (adr r3, 8004058 <send_telemetries_mcu+0x218>)
 8003ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef6:	f7fc fb8d 	bl	8000614 <__aeabi_dmul>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4610      	mov	r0, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	f7fc fe7f 	bl	8000c04 <__aeabi_d2f>
 8003f06:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 8003f0a:	f5a3 6143 	sub.w	r1, r3, #3120	@ 0xc30
 8003f0e:	f8d7 2e2c 	ldr.w	r2, [r7, #3628]	@ 0xe2c
 8003f12:	4613      	mov	r3, r2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	6018      	str	r0, [r3, #0]
			acc_sample_array[jj].z = ((float)acc_sample[2])*sensor_acc_sensitivity*0.001;
 8003f20:	f9b7 3e0c 	ldrsh.w	r3, [r7, #3596]	@ 0xe0c
 8003f24:	ee07 3a90 	vmov	s15, r3
 8003f28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f2c:	4b4d      	ldr	r3, [pc, #308]	@ (8004064 <send_telemetries_mcu+0x224>)
 8003f2e:	edd3 7a00 	vldr	s15, [r3]
 8003f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f36:	ee17 0a90 	vmov	r0, s15
 8003f3a:	f7fc fb13 	bl	8000564 <__aeabi_f2d>
 8003f3e:	a346      	add	r3, pc, #280	@ (adr r3, 8004058 <send_telemetries_mcu+0x218>)
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	f7fc fb66 	bl	8000614 <__aeabi_dmul>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f7fc fe58 	bl	8000c04 <__aeabi_d2f>
 8003f54:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 8003f58:	f5a3 6143 	sub.w	r1, r3, #3120	@ 0xc30
 8003f5c:	f8d7 2e2c 	ldr.w	r2, [r7, #3628]	@ 0xe2c
 8003f60:	4613      	mov	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	6018      	str	r0, [r3, #0]
		for(int jj=0;jj<INPUT_BUFFER_SIZE;jj++){
 8003f6e:	f8d7 3e2c 	ldr.w	r3, [r7, #3628]	@ 0xe2c
 8003f72:	3301      	adds	r3, #1
 8003f74:	f8c7 3e2c 	str.w	r3, [r7, #3628]	@ 0xe2c
 8003f78:	f8d7 3e2c 	ldr.w	r3, [r7, #3628]	@ 0xe2c
 8003f7c:	2bff      	cmp	r3, #255	@ 0xff
 8003f7e:	f77f af72 	ble.w	8003e66 <send_telemetries_mcu+0x26>
		}

		// Pre-processing.
		pre_processing_process_mcu(acc_sample_array, INPUT_BUFFER_SIZE, pre_processing_output_array, AI_NETWORK_IN_1_SIZE, &pre_processing_data);
 8003f82:	463a      	mov	r2, r7
 8003f84:	f507 7000 	add.w	r0, r7, #512	@ 0x200
 8003f88:	4b37      	ldr	r3, [pc, #220]	@ (8004068 <send_telemetries_mcu+0x228>)
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	2380      	movs	r3, #128	@ 0x80
 8003f8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f92:	f002 fa7f 	bl	8006494 <pre_processing_process_mcu>

		// AI-processing.
		aiProcess(pre_processing_output_array, ai_output_array);
 8003f96:	f507 6261 	add.w	r2, r7, #3600	@ 0xe10
 8003f9a:	463b      	mov	r3, r7
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f002 f9c8 	bl	8006334 <aiProcess>

		// Getting neural network prediction.
		int label_id = (int) ai_output_array[0];
 8003fa4:	f507 6361 	add.w	r3, r7, #3600	@ 0xe10
 8003fa8:	edd3 7a00 	vldr	s15, [r3]
 8003fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fb0:	ee17 3a90 	vmov	r3, s15
 8003fb4:	f8c7 3e24 	str.w	r3, [r7, #3620]	@ 0xe24
		float accuracy = ai_output_array[1];
 8003fb8:	f607 6314 	addw	r3, r7, #3604	@ 0xe14
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f507 6262 	add.w	r2, r7, #3616	@ 0xe20
 8003fc2:	6013      	str	r3, [r2, #0]

		// Creating PnPL telemetry message.
		char *telemetry = NULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f8c7 3e04 	str.w	r3, [r7, #3588]	@ 0xe04
		uint32_t size = 100;
 8003fca:	2364      	movs	r3, #100	@ 0x64
 8003fcc:	f8c7 3e00 	str.w	r3, [r7, #3584]	@ 0xe00
		ai_application_mcu_create_telemetry(label_id, accuracy, &telemetry, &size);
 8003fd0:	f507 6260 	add.w	r2, r7, #3584	@ 0xe00
 8003fd4:	f607 6304 	addw	r3, r7, #3588	@ 0xe04
 8003fd8:	4619      	mov	r1, r3
 8003fda:	f507 6362 	add.w	r3, r7, #3616	@ 0xe20
 8003fde:	ed93 0a00 	vldr	s0, [r3]
 8003fe2:	f8d7 0e24 	ldr.w	r0, [r7, #3620]	@ 0xe24
 8003fe6:	f000 fdbd 	bl	8004b64 <ai_application_mcu_create_telemetry>

		// Checking null pointer exception.
		if(telemetry){
 8003fea:	f8d7 3e04 	ldr.w	r3, [r7, #3588]	@ 0xe04
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d029      	beq.n	8004046 <send_telemetries_mcu+0x206>
			// Appending the new line character to the telemetry message.
			char *ch = "\r\n";
 8003ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800406c <send_telemetries_mcu+0x22c>)
 8003ff4:	f8c7 3e1c 	str.w	r3, [r7, #3612]	@ 0xe1c
			strcat(telemetry, ch);
 8003ff8:	f8d7 3e04 	ldr.w	r3, [r7, #3588]	@ 0xe04
 8003ffc:	f8d7 1e1c 	ldr.w	r1, [r7, #3612]	@ 0xe1c
 8004000:	4618      	mov	r0, r3
 8004002:	f01a fb15 	bl	801e630 <strcat>

			// Printing telemetry message.
			PRINT(telemetry);
 8004006:	481a      	ldr	r0, [pc, #104]	@ (8004070 <send_telemetries_mcu+0x230>)
 8004008:	f7fc f940 	bl	800028c <strlen>
 800400c:	4603      	mov	r3, r0
 800400e:	461a      	mov	r2, r3
 8004010:	2100      	movs	r1, #0
 8004012:	4817      	ldr	r0, [pc, #92]	@ (8004070 <send_telemetries_mcu+0x230>)
 8004014:	f01a fb04 	bl	801e620 <memset>
 8004018:	f8d7 3e04 	ldr.w	r3, [r7, #3588]	@ 0xe04
 800401c:	461a      	mov	r2, r3
 800401e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004022:	4813      	ldr	r0, [pc, #76]	@ (8004070 <send_telemetries_mcu+0x230>)
 8004024:	f01a f9b6 	bl	801e394 <sniprintf>
 8004028:	4603      	mov	r3, r0
 800402a:	f8c7 3e18 	str.w	r3, [r7, #3608]	@ 0xe18
 800402e:	f8d7 3e18 	ldr.w	r3, [r7, #3608]	@ 0xe18
 8004032:	b29b      	uxth	r3, r3
 8004034:	4619      	mov	r1, r3
 8004036:	480e      	ldr	r0, [pc, #56]	@ (8004070 <send_telemetries_mcu+0x230>)
 8004038:	f7fd ffec 	bl	8002014 <CDC_Transmit_FS>

			// Clearing telemetry message.
			json_free_serialized_string(telemetry);
 800403c:	f8d7 3e04 	ldr.w	r3, [r7, #3588]	@ 0xe04
 8004040:	4618      	mov	r0, r3
 8004042:	f012 f9eb 	bl	801641c <json_free_serialized_string>
		// Time measurement.
		// post_FIFO_read = BSP_GetTick();
		// time_elapsed = post_FIFO_read - pre_FIFO_read;
	}

	return BSP_ERROR_NONE;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	f507 6763 	add.w	r7, r7, #3632	@ 0xe30
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	f3af 8000 	nop.w
 8004058:	d2f1a9fc 	.word	0xd2f1a9fc
 800405c:	3f50624d 	.word	0x3f50624d
 8004060:	200028c8 	.word	0x200028c8
 8004064:	200028cc 	.word	0x200028cc
 8004068:	200028d4 	.word	0x200028d4
 800406c:	08022898 	.word	0x08022898
 8004070:	20042bc8 	.word	0x20042bc8

08004074 <send_telemetries_mlc>:

/*
 * Sending MLC register outputs.
 */
int32_t send_telemetries_mlc() {
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
	uint8_t mlc_output_reg[8] = {0};
 800407a:	2300      	movs	r3, #0
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]

	// Reading MLC output.
	read_mlc_output(mlc_output_reg);
 8004082:	f107 0308 	add.w	r3, r7, #8
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f872 	bl	8004170 <read_mlc_output>

	if(mlc_event_detected || tim_interrupt){
 800408c:	4b22      	ldr	r3, [pc, #136]	@ (8004118 <send_telemetries_mlc+0xa4>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d103      	bne.n	800409c <send_telemetries_mlc+0x28>
 8004094:	4b21      	ldr	r3, [pc, #132]	@ (800411c <send_telemetries_mlc+0xa8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d038      	beq.n	800410e <send_telemetries_mlc+0x9a>

        mlc_event_detected = 0;
 800409c:	4b1e      	ldr	r3, [pc, #120]	@ (8004118 <send_telemetries_mlc+0xa4>)
 800409e:	2200      	movs	r2, #0
 80040a0:	701a      	strb	r2, [r3, #0]
		// Creating PnPL telemetry message.
		char *telemetry = NULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	607b      	str	r3, [r7, #4]
		uint32_t size = 128;
 80040a6:	2380      	movs	r3, #128	@ 0x80
 80040a8:	603b      	str	r3, [r7, #0]
		ai_application_mlc_create_telemetry((int)mlc_output_reg[mlc_register], &telemetry, &size);
 80040aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004120 <send_telemetries_mlc+0xac>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3318      	adds	r3, #24
 80040b0:	443b      	add	r3, r7
 80040b2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80040b6:	4618      	mov	r0, r3
 80040b8:	463a      	mov	r2, r7
 80040ba:	1d3b      	adds	r3, r7, #4
 80040bc:	4619      	mov	r1, r3
 80040be:	f000 fe73 	bl	8004da8 <ai_application_mlc_create_telemetry>

		// Checking null pointer exception.
		if(telemetry)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d022      	beq.n	800410e <send_telemetries_mlc+0x9a>
		{
			// Appending the new line character to the telemetry message.
			char *ch = "\r\n";
 80040c8:	4b16      	ldr	r3, [pc, #88]	@ (8004124 <send_telemetries_mlc+0xb0>)
 80040ca:	617b      	str	r3, [r7, #20]
			strcat(telemetry, ch);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6979      	ldr	r1, [r7, #20]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f01a faad 	bl	801e630 <strcat>

			// Printing telemetry message if MLC output value is changed.
			PRINT(telemetry);
 80040d6:	4814      	ldr	r0, [pc, #80]	@ (8004128 <send_telemetries_mlc+0xb4>)
 80040d8:	f7fc f8d8 	bl	800028c <strlen>
 80040dc:	4603      	mov	r3, r0
 80040de:	461a      	mov	r2, r3
 80040e0:	2100      	movs	r1, #0
 80040e2:	4811      	ldr	r0, [pc, #68]	@ (8004128 <send_telemetries_mlc+0xb4>)
 80040e4:	f01a fa9c 	bl	801e620 <memset>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	461a      	mov	r2, r3
 80040ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80040f0:	480d      	ldr	r0, [pc, #52]	@ (8004128 <send_telemetries_mlc+0xb4>)
 80040f2:	f01a f94f 	bl	801e394 <sniprintf>
 80040f6:	4603      	mov	r3, r0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	4619      	mov	r1, r3
 8004100:	4809      	ldr	r0, [pc, #36]	@ (8004128 <send_telemetries_mlc+0xb4>)
 8004102:	f7fd ff87 	bl	8002014 <CDC_Transmit_FS>

			// Clearing telemetry message.
			json_free_serialized_string(telemetry);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4618      	mov	r0, r3
 800410a:	f012 f987 	bl	801641c <json_free_serialized_string>
		}
	}

	return BSP_ERROR_NONE;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	200028c9 	.word	0x200028c9
 800411c:	200453e8 	.word	0x200453e8
 8004120:	20044bdc 	.word	0x20044bdc
 8004124:	08022898 	.word	0x08022898
 8004128:	20042bc8 	.word	0x20042bc8

0800412c <load_mlc_configuration>:
}

/*
 * Programming the registers inside the MLC.
 */
void load_mlc_configuration(ucf_line_t* mlc_configuration, uint32_t ucf_number_of_lines) {
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
	// Iterating over each line in the configuration until NULL is reached.
	for (uint32_t i = 0; i < ucf_number_of_lines; i++) {
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e010      	b.n	800415e <load_mlc_configuration+0x32>
		CUSTOM_MOTION_SENSOR_Write_Register(SENSOR_0, mlc_configuration[i].address, mlc_configuration[i].data);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	4413      	add	r3, r2
 8004144:	7819      	ldrb	r1, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	785b      	ldrb	r3, [r3, #1]
 8004150:	461a      	mov	r2, r3
 8004152:	2000      	movs	r0, #0
 8004154:	f7ff fc72 	bl	8003a3c <CUSTOM_MOTION_SENSOR_Write_Register>
	for (uint32_t i = 0; i < ucf_number_of_lines; i++) {
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	3301      	adds	r3, #1
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d3ea      	bcc.n	800413c <load_mlc_configuration+0x10>
	}
}
 8004166:	bf00      	nop
 8004168:	bf00      	nop
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <read_mlc_output>:

/*
 * Reading the content of the MLC output registers.
 */
void read_mlc_output(uint8_t* mlc_output_reg){
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]

	(void)CUSTOM_MOTION_SENSOR_Write_Register(SENSOR_0, SENSOR_0_FUNC_CFG_ACCESS, 0x80);
 8004178:	2280      	movs	r2, #128	@ 0x80
 800417a:	2101      	movs	r1, #1
 800417c:	2000      	movs	r0, #0
 800417e:	f7ff fc5d 	bl	8003a3c <CUSTOM_MOTION_SENSOR_Write_Register>
	(void)CUSTOM_MOTION_SENSOR_Read_Register(SENSOR_0, SENSOR_0_MLC1_SRC, &mlc_output_reg[1]);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3301      	adds	r3, #1
 8004186:	461a      	mov	r2, r3
 8004188:	2170      	movs	r1, #112	@ 0x70
 800418a:	2000      	movs	r0, #0
 800418c:	f7ff fc2e 	bl	80039ec <CUSTOM_MOTION_SENSOR_Read_Register>
	(void)CUSTOM_MOTION_SENSOR_Read_Register(SENSOR_0, SENSOR_0_MLC2_SRC, &mlc_output_reg[2]);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3302      	adds	r3, #2
 8004194:	461a      	mov	r2, r3
 8004196:	2171      	movs	r1, #113	@ 0x71
 8004198:	2000      	movs	r0, #0
 800419a:	f7ff fc27 	bl	80039ec <CUSTOM_MOTION_SENSOR_Read_Register>
	(void)CUSTOM_MOTION_SENSOR_Read_Register(SENSOR_0, SENSOR_0_MLC3_SRC, &mlc_output_reg[3]);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3303      	adds	r3, #3
 80041a2:	461a      	mov	r2, r3
 80041a4:	2172      	movs	r1, #114	@ 0x72
 80041a6:	2000      	movs	r0, #0
 80041a8:	f7ff fc20 	bl	80039ec <CUSTOM_MOTION_SENSOR_Read_Register>
	(void)CUSTOM_MOTION_SENSOR_Read_Register(SENSOR_0, SENSOR_0_MLC4_SRC, &mlc_output_reg[4]);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	461a      	mov	r2, r3
 80041b2:	2173      	movs	r1, #115	@ 0x73
 80041b4:	2000      	movs	r0, #0
 80041b6:	f7ff fc19 	bl	80039ec <CUSTOM_MOTION_SENSOR_Read_Register>
	(void)CUSTOM_MOTION_SENSOR_Write_Register(SENSOR_0, SENSOR_0_FUNC_CFG_ACCESS, 0x00);
 80041ba:	2200      	movs	r2, #0
 80041bc:	2101      	movs	r1, #1
 80041be:	2000      	movs	r0, #0
 80041c0:	f7ff fc3c 	bl	8003a3c <CUSTOM_MOTION_SENSOR_Write_Register>
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <send_telemetries_ispu>:

/*
 * Sending ISPU register outputs.
 */
int32_t send_telemetries_ispu() {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
	uint8_t ispu_output_reg[4] = {0};
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
	static uint8_t old_ispu_value;

	// Reading ISPU output.
	read_ispu_output(ispu_output_reg);
 80041d6:	f107 030c 	add.w	r3, r7, #12
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f88f 	bl	80042fe <read_ispu_output>

	if((*ispu_output_reg != old_ispu_value) || tim_interrupt){
 80041e0:	7b3a      	ldrb	r2, [r7, #12]
 80041e2:	4b21      	ldr	r3, [pc, #132]	@ (8004268 <send_telemetries_ispu+0x9c>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d103      	bne.n	80041f2 <send_telemetries_ispu+0x26>
 80041ea:	4b20      	ldr	r3, [pc, #128]	@ (800426c <send_telemetries_ispu+0xa0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d031      	beq.n	8004256 <send_telemetries_ispu+0x8a>

		// Creating PnPL telemetry message.
		char *telemetry = NULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]
		uint32_t size = 100;
 80041f6:	2364      	movs	r3, #100	@ 0x64
 80041f8:	607b      	str	r3, [r7, #4]
		ai_application_ispu_create_telemetry((int)*ispu_output_reg, &telemetry, &size);
 80041fa:	7b3b      	ldrb	r3, [r7, #12]
 80041fc:	4618      	mov	r0, r3
 80041fe:	1d3a      	adds	r2, r7, #4
 8004200:	f107 0308 	add.w	r3, r7, #8
 8004204:	4619      	mov	r1, r3
 8004206:	f000 feef 	bl	8004fe8 <ai_application_ispu_create_telemetry>

		// Checking null pointer exception.
		if(telemetry)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d022      	beq.n	8004256 <send_telemetries_ispu+0x8a>
		{
			// Appending the new line character to the telemetry message.
			char *ch = "\r\n";
 8004210:	4b17      	ldr	r3, [pc, #92]	@ (8004270 <send_telemetries_ispu+0xa4>)
 8004212:	617b      	str	r3, [r7, #20]
			strcat(telemetry, ch);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	6979      	ldr	r1, [r7, #20]
 8004218:	4618      	mov	r0, r3
 800421a:	f01a fa09 	bl	801e630 <strcat>

			// Printing telemetry message.
			PRINT(telemetry);
 800421e:	4815      	ldr	r0, [pc, #84]	@ (8004274 <send_telemetries_ispu+0xa8>)
 8004220:	f7fc f834 	bl	800028c <strlen>
 8004224:	4603      	mov	r3, r0
 8004226:	461a      	mov	r2, r3
 8004228:	2100      	movs	r1, #0
 800422a:	4812      	ldr	r0, [pc, #72]	@ (8004274 <send_telemetries_ispu+0xa8>)
 800422c:	f01a f9f8 	bl	801e620 <memset>
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	461a      	mov	r2, r3
 8004234:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004238:	480e      	ldr	r0, [pc, #56]	@ (8004274 <send_telemetries_ispu+0xa8>)
 800423a:	f01a f8ab 	bl	801e394 <sniprintf>
 800423e:	4603      	mov	r3, r0
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	b29b      	uxth	r3, r3
 8004246:	4619      	mov	r1, r3
 8004248:	480a      	ldr	r0, [pc, #40]	@ (8004274 <send_telemetries_ispu+0xa8>)
 800424a:	f7fd fee3 	bl	8002014 <CDC_Transmit_FS>

			// Clearing telemetry message.
			json_free_serialized_string(telemetry);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4618      	mov	r0, r3
 8004252:	f012 f8e3 	bl	801641c <json_free_serialized_string>
		}
	}
	// Updating old MLC value.
	old_ispu_value = *ispu_output_reg;
 8004256:	7b3a      	ldrb	r2, [r7, #12]
 8004258:	4b03      	ldr	r3, [pc, #12]	@ (8004268 <send_telemetries_ispu+0x9c>)
 800425a:	701a      	strb	r2, [r3, #0]

	return BSP_ERROR_NONE;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	200453fc 	.word	0x200453fc
 800426c:	200453e8 	.word	0x200453e8
 8004270:	08022898 	.word	0x08022898
 8004274:	20042bc8 	.word	0x20042bc8

08004278 <load_ispu_configuration>:

/*
 * Programming the registers inside the ISPU (used in the Init function, only at the beginning).
 */
void load_ispu_configuration(ucf_line_ext_t* ispu_configuration, uint32_t ucf_number_of_lines) {
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
	// Iterating over each line in the configuration until NULL is reached.
	for (uint32_t i = 0; i < ucf_number_of_lines; i++) {
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	e031      	b.n	80042ec <load_ispu_configuration+0x74>
		if (ispu_configuration[i].op == MEMS_UCF_OP_WRITE) {
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4613      	mov	r3, r2
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	4413      	add	r3, r2
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	4413      	add	r3, r2
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d112      	bne.n	80042c0 <load_ispu_configuration+0x48>
			CUSTOM_ISPU_MOTION_SENSOR_Write_Register(SENSOR_ISPU, ispu_configuration[i].address, ispu_configuration[i].data);
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4613      	mov	r3, r2
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	4413      	add	r3, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4413      	add	r3, r2
 80042a6:	7859      	ldrb	r1, [r3, #1]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4613      	mov	r3, r2
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	4413      	add	r3, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	4413      	add	r3, r2
 80042b4:	789b      	ldrb	r3, [r3, #2]
 80042b6:	461a      	mov	r2, r3
 80042b8:	2000      	movs	r0, #0
 80042ba:	f7fe ff07 	bl	80030cc <CUSTOM_ISPU_MOTION_SENSOR_Write_Register>
 80042be:	e012      	b.n	80042e6 <load_ispu_configuration+0x6e>
		} else if (ispu_configuration[i].op == MEMS_UCF_OP_DELAY) {
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4613      	mov	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4413      	add	r3, r2
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	4413      	add	r3, r2
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d109      	bne.n	80042e6 <load_ispu_configuration+0x6e>
			HAL_Delay(ispu_configuration[i].data);
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4613      	mov	r3, r2
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	4413      	add	r3, r2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	4413      	add	r3, r2
 80042de:	789b      	ldrb	r3, [r3, #2]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fe fa45 	bl	8002770 <HAL_Delay>
	for (uint32_t i = 0; i < ucf_number_of_lines; i++) {
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3301      	adds	r3, #1
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d3c9      	bcc.n	8004288 <load_ispu_configuration+0x10>
		}
	}
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <read_ispu_output>:

/*
 * Reading the content of the ISPU output registers.
 */
void read_ispu_output(uint8_t* ispu_output_reg) {
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
	(void)CUSTOM_ISPU_MOTION_SENSOR_Write_Register(SENSOR_ISPU, SENSOR_ISPU_FUNC_CFG_ACCESS, 0x80);
 8004306:	2280      	movs	r2, #128	@ 0x80
 8004308:	2101      	movs	r1, #1
 800430a:	2000      	movs	r0, #0
 800430c:	f7fe fede 	bl	80030cc <CUSTOM_ISPU_MOTION_SENSOR_Write_Register>
	(void)CUSTOM_ISPU_MOTION_SENSOR_Read_Register(SENSOR_ISPU, SENSOR_ISPU_DOUT , &ispu_output_reg[0]);
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	211c      	movs	r1, #28
 8004314:	2000      	movs	r0, #0
 8004316:	f7fe feb1 	bl	800307c <CUSTOM_ISPU_MOTION_SENSOR_Read_Register>
	(void)CUSTOM_ISPU_MOTION_SENSOR_Write_Register(SENSOR_ISPU, SENSOR_ISPU_FUNC_CFG_ACCESS, 0x00);
 800431a:	2200      	movs	r2, #0
 800431c:	2101      	movs	r1, #1
 800431e:	2000      	movs	r0, #0
 8004320:	f7fe fed4 	bl	80030cc <CUSTOM_ISPU_MOTION_SENSOR_Write_Register>
}
 8004324:	bf00      	nop
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <sensor_init>:

/*
 * Initialization (sensor).
 */
int32_t sensor_init() {
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
	int32_t ret = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	607b      	str	r3, [r7, #4]

	CHECK_BSP_FUNCTION(CUSTOM_MOTION_SENSOR_Init(SENSOR_0, MOTION_ACCELERO));                                       // Sensor initialization
 8004336:	2102      	movs	r1, #2
 8004338:	2000      	movs	r0, #0
 800433a:	f7ff f8ab 	bl	8003494 <CUSTOM_MOTION_SENSOR_Init>
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <sensor_init+0x1e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	e072      	b.n	8004430 <sensor_init+0x104>
	CHECK_BSP_FUNCTION(CUSTOM_MOTION_SENSOR_SetOutputDataRate(SENSOR_0, MOTION_ACCELERO, SENSOR_ODR));              // Sensor ODR
 800434a:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8004438 <sensor_init+0x10c>
 800434e:	2102      	movs	r1, #2
 8004350:	2000      	movs	r0, #0
 8004352:	f7ff f96b 	bl	800362c <CUSTOM_MOTION_SENSOR_SetOutputDataRate>
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <sensor_init+0x36>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	e066      	b.n	8004430 <sensor_init+0x104>
	CHECK_BSP_FUNCTION(MY_CUSTOM_MOTION_SENSOR_FIFO_Set_BDR(SENSOR_0, MOTION_ACCELERO, SENSOR_ODR));                // FIFO ODR (Note: all APIs with "MY" are implemented in the MEMS_integration.c file, not in the X-CUBE-MEMS1 pack)
 8004362:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8004438 <sensor_init+0x10c>
 8004366:	2102      	movs	r1, #2
 8004368:	2000      	movs	r0, #0
 800436a:	f7fe fed9 	bl	8003120 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_BDR>
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <sensor_init+0x4e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	e05a      	b.n	8004430 <sensor_init+0x104>
	CHECK_BSP_FUNCTION(CUSTOM_MOTION_SENSOR_SetFullScale(SENSOR_0, MOTION_ACCELERO, SENSOR_FS));                    // Sensor Full Scale
 800437a:	2208      	movs	r2, #8
 800437c:	2102      	movs	r1, #2
 800437e:	2000      	movs	r0, #0
 8004380:	f7ff f99a 	bl	80036b8 <CUSTOM_MOTION_SENSOR_SetFullScale>
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <sensor_init+0x64>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	e04f      	b.n	8004430 <sensor_init+0x104>

	if(default_ai==ISPU){
 8004390:	4b2a      	ldr	r3, [pc, #168]	@ (800443c <sensor_init+0x110>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d117      	bne.n	80043c8 <sensor_init+0x9c>
		// Initializing ISPU sensor.
		CHECK_BSP_FUNCTION(CUSTOM_ISPU_MOTION_SENSOR_Init(SENSOR_ISPU, MOTION_ACCELERO));                               // Sensor ISPU initialization
 8004398:	2102      	movs	r1, #2
 800439a:	2000      	movs	r0, #0
 800439c:	f7fe fc8e 	bl	8002cbc <CUSTOM_ISPU_MOTION_SENSOR_Init>
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <sensor_init+0x80>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	e041      	b.n	8004430 <sensor_init+0x104>
	    if(ret == BSP_ERROR_UNKNOWN_COMPONENT){
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f113 0f07 	cmn.w	r3, #7
 80043b2:	d103      	bne.n	80043bc <sensor_init+0x90>
	    	ispu_mounted = 0;
 80043b4:	4b22      	ldr	r3, [pc, #136]	@ (8004440 <sensor_init+0x114>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	e005      	b.n	80043c8 <sensor_init+0x9c>
	    }
	    else if(ret ==  BSP_ERROR_NONE){
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <sensor_init+0x9c>
	    	ispu_mounted = 1;
 80043c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004440 <sensor_init+0x114>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
	    }
	}

	// Getting sensor sensitivity.
	CHECK_BSP_FUNCTION(CUSTOM_MOTION_SENSOR_GetSensitivity(SENSOR_0, MOTION_ACCELERO, &sensor_acc_sensitivity));
 80043c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004444 <sensor_init+0x118>)
 80043ca:	2102      	movs	r1, #2
 80043cc:	2000      	movs	r0, #0
 80043ce:	f7ff f8e9 	bl	80035a4 <CUSTOM_MOTION_SENSOR_GetSensitivity>
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <sensor_init+0xb2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	e028      	b.n	8004430 <sensor_init+0x104>

	// Initializing sensor FIFO.
	// Sensor FIFO init.
	if (INPUT_BUFFER_SIZE == 256){
		CHECK_BSP_FUNCTION(MY_CUSTOM_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full(SENSOR_0, ENABLE));                      // Interrupt set at FIFO_FULL (all FIFO used)
 80043de:	2101      	movs	r1, #1
 80043e0:	2000      	movs	r0, #0
 80043e2:	f7fe fee7 	bl	80031b4 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full>
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <sensor_init+0xc6>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	e01e      	b.n	8004430 <sensor_init+0x104>
		CHECK_BSP_FUNCTION(MY_CUSTOM_MOTION_SENSOR_FIFO_Watermark_Set_INT2(SENSOR_0, DISABLE));
 80043f2:	2100      	movs	r1, #0
 80043f4:	2000      	movs	r0, #0
 80043f6:	f7fe fff3 	bl	80033e0 <MY_CUSTOM_MOTION_SENSOR_FIFO_Watermark_Set_INT2>
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <sensor_init+0xda>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	e014      	b.n	8004430 <sensor_init+0x104>
		CHECK_BSP_FUNCTION(MY_CUSTOM_MOTION_SENSOR_FIFO_Overrun_Set_INT2(SENSOR_0, ENABLE));
 8004406:	2101      	movs	r1, #1
 8004408:	2000      	movs	r0, #0
 800440a:	f7fe ff8f 	bl	800332c <MY_CUSTOM_MOTION_SENSOR_FIFO_Overrun_Set_INT2>
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <sensor_init+0xee>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	e00a      	b.n	8004430 <sensor_init+0x104>
		CHECK_BSP_FUNCTION(MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level(SENSOR_0, INPUT_BUFFER_SIZE));          // Set the Watermark level to INPUT_BUFFER_SIZE
		CHECK_BSP_FUNCTION(MY_CUSTOM_MOTION_SENSOR_FIFO_Watermark_Set_INT2(SENSOR_0, ENABLE));                      // Enable the Watermark Interrupt
		CHECK_BSP_FUNCTION(MY_CUSTOM_MOTION_SENSOR_FIFO_Overrun_Set_INT2(SENSOR_0, ENABLE));
		CHECK_BSP_FUNCTION(MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(SENSOR_0,  ENABLE));                        // Limit the FIFO depth to the Watermark level
	}
	CHECK_BSP_FUNCTION(MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(SENSOR_0,  SENSOR_0_BYPASS_MODE));                     // Set the FIFO to Bypass Mode
 800441a:	2100      	movs	r1, #0
 800441c:	2000      	movs	r0, #0
 800441e:	f7fe fef1 	bl	8003204 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <sensor_init+0x102>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	e000      	b.n	8004430 <sensor_init+0x104>

	return BSP_ERROR_NONE;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	44d04000 	.word	0x44d04000
 800443c:	20044bc8 	.word	0x20044bc8
 8004440:	200453e4 	.word	0x200453e4
 8004444:	200028cc 	.word	0x200028cc

08004448 <get_ucf_number_of_lines>:

/*
 * Extracting the number of lines from the .ucf file.
 */
uint32_t get_ucf_number_of_lines(int32_t size, const char *content) {
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
	uint32_t ucf_number_of_lines = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
	uint32_t i;

	for (i = 0; i < size-ucf_number_of_lines; i++) {
 8004456:	2300      	movs	r3, #0
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	e00b      	b.n	8004474 <get_ucf_number_of_lines+0x2c>
		if(content[i]=='\n'){
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4413      	add	r3, r2
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b0a      	cmp	r3, #10
 8004466:	d102      	bne.n	800446e <get_ucf_number_of_lines+0x26>
			ucf_number_of_lines++;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	3301      	adds	r3, #1
 800446c:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < size-ucf_number_of_lines; i++) {
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	3301      	adds	r3, #1
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	429a      	cmp	r2, r3
 800447e:	d3ed      	bcc.n	800445c <get_ucf_number_of_lines+0x14>
		}
	}

	return ucf_number_of_lines;
 8004480:	68fb      	ldr	r3, [r7, #12]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <fill_mlc_configuration>:
}*/

/*
 * Filling MLC configuration structure from UCF file.
 */
void fill_mlc_configuration(const char* content, ucf_line_t* mlc_configuration) {
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	@ 0x28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]

	const char* delimiters = "\n ";
 800449a:	4b2a      	ldr	r3, [pc, #168]	@ (8004544 <fill_mlc_configuration+0xb4>)
 800449c:	61fb      	str	r3, [r7, #28]
	char *token;
	uint32_t i = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	623b      	str	r3, [r7, #32]
	uint8_t addr, data;

	// Parsing UCF file.
	char *start = strstr(content, "Ac ");
 80044a2:	4929      	ldr	r1, [pc, #164]	@ (8004548 <fill_mlc_configuration+0xb8>)
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f01a f961 	bl	801e76c <strstr>
 80044aa:	61b8      	str	r0, [r7, #24]
	//char *input = (char *) calloc(strlen(start) + 1, sizeof(char));
	//strcpy(input, start);
	token = strtok(start, delimiters);
 80044ac:	69f9      	ldr	r1, [r7, #28]
 80044ae:	69b8      	ldr	r0, [r7, #24]
 80044b0:	f01a f900 	bl	801e6b4 <strtok>
 80044b4:	6278      	str	r0, [r7, #36]	@ 0x24
	while (token != NULL) {
 80044b6:	e03a      	b.n	800452e <fill_mlc_configuration+0x9e>
		// Extracting the Ac characters at the beginning of the token.
		char cmd_char[2];
		strcpy(cmd_char, token);
 80044b8:	f107 030c 	add.w	r3, r7, #12
 80044bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044be:	4618      	mov	r0, r3
 80044c0:	f01a f9f1 	bl	801e8a6 <strcpy>
		if (strcmp(cmd_char, "Ac") == 0) {
 80044c4:	f107 030c 	add.w	r3, r7, #12
 80044c8:	4920      	ldr	r1, [pc, #128]	@ (800454c <fill_mlc_configuration+0xbc>)
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fb fed4 	bl	8000278 <strcmp>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d123      	bne.n	800451e <fill_mlc_configuration+0x8e>
			// Extracting the first hexadecimal value after "Ac".
			char* hex_address = strtok(NULL, delimiters);
 80044d6:	69f9      	ldr	r1, [r7, #28]
 80044d8:	2000      	movs	r0, #0
 80044da:	f01a f8eb 	bl	801e6b4 <strtok>
 80044de:	6178      	str	r0, [r7, #20]
			// Extracting the second hexadecimal value after "Ac".
			char* hex_data = strtok(NULL, delimiters);
 80044e0:	69f9      	ldr	r1, [r7, #28]
 80044e2:	2000      	movs	r0, #0
 80044e4:	f01a f8e6 	bl	801e6b4 <strtok>
 80044e8:	6138      	str	r0, [r7, #16]
			// Converting into uint8_t type.
			addr = (uint8_t) strtol(hex_address, NULL, 16);
 80044ea:	2210      	movs	r2, #16
 80044ec:	2100      	movs	r1, #0
 80044ee:	6978      	ldr	r0, [r7, #20]
 80044f0:	f018 ff6c 	bl	801d3cc <strtol>
 80044f4:	4603      	mov	r3, r0
 80044f6:	73fb      	strb	r3, [r7, #15]
			data = (uint8_t) strtol(hex_data, NULL, 16);
 80044f8:	2210      	movs	r2, #16
 80044fa:	2100      	movs	r1, #0
 80044fc:	6938      	ldr	r0, [r7, #16]
 80044fe:	f018 ff65 	bl	801d3cc <strtol>
 8004502:	4603      	mov	r3, r0
 8004504:	73bb      	strb	r3, [r7, #14]
			// Filling MLC configuration structure.
			mlc_configuration[i].address = addr;
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	4413      	add	r3, r2
 800450e:	7bfa      	ldrb	r2, [r7, #15]
 8004510:	701a      	strb	r2, [r3, #0]
			mlc_configuration[i].data = data;
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	4413      	add	r3, r2
 800451a:	7bba      	ldrb	r2, [r7, #14]
 800451c:	705a      	strb	r2, [r3, #1]
		}
		// Going on with the next token.
		token = strtok(NULL, delimiters);
 800451e:	69f9      	ldr	r1, [r7, #28]
 8004520:	2000      	movs	r0, #0
 8004522:	f01a f8c7 	bl	801e6b4 <strtok>
 8004526:	6278      	str	r0, [r7, #36]	@ 0x24
		i++;
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	3301      	adds	r3, #1
 800452c:	623b      	str	r3, [r7, #32]
	while (token != NULL) {
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1c1      	bne.n	80044b8 <fill_mlc_configuration+0x28>
	}
	free(token);
 8004534:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004536:	f017 ffd3 	bl	801c4e0 <free>
}
 800453a:	bf00      	nop
 800453c:	3728      	adds	r7, #40	@ 0x28
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	080228dc 	.word	0x080228dc
 8004548:	080228e0 	.word	0x080228e0
 800454c:	080228e4 	.word	0x080228e4

08004550 <fill_ispu_configuration>:

/*
 * Filling ISPU configuration structure from UCF file.
 */
void fill_ispu_configuration(const char* content, ucf_line_ext_t* ispu_configuration) {
 8004550:	b580      	push	{r7, lr}
 8004552:	b08c      	sub	sp, #48	@ 0x30
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]

	const char* delimiters = "\n ";
 800455a:	4b46      	ldr	r3, [pc, #280]	@ (8004674 <fill_ispu_configuration+0x124>)
 800455c:	627b      	str	r3, [r7, #36]	@ 0x24
	char *token;
	uint32_t i = 0;
 800455e:	2300      	movs	r3, #0
 8004560:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t addr, data, delay;

	// Parsing UCF file.
	char *start = strstr(content, "Ac ");
 8004562:	4945      	ldr	r1, [pc, #276]	@ (8004678 <fill_ispu_configuration+0x128>)
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f01a f901 	bl	801e76c <strstr>
 800456a:	6238      	str	r0, [r7, #32]
	//char *input = (char *) calloc(strlen(start) + 1, sizeof(char));
	//strcpy(input, start);
	token = strtok(start, delimiters);
 800456c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800456e:	6a38      	ldr	r0, [r7, #32]
 8004570:	f01a f8a0 	bl	801e6b4 <strtok>
 8004574:	62f8      	str	r0, [r7, #44]	@ 0x2c
	while (token != NULL) {
 8004576:	e072      	b.n	800465e <fill_ispu_configuration+0x10e>
		// Extracting the Ac characters at the beginning of the token.
		char cmd_char[2];
		strcpy(cmd_char, token);
 8004578:	f107 030c 	add.w	r3, r7, #12
 800457c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800457e:	4618      	mov	r0, r3
 8004580:	f01a f991 	bl	801e8a6 <strcpy>
		if (strcmp(cmd_char, "Ac") == 0) {
 8004584:	f107 030c 	add.w	r3, r7, #12
 8004588:	493c      	ldr	r1, [pc, #240]	@ (800467c <fill_ispu_configuration+0x12c>)
 800458a:	4618      	mov	r0, r3
 800458c:	f7fb fe74 	bl	8000278 <strcmp>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d130      	bne.n	80045f8 <fill_ispu_configuration+0xa8>
			// Extracting the first hexadecimal value after "Ac".
			char* hex_address = strtok(NULL, delimiters);
 8004596:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004598:	2000      	movs	r0, #0
 800459a:	f01a f88b 	bl	801e6b4 <strtok>
 800459e:	6178      	str	r0, [r7, #20]
			// Extracting the second hexadecimal value after "Ac".
			char* hex_data = strtok(NULL, delimiters);
 80045a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045a2:	2000      	movs	r0, #0
 80045a4:	f01a f886 	bl	801e6b4 <strtok>
 80045a8:	6138      	str	r0, [r7, #16]
			// Converting into uint8_t type.
			addr = (uint8_t) strtol(hex_address, NULL, 16);
 80045aa:	2210      	movs	r2, #16
 80045ac:	2100      	movs	r1, #0
 80045ae:	6978      	ldr	r0, [r7, #20]
 80045b0:	f018 ff0c 	bl	801d3cc <strtol>
 80045b4:	4603      	mov	r3, r0
 80045b6:	73fb      	strb	r3, [r7, #15]
			data = (uint8_t) strtol(hex_data, NULL, 16);
 80045b8:	2210      	movs	r2, #16
 80045ba:	2100      	movs	r1, #0
 80045bc:	6938      	ldr	r0, [r7, #16]
 80045be:	f018 ff05 	bl	801d3cc <strtol>
 80045c2:	4603      	mov	r3, r0
 80045c4:	73bb      	strb	r3, [r7, #14]
			// Filling ISPU configuration structure.
			ispu_configuration[i].op = 1;
 80045c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045c8:	4613      	mov	r3, r2
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	4413      	add	r3, r2
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	4413      	add	r3, r2
 80045d2:	2201      	movs	r2, #1
 80045d4:	701a      	strb	r2, [r3, #0]
			ispu_configuration[i].address = addr;
 80045d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045d8:	4613      	mov	r3, r2
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4413      	add	r3, r2
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	4413      	add	r3, r2
 80045e2:	7bfa      	ldrb	r2, [r7, #15]
 80045e4:	705a      	strb	r2, [r3, #1]
			ispu_configuration[i].data = data;
 80045e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045e8:	4613      	mov	r3, r2
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	4413      	add	r3, r2
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	4413      	add	r3, r2
 80045f2:	7bba      	ldrb	r2, [r7, #14]
 80045f4:	709a      	strb	r2, [r3, #2]
 80045f6:	e02a      	b.n	800464e <fill_ispu_configuration+0xfe>
		} else if (strcmp(token, "WAIT") == 0) {
 80045f8:	4921      	ldr	r1, [pc, #132]	@ (8004680 <fill_ispu_configuration+0x130>)
 80045fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045fc:	f7fb fe3c 	bl	8000278 <strcmp>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d123      	bne.n	800464e <fill_ispu_configuration+0xfe>
			// Extracting the first hexadecimal value after "WAIT".
			char* delay_char = strtok(NULL, delimiters);
 8004606:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004608:	2000      	movs	r0, #0
 800460a:	f01a f853 	bl	801e6b4 <strtok>
 800460e:	61f8      	str	r0, [r7, #28]
			// Converting into uint8_t type.
			delay = (uint8_t) strtol(delay_char, NULL, 16);
 8004610:	2210      	movs	r2, #16
 8004612:	2100      	movs	r1, #0
 8004614:	69f8      	ldr	r0, [r7, #28]
 8004616:	f018 fed9 	bl	801d3cc <strtol>
 800461a:	4603      	mov	r3, r0
 800461c:	76fb      	strb	r3, [r7, #27]
			// If the token is "WAIT", set the op field to 2.
			ispu_configuration[i].op = 2;
 800461e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004620:	4613      	mov	r3, r2
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	4413      	add	r3, r2
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	4413      	add	r3, r2
 800462a:	2202      	movs	r2, #2
 800462c:	701a      	strb	r2, [r3, #0]
			ispu_configuration[i].address = 0;
 800462e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004630:	4613      	mov	r3, r2
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	4413      	add	r3, r2
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	4413      	add	r3, r2
 800463a:	2200      	movs	r2, #0
 800463c:	705a      	strb	r2, [r3, #1]
			ispu_configuration[i].data = delay;
 800463e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004640:	4613      	mov	r3, r2
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	4413      	add	r3, r2
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	4413      	add	r3, r2
 800464a:	7efa      	ldrb	r2, [r7, #27]
 800464c:	709a      	strb	r2, [r3, #2]
		}
		// Going on with the next token.
		token = strtok(NULL, delimiters);
 800464e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004650:	2000      	movs	r0, #0
 8004652:	f01a f82f 	bl	801e6b4 <strtok>
 8004656:	62f8      	str	r0, [r7, #44]	@ 0x2c
		i++;
 8004658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465a:	3301      	adds	r3, #1
 800465c:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (token != NULL) {
 800465e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d189      	bne.n	8004578 <fill_ispu_configuration+0x28>
	}
	free(token);
 8004664:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004666:	f017 ff3b 	bl	801c4e0 <free>
}
 800466a:	bf00      	nop
 800466c:	3730      	adds	r7, #48	@ 0x30
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	080228dc 	.word	0x080228dc
 8004678:	080228e0 	.word	0x080228e0
 800467c:	080228e4 	.word	0x080228e4
 8004680:	080228e8 	.word	0x080228e8

08004684 <get_mlc_register>:

/*
 * Getting MLC register from UCF file.
 */
void get_mlc_register(const char* content, uint32_t *mlc_register) {
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]

	char *start = strstr(content, "<MLC");
 800468e:	491c      	ldr	r1, [pc, #112]	@ (8004700 <get_mlc_register+0x7c>)
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f01a f86b 	bl	801e76c <strstr>
 8004696:	6178      	str	r0, [r7, #20]
	if (start == NULL) {
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d029      	beq.n	80046f2 <get_mlc_register+0x6e>
		return;
	}
	start += 4;   // skip "<MLC"
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	3304      	adds	r3, #4
 80046a2:	617b      	str	r3, [r7, #20]
	char *end = strstr(start, "_SRC>");
 80046a4:	4917      	ldr	r1, [pc, #92]	@ (8004704 <get_mlc_register+0x80>)
 80046a6:	6978      	ldr	r0, [r7, #20]
 80046a8:	f01a f860 	bl	801e76c <strstr>
 80046ac:	6138      	str	r0, [r7, #16]
	if (end == NULL) {
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d020      	beq.n	80046f6 <get_mlc_register+0x72>
		return;
	}
	int len = end - start;
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	60fb      	str	r3, [r7, #12]
	char *mlc_str = (char *) calloc(len + 1, sizeof(char));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3301      	adds	r3, #1
 80046c0:	2101      	movs	r1, #1
 80046c2:	4618      	mov	r0, r3
 80046c4:	f017 fee8 	bl	801c498 <calloc>
 80046c8:	4603      	mov	r3, r0
 80046ca:	60bb      	str	r3, [r7, #8]
	strncpy(mlc_str, start, len);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	461a      	mov	r2, r3
 80046d0:	6979      	ldr	r1, [r7, #20]
 80046d2:	68b8      	ldr	r0, [r7, #8]
 80046d4:	f019 ffda 	bl	801e68c <strncpy>
	mlc_str[len] = '\0';
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	4413      	add	r3, r2
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]
	*mlc_register = atoi(mlc_str);
 80046e2:	68b8      	ldr	r0, [r7, #8]
 80046e4:	f017 fed4 	bl	801c490 <atoi>
 80046e8:	4603      	mov	r3, r0
 80046ea:	461a      	mov	r2, r3
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	e002      	b.n	80046f8 <get_mlc_register+0x74>
		return;
 80046f2:	bf00      	nop
 80046f4:	e000      	b.n	80046f8 <get_mlc_register+0x74>
		return;
 80046f6:	bf00      	nop
}
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	080228f0 	.word	0x080228f0
 8004704:	080228f8 	.word	0x080228f8

08004708 <send_identity>:

/*
 * Sending Board-ID and Firmware-ID.
 */
void send_identity(){
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
	get_identity = 0;
 800470e:	4b12      	ldr	r3, [pc, #72]	@ (8004758 <send_identity+0x50>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]

	// Appending the new line character to the identity message.
	char *ch = "\r\n";
 8004714:	4b11      	ldr	r3, [pc, #68]	@ (800475c <send_identity+0x54>)
 8004716:	607b      	str	r3, [r7, #4]
	strcat(identity, ch);
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4811      	ldr	r0, [pc, #68]	@ (8004760 <send_identity+0x58>)
 800471c:	f019 ff88 	bl	801e630 <strcat>

	PRINT(identity);
 8004720:	4810      	ldr	r0, [pc, #64]	@ (8004764 <send_identity+0x5c>)
 8004722:	f7fb fdb3 	bl	800028c <strlen>
 8004726:	4603      	mov	r3, r0
 8004728:	461a      	mov	r2, r3
 800472a:	2100      	movs	r1, #0
 800472c:	480d      	ldr	r0, [pc, #52]	@ (8004764 <send_identity+0x5c>)
 800472e:	f019 ff77 	bl	801e620 <memset>
 8004732:	4a0b      	ldr	r2, [pc, #44]	@ (8004760 <send_identity+0x58>)
 8004734:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004738:	480a      	ldr	r0, [pc, #40]	@ (8004764 <send_identity+0x5c>)
 800473a:	f019 fe2b 	bl	801e394 <sniprintf>
 800473e:	4603      	mov	r3, r0
 8004740:	603b      	str	r3, [r7, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	b29b      	uxth	r3, r3
 8004746:	4619      	mov	r1, r3
 8004748:	4806      	ldr	r0, [pc, #24]	@ (8004764 <send_identity+0x5c>)
 800474a:	f7fd fc63 	bl	8002014 <CDC_Transmit_FS>
}
 800474e:	bf00      	nop
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20044bd8 	.word	0x20044bd8
 800475c:	08022898 	.word	0x08022898
 8004760:	20044be0 	.word	0x20044be0
 8004764:	20042bc8 	.word	0x20042bc8

08004768 <send_status>:

/*
 * Sending the Properties Status.
 */
void send_status(){
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
	get_status = 0;
 800476e:	4b12      	ldr	r3, [pc, #72]	@ (80047b8 <send_status+0x50>)
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]

	// Appending the new line character to the identity message.
	char *ch = "\r\n";
 8004774:	4b11      	ldr	r3, [pc, #68]	@ (80047bc <send_status+0x54>)
 8004776:	607b      	str	r3, [r7, #4]
	strcat(status, ch);
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	4811      	ldr	r0, [pc, #68]	@ (80047c0 <send_status+0x58>)
 800477c:	f019 ff58 	bl	801e630 <strcat>

	PRINT(status);
 8004780:	4810      	ldr	r0, [pc, #64]	@ (80047c4 <send_status+0x5c>)
 8004782:	f7fb fd83 	bl	800028c <strlen>
 8004786:	4603      	mov	r3, r0
 8004788:	461a      	mov	r2, r3
 800478a:	2100      	movs	r1, #0
 800478c:	480d      	ldr	r0, [pc, #52]	@ (80047c4 <send_status+0x5c>)
 800478e:	f019 ff47 	bl	801e620 <memset>
 8004792:	4a0b      	ldr	r2, [pc, #44]	@ (80047c0 <send_status+0x58>)
 8004794:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004798:	480a      	ldr	r0, [pc, #40]	@ (80047c4 <send_status+0x5c>)
 800479a:	f019 fdfb 	bl	801e394 <sniprintf>
 800479e:	4603      	mov	r3, r0
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	4619      	mov	r1, r3
 80047a8:	4806      	ldr	r0, [pc, #24]	@ (80047c4 <send_status+0x5c>)
 80047aa:	f7fd fc33 	bl	8002014 <CDC_Transmit_FS>
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	200453e0 	.word	0x200453e0
 80047bc:	08022898 	.word	0x08022898
 80047c0:	20044fe0 	.word	0x20044fe0
 80047c4:	20042bc8 	.word	0x20042bc8

080047c8 <identify_get_cmd>:

/*
 * Identify the type of get command.
 */
void identify_get_cmd(PnPLCommand_t *command, char **serializedJSON){
 80047c8:	b590      	push	{r4, r7, lr}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]

	memset(identity, 0, strlen(identity));
 80047d2:	481f      	ldr	r0, [pc, #124]	@ (8004850 <identify_get_cmd+0x88>)
 80047d4:	f7fb fd5a 	bl	800028c <strlen>
 80047d8:	4603      	mov	r3, r0
 80047da:	461a      	mov	r2, r3
 80047dc:	2100      	movs	r1, #0
 80047de:	481c      	ldr	r0, [pc, #112]	@ (8004850 <identify_get_cmd+0x88>)
 80047e0:	f019 ff1e 	bl	801e620 <memset>
	memset(status, 0, strlen(status));
 80047e4:	481b      	ldr	r0, [pc, #108]	@ (8004854 <identify_get_cmd+0x8c>)
 80047e6:	f7fb fd51 	bl	800028c <strlen>
 80047ea:	4603      	mov	r3, r0
 80047ec:	461a      	mov	r2, r3
 80047ee:	2100      	movs	r1, #0
 80047f0:	4818      	ldr	r0, [pc, #96]	@ (8004854 <identify_get_cmd+0x8c>)
 80047f2:	f019 ff15 	bl	801e620 <memset>
	if(command->comm_type == PNPL_CMD_SYSTEM_INFO){
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b50      	cmp	r3, #80	@ 0x50
 80047fc:	d110      	bne.n	8004820 <identify_get_cmd+0x58>
		get_identity = 1;
 80047fe:	4b16      	ldr	r3, [pc, #88]	@ (8004858 <identify_get_cmd+0x90>)
 8004800:	2201      	movs	r2, #1
 8004802:	601a      	str	r2, [r3, #0]
		memcpy(identity,*serializedJSON,strlen(*serializedJSON));
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681c      	ldr	r4, [r3, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7fb fd3d 	bl	800028c <strlen>
 8004812:	4603      	mov	r3, r0
 8004814:	461a      	mov	r2, r3
 8004816:	4621      	mov	r1, r4
 8004818:	480d      	ldr	r0, [pc, #52]	@ (8004850 <identify_get_cmd+0x88>)
 800481a:	f01a f85a 	bl	801e8d2 <memcpy>
	}
	else if(command->comm_type == PNPL_CMD_GET){
		get_status = 1;
		memcpy(status,*serializedJSON,strlen(*serializedJSON));
	}
}
 800481e:	e013      	b.n	8004848 <identify_get_cmd+0x80>
	else if(command->comm_type == PNPL_CMD_GET){
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b10      	cmp	r3, #16
 8004826:	d10f      	bne.n	8004848 <identify_get_cmd+0x80>
		get_status = 1;
 8004828:	4b0c      	ldr	r3, [pc, #48]	@ (800485c <identify_get_cmd+0x94>)
 800482a:	2201      	movs	r2, #1
 800482c:	601a      	str	r2, [r3, #0]
		memcpy(status,*serializedJSON,strlen(*serializedJSON));
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681c      	ldr	r4, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f7fb fd28 	bl	800028c <strlen>
 800483c:	4603      	mov	r3, r0
 800483e:	461a      	mov	r2, r3
 8004840:	4621      	mov	r1, r4
 8004842:	4804      	ldr	r0, [pc, #16]	@ (8004854 <identify_get_cmd+0x8c>)
 8004844:	f01a f845 	bl	801e8d2 <memcpy>
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	bd90      	pop	{r4, r7, pc}
 8004850:	20044be0 	.word	0x20044be0
 8004854:	20044fe0 	.word	0x20044fe0
 8004858:	20044bd8 	.word	0x20044bd8
 800485c:	200453e0 	.word	0x200453e0

08004860 <ispu_get_mounted>:

/*
 * Understands if ISPU is mounted or not.
 */
bool ispu_get_mounted(){
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0

	return ispu_mounted;
 8004864:	4b05      	ldr	r3, [pc, #20]	@ (800487c <ispu_get_mounted+0x1c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	bf14      	ite	ne
 800486c:	2301      	movne	r3, #1
 800486e:	2300      	moveq	r3, #0
 8004870:	b2db      	uxtb	r3, r3
}
 8004872:	4618      	mov	r0, r3
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	200453e4 	.word	0x200453e4

08004880 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Periodic interrupt for MLC use-case.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a05      	ldr	r2, [pc, #20]	@ (80048a4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d102      	bne.n	8004898 <HAL_TIM_PeriodElapsedCallback+0x18>
        tim_interrupt = 1;
 8004892:	4b05      	ldr	r3, [pc, #20]	@ (80048a8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8004894:	2201      	movs	r2, #1
 8004896:	601a      	str	r2, [r3, #0]
    }
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	40012c00 	.word	0x40012c00
 80048a8:	200453e8 	.word	0x200453e8
 80048ac:	00000000 	.word	0x00000000

080048b0 <compute_actual_odr>:
/*
 * Function to compute actual sensor ODR, without drift.
 *
 * @brief  Difference in percentage of the effective ODR (and timestamp rate) with respect to the typical. Step: 0.13%. 8-bit format, 2's complement.
 */
float32_t compute_actual_odr(){
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
	uint8_t odr;
	CUSTOM_MOTION_SENSOR_Read_Register(SENSOR_0, SENSOR_INTERNAL_FREQ, &odr);
 80048b6:	1dfb      	adds	r3, r7, #7
 80048b8:	461a      	mov	r2, r3
 80048ba:	214f      	movs	r1, #79	@ 0x4f
 80048bc:	2000      	movs	r0, #0
 80048be:	f7ff f895 	bl	80039ec <CUSTOM_MOTION_SENSOR_Read_Register>
	return (7680 * (1 + 0.0013*(float32_t)odr))/4;
 80048c2:	79fb      	ldrb	r3, [r7, #7]
 80048c4:	ee07 3a90 	vmov	s15, r3
 80048c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048cc:	ee17 0a90 	vmov	r0, s15
 80048d0:	f7fb fe48 	bl	8000564 <__aeabi_f2d>
 80048d4:	a319      	add	r3, pc, #100	@ (adr r3, 800493c <compute_actual_odr+0x8c>)
 80048d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048da:	f7fb fe9b 	bl	8000614 <__aeabi_dmul>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	4610      	mov	r0, r2
 80048e4:	4619      	mov	r1, r3
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	4b11      	ldr	r3, [pc, #68]	@ (8004930 <compute_actual_odr+0x80>)
 80048ec:	f7fb fcdc 	bl	80002a8 <__adddf3>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4610      	mov	r0, r2
 80048f6:	4619      	mov	r1, r3
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004934 <compute_actual_odr+0x84>)
 80048fe:	f7fb fe89 	bl	8000614 <__aeabi_dmul>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4610      	mov	r0, r2
 8004908:	4619      	mov	r1, r3
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	4b0a      	ldr	r3, [pc, #40]	@ (8004938 <compute_actual_odr+0x88>)
 8004910:	f7fb ffaa 	bl	8000868 <__aeabi_ddiv>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4610      	mov	r0, r2
 800491a:	4619      	mov	r1, r3
 800491c:	f7fc f972 	bl	8000c04 <__aeabi_d2f>
 8004920:	4603      	mov	r3, r0
 8004922:	ee07 3a90 	vmov	s15, r3
}
 8004926:	eeb0 0a67 	vmov.f32	s0, s15
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	3ff00000 	.word	0x3ff00000
 8004934:	40be0000 	.word	0x40be0000
 8004938:	40100000 	.word	0x40100000
 800493c:	5f06f694 	.word	0x5f06f694
 8004940:	3f554c98 	.word	0x3f554c98

08004944 <jump_to_bootloader>:

/*
 * Set the DFU Mode.
 */
void jump_to_bootloader( void )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
	/*  Disable interrupts for timers */
	HAL_NVIC_DisableIRQ(TIM6_IRQn);
 800494a:	2031      	movs	r0, #49	@ 0x31
 800494c:	f005 fadd 	bl	8009f0a <HAL_NVIC_DisableIRQ>

	/*  Disable ICACHE */
	HAL_ICACHE_DeInit();
 8004950:	f006 fb24 	bl	800af9c <HAL_ICACHE_DeInit>

	/* Jump to user application */
	typedef  void (*pFunction)(void);
	pFunction JumpToApplication;
	uint32_t JumpAddress;
	JumpAddress = *(__IO uint32_t *) (0x0BF90000 + 4);
 8004954:	4b08      	ldr	r3, [pc, #32]	@ (8004978 <jump_to_bootloader+0x34>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60fb      	str	r3, [r7, #12]
	JumpToApplication = (pFunction) JumpAddress;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	60bb      	str	r3, [r7, #8]

	/* Initialize user application's Stack Pointer */
	__set_MSP(*(__IO uint32_t *) 0x0BF90000);
 800495e:	4b07      	ldr	r3, [pc, #28]	@ (800497c <jump_to_bootloader+0x38>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f383 8808 	msr	MSP, r3
}
 800496a:	bf00      	nop
	JumpToApplication();
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4798      	blx	r3

}
 8004970:	bf00      	nop
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	0bf90004 	.word	0x0bf90004
 800497c:	0bf90000 	.word	0x0bf90000

08004980 <ToggleFlashBank>:
static uint8_t sensors_cnt = 0;

AppModel_t app_model;

static void ToggleFlashBank(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08e      	sub	sp, #56	@ 0x38
 8004984:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef    OBInit;
	/* Set BFB2 bit to enable boot from Flash Bank2 */
	/* Allow Access to Flash control registers and user Flash */
	HAL_FLASH_Unlock();
 8004986:	f005 fbcd 	bl	800a124 <HAL_FLASH_Unlock>

	/* Allow Access to option bytes sector */
	HAL_FLASH_OB_Unlock();
 800498a:	f005 fc07 	bl	800a19c <HAL_FLASH_OB_Unlock>

	/* Get the Dual boot configuration status */
	HAL_FLASHEx_OBGetConfig(&OBInit);
 800498e:	1d3b      	adds	r3, r7, #4
 8004990:	4618      	mov	r0, r3
 8004992:	f005 fd0b 	bl	800a3ac <HAL_FLASHEx_OBGetConfig>

	/* Enable/Disable dual boot feature */
	OBInit.OptionType = OPTIONBYTE_USER;
 8004996:	2304      	movs	r3, #4
 8004998:	607b      	str	r3, [r7, #4]
	OBInit.USERType   = OB_USER_SWAP_BANK;
 800499a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800499e:	61fb      	str	r3, [r7, #28]

	if (((OBInit.USERConfig) & (FLASH_OPTR_SWAP_BANK)) == FLASH_OPTR_SWAP_BANK)
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d004      	beq.n	80049b4 <ToggleFlashBank+0x34>
	{
		OBInit.USERConfig &= ~FLASH_OPTR_SWAP_BANK;
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80049b0:	623b      	str	r3, [r7, #32]
 80049b2:	e002      	b.n	80049ba <ToggleFlashBank+0x3a>
	}
	else
	{
		OBInit.USERConfig = FLASH_OPTR_SWAP_BANK;
 80049b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80049b8:	623b      	str	r3, [r7, #32]
	}

	//SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("HW: Switching Bank\r\n"));
	if(HAL_FLASHEx_OBProgram (&OBInit) != HAL_OK)
 80049ba:	1d3b      	adds	r3, r7, #4
 80049bc:	4618      	mov	r0, r3
 80049be:	f005 fc7d 	bl	800a2bc <HAL_FLASHEx_OBProgram>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <ToggleFlashBank+0x4c>
		/*
	    Error occurred while setting option bytes configuration.
	    User can add here some code to deal with this error.
	    To know the code error, user can call function 'HAL_FLASH_GetError()'
		 */
		while(1);
 80049c8:	bf00      	nop
 80049ca:	e7fd      	b.n	80049c8 <ToggleFlashBank+0x48>
	}

	/* Start the Option Bytes programming process */
	if (HAL_FLASH_OB_Launch() != HAL_OK) {
 80049cc:	f005 fc20 	bl	800a210 <HAL_FLASH_OB_Launch>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <ToggleFlashBank+0x5a>
		/*
	    Error occurred while reloading option bytes configuration.
	    User can add here some code to deal with this error.
	    To know the code error, user can call function 'HAL_FLASH_GetError()'
		 */
		while(1);
 80049d6:	bf00      	nop
 80049d8:	e7fd      	b.n	80049d6 <ToggleFlashBank+0x56>
	}
	HAL_FLASH_OB_Lock();
 80049da:	f005 fc01 	bl	800a1e0 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 80049de:	f005 fbc3 	bl	800a168 <HAL_FLASH_Lock>
}
 80049e2:	bf00      	nop
 80049e4:	3738      	adds	r7, #56	@ 0x38
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <lsm6dsv16x_acc_comp_init>:

/* LSM6DSV16X_ACC PnPL Component ---------------------------------------------*/
static SensorModel_t lsm6dsv16x_acc_model;

uint8_t lsm6dsv16x_acc_comp_init(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
	lsm6dsv16x_acc_model.comp_name = lsm6dsv16x_acc_get_key();
 80049f2:	f000 f81d 	bl	8004a30 <lsm6dsv16x_acc_get_key>
 80049f6:	4603      	mov	r3, r0
 80049f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004a24 <lsm6dsv16x_acc_comp_init+0x38>)
 80049fa:	6053      	str	r3, [r2, #4]

	uint16_t id = sensors_cnt;
 80049fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004a28 <lsm6dsv16x_acc_comp_init+0x3c>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	80fb      	strh	r3, [r7, #6]
	sensors_cnt +=1;
 8004a02:	4b09      	ldr	r3, [pc, #36]	@ (8004a28 <lsm6dsv16x_acc_comp_init+0x3c>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	3301      	adds	r3, #1
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	4b07      	ldr	r3, [pc, #28]	@ (8004a28 <lsm6dsv16x_acc_comp_init+0x3c>)
 8004a0c:	701a      	strb	r2, [r3, #0]
	app_model.s_models[id] = &lsm6dsv16x_acc_model;
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	4a06      	ldr	r2, [pc, #24]	@ (8004a2c <lsm6dsv16x_acc_comp_init+0x40>)
 8004a12:	4904      	ldr	r1, [pc, #16]	@ (8004a24 <lsm6dsv16x_acc_comp_init+0x38>)
 8004a14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	/* USER Component initialization code */
	return 0;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20045418 	.word	0x20045418
 8004a28:	200453fd 	.word	0x200453fd
 8004a2c:	20045400 	.word	0x20045400

08004a30 <lsm6dsv16x_acc_get_key>:
char* lsm6dsv16x_acc_get_key(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
	return "lsm6dsv16x_acc";
 8004a34:	4b02      	ldr	r3, [pc, #8]	@ (8004a40 <lsm6dsv16x_acc_get_key+0x10>)
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	08022900 	.word	0x08022900

08004a44 <lsm6dsv16x_acc_get_odr>:

uint8_t lsm6dsv16x_acc_get_odr(float *value)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
	/* USER Code */
	*value = LSM6DSV16X_ACC_ODR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a04      	ldr	r2, [pc, #16]	@ (8004a60 <lsm6dsv16x_acc_get_odr+0x1c>)
 8004a50:	601a      	str	r2, [r3, #0]
	return 0;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	44d04000 	.word	0x44d04000

08004a64 <lsm6dsv16x_acc_get_fs>:
uint8_t lsm6dsv16x_acc_get_fs(float *value)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
	/* USER Code */
	*value = LSM6DSV16X_ACC_FS;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8004a72:	601a      	str	r2, [r3, #0]
	return 0;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <lsm6dsv16x_acc_get_stream_id>:
uint8_t lsm6dsv16x_acc_get_stream_id(int8_t *value)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
	/* USER Code */
	return 0;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <lsm6dsv16x_acc_get_ep_id>:
uint8_t lsm6dsv16x_acc_get_ep_id(int8_t *value)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	/* USER Code */
	return 0;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
	...

08004ab0 <ai_application_mcu_comp_init>:

/* AI Application MCU PnPL Component -----------------------------------------*/
uint8_t ai_application_mcu_comp_init(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
	app_model.ai_application_mcu_model.comp_name = ai_application_mcu_get_key();
 8004ab4:	f000 f808 	bl	8004ac8 <ai_application_mcu_get_key>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	4a02      	ldr	r2, [pc, #8]	@ (8004ac4 <ai_application_mcu_comp_init+0x14>)
 8004abc:	6053      	str	r3, [r2, #4]

	/* USER Component initialization code */
	return 0;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	20045400 	.word	0x20045400

08004ac8 <ai_application_mcu_get_key>:
char* ai_application_mcu_get_key(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
	return "ai_application_mcu";
 8004acc:	4b02      	ldr	r3, [pc, #8]	@ (8004ad8 <ai_application_mcu_get_key+0x10>)
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	08022910 	.word	0x08022910

08004adc <ai_application_mcu_get_enable>:

uint8_t ai_application_mcu_get_enable(bool *value)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	/* USER Code */
	if(mcu_inference){
 8004ae4:	4b08      	ldr	r3, [pc, #32]	@ (8004b08 <ai_application_mcu_get_enable+0x2c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <ai_application_mcu_get_enable+0x18>
		*value = true;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]
 8004af2:	e002      	b.n	8004afa <ai_application_mcu_get_enable+0x1e>
	}
	else{
		*value = false;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	20044bcc 	.word	0x20044bcc

08004b0c <ai_application_mcu_start>:
uint8_t ai_application_mcu_start(IAi_Application_Mcu_t *ifn)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
	default_ai = MCU;
 8004b14:	4b08      	ldr	r3, [pc, #32]	@ (8004b38 <ai_application_mcu_start+0x2c>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	701a      	strb	r2, [r3, #0]
	sensor_init();
 8004b1a:	f7ff fc07 	bl	800432c <sensor_init>
	// Set the FIFO to Continuous/Stream Mode.
	MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(SENSOR_0,  SENSOR_0_STREAM_MODE);                   // Set the FIFO to Continuous/Stream Mode
 8004b1e:	2106      	movs	r1, #6
 8004b20:	2000      	movs	r0, #0
 8004b22:	f7fe fb6f 	bl	8003204 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>
	mcu_inference = 1;
 8004b26:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <ai_application_mcu_start+0x30>)
 8004b28:	2201      	movs	r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]
	return 0;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20044bc8 	.word	0x20044bc8
 8004b3c:	20044bcc 	.word	0x20044bcc

08004b40 <ai_application_mcu_stop>:
uint8_t ai_application_mcu_stop(IAi_Application_Mcu_t *ifn)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	// Set the FIFO to Bypass Mode.
	MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(SENSOR_0,  SENSOR_0_BYPASS_MODE);                   // Set the FIFO to Bypass Mode
 8004b48:	2100      	movs	r1, #0
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f7fe fb5a 	bl	8003204 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>
	mcu_inference = 0;
 8004b50:	4b03      	ldr	r3, [pc, #12]	@ (8004b60 <ai_application_mcu_stop+0x20>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
	return 0;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	20044bcc 	.word	0x20044bcc

08004b64 <ai_application_mcu_create_telemetry>:
uint8_t ai_application_mcu_create_telemetry(int label_id, float accuracy, char **telemetry, uint32_t *size)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b09a      	sub	sp, #104	@ 0x68
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b70:	6079      	str	r1, [r7, #4]
 8004b72:	603a      	str	r2, [r7, #0]
	PnPLTelemetry_t telemetries[2];
	strcpy(telemetries[0].telemetry_name, "label_id");
 8004b74:	f107 0310 	add.w	r3, r7, #16
 8004b78:	4a16      	ldr	r2, [pc, #88]	@ (8004bd4 <ai_application_mcu_create_telemetry+0x70>)
 8004b7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b7c:	c303      	stmia	r3!, {r0, r1}
 8004b7e:	701a      	strb	r2, [r3, #0]
	telemetries[0].telemetry_value = (void*)& label_id;
 8004b80:	f107 030c 	add.w	r3, r7, #12
 8004b84:	633b      	str	r3, [r7, #48]	@ 0x30
	telemetries[0].telemetry_type = PNPL_INT;
 8004b86:	2300      	movs	r3, #0
 8004b88:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	telemetries[0].n_sub_telemetries = 0;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	strcpy(telemetries[1].telemetry_name, "accuracy");
 8004b92:	f107 0310 	add.w	r3, r7, #16
 8004b96:	3328      	adds	r3, #40	@ 0x28
 8004b98:	4a0f      	ldr	r2, [pc, #60]	@ (8004bd8 <ai_application_mcu_create_telemetry+0x74>)
 8004b9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b9c:	c303      	stmia	r3!, {r0, r1}
 8004b9e:	701a      	strb	r2, [r3, #0]
	telemetries[1].telemetry_value = (void*)& accuracy;
 8004ba0:	f107 0308 	add.w	r3, r7, #8
 8004ba4:	65bb      	str	r3, [r7, #88]	@ 0x58
	telemetries[1].telemetry_type = PNPL_FLOAT;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	telemetries[1].n_sub_telemetries = 0;
 8004bac:	2300      	movs	r3, #0
 8004bae:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

	PnPLSerializeTelemetry("ai_application_mcu", telemetries, 2, telemetry, size, 0);
 8004bb2:	f107 0110 	add.w	r1, r7, #16
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	9301      	str	r3, [sp, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	4806      	ldr	r0, [pc, #24]	@ (8004bdc <ai_application_mcu_create_telemetry+0x78>)
 8004bc4:	f00d fc9a 	bl	80124fc <PnPLSerializeTelemetry>
	return 0;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3760      	adds	r7, #96	@ 0x60
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	08022924 	.word	0x08022924
 8004bd8:	08022930 	.word	0x08022930
 8004bdc:	08022910 	.word	0x08022910

08004be0 <ai_application_mlc_comp_init>:

/* AI Application MLC PnPL Component -----------------------------------------*/
uint8_t ai_application_mlc_comp_init(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
	app_model.ai_application_mlc_model.comp_name = ai_application_mlc_get_key();
 8004be4:	f000 f808 	bl	8004bf8 <ai_application_mlc_get_key>
 8004be8:	4603      	mov	r3, r0
 8004bea:	4a02      	ldr	r2, [pc, #8]	@ (8004bf4 <ai_application_mlc_comp_init+0x14>)
 8004bec:	6093      	str	r3, [r2, #8]

	/* USER Component initialization code */
	return 0;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	20045400 	.word	0x20045400

08004bf8 <ai_application_mlc_get_key>:
char* ai_application_mlc_get_key(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
	return "ai_application_mlc";
 8004bfc:	4b02      	ldr	r3, [pc, #8]	@ (8004c08 <ai_application_mlc_get_key+0x10>)
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	0802293c 	.word	0x0802293c

08004c0c <ai_application_mlc_get_enable>:

uint8_t ai_application_mlc_get_enable(bool *value)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
	/* USER Code */
	if(mlc_inference){
 8004c14:	4b08      	ldr	r3, [pc, #32]	@ (8004c38 <ai_application_mlc_get_enable+0x2c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <ai_application_mlc_get_enable+0x18>
		*value = true;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	701a      	strb	r2, [r3, #0]
 8004c22:	e002      	b.n	8004c2a <ai_application_mlc_get_enable+0x1e>
	}
	else{
		*value = false;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	20044bd0 	.word	0x20044bd0

08004c3c <ai_application_mlc_get_model_filename>:
uint8_t ai_application_mlc_get_model_filename(char **value)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
	/* USER Code */
	*value = mlc_model_filename;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a04      	ldr	r2, [pc, #16]	@ (8004c58 <ai_application_mlc_get_model_filename+0x1c>)
 8004c48:	601a      	str	r2, [r3, #0]
	return 0;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	20042b58 	.word	0x20042b58

08004c5c <ai_application_mlc_start>:
uint8_t ai_application_mlc_start(IAi_Application_Mlc_t *ifn)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
	default_ai = MLC;
 8004c64:	4b0e      	ldr	r3, [pc, #56]	@ (8004ca0 <ai_application_mlc_start+0x44>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	701a      	strb	r2, [r3, #0]
	load_mlc_configuration(current_mlc_configuration, current_mlc_configuration_size);
 8004c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ca4 <ai_application_mlc_start+0x48>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a0e      	ldr	r2, [pc, #56]	@ (8004ca8 <ai_application_mlc_start+0x4c>)
 8004c70:	6812      	ldr	r2, [r2, #0]
 8004c72:	4611      	mov	r1, r2
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7ff fa59 	bl	800412c <load_mlc_configuration>
	sensor_init();
 8004c7a:	f7ff fb57 	bl	800432c <sensor_init>
	mlc_inference = 1;
 8004c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004cac <ai_application_mlc_start+0x50>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
	if(mcu_inference){
 8004c84:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb0 <ai_application_mlc_start+0x54>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <ai_application_mlc_start+0x38>
		MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(SENSOR_0,  SENSOR_0_STREAM_MODE);                   // Set the FIFO to Continuous/Stream Mode
 8004c8c:	2106      	movs	r1, #6
 8004c8e:	2000      	movs	r0, #0
 8004c90:	f7fe fab8 	bl	8003204 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>
	}
	return 0;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20044bc8 	.word	0x20044bc8
 8004ca4:	200007a8 	.word	0x200007a8
 8004ca8:	200007ac 	.word	0x200007ac
 8004cac:	20044bd0 	.word	0x20044bd0
 8004cb0:	20044bcc 	.word	0x20044bcc

08004cb4 <ai_application_mlc_stop>:
uint8_t ai_application_mlc_stop(IAi_Application_Mlc_t *ifn)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	mlc_inference = 0;
 8004cbc:	4b08      	ldr	r3, [pc, #32]	@ (8004ce0 <ai_application_mlc_stop+0x2c>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
	if(mcu_inference){
 8004cc2:	4b08      	ldr	r3, [pc, #32]	@ (8004ce4 <ai_application_mlc_stop+0x30>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <ai_application_mlc_stop+0x22>
		sensor_init();
 8004cca:	f7ff fb2f 	bl	800432c <sensor_init>
		// Set the FIFO to Continuous/Stream Mode.
		MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(SENSOR_0,  SENSOR_0_STREAM_MODE);                   // Set the FIFO to Continuous/Stream Mode
 8004cce:	2106      	movs	r1, #6
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f7fe fa97 	bl	8003204 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>
	}
	return 0;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20044bd0 	.word	0x20044bd0
 8004ce4:	20044bcc 	.word	0x20044bcc

08004ce8 <ai_application_mlc_load_ucf>:
uint8_t ai_application_mlc_load_ucf(IAi_Application_Mlc_t *ifn, const char *filename, int32_t content_size, const char *content)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
	/* USER Code */
	strcpy(mlc_model_filename, filename);
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	4823      	ldr	r0, [pc, #140]	@ (8004d88 <ai_application_mlc_load_ucf+0xa0>)
 8004cfa:	f019 fdd4 	bl	801e8a6 <strcpy>

	default_ai = MLC;
 8004cfe:	4b23      	ldr	r3, [pc, #140]	@ (8004d8c <ai_application_mlc_load_ucf+0xa4>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	701a      	strb	r2, [r3, #0]

	static ucf_line_t* loaded_mlc_configuration;

	// De-allocating space for the MLC configuration structure.
	free(loaded_mlc_configuration);
 8004d04:	4b22      	ldr	r3, [pc, #136]	@ (8004d90 <ai_application_mlc_load_ucf+0xa8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f017 fbe9 	bl	801c4e0 <free>

	// Allocating space for the MLC configuration structure.
	current_mlc_configuration_size = 0;
 8004d0e:	4b21      	ldr	r3, [pc, #132]	@ (8004d94 <ai_application_mlc_load_ucf+0xac>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
	current_mlc_configuration_size = get_ucf_number_of_lines(content_size, content);
 8004d14:	6839      	ldr	r1, [r7, #0]
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff fb96 	bl	8004448 <get_ucf_number_of_lines>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8004d94 <ai_application_mlc_load_ucf+0xac>)
 8004d20:	6013      	str	r3, [r2, #0]
	loaded_mlc_configuration = (ucf_line_t*) calloc(current_mlc_configuration_size, sizeof(ucf_line_t));
 8004d22:	4b1c      	ldr	r3, [pc, #112]	@ (8004d94 <ai_application_mlc_load_ucf+0xac>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2102      	movs	r1, #2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f017 fbb5 	bl	801c498 <calloc>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	461a      	mov	r2, r3
 8004d32:	4b17      	ldr	r3, [pc, #92]	@ (8004d90 <ai_application_mlc_load_ucf+0xa8>)
 8004d34:	601a      	str	r2, [r3, #0]

	// Getting MLC register from UCF file.
	get_mlc_register(content, &mlc_register);
 8004d36:	4918      	ldr	r1, [pc, #96]	@ (8004d98 <ai_application_mlc_load_ucf+0xb0>)
 8004d38:	6838      	ldr	r0, [r7, #0]
 8004d3a:	f7ff fca3 	bl	8004684 <get_mlc_register>

	// Filling MLC configuration structure from UCF file.
	fill_mlc_configuration(content, loaded_mlc_configuration);
 8004d3e:	4b14      	ldr	r3, [pc, #80]	@ (8004d90 <ai_application_mlc_load_ucf+0xa8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4619      	mov	r1, r3
 8004d44:	6838      	ldr	r0, [r7, #0]
 8004d46:	f7ff fba3 	bl	8004490 <fill_mlc_configuration>

	// Update MLC configuration structure.
	current_mlc_configuration = loaded_mlc_configuration;
 8004d4a:	4b11      	ldr	r3, [pc, #68]	@ (8004d90 <ai_application_mlc_load_ucf+0xa8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a13      	ldr	r2, [pc, #76]	@ (8004d9c <ai_application_mlc_load_ucf+0xb4>)
 8004d50:	6013      	str	r3, [r2, #0]

	// Loading MLC configuration into MLC registers.
	load_mlc_configuration(current_mlc_configuration, current_mlc_configuration_size);
 8004d52:	4b12      	ldr	r3, [pc, #72]	@ (8004d9c <ai_application_mlc_load_ucf+0xb4>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a0f      	ldr	r2, [pc, #60]	@ (8004d94 <ai_application_mlc_load_ucf+0xac>)
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff f9e5 	bl	800412c <load_mlc_configuration>

	// Starting MLC inference.
	sensor_init();
 8004d62:	f7ff fae3 	bl	800432c <sensor_init>
	mlc_inference = 1;
 8004d66:	4b0e      	ldr	r3, [pc, #56]	@ (8004da0 <ai_application_mlc_load_ucf+0xb8>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]
	if(mcu_inference){
 8004d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8004da4 <ai_application_mlc_load_ucf+0xbc>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <ai_application_mlc_load_ucf+0x94>
		MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(SENSOR_0,  SENSOR_0_STREAM_MODE);                   // Set the FIFO to Continuous/Stream Mode
 8004d74:	2106      	movs	r1, #6
 8004d76:	2000      	movs	r0, #0
 8004d78:	f7fe fa44 	bl	8003204 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>
	}
	return 0;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20042b58 	.word	0x20042b58
 8004d8c:	20044bc8 	.word	0x20044bc8
 8004d90:	20045434 	.word	0x20045434
 8004d94:	200007ac 	.word	0x200007ac
 8004d98:	20044bdc 	.word	0x20044bdc
 8004d9c:	200007a8 	.word	0x200007a8
 8004da0:	20044bd0 	.word	0x20044bd0
 8004da4:	20044bcc 	.word	0x20044bcc

08004da8 <ai_application_mlc_create_telemetry>:
uint8_t ai_application_mlc_create_telemetry(int label_id, char **telemetry, uint32_t *size)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b090      	sub	sp, #64	@ 0x40
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
	PnPLTelemetry_t telemetries[1];
	strcpy(telemetries[0].telemetry_name, "label_id");
 8004db4:	f107 0310 	add.w	r3, r7, #16
 8004db8:	4a0e      	ldr	r2, [pc, #56]	@ (8004df4 <ai_application_mlc_create_telemetry+0x4c>)
 8004dba:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dbc:	c303      	stmia	r3!, {r0, r1}
 8004dbe:	701a      	strb	r2, [r3, #0]
	telemetries[0].telemetry_value = (void*)& label_id;
 8004dc0:	f107 030c 	add.w	r3, r7, #12
 8004dc4:	633b      	str	r3, [r7, #48]	@ 0x30
	telemetries[0].telemetry_type = PNPL_INT;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	telemetries[0].n_sub_telemetries = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	PnPLSerializeTelemetry("ai_application_mlc", telemetries, 1, telemetry, size, 0);
 8004dd2:	f107 0110 	add.w	r1, r7, #16
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2201      	movs	r2, #1
 8004de2:	4805      	ldr	r0, [pc, #20]	@ (8004df8 <ai_application_mlc_create_telemetry+0x50>)
 8004de4:	f00d fb8a 	bl	80124fc <PnPLSerializeTelemetry>
	return 0;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3738      	adds	r7, #56	@ 0x38
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	08022924 	.word	0x08022924
 8004df8:	0802293c 	.word	0x0802293c

08004dfc <ai_application_ispu_comp_init>:

/* AI Application ISPU PnPL Component ----------------------------------------*/
uint8_t ai_application_ispu_comp_init(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
	app_model.ai_application_ispu_model.comp_name = ai_application_ispu_get_key();
 8004e00:	f000 f808 	bl	8004e14 <ai_application_ispu_get_key>
 8004e04:	4603      	mov	r3, r0
 8004e06:	4a02      	ldr	r2, [pc, #8]	@ (8004e10 <ai_application_ispu_comp_init+0x14>)
 8004e08:	60d3      	str	r3, [r2, #12]

	/* USER Component initialization code */
	return 0;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	20045400 	.word	0x20045400

08004e14 <ai_application_ispu_get_key>:
char* ai_application_ispu_get_key(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
	return "ai_application_ispu";
 8004e18:	4b02      	ldr	r3, [pc, #8]	@ (8004e24 <ai_application_ispu_get_key+0x10>)
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	08022950 	.word	0x08022950

08004e28 <ai_application_ispu_get_enable>:

uint8_t ai_application_ispu_get_enable(bool *value)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	/* USER Code */
	if(ispu_inference){
 8004e30:	4b08      	ldr	r3, [pc, #32]	@ (8004e54 <ai_application_ispu_get_enable+0x2c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <ai_application_ispu_get_enable+0x18>
		*value = true;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	e002      	b.n	8004e46 <ai_application_ispu_get_enable+0x1e>
	}
	else{
		*value = false;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	20044bd4 	.word	0x20044bd4

08004e58 <ai_application_ispu_get_mounted>:
uint8_t ai_application_ispu_get_mounted(bool *value)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
	/* USER Code */
	*value = ispu_get_mounted();
 8004e60:	f7ff fcfe 	bl	8004860 <ispu_get_mounted>
 8004e64:	4603      	mov	r3, r0
 8004e66:	461a      	mov	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	701a      	strb	r2, [r3, #0]
	return 0;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <ai_application_ispu_get_model_filename>:
uint8_t ai_application_ispu_get_model_filename(char **value)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
	/* USER Code */
	*value = ispu_model_filename;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a04      	ldr	r2, [pc, #16]	@ (8004e94 <ai_application_ispu_get_model_filename+0x1c>)
 8004e84:	601a      	str	r2, [r3, #0]
	return 0;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	20042b8c 	.word	0x20042b8c

08004e98 <ai_application_ispu_start>:
uint8_t ai_application_ispu_start(IAi_Application_Ispu_t *ifn)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	default_ai = ISPU;
 8004ea0:	4b10      	ldr	r3, [pc, #64]	@ (8004ee4 <ai_application_ispu_start+0x4c>)
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	701a      	strb	r2, [r3, #0]
	int32_t ret = sensor_init();
 8004ea6:	f7ff fa41 	bl	800432c <sensor_init>
 8004eaa:	60f8      	str	r0, [r7, #12]
	if(ret == BSP_ERROR_NONE){
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <ai_application_ispu_start+0x30>
		load_ispu_configuration(current_ispu_configuration, current_ispu_configuration_size);
 8004eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee8 <ai_application_ispu_start+0x50>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a0d      	ldr	r2, [pc, #52]	@ (8004eec <ai_application_ispu_start+0x54>)
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	4611      	mov	r1, r2
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff f9db 	bl	8004278 <load_ispu_configuration>
		// Starting ISPU inference.
		ispu_inference = 1;
 8004ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef0 <ai_application_ispu_start+0x58>)
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
	}
	if(mcu_inference){
 8004ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef4 <ai_application_ispu_start+0x5c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <ai_application_ispu_start+0x40>
		MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(SENSOR_0,  SENSOR_0_STREAM_MODE);                   // Set the FIFO to Continuous/Stream Mode
 8004ed0:	2106      	movs	r1, #6
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	f7fe f996 	bl	8003204 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>
	}
	return 0;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20044bc8 	.word	0x20044bc8
 8004ee8:	200007b0 	.word	0x200007b0
 8004eec:	200007b4 	.word	0x200007b4
 8004ef0:	20044bd4 	.word	0x20044bd4
 8004ef4:	20044bcc 	.word	0x20044bcc

08004ef8 <ai_application_ispu_stop>:
uint8_t ai_application_ispu_stop(IAi_Application_Ispu_t *ifn)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
	ispu_inference = 0;
 8004f00:	4b08      	ldr	r3, [pc, #32]	@ (8004f24 <ai_application_ispu_stop+0x2c>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
	if(mcu_inference){
 8004f06:	4b08      	ldr	r3, [pc, #32]	@ (8004f28 <ai_application_ispu_stop+0x30>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <ai_application_ispu_stop+0x22>
		sensor_init();
 8004f0e:	f7ff fa0d 	bl	800432c <sensor_init>
		// Set the FIFO to Continuous/Stream Mode.
		MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(SENSOR_0,  SENSOR_0_STREAM_MODE);                   // Set the FIFO to Continuous/Stream Mode
 8004f12:	2106      	movs	r1, #6
 8004f14:	2000      	movs	r0, #0
 8004f16:	f7fe f975 	bl	8003204 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>
	}
	return 0;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	20044bd4 	.word	0x20044bd4
 8004f28:	20044bcc 	.word	0x20044bcc

08004f2c <ai_application_ispu_load_ucf>:
uint8_t ai_application_ispu_load_ucf(IAi_Application_Ispu_t *ifn, const char *filename, int32_t content_size, const char *content)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	603b      	str	r3, [r7, #0]
	/* USER Code */
	strcpy(ispu_model_filename, filename);
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	4823      	ldr	r0, [pc, #140]	@ (8004fcc <ai_application_ispu_load_ucf+0xa0>)
 8004f3e:	f019 fcb2 	bl	801e8a6 <strcpy>

	default_ai = ISPU;
 8004f42:	4b23      	ldr	r3, [pc, #140]	@ (8004fd0 <ai_application_ispu_load_ucf+0xa4>)
 8004f44:	2202      	movs	r2, #2
 8004f46:	701a      	strb	r2, [r3, #0]

	static ucf_line_ext_t* loaded_ispu_configuration;

	// De-allocating space for the ISPU configuration structure.
	free(loaded_ispu_configuration);
 8004f48:	4b22      	ldr	r3, [pc, #136]	@ (8004fd4 <ai_application_ispu_load_ucf+0xa8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f017 fac7 	bl	801c4e0 <free>

	// Allocating space for the ISPU configuration structure.
	current_ispu_configuration_size = 0;
 8004f52:	4b21      	ldr	r3, [pc, #132]	@ (8004fd8 <ai_application_ispu_load_ucf+0xac>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
	current_ispu_configuration_size = get_ucf_number_of_lines(content_size, content);
 8004f58:	6839      	ldr	r1, [r7, #0]
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff fa74 	bl	8004448 <get_ucf_number_of_lines>
 8004f60:	4603      	mov	r3, r0
 8004f62:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd8 <ai_application_ispu_load_ucf+0xac>)
 8004f64:	6013      	str	r3, [r2, #0]
	loaded_ispu_configuration = (ucf_line_ext_t*) calloc(current_ispu_configuration_size, sizeof(ucf_line_ext_t));
 8004f66:	4b1c      	ldr	r3, [pc, #112]	@ (8004fd8 <ai_application_ispu_load_ucf+0xac>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2103      	movs	r1, #3
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f017 fa93 	bl	801c498 <calloc>
 8004f72:	4603      	mov	r3, r0
 8004f74:	461a      	mov	r2, r3
 8004f76:	4b17      	ldr	r3, [pc, #92]	@ (8004fd4 <ai_application_ispu_load_ucf+0xa8>)
 8004f78:	601a      	str	r2, [r3, #0]

	// Filling ISPU configuration structure from UCF file.
	fill_ispu_configuration(content, loaded_ispu_configuration);
 8004f7a:	4b16      	ldr	r3, [pc, #88]	@ (8004fd4 <ai_application_ispu_load_ucf+0xa8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4619      	mov	r1, r3
 8004f80:	6838      	ldr	r0, [r7, #0]
 8004f82:	f7ff fae5 	bl	8004550 <fill_ispu_configuration>

	// Update ISPU configuration structure.
	current_ispu_configuration = loaded_ispu_configuration;
 8004f86:	4b13      	ldr	r3, [pc, #76]	@ (8004fd4 <ai_application_ispu_load_ucf+0xa8>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a14      	ldr	r2, [pc, #80]	@ (8004fdc <ai_application_ispu_load_ucf+0xb0>)
 8004f8c:	6013      	str	r3, [r2, #0]

	int32_t ret = sensor_init();
 8004f8e:	f7ff f9cd 	bl	800432c <sensor_init>
 8004f92:	6178      	str	r0, [r7, #20]

	// Loading ISPU configuration into ISPU registers.
	if(ret == BSP_ERROR_NONE){
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10a      	bne.n	8004fb0 <ai_application_ispu_load_ucf+0x84>
		load_ispu_configuration(current_ispu_configuration, current_ispu_configuration_size);
 8004f9a:	4b10      	ldr	r3, [pc, #64]	@ (8004fdc <ai_application_ispu_load_ucf+0xb0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8004fd8 <ai_application_ispu_load_ucf+0xac>)
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff f967 	bl	8004278 <load_ispu_configuration>
		// Starting ISPU inference.
		ispu_inference = 1;
 8004faa:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe0 <ai_application_ispu_load_ucf+0xb4>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
	}
	if(mcu_inference){
 8004fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe4 <ai_application_ispu_load_ucf+0xb8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <ai_application_ispu_load_ucf+0x94>
		MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(SENSOR_0,  SENSOR_0_STREAM_MODE);                   // Set the FIFO to Continuous/Stream Mode
 8004fb8:	2106      	movs	r1, #6
 8004fba:	2000      	movs	r0, #0
 8004fbc:	f7fe f922 	bl	8003204 <MY_CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>
	}
	return 0;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20042b8c 	.word	0x20042b8c
 8004fd0:	20044bc8 	.word	0x20044bc8
 8004fd4:	20045438 	.word	0x20045438
 8004fd8:	200007b4 	.word	0x200007b4
 8004fdc:	200007b0 	.word	0x200007b0
 8004fe0:	20044bd4 	.word	0x20044bd4
 8004fe4:	20044bcc 	.word	0x20044bcc

08004fe8 <ai_application_ispu_create_telemetry>:
uint8_t ai_application_ispu_create_telemetry(int label_id, char **telemetry, uint32_t *size)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b090      	sub	sp, #64	@ 0x40
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
	PnPLTelemetry_t telemetries[1];
	strcpy(telemetries[0].telemetry_name, "label_id");
 8004ff4:	f107 0310 	add.w	r3, r7, #16
 8004ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8005034 <ai_application_ispu_create_telemetry+0x4c>)
 8004ffa:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ffc:	c303      	stmia	r3!, {r0, r1}
 8004ffe:	701a      	strb	r2, [r3, #0]
	telemetries[0].telemetry_value = (void*)& label_id;
 8005000:	f107 030c 	add.w	r3, r7, #12
 8005004:	633b      	str	r3, [r7, #48]	@ 0x30
	telemetries[0].telemetry_type = PNPL_INT;
 8005006:	2300      	movs	r3, #0
 8005008:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	telemetries[0].n_sub_telemetries = 0;
 800500c:	2300      	movs	r3, #0
 800500e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	PnPLSerializeTelemetry("ai_application_ispu", telemetries, 1, telemetry, size, 0);
 8005012:	f107 0110 	add.w	r1, r7, #16
 8005016:	2300      	movs	r3, #0
 8005018:	9301      	str	r3, [sp, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2201      	movs	r2, #1
 8005022:	4805      	ldr	r0, [pc, #20]	@ (8005038 <ai_application_ispu_create_telemetry+0x50>)
 8005024:	f00d fa6a 	bl	80124fc <PnPLSerializeTelemetry>
	return 0;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3738      	adds	r7, #56	@ 0x38
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	08022924 	.word	0x08022924
 8005038:	08022950 	.word	0x08022950

0800503c <controller_comp_init>:

/* Controller PnPL Component -------------------------------------------------*/
uint8_t controller_comp_init(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
	app_model.controller_model.comp_name = controller_get_key();
 8005040:	f000 f808 	bl	8005054 <controller_get_key>
 8005044:	4603      	mov	r3, r0
 8005046:	4a02      	ldr	r2, [pc, #8]	@ (8005050 <controller_comp_init+0x14>)
 8005048:	6113      	str	r3, [r2, #16]

	/* USER Component initialization code */
	return 0;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	bd80      	pop	{r7, pc}
 8005050:	20045400 	.word	0x20045400

08005054 <controller_get_key>:
char* controller_get_key(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
	return "controller";
 8005058:	4b02      	ldr	r3, [pc, #8]	@ (8005064 <controller_get_key+0x10>)
}
 800505a:	4618      	mov	r0, r3
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	08022964 	.word	0x08022964

08005068 <controller_switch_bank>:
uint8_t controller_switch_bank(IController_t *ifn)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
	ToggleFlashBank();
 8005070:	f7ff fc86 	bl	8004980 <ToggleFlashBank>
	return 0;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <controller_set_dfu_mode>:
uint8_t controller_set_dfu_mode(IController_t *ifn)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  jump_to_bootloader();
 8005086:	f7ff fc5d 	bl	8004944 <jump_to_bootloader>
  return 0;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <DeviceInformation_comp_init>:

/* Device Information PnPL Component -----------------------------------------*/
uint8_t DeviceInformation_comp_init(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0

	/* USER Component initialization code */
	return 0;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <DeviceInformation_get_key>:
char* DeviceInformation_get_key(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
	return "DeviceInformation";
 80050a8:	4b02      	ldr	r3, [pc, #8]	@ (80050b4 <DeviceInformation_get_key+0x10>)
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	08022970 	.word	0x08022970

080050b8 <DeviceInformation_get_manufacturer>:

uint8_t DeviceInformation_get_manufacturer(char **value)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
	/* USER Code */
	*value = "STMicroelectronics";
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a04      	ldr	r2, [pc, #16]	@ (80050d4 <DeviceInformation_get_manufacturer+0x1c>)
 80050c4:	601a      	str	r2, [r3, #0]
	return 0;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	08022984 	.word	0x08022984

080050d8 <DeviceInformation_get_model>:
uint8_t DeviceInformation_get_model(char **value)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
	/* USER Code */
	*value = "STEVAL-MKBOXPRO";
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a04      	ldr	r2, [pc, #16]	@ (80050f4 <DeviceInformation_get_model+0x1c>)
 80050e4:	601a      	str	r2, [r3, #0]
	return 0;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	08022998 	.word	0x08022998

080050f8 <DeviceInformation_get_swVersion>:
uint8_t DeviceInformation_get_swVersion(char **value)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
	/* USER Code */
	*value = "1.0.0";
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a04      	ldr	r2, [pc, #16]	@ (8005114 <DeviceInformation_get_swVersion+0x1c>)
 8005104:	601a      	str	r2, [r3, #0]
	return 0;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	080229a8 	.word	0x080229a8

08005118 <DeviceInformation_get_osName>:
uint8_t DeviceInformation_get_osName(char **value)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	/* USER Code */
	*value = "Bare metal";
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a04      	ldr	r2, [pc, #16]	@ (8005134 <DeviceInformation_get_osName+0x1c>)
 8005124:	601a      	str	r2, [r3, #0]
	return 0;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	080229b0 	.word	0x080229b0

08005138 <DeviceInformation_get_processorArchitecture>:
uint8_t DeviceInformation_get_processorArchitecture(char **value)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
	/* USER Code */
	*value = "ARM Cortex-M33";
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a04      	ldr	r2, [pc, #16]	@ (8005154 <DeviceInformation_get_processorArchitecture+0x1c>)
 8005144:	601a      	str	r2, [r3, #0]
	return 0;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	080229bc 	.word	0x080229bc

08005158 <DeviceInformation_get_processorManufacturer>:
uint8_t DeviceInformation_get_processorManufacturer(char **value)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
	/* USER Code */
	*value = "STMicroelectronics";
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a04      	ldr	r2, [pc, #16]	@ (8005174 <DeviceInformation_get_processorManufacturer+0x1c>)
 8005164:	601a      	str	r2, [r3, #0]
	return 0;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	08022984 	.word	0x08022984

08005178 <DeviceInformation_get_totalStorage>:
uint8_t DeviceInformation_get_totalStorage(float *value)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
	/* USER Code */
	*value = 0.0;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
	return 0;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
	...

08005198 <DeviceInformation_get_totalMemory>:
uint8_t DeviceInformation_get_totalMemory(float *value)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	/* USER Code */
	*value = 784.0;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a04      	ldr	r2, [pc, #16]	@ (80051b4 <DeviceInformation_get_totalMemory+0x1c>)
 80051a4:	601a      	str	r2, [r3, #0]
	return 0;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	44440000 	.word	0x44440000

080051b8 <firmware_info_comp_init>:

/* Firmware Information PnPL Component ---------------------------------------*/
uint8_t firmware_info_comp_init(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
	app_model.firmware_info_model.comp_name = firmware_info_get_key();
 80051bc:	f000 f808 	bl	80051d0 <firmware_info_get_key>
 80051c0:	4603      	mov	r3, r0
 80051c2:	4a02      	ldr	r2, [pc, #8]	@ (80051cc <firmware_info_comp_init+0x14>)
 80051c4:	6153      	str	r3, [r2, #20]

	/* USER Component initialization code */
	return 0;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	20045400 	.word	0x20045400

080051d0 <firmware_info_get_key>:
char* firmware_info_get_key(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
	return "firmware_info";
 80051d4:	4b02      	ldr	r3, [pc, #8]	@ (80051e0 <firmware_info_get_key+0x10>)
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	080229cc 	.word	0x080229cc

080051e4 <firmware_info_get_alias>:

uint8_t firmware_info_get_alias(char **value)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
	/* USER Code */
	*value = "STBOX_PRO_001";
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a04      	ldr	r2, [pc, #16]	@ (8005200 <firmware_info_get_alias+0x1c>)
 80051f0:	601a      	str	r2, [r3, #0]
	return 0;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	080229dc 	.word	0x080229dc

08005204 <firmware_info_get_fw_name>:
uint8_t firmware_info_get_fw_name(char **value)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
	/* USER Code */
	if(default_ai == MCU){
 800520c:	4b0e      	ldr	r3, [pc, #56]	@ (8005248 <firmware_info_get_fw_name+0x44>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d103      	bne.n	800521c <firmware_info_get_fw_name+0x18>
	  *value = "SensorTile.box_PRO_ai_inertial_MCU";
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a0d      	ldr	r2, [pc, #52]	@ (800524c <firmware_info_get_fw_name+0x48>)
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	e00e      	b.n	800523a <firmware_info_get_fw_name+0x36>
	} else if(default_ai == MLC){
 800521c:	4b0a      	ldr	r3, [pc, #40]	@ (8005248 <firmware_info_get_fw_name+0x44>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d103      	bne.n	800522c <firmware_info_get_fw_name+0x28>
	  *value = "SensorTile.box_PRO_ai_inertial_MLC";
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a0a      	ldr	r2, [pc, #40]	@ (8005250 <firmware_info_get_fw_name+0x4c>)
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	e006      	b.n	800523a <firmware_info_get_fw_name+0x36>
	}
	  else if(default_ai == MLC){
 800522c:	4b06      	ldr	r3, [pc, #24]	@ (8005248 <firmware_info_get_fw_name+0x44>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d102      	bne.n	800523a <firmware_info_get_fw_name+0x36>
	  *value = "SensorTile.box_PRO_ai_inertial_ISPU";
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a07      	ldr	r2, [pc, #28]	@ (8005254 <firmware_info_get_fw_name+0x50>)
 8005238:	601a      	str	r2, [r3, #0]
	}

	return 0;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	20044bc8 	.word	0x20044bc8
 800524c:	080229ec 	.word	0x080229ec
 8005250:	08022a10 	.word	0x08022a10
 8005254:	08022a34 	.word	0x08022a34

08005258 <firmware_info_get_fw_version>:
uint8_t firmware_info_get_fw_version(char **value)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
	/* USER Code */
	*value = "1.0.0";
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a04      	ldr	r2, [pc, #16]	@ (8005274 <firmware_info_get_fw_version+0x1c>)
 8005264:	601a      	str	r2, [r3, #0]
	return 0;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	080229a8 	.word	0x080229a8

08005278 <firmware_info_get_part_number>:
uint8_t firmware_info_get_part_number(char **value)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
	/* USER Code */
	*value = "ai_inertial";
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a04      	ldr	r2, [pc, #16]	@ (8005294 <firmware_info_get_part_number+0x1c>)
 8005284:	601a      	str	r2, [r3, #0]
	return 0;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	08022a58 	.word	0x08022a58

08005298 <firmware_info_get_device_url>:
uint8_t firmware_info_get_device_url(char **value)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	/* USER Code */
	*value = "www.st.com/sensortileboxpro";
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a04      	ldr	r2, [pc, #16]	@ (80052b4 <firmware_info_get_device_url+0x1c>)
 80052a4:	601a      	str	r2, [r3, #0]
	return 0;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	08022a64 	.word	0x08022a64

080052b8 <firmware_info_get_fw_url>:
uint8_t firmware_info_get_fw_url(char **value)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	/* USER Code */
	*value = "";
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a04      	ldr	r2, [pc, #16]	@ (80052d4 <firmware_info_get_fw_url+0x1c>)
 80052c4:	601a      	str	r2, [r3, #0]
	return 0;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	08022a80 	.word	0x08022a80

080052d8 <firmware_info_get_mac_address>:
uint8_t firmware_info_get_mac_address(char **value)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* USER Code */
  *value = "";
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a04      	ldr	r2, [pc, #16]	@ (80052f4 <firmware_info_get_mac_address+0x1c>)
 80052e4:	601a      	str	r2, [r3, #0]
  return 0;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	08022a80 	.word	0x08022a80

080052f8 <PnPL_Components_Alloc>:
static IPnPLComponent_t *pController_PnPLObj = NULL;
static IPnPLComponent_t *pDeviceinformation_PnPLObj = NULL;
static IPnPLComponent_t *pFirmware_Info_PnPLObj = NULL;

uint8_t PnPL_Components_Alloc()
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* PnPL Components Allocation */
  pLsm6dsv16x_Acc_PnPLObj = Lsm6dsv16x_Acc_PnPLAlloc();
 80052fc:	f000 fef6 	bl	80060ec <Lsm6dsv16x_Acc_PnPLAlloc>
 8005300:	4603      	mov	r3, r0
 8005302:	4a11      	ldr	r2, [pc, #68]	@ (8005348 <PnPL_Components_Alloc+0x50>)
 8005304:	6013      	str	r3, [r2, #0]
  pAi_Application_Mcu_PnPLObj = Ai_Application_Mcu_PnPLAlloc();
 8005306:	f000 f9c9 	bl	800569c <Ai_Application_Mcu_PnPLAlloc>
 800530a:	4603      	mov	r3, r0
 800530c:	4a0f      	ldr	r2, [pc, #60]	@ (800534c <PnPL_Components_Alloc+0x54>)
 800530e:	6013      	str	r3, [r2, #0]
  pAi_Application_Mlc_PnPLObj = Ai_Application_Mlc_PnPLAlloc();
 8005310:	f000 fab2 	bl	8005878 <Ai_Application_Mlc_PnPLAlloc>
 8005314:	4603      	mov	r3, r0
 8005316:	4a0e      	ldr	r2, [pc, #56]	@ (8005350 <PnPL_Components_Alloc+0x58>)
 8005318:	6013      	str	r3, [r2, #0]
  pAi_Application_Ispu_PnPLObj = Ai_Application_Ispu_PnPLAlloc();
 800531a:	f000 f86b 	bl	80053f4 <Ai_Application_Ispu_PnPLAlloc>
 800531e:	4603      	mov	r3, r0
 8005320:	4a0c      	ldr	r2, [pc, #48]	@ (8005354 <PnPL_Components_Alloc+0x5c>)
 8005322:	6013      	str	r3, [r2, #0]
  pController_PnPLObj = Controller_PnPLAlloc();
 8005324:	f000 fbf0 	bl	8005b08 <Controller_PnPLAlloc>
 8005328:	4603      	mov	r3, r0
 800532a:	4a0b      	ldr	r2, [pc, #44]	@ (8005358 <PnPL_Components_Alloc+0x60>)
 800532c:	6013      	str	r3, [r2, #0]
  pDeviceinformation_PnPLObj = Deviceinformation_PnPLAlloc();
 800532e:	f000 fcc9 	bl	8005cc4 <Deviceinformation_PnPLAlloc>
 8005332:	4603      	mov	r3, r0
 8005334:	4a09      	ldr	r2, [pc, #36]	@ (800535c <PnPL_Components_Alloc+0x64>)
 8005336:	6013      	str	r3, [r2, #0]
  pFirmware_Info_PnPLObj = Firmware_Info_PnPLAlloc();
 8005338:	f000 fdd6 	bl	8005ee8 <Firmware_Info_PnPLAlloc>
 800533c:	4603      	mov	r3, r0
 800533e:	4a08      	ldr	r2, [pc, #32]	@ (8005360 <PnPL_Components_Alloc+0x68>)
 8005340:	6013      	str	r3, [r2, #0]
  return 0;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	bd80      	pop	{r7, pc}
 8005348:	2004543c 	.word	0x2004543c
 800534c:	20045440 	.word	0x20045440
 8005350:	20045444 	.word	0x20045444
 8005354:	20045448 	.word	0x20045448
 8005358:	2004544c 	.word	0x2004544c
 800535c:	20045450 	.word	0x20045450
 8005360:	20045454 	.word	0x20045454

08005364 <PnPL_Components_Init>:

uint8_t PnPL_Components_Init(IAi_Application_Mcu_t iAi_Application_Mcu, IAi_Application_Mlc_t iAi_Application_Mlc, IAi_Application_Ispu_t iAi_Application_Ispu, IController_t iController)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
  /* Init&Add PnPL Components */
  Lsm6dsv16x_Acc_PnPLInit(pLsm6dsv16x_Acc_PnPLObj);
 8005372:	4b19      	ldr	r3, [pc, #100]	@ (80053d8 <PnPL_Components_Init+0x74>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fece 	bl	8006118 <Lsm6dsv16x_Acc_PnPLInit>
  Ai_Application_Mcu_PnPLInit(pAi_Application_Mcu_PnPLObj, &iAi_Application_Mcu);
 800537c:	4b17      	ldr	r3, [pc, #92]	@ (80053dc <PnPL_Components_Init+0x78>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f107 020c 	add.w	r2, r7, #12
 8005384:	4611      	mov	r1, r2
 8005386:	4618      	mov	r0, r3
 8005388:	f000 f99e 	bl	80056c8 <Ai_Application_Mcu_PnPLInit>
  Ai_Application_Mlc_PnPLInit(pAi_Application_Mlc_PnPLObj, &iAi_Application_Mlc);
 800538c:	4b14      	ldr	r3, [pc, #80]	@ (80053e0 <PnPL_Components_Init+0x7c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f107 0208 	add.w	r2, r7, #8
 8005394:	4611      	mov	r1, r2
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fa84 	bl	80058a4 <Ai_Application_Mlc_PnPLInit>
  Ai_Application_Ispu_PnPLInit(pAi_Application_Ispu_PnPLObj, &iAi_Application_Ispu);
 800539c:	4b11      	ldr	r3, [pc, #68]	@ (80053e4 <PnPL_Components_Init+0x80>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	1d3a      	adds	r2, r7, #4
 80053a2:	4611      	mov	r1, r2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 f83b 	bl	8005420 <Ai_Application_Ispu_PnPLInit>
  Controller_PnPLInit(pController_PnPLObj, &iController);
 80053aa:	4b0f      	ldr	r3, [pc, #60]	@ (80053e8 <PnPL_Components_Init+0x84>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	463a      	mov	r2, r7
 80053b0:	4611      	mov	r1, r2
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fbbe 	bl	8005b34 <Controller_PnPLInit>
  Deviceinformation_PnPLInit(pDeviceinformation_PnPLObj);
 80053b8:	4b0c      	ldr	r3, [pc, #48]	@ (80053ec <PnPL_Components_Init+0x88>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fc97 	bl	8005cf0 <Deviceinformation_PnPLInit>
  Firmware_Info_PnPLInit(pFirmware_Info_PnPLObj);
 80053c2:	4b0b      	ldr	r3, [pc, #44]	@ (80053f0 <PnPL_Components_Init+0x8c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fda4 	bl	8005f14 <Firmware_Info_PnPLInit>
  return 0;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	2004543c 	.word	0x2004543c
 80053dc:	20045440 	.word	0x20045440
 80053e0:	20045444 	.word	0x20045444
 80053e4:	20045448 	.word	0x20045448
 80053e8:	2004544c 	.word	0x2004544c
 80053ec:	20045450 	.word	0x20045450
 80053f0:	20045454 	.word	0x20045454

080053f4 <Ai_Application_Ispu_PnPLAlloc>:
/* Objects instance ----------------------------------------------------------*/
static Ai_Application_Ispu_PnPL sAi_Application_Ispu_PnPL;

/* Public API definition -----------------------------------------------------*/
IPnPLComponent_t *Ai_Application_Ispu_PnPLAlloc()
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
  IPnPLComponent_t *pxObj = (IPnPLComponent_t *) &sAi_Application_Ispu_PnPL;
 80053fa:	4b07      	ldr	r3, [pc, #28]	@ (8005418 <Ai_Application_Ispu_PnPLAlloc+0x24>)
 80053fc:	607b      	str	r3, [r7, #4]
  if (pxObj != NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <Ai_Application_Ispu_PnPLAlloc+0x16>
  {
    pxObj->vptr = &sAi_Application_Ispu_PnPL_CompIF_vtbl;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a05      	ldr	r2, [pc, #20]	@ (800541c <Ai_Application_Ispu_PnPLAlloc+0x28>)
 8005408:	601a      	str	r2, [r3, #0]
  }
  return pxObj;
 800540a:	687b      	ldr	r3, [r7, #4]
}
 800540c:	4618      	mov	r0, r3
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	20045458 	.word	0x20045458
 800541c:	080363e4 	.word	0x080363e4

08005420 <Ai_Application_Ispu_PnPLInit>:

uint8_t Ai_Application_Ispu_PnPLInit(IPnPLComponent_t *_this,  IAi_Application_Ispu_t *inf)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  IPnPLComponent_t *component_if = _this;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60fb      	str	r3, [r7, #12]
  PnPLAddComponent(component_if);
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f00c fb82 	bl	8011b38 <PnPLAddComponent>
  Ai_Application_Ispu_PnPL *p_if_owner = (Ai_Application_Ispu_PnPL *) _this;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	60bb      	str	r3, [r7, #8]
  p_if_owner->cmdIF = inf;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	605a      	str	r2, [r3, #4]
  ai_application_ispu_comp_init();
 800543e:	f7ff fcdd 	bl	8004dfc <ai_application_ispu_comp_init>
  return 0;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <Ai_Application_Ispu_PnPL_vtblGetKey>:

/* IPnPLComponent virtual functions definition -------------------------------*/
char *Ai_Application_Ispu_PnPL_vtblGetKey(IPnPLComponent_t *_this)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  return ai_application_ispu_get_key();
 8005454:	f7ff fcde 	bl	8004e14 <ai_application_ispu_get_key>
 8005458:	4603      	mov	r3, r0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <Ai_Application_Ispu_PnPL_vtblGetNCommands>:

uint8_t Ai_Application_Ispu_PnPL_vtblGetNCommands(IPnPLComponent_t *_this)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  return 3;
 800546a:	2303      	movs	r3, #3
}
 800546c:	4618      	mov	r0, r3
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <Ai_Application_Ispu_PnPL_vtblGetCommandKey>:

char *Ai_Application_Ispu_PnPL_vtblGetCommandKey(IPnPLComponent_t *_this, uint8_t id)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	70fb      	strb	r3, [r7, #3]
  switch (id)
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d00a      	beq.n	80054a0 <Ai_Application_Ispu_PnPL_vtblGetCommandKey+0x28>
 800548a:	2b02      	cmp	r3, #2
 800548c:	dc0a      	bgt.n	80054a4 <Ai_Application_Ispu_PnPL_vtblGetCommandKey+0x2c>
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <Ai_Application_Ispu_PnPL_vtblGetCommandKey+0x20>
 8005492:	2b01      	cmp	r3, #1
 8005494:	d002      	beq.n	800549c <Ai_Application_Ispu_PnPL_vtblGetCommandKey+0x24>
 8005496:	e005      	b.n	80054a4 <Ai_Application_Ispu_PnPL_vtblGetCommandKey+0x2c>
  {
  case 0:
    return "ai_application_ispu*start";
 8005498:	4b06      	ldr	r3, [pc, #24]	@ (80054b4 <Ai_Application_Ispu_PnPL_vtblGetCommandKey+0x3c>)
 800549a:	e004      	b.n	80054a6 <Ai_Application_Ispu_PnPL_vtblGetCommandKey+0x2e>
    break;
  case 1:
    return "ai_application_ispu*stop";
 800549c:	4b06      	ldr	r3, [pc, #24]	@ (80054b8 <Ai_Application_Ispu_PnPL_vtblGetCommandKey+0x40>)
 800549e:	e002      	b.n	80054a6 <Ai_Application_Ispu_PnPL_vtblGetCommandKey+0x2e>
    break;
  case 2:
    return "ai_application_ispu*load_ucf";
 80054a0:	4b06      	ldr	r3, [pc, #24]	@ (80054bc <Ai_Application_Ispu_PnPL_vtblGetCommandKey+0x44>)
 80054a2:	e000      	b.n	80054a6 <Ai_Application_Ispu_PnPL_vtblGetCommandKey+0x2e>
    break;
  }
  return 0;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	08022a84 	.word	0x08022a84
 80054b8:	08022aa0 	.word	0x08022aa0
 80054bc:	08022abc 	.word	0x08022abc

080054c0 <Ai_Application_Ispu_PnPL_vtblGetStatus>:

uint8_t Ai_Application_Ispu_PnPL_vtblGetStatus(IPnPLComponent_t *_this, char **serializedJSON, uint32_t *size, uint8_t pretty)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	70fb      	strb	r3, [r7, #3]
  JSON_Value *tempJSON;
  JSON_Object *JSON_Status;

  tempJSON = json_value_init_object();
 80054ce:	f010 fd89 	bl	8015fe4 <json_value_init_object>
 80054d2:	61f8      	str	r0, [r7, #28]
  JSON_Status = json_value_get_object(tempJSON);
 80054d4:	69f8      	ldr	r0, [r7, #28]
 80054d6:	f010 fcbc 	bl	8015e52 <json_value_get_object>
 80054da:	61b8      	str	r0, [r7, #24]

  bool temp_b = 0;
 80054dc:	2300      	movs	r3, #0
 80054de:	75fb      	strb	r3, [r7, #23]
  ai_application_ispu_get_enable(&temp_b);
 80054e0:	f107 0317 	add.w	r3, r7, #23
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff fc9f 	bl	8004e28 <ai_application_ispu_get_enable>
  json_object_dotset_boolean(JSON_Status, "ai_application_ispu.enable", temp_b);
 80054ea:	7dfb      	ldrb	r3, [r7, #23]
 80054ec:	461a      	mov	r2, r3
 80054ee:	4926      	ldr	r1, [pc, #152]	@ (8005588 <Ai_Application_Ispu_PnPL_vtblGetStatus+0xc8>)
 80054f0:	69b8      	ldr	r0, [r7, #24]
 80054f2:	f011 f96b 	bl	80167cc <json_object_dotset_boolean>
  ai_application_ispu_get_mounted(&temp_b);
 80054f6:	f107 0317 	add.w	r3, r7, #23
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff fcac 	bl	8004e58 <ai_application_ispu_get_mounted>
  json_object_dotset_boolean(JSON_Status, "ai_application_ispu.mounted", temp_b);
 8005500:	7dfb      	ldrb	r3, [r7, #23]
 8005502:	461a      	mov	r2, r3
 8005504:	4921      	ldr	r1, [pc, #132]	@ (800558c <Ai_Application_Ispu_PnPL_vtblGetStatus+0xcc>)
 8005506:	69b8      	ldr	r0, [r7, #24]
 8005508:	f011 f960 	bl	80167cc <json_object_dotset_boolean>
  char *temp_s = "";
 800550c:	4b20      	ldr	r3, [pc, #128]	@ (8005590 <Ai_Application_Ispu_PnPL_vtblGetStatus+0xd0>)
 800550e:	613b      	str	r3, [r7, #16]
  ai_application_ispu_get_model_filename(&temp_s);
 8005510:	f107 0310 	add.w	r3, r7, #16
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff fcaf 	bl	8004e78 <ai_application_ispu_get_model_filename>
  json_object_dotset_string(JSON_Status, "ai_application_ispu.model_filename", temp_s);
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	461a      	mov	r2, r3
 800551e:	491d      	ldr	r1, [pc, #116]	@ (8005594 <Ai_Application_Ispu_PnPL_vtblGetStatus+0xd4>)
 8005520:	69b8      	ldr	r0, [r7, #24]
 8005522:	f011 f90b 	bl	801673c <json_object_dotset_string>
  json_object_dotset_number(JSON_Status, "ai_application_ispu.c_type", COMP_TYPE_OTHER);
 8005526:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8005580 <Ai_Application_Ispu_PnPL_vtblGetStatus+0xc0>
 800552a:	491b      	ldr	r1, [pc, #108]	@ (8005598 <Ai_Application_Ispu_PnPL_vtblGetStatus+0xd8>)
 800552c:	69b8      	ldr	r0, [r7, #24]
 800552e:	f011 f928 	bl	8016782 <json_object_dotset_number>

  if (pretty == 1)
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d10c      	bne.n	8005552 <Ai_Application_Ispu_PnPL_vtblGetStatus+0x92>
  {
    *serializedJSON = json_serialize_to_string_pretty(tempJSON);
 8005538:	69f8      	ldr	r0, [r7, #28]
 800553a:	f010 ff3d 	bl	80163b8 <json_serialize_to_string_pretty>
 800553e:	4602      	mov	r2, r0
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	601a      	str	r2, [r3, #0]
    *size = json_serialization_size_pretty(tempJSON);
 8005544:	69f8      	ldr	r0, [r7, #28]
 8005546:	f010 fef3 	bl	8016330 <json_serialization_size_pretty>
 800554a:	4602      	mov	r2, r0
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	e00b      	b.n	800556a <Ai_Application_Ispu_PnPL_vtblGetStatus+0xaa>
  }
  else
  {
    *serializedJSON = json_serialize_to_string(tempJSON);
 8005552:	69f8      	ldr	r0, [r7, #28]
 8005554:	f010 feba 	bl	80162cc <json_serialize_to_string>
 8005558:	4602      	mov	r2, r0
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	601a      	str	r2, [r3, #0]
    *size = json_serialization_size(tempJSON);
 800555e:	69f8      	ldr	r0, [r7, #28]
 8005560:	f010 fe70 	bl	8016244 <json_serialization_size>
 8005564:	4602      	mov	r2, r0
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	601a      	str	r2, [r3, #0]
  }

  /* No need to free temp_j as it is part of tempJSON */
  json_value_free(tempJSON);
 800556a:	69f8      	ldr	r0, [r7, #28]
 800556c:	f010 fd0c 	bl	8015f88 <json_value_free>

  return 0;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	f3af 8000 	nop.w
 8005580:	00000000 	.word	0x00000000
 8005584:	40000000 	.word	0x40000000
 8005588:	08022adc 	.word	0x08022adc
 800558c:	08022af8 	.word	0x08022af8
 8005590:	08022b14 	.word	0x08022b14
 8005594:	08022b18 	.word	0x08022b18
 8005598:	08022b3c 	.word	0x08022b3c

0800559c <Ai_Application_Ispu_PnPL_vtblSetProperty>:

uint8_t Ai_Application_Ispu_PnPL_vtblSetProperty(IPnPLComponent_t *_this, char *serializedJSON)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  return 0;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <Ai_Application_Ispu_PnPL_vtblExecuteFunction>:

uint8_t Ai_Application_Ispu_PnPL_vtblExecuteFunction(IPnPLComponent_t *_this, char *serializedJSON)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  Ai_Application_Ispu_PnPL *p_if_owner = (Ai_Application_Ispu_PnPL *) _this;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	61fb      	str	r3, [r7, #28]
  JSON_Value *tempJSON = json_parse_string(serializedJSON);
 80055c2:	6838      	ldr	r0, [r7, #0]
 80055c4:	f010 fa8a 	bl	8015adc <json_parse_string>
 80055c8:	61b8      	str	r0, [r7, #24]
  JSON_Object *tempJSONObject = json_value_get_object(tempJSON);
 80055ca:	69b8      	ldr	r0, [r7, #24]
 80055cc:	f010 fc41 	bl	8015e52 <json_value_get_object>
 80055d0:	6178      	str	r0, [r7, #20]
  if (json_object_dothas_value(tempJSONObject, "ai_application_ispu*start"))
 80055d2:	492c      	ldr	r1, [pc, #176]	@ (8005684 <Ai_Application_Ispu_PnPL_vtblExecuteFunction+0xd0>)
 80055d4:	6978      	ldr	r0, [r7, #20]
 80055d6:	f010 fbc8 	bl	8015d6a <json_object_dothas_value>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d004      	beq.n	80055ea <Ai_Application_Ispu_PnPL_vtblExecuteFunction+0x36>
  {
    ai_application_ispu_start(p_if_owner->cmdIF);
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff fc57 	bl	8004e98 <ai_application_ispu_start>
  }
  if (json_object_dothas_value(tempJSONObject, "ai_application_ispu*stop"))
 80055ea:	4927      	ldr	r1, [pc, #156]	@ (8005688 <Ai_Application_Ispu_PnPL_vtblExecuteFunction+0xd4>)
 80055ec:	6978      	ldr	r0, [r7, #20]
 80055ee:	f010 fbbc 	bl	8015d6a <json_object_dothas_value>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d004      	beq.n	8005602 <Ai_Application_Ispu_PnPL_vtblExecuteFunction+0x4e>
  {
    ai_application_ispu_stop(p_if_owner->cmdIF);
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff fc7b 	bl	8004ef8 <ai_application_ispu_stop>
  }
  if (json_object_dothas_value(tempJSONObject, "ai_application_ispu*load_ucf.arguments"))
 8005602:	4922      	ldr	r1, [pc, #136]	@ (800568c <Ai_Application_Ispu_PnPL_vtblExecuteFunction+0xd8>)
 8005604:	6978      	ldr	r0, [r7, #20]
 8005606:	f010 fbb0 	bl	8015d6a <json_object_dothas_value>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d031      	beq.n	8005674 <Ai_Application_Ispu_PnPL_vtblExecuteFunction+0xc0>
  {
    const char *filename;
    int32_t size;
    const char *content;
    if (json_object_dothas_value(tempJSONObject, "ai_application_ispu*load_ucf.arguments.filename"))
 8005610:	491f      	ldr	r1, [pc, #124]	@ (8005690 <Ai_Application_Ispu_PnPL_vtblExecuteFunction+0xdc>)
 8005612:	6978      	ldr	r0, [r7, #20]
 8005614:	f010 fba9 	bl	8015d6a <json_object_dothas_value>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d02a      	beq.n	8005674 <Ai_Application_Ispu_PnPL_vtblExecuteFunction+0xc0>
    {
      filename = json_object_dotget_string(tempJSONObject, "ai_application_ispu*load_ucf.arguments.filename");
 800561e:	491c      	ldr	r1, [pc, #112]	@ (8005690 <Ai_Application_Ispu_PnPL_vtblExecuteFunction+0xdc>)
 8005620:	6978      	ldr	r0, [r7, #20]
 8005622:	f010 fafb 	bl	8015c1c <json_object_dotget_string>
 8005626:	6138      	str	r0, [r7, #16]
      if (json_object_dothas_value(tempJSONObject, "ai_application_ispu*load_ucf.arguments.size"))
 8005628:	491a      	ldr	r1, [pc, #104]	@ (8005694 <Ai_Application_Ispu_PnPL_vtblExecuteFunction+0xe0>)
 800562a:	6978      	ldr	r0, [r7, #20]
 800562c:	f010 fb9d 	bl	8015d6a <json_object_dothas_value>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d01e      	beq.n	8005674 <Ai_Application_Ispu_PnPL_vtblExecuteFunction+0xc0>
      {
        size =(int32_t) json_object_dotget_number(tempJSONObject, "ai_application_ispu*load_ucf.arguments.size");
 8005636:	4917      	ldr	r1, [pc, #92]	@ (8005694 <Ai_Application_Ispu_PnPL_vtblExecuteFunction+0xe0>)
 8005638:	6978      	ldr	r0, [r7, #20]
 800563a:	f010 fb01 	bl	8015c40 <json_object_dotget_number>
 800563e:	ec53 2b10 	vmov	r2, r3, d0
 8005642:	4610      	mov	r0, r2
 8005644:	4619      	mov	r1, r3
 8005646:	f7fb fa95 	bl	8000b74 <__aeabi_d2iz>
 800564a:	4603      	mov	r3, r0
 800564c:	60fb      	str	r3, [r7, #12]
        if (json_object_dothas_value(tempJSONObject, "ai_application_ispu*load_ucf.arguments.content"))
 800564e:	4912      	ldr	r1, [pc, #72]	@ (8005698 <Ai_Application_Ispu_PnPL_vtblExecuteFunction+0xe4>)
 8005650:	6978      	ldr	r0, [r7, #20]
 8005652:	f010 fb8a 	bl	8015d6a <json_object_dothas_value>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00b      	beq.n	8005674 <Ai_Application_Ispu_PnPL_vtblExecuteFunction+0xc0>
        {
          content = json_object_dotget_string(tempJSONObject, "ai_application_ispu*load_ucf.arguments.content");
 800565c:	490e      	ldr	r1, [pc, #56]	@ (8005698 <Ai_Application_Ispu_PnPL_vtblExecuteFunction+0xe4>)
 800565e:	6978      	ldr	r0, [r7, #20]
 8005660:	f010 fadc 	bl	8015c1c <json_object_dotget_string>
 8005664:	60b8      	str	r0, [r7, #8]
          ai_application_ispu_load_ucf(p_if_owner->cmdIF, (char*) filename, size, (char*) content);
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	6858      	ldr	r0, [r3, #4]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	6939      	ldr	r1, [r7, #16]
 8005670:	f7ff fc5c 	bl	8004f2c <ai_application_ispu_load_ucf>
        }
      }
    }
  }
  json_value_free(tempJSON);
 8005674:	69b8      	ldr	r0, [r7, #24]
 8005676:	f010 fc87 	bl	8015f88 <json_value_free>
  return 0;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3720      	adds	r7, #32
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	08022a84 	.word	0x08022a84
 8005688:	08022aa0 	.word	0x08022aa0
 800568c:	08022b58 	.word	0x08022b58
 8005690:	08022b80 	.word	0x08022b80
 8005694:	08022bb0 	.word	0x08022bb0
 8005698:	08022bdc 	.word	0x08022bdc

0800569c <Ai_Application_Mcu_PnPLAlloc>:
/* Objects instance ----------------------------------------------------------*/
static Ai_Application_Mcu_PnPL sAi_Application_Mcu_PnPL;

/* Public API definition -----------------------------------------------------*/
IPnPLComponent_t *Ai_Application_Mcu_PnPLAlloc()
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
  IPnPLComponent_t *pxObj = (IPnPLComponent_t *) &sAi_Application_Mcu_PnPL;
 80056a2:	4b07      	ldr	r3, [pc, #28]	@ (80056c0 <Ai_Application_Mcu_PnPLAlloc+0x24>)
 80056a4:	607b      	str	r3, [r7, #4]
  if (pxObj != NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <Ai_Application_Mcu_PnPLAlloc+0x16>
  {
    pxObj->vptr = &sAi_Application_Mcu_PnPL_CompIF_vtbl;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a05      	ldr	r2, [pc, #20]	@ (80056c4 <Ai_Application_Mcu_PnPLAlloc+0x28>)
 80056b0:	601a      	str	r2, [r3, #0]
  }
  return pxObj;
 80056b2:	687b      	ldr	r3, [r7, #4]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	20045460 	.word	0x20045460
 80056c4:	080363fc 	.word	0x080363fc

080056c8 <Ai_Application_Mcu_PnPLInit>:

uint8_t Ai_Application_Mcu_PnPLInit(IPnPLComponent_t *_this,  IAi_Application_Mcu_t *inf)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  IPnPLComponent_t *component_if = _this;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	60fb      	str	r3, [r7, #12]
  PnPLAddComponent(component_if);
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f00c fa2e 	bl	8011b38 <PnPLAddComponent>
  Ai_Application_Mcu_PnPL *p_if_owner = (Ai_Application_Mcu_PnPL *) _this;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60bb      	str	r3, [r7, #8]
  p_if_owner->cmdIF = inf;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	605a      	str	r2, [r3, #4]
  ai_application_mcu_comp_init();
 80056e6:	f7ff f9e3 	bl	8004ab0 <ai_application_mcu_comp_init>
  return 0;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <Ai_Application_Mcu_PnPL_vtblGetKey>:

/* IPnPLComponent virtual functions definition -------------------------------*/
char *Ai_Application_Mcu_PnPL_vtblGetKey(IPnPLComponent_t *_this)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  return ai_application_mcu_get_key();
 80056fc:	f7ff f9e4 	bl	8004ac8 <ai_application_mcu_get_key>
 8005700:	4603      	mov	r3, r0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <Ai_Application_Mcu_PnPL_vtblGetNCommands>:

uint8_t Ai_Application_Mcu_PnPL_vtblGetNCommands(IPnPLComponent_t *_this)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  return 2;
 8005712:	2302      	movs	r3, #2
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <Ai_Application_Mcu_PnPL_vtblGetCommandKey>:

char *Ai_Application_Mcu_PnPL_vtblGetCommandKey(IPnPLComponent_t *_this, uint8_t id)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	70fb      	strb	r3, [r7, #3]
  switch (id)
 800572c:	78fb      	ldrb	r3, [r7, #3]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <Ai_Application_Mcu_PnPL_vtblGetCommandKey+0x18>
 8005732:	2b01      	cmp	r3, #1
 8005734:	d002      	beq.n	800573c <Ai_Application_Mcu_PnPL_vtblGetCommandKey+0x1c>
 8005736:	e003      	b.n	8005740 <Ai_Application_Mcu_PnPL_vtblGetCommandKey+0x20>
  {
  case 0:
    return "ai_application_mcu*start";
 8005738:	4b05      	ldr	r3, [pc, #20]	@ (8005750 <Ai_Application_Mcu_PnPL_vtblGetCommandKey+0x30>)
 800573a:	e002      	b.n	8005742 <Ai_Application_Mcu_PnPL_vtblGetCommandKey+0x22>
    break;
  case 1:
    return "ai_application_mcu*stop";
 800573c:	4b05      	ldr	r3, [pc, #20]	@ (8005754 <Ai_Application_Mcu_PnPL_vtblGetCommandKey+0x34>)
 800573e:	e000      	b.n	8005742 <Ai_Application_Mcu_PnPL_vtblGetCommandKey+0x22>
    break;
  }
  return 0;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	08022c0c 	.word	0x08022c0c
 8005754:	08022c28 	.word	0x08022c28

08005758 <Ai_Application_Mcu_PnPL_vtblGetStatus>:

uint8_t Ai_Application_Mcu_PnPL_vtblGetStatus(IPnPLComponent_t *_this, char **serializedJSON, uint32_t *size, uint8_t pretty)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	70fb      	strb	r3, [r7, #3]
  JSON_Value *tempJSON;
  JSON_Object *JSON_Status;

  tempJSON = json_value_init_object();
 8005766:	f010 fc3d 	bl	8015fe4 <json_value_init_object>
 800576a:	61f8      	str	r0, [r7, #28]
  JSON_Status = json_value_get_object(tempJSON);
 800576c:	69f8      	ldr	r0, [r7, #28]
 800576e:	f010 fb70 	bl	8015e52 <json_value_get_object>
 8005772:	61b8      	str	r0, [r7, #24]

  bool temp_b = 0;
 8005774:	2300      	movs	r3, #0
 8005776:	75fb      	strb	r3, [r7, #23]
  ai_application_mcu_get_enable(&temp_b);
 8005778:	f107 0317 	add.w	r3, r7, #23
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff f9ad 	bl	8004adc <ai_application_mcu_get_enable>
  json_object_dotset_boolean(JSON_Status, "ai_application_mcu.enable", temp_b);
 8005782:	7dfb      	ldrb	r3, [r7, #23]
 8005784:	461a      	mov	r2, r3
 8005786:	491a      	ldr	r1, [pc, #104]	@ (80057f0 <Ai_Application_Mcu_PnPL_vtblGetStatus+0x98>)
 8005788:	69b8      	ldr	r0, [r7, #24]
 800578a:	f011 f81f 	bl	80167cc <json_object_dotset_boolean>
  json_object_dotset_number(JSON_Status, "ai_application_mcu.c_type", COMP_TYPE_OTHER);
 800578e:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80057e8 <Ai_Application_Mcu_PnPL_vtblGetStatus+0x90>
 8005792:	4918      	ldr	r1, [pc, #96]	@ (80057f4 <Ai_Application_Mcu_PnPL_vtblGetStatus+0x9c>)
 8005794:	69b8      	ldr	r0, [r7, #24]
 8005796:	f010 fff4 	bl	8016782 <json_object_dotset_number>

  if (pretty == 1)
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d10c      	bne.n	80057ba <Ai_Application_Mcu_PnPL_vtblGetStatus+0x62>
  {
    *serializedJSON = json_serialize_to_string_pretty(tempJSON);
 80057a0:	69f8      	ldr	r0, [r7, #28]
 80057a2:	f010 fe09 	bl	80163b8 <json_serialize_to_string_pretty>
 80057a6:	4602      	mov	r2, r0
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	601a      	str	r2, [r3, #0]
    *size = json_serialization_size_pretty(tempJSON);
 80057ac:	69f8      	ldr	r0, [r7, #28]
 80057ae:	f010 fdbf 	bl	8016330 <json_serialization_size_pretty>
 80057b2:	4602      	mov	r2, r0
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	e00b      	b.n	80057d2 <Ai_Application_Mcu_PnPL_vtblGetStatus+0x7a>
  }
  else
  {
    *serializedJSON = json_serialize_to_string(tempJSON);
 80057ba:	69f8      	ldr	r0, [r7, #28]
 80057bc:	f010 fd86 	bl	80162cc <json_serialize_to_string>
 80057c0:	4602      	mov	r2, r0
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	601a      	str	r2, [r3, #0]
    *size = json_serialization_size(tempJSON);
 80057c6:	69f8      	ldr	r0, [r7, #28]
 80057c8:	f010 fd3c 	bl	8016244 <json_serialization_size>
 80057cc:	4602      	mov	r2, r0
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	601a      	str	r2, [r3, #0]
  }

  /* No need to free temp_j as it is part of tempJSON */
  json_value_free(tempJSON);
 80057d2:	69f8      	ldr	r0, [r7, #28]
 80057d4:	f010 fbd8 	bl	8015f88 <json_value_free>

  return 0;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3720      	adds	r7, #32
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	f3af 8000 	nop.w
 80057e8:	00000000 	.word	0x00000000
 80057ec:	40000000 	.word	0x40000000
 80057f0:	08022c40 	.word	0x08022c40
 80057f4:	08022c5c 	.word	0x08022c5c

080057f8 <Ai_Application_Mcu_PnPL_vtblSetProperty>:

uint8_t Ai_Application_Mcu_PnPL_vtblSetProperty(IPnPLComponent_t *_this, char *serializedJSON)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  return 0;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <Ai_Application_Mcu_PnPL_vtblExecuteFunction>:

uint8_t Ai_Application_Mcu_PnPL_vtblExecuteFunction(IPnPLComponent_t *_this, char *serializedJSON)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  Ai_Application_Mcu_PnPL *p_if_owner = (Ai_Application_Mcu_PnPL *) _this;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	617b      	str	r3, [r7, #20]
  JSON_Value *tempJSON = json_parse_string(serializedJSON);
 800581e:	6838      	ldr	r0, [r7, #0]
 8005820:	f010 f95c 	bl	8015adc <json_parse_string>
 8005824:	6138      	str	r0, [r7, #16]
  JSON_Object *tempJSONObject = json_value_get_object(tempJSON);
 8005826:	6938      	ldr	r0, [r7, #16]
 8005828:	f010 fb13 	bl	8015e52 <json_value_get_object>
 800582c:	60f8      	str	r0, [r7, #12]
  if (json_object_dothas_value(tempJSONObject, "ai_application_mcu*start"))
 800582e:	4910      	ldr	r1, [pc, #64]	@ (8005870 <Ai_Application_Mcu_PnPL_vtblExecuteFunction+0x60>)
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f010 fa9a 	bl	8015d6a <json_object_dothas_value>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d004      	beq.n	8005846 <Ai_Application_Mcu_PnPL_vtblExecuteFunction+0x36>
  {
    ai_application_mcu_start(p_if_owner->cmdIF);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff f963 	bl	8004b0c <ai_application_mcu_start>
  }
  if (json_object_dothas_value(tempJSONObject, "ai_application_mcu*stop"))
 8005846:	490b      	ldr	r1, [pc, #44]	@ (8005874 <Ai_Application_Mcu_PnPL_vtblExecuteFunction+0x64>)
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f010 fa8e 	bl	8015d6a <json_object_dothas_value>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d004      	beq.n	800585e <Ai_Application_Mcu_PnPL_vtblExecuteFunction+0x4e>
  {
    ai_application_mcu_stop(p_if_owner->cmdIF);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff f971 	bl	8004b40 <ai_application_mcu_stop>
  }
  json_value_free(tempJSON);
 800585e:	6938      	ldr	r0, [r7, #16]
 8005860:	f010 fb92 	bl	8015f88 <json_value_free>
  return 0;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	08022c0c 	.word	0x08022c0c
 8005874:	08022c28 	.word	0x08022c28

08005878 <Ai_Application_Mlc_PnPLAlloc>:
/* Objects instance ----------------------------------------------------------*/
static Ai_Application_Mlc_PnPL sAi_Application_Mlc_PnPL;

/* Public API definition -----------------------------------------------------*/
IPnPLComponent_t *Ai_Application_Mlc_PnPLAlloc()
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
  IPnPLComponent_t *pxObj = (IPnPLComponent_t *) &sAi_Application_Mlc_PnPL;
 800587e:	4b07      	ldr	r3, [pc, #28]	@ (800589c <Ai_Application_Mlc_PnPLAlloc+0x24>)
 8005880:	607b      	str	r3, [r7, #4]
  if (pxObj != NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <Ai_Application_Mlc_PnPLAlloc+0x16>
  {
    pxObj->vptr = &sAi_Application_Mlc_PnPL_CompIF_vtbl;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a05      	ldr	r2, [pc, #20]	@ (80058a0 <Ai_Application_Mlc_PnPLAlloc+0x28>)
 800588c:	601a      	str	r2, [r3, #0]
  }
  return pxObj;
 800588e:	687b      	ldr	r3, [r7, #4]
}
 8005890:	4618      	mov	r0, r3
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	20045468 	.word	0x20045468
 80058a0:	08036414 	.word	0x08036414

080058a4 <Ai_Application_Mlc_PnPLInit>:

uint8_t Ai_Application_Mlc_PnPLInit(IPnPLComponent_t *_this,  IAi_Application_Mlc_t *inf)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  IPnPLComponent_t *component_if = _this;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60fb      	str	r3, [r7, #12]
  PnPLAddComponent(component_if);
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f00c f940 	bl	8011b38 <PnPLAddComponent>
  Ai_Application_Mlc_PnPL *p_if_owner = (Ai_Application_Mlc_PnPL *) _this;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	60bb      	str	r3, [r7, #8]
  p_if_owner->cmdIF = inf;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	605a      	str	r2, [r3, #4]
  ai_application_mlc_comp_init();
 80058c2:	f7ff f98d 	bl	8004be0 <ai_application_mlc_comp_init>
  return 0;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <Ai_Application_Mlc_PnPL_vtblGetKey>:

/* IPnPLComponent virtual functions definition -------------------------------*/
char *Ai_Application_Mlc_PnPL_vtblGetKey(IPnPLComponent_t *_this)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  return ai_application_mlc_get_key();
 80058d8:	f7ff f98e 	bl	8004bf8 <ai_application_mlc_get_key>
 80058dc:	4603      	mov	r3, r0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <Ai_Application_Mlc_PnPL_vtblGetNCommands>:

uint8_t Ai_Application_Mlc_PnPL_vtblGetNCommands(IPnPLComponent_t *_this)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  return 3;
 80058ee:	2303      	movs	r3, #3
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <Ai_Application_Mlc_PnPL_vtblGetCommandKey>:

char *Ai_Application_Mlc_PnPL_vtblGetCommandKey(IPnPLComponent_t *_this, uint8_t id)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	70fb      	strb	r3, [r7, #3]
  switch (id)
 8005908:	78fb      	ldrb	r3, [r7, #3]
 800590a:	2b02      	cmp	r3, #2
 800590c:	d00a      	beq.n	8005924 <Ai_Application_Mlc_PnPL_vtblGetCommandKey+0x28>
 800590e:	2b02      	cmp	r3, #2
 8005910:	dc0a      	bgt.n	8005928 <Ai_Application_Mlc_PnPL_vtblGetCommandKey+0x2c>
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <Ai_Application_Mlc_PnPL_vtblGetCommandKey+0x20>
 8005916:	2b01      	cmp	r3, #1
 8005918:	d002      	beq.n	8005920 <Ai_Application_Mlc_PnPL_vtblGetCommandKey+0x24>
 800591a:	e005      	b.n	8005928 <Ai_Application_Mlc_PnPL_vtblGetCommandKey+0x2c>
  {
  case 0:
    return "ai_application_mlc*start";
 800591c:	4b06      	ldr	r3, [pc, #24]	@ (8005938 <Ai_Application_Mlc_PnPL_vtblGetCommandKey+0x3c>)
 800591e:	e004      	b.n	800592a <Ai_Application_Mlc_PnPL_vtblGetCommandKey+0x2e>
    break;
  case 1:
    return "ai_application_mlc*stop";
 8005920:	4b06      	ldr	r3, [pc, #24]	@ (800593c <Ai_Application_Mlc_PnPL_vtblGetCommandKey+0x40>)
 8005922:	e002      	b.n	800592a <Ai_Application_Mlc_PnPL_vtblGetCommandKey+0x2e>
    break;
  case 2:
    return "ai_application_mlc*load_ucf";
 8005924:	4b06      	ldr	r3, [pc, #24]	@ (8005940 <Ai_Application_Mlc_PnPL_vtblGetCommandKey+0x44>)
 8005926:	e000      	b.n	800592a <Ai_Application_Mlc_PnPL_vtblGetCommandKey+0x2e>
    break;
  }
  return 0;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	08022c78 	.word	0x08022c78
 800593c:	08022c94 	.word	0x08022c94
 8005940:	08022cac 	.word	0x08022cac
 8005944:	00000000 	.word	0x00000000

08005948 <Ai_Application_Mlc_PnPL_vtblGetStatus>:

uint8_t Ai_Application_Mlc_PnPL_vtblGetStatus(IPnPLComponent_t *_this, char **serializedJSON, uint32_t *size, uint8_t pretty)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	70fb      	strb	r3, [r7, #3]
  JSON_Value *tempJSON;
  JSON_Object *JSON_Status;

  tempJSON = json_value_init_object();
 8005956:	f010 fb45 	bl	8015fe4 <json_value_init_object>
 800595a:	61f8      	str	r0, [r7, #28]
  JSON_Status = json_value_get_object(tempJSON);
 800595c:	69f8      	ldr	r0, [r7, #28]
 800595e:	f010 fa78 	bl	8015e52 <json_value_get_object>
 8005962:	61b8      	str	r0, [r7, #24]

  bool temp_b = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	75fb      	strb	r3, [r7, #23]
  ai_application_mlc_get_enable(&temp_b);
 8005968:	f107 0317 	add.w	r3, r7, #23
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff f94d 	bl	8004c0c <ai_application_mlc_get_enable>
  json_object_dotset_boolean(JSON_Status, "ai_application_mlc.enable", temp_b);
 8005972:	7dfb      	ldrb	r3, [r7, #23]
 8005974:	461a      	mov	r2, r3
 8005976:	4920      	ldr	r1, [pc, #128]	@ (80059f8 <Ai_Application_Mlc_PnPL_vtblGetStatus+0xb0>)
 8005978:	69b8      	ldr	r0, [r7, #24]
 800597a:	f010 ff27 	bl	80167cc <json_object_dotset_boolean>
  char *temp_s = "";
 800597e:	4b1f      	ldr	r3, [pc, #124]	@ (80059fc <Ai_Application_Mlc_PnPL_vtblGetStatus+0xb4>)
 8005980:	613b      	str	r3, [r7, #16]
  ai_application_mlc_get_model_filename(&temp_s);
 8005982:	f107 0310 	add.w	r3, r7, #16
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff f958 	bl	8004c3c <ai_application_mlc_get_model_filename>
  json_object_dotset_string(JSON_Status, "ai_application_mlc.model_filename", temp_s);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	461a      	mov	r2, r3
 8005990:	491b      	ldr	r1, [pc, #108]	@ (8005a00 <Ai_Application_Mlc_PnPL_vtblGetStatus+0xb8>)
 8005992:	69b8      	ldr	r0, [r7, #24]
 8005994:	f010 fed2 	bl	801673c <json_object_dotset_string>
  json_object_dotset_number(JSON_Status, "ai_application_mlc.c_type", COMP_TYPE_OTHER);
 8005998:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 80059f0 <Ai_Application_Mlc_PnPL_vtblGetStatus+0xa8>
 800599c:	4919      	ldr	r1, [pc, #100]	@ (8005a04 <Ai_Application_Mlc_PnPL_vtblGetStatus+0xbc>)
 800599e:	69b8      	ldr	r0, [r7, #24]
 80059a0:	f010 feef 	bl	8016782 <json_object_dotset_number>

  if (pretty == 1)
 80059a4:	78fb      	ldrb	r3, [r7, #3]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d10c      	bne.n	80059c4 <Ai_Application_Mlc_PnPL_vtblGetStatus+0x7c>
  {
    *serializedJSON = json_serialize_to_string_pretty(tempJSON);
 80059aa:	69f8      	ldr	r0, [r7, #28]
 80059ac:	f010 fd04 	bl	80163b8 <json_serialize_to_string_pretty>
 80059b0:	4602      	mov	r2, r0
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	601a      	str	r2, [r3, #0]
    *size = json_serialization_size_pretty(tempJSON);
 80059b6:	69f8      	ldr	r0, [r7, #28]
 80059b8:	f010 fcba 	bl	8016330 <json_serialization_size_pretty>
 80059bc:	4602      	mov	r2, r0
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	e00b      	b.n	80059dc <Ai_Application_Mlc_PnPL_vtblGetStatus+0x94>
  }
  else
  {
    *serializedJSON = json_serialize_to_string(tempJSON);
 80059c4:	69f8      	ldr	r0, [r7, #28]
 80059c6:	f010 fc81 	bl	80162cc <json_serialize_to_string>
 80059ca:	4602      	mov	r2, r0
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	601a      	str	r2, [r3, #0]
    *size = json_serialization_size(tempJSON);
 80059d0:	69f8      	ldr	r0, [r7, #28]
 80059d2:	f010 fc37 	bl	8016244 <json_serialization_size>
 80059d6:	4602      	mov	r2, r0
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	601a      	str	r2, [r3, #0]
  }

  /* No need to free temp_j as it is part of tempJSON */
  json_value_free(tempJSON);
 80059dc:	69f8      	ldr	r0, [r7, #28]
 80059de:	f010 fad3 	bl	8015f88 <json_value_free>

  return 0;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3720      	adds	r7, #32
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	f3af 8000 	nop.w
 80059f0:	00000000 	.word	0x00000000
 80059f4:	40000000 	.word	0x40000000
 80059f8:	08022cc8 	.word	0x08022cc8
 80059fc:	08022ce4 	.word	0x08022ce4
 8005a00:	08022ce8 	.word	0x08022ce8
 8005a04:	08022d0c 	.word	0x08022d0c

08005a08 <Ai_Application_Mlc_PnPL_vtblSetProperty>:

uint8_t Ai_Application_Mlc_PnPL_vtblSetProperty(IPnPLComponent_t *_this, char *serializedJSON)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  return 0;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <Ai_Application_Mlc_PnPL_vtblExecuteFunction>:

uint8_t Ai_Application_Mlc_PnPL_vtblExecuteFunction(IPnPLComponent_t *_this, char *serializedJSON)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b088      	sub	sp, #32
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  Ai_Application_Mlc_PnPL *p_if_owner = (Ai_Application_Mlc_PnPL *) _this;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	61fb      	str	r3, [r7, #28]
  JSON_Value *tempJSON = json_parse_string(serializedJSON);
 8005a2e:	6838      	ldr	r0, [r7, #0]
 8005a30:	f010 f854 	bl	8015adc <json_parse_string>
 8005a34:	61b8      	str	r0, [r7, #24]
  JSON_Object *tempJSONObject = json_value_get_object(tempJSON);
 8005a36:	69b8      	ldr	r0, [r7, #24]
 8005a38:	f010 fa0b 	bl	8015e52 <json_value_get_object>
 8005a3c:	6178      	str	r0, [r7, #20]
  if (json_object_dothas_value(tempJSONObject, "ai_application_mlc*start"))
 8005a3e:	492c      	ldr	r1, [pc, #176]	@ (8005af0 <Ai_Application_Mlc_PnPL_vtblExecuteFunction+0xd0>)
 8005a40:	6978      	ldr	r0, [r7, #20]
 8005a42:	f010 f992 	bl	8015d6a <json_object_dothas_value>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d004      	beq.n	8005a56 <Ai_Application_Mlc_PnPL_vtblExecuteFunction+0x36>
  {
    ai_application_mlc_start(p_if_owner->cmdIF);
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff f903 	bl	8004c5c <ai_application_mlc_start>
  }
  if (json_object_dothas_value(tempJSONObject, "ai_application_mlc*stop"))
 8005a56:	4927      	ldr	r1, [pc, #156]	@ (8005af4 <Ai_Application_Mlc_PnPL_vtblExecuteFunction+0xd4>)
 8005a58:	6978      	ldr	r0, [r7, #20]
 8005a5a:	f010 f986 	bl	8015d6a <json_object_dothas_value>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d004      	beq.n	8005a6e <Ai_Application_Mlc_PnPL_vtblExecuteFunction+0x4e>
  {
    ai_application_mlc_stop(p_if_owner->cmdIF);
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff f923 	bl	8004cb4 <ai_application_mlc_stop>
  }
  if (json_object_dothas_value(tempJSONObject, "ai_application_mlc*load_ucf.arguments"))
 8005a6e:	4922      	ldr	r1, [pc, #136]	@ (8005af8 <Ai_Application_Mlc_PnPL_vtblExecuteFunction+0xd8>)
 8005a70:	6978      	ldr	r0, [r7, #20]
 8005a72:	f010 f97a 	bl	8015d6a <json_object_dothas_value>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d031      	beq.n	8005ae0 <Ai_Application_Mlc_PnPL_vtblExecuteFunction+0xc0>
  {
    const char *filename;
    int32_t size;
    const char *content;
    if (json_object_dothas_value(tempJSONObject, "ai_application_mlc*load_ucf.arguments.filename"))
 8005a7c:	491f      	ldr	r1, [pc, #124]	@ (8005afc <Ai_Application_Mlc_PnPL_vtblExecuteFunction+0xdc>)
 8005a7e:	6978      	ldr	r0, [r7, #20]
 8005a80:	f010 f973 	bl	8015d6a <json_object_dothas_value>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d02a      	beq.n	8005ae0 <Ai_Application_Mlc_PnPL_vtblExecuteFunction+0xc0>
    {
      filename = json_object_dotget_string(tempJSONObject, "ai_application_mlc*load_ucf.arguments.filename");
 8005a8a:	491c      	ldr	r1, [pc, #112]	@ (8005afc <Ai_Application_Mlc_PnPL_vtblExecuteFunction+0xdc>)
 8005a8c:	6978      	ldr	r0, [r7, #20]
 8005a8e:	f010 f8c5 	bl	8015c1c <json_object_dotget_string>
 8005a92:	6138      	str	r0, [r7, #16]
      if (json_object_dothas_value(tempJSONObject, "ai_application_mlc*load_ucf.arguments.size"))
 8005a94:	491a      	ldr	r1, [pc, #104]	@ (8005b00 <Ai_Application_Mlc_PnPL_vtblExecuteFunction+0xe0>)
 8005a96:	6978      	ldr	r0, [r7, #20]
 8005a98:	f010 f967 	bl	8015d6a <json_object_dothas_value>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d01e      	beq.n	8005ae0 <Ai_Application_Mlc_PnPL_vtblExecuteFunction+0xc0>
      {
        size =(int32_t) json_object_dotget_number(tempJSONObject, "ai_application_mlc*load_ucf.arguments.size");
 8005aa2:	4917      	ldr	r1, [pc, #92]	@ (8005b00 <Ai_Application_Mlc_PnPL_vtblExecuteFunction+0xe0>)
 8005aa4:	6978      	ldr	r0, [r7, #20]
 8005aa6:	f010 f8cb 	bl	8015c40 <json_object_dotget_number>
 8005aaa:	ec53 2b10 	vmov	r2, r3, d0
 8005aae:	4610      	mov	r0, r2
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f7fb f85f 	bl	8000b74 <__aeabi_d2iz>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	60fb      	str	r3, [r7, #12]
        if (json_object_dothas_value(tempJSONObject, "ai_application_mlc*load_ucf.arguments.content"))
 8005aba:	4912      	ldr	r1, [pc, #72]	@ (8005b04 <Ai_Application_Mlc_PnPL_vtblExecuteFunction+0xe4>)
 8005abc:	6978      	ldr	r0, [r7, #20]
 8005abe:	f010 f954 	bl	8015d6a <json_object_dothas_value>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00b      	beq.n	8005ae0 <Ai_Application_Mlc_PnPL_vtblExecuteFunction+0xc0>
        {
          content = json_object_dotget_string(tempJSONObject, "ai_application_mlc*load_ucf.arguments.content");
 8005ac8:	490e      	ldr	r1, [pc, #56]	@ (8005b04 <Ai_Application_Mlc_PnPL_vtblExecuteFunction+0xe4>)
 8005aca:	6978      	ldr	r0, [r7, #20]
 8005acc:	f010 f8a6 	bl	8015c1c <json_object_dotget_string>
 8005ad0:	60b8      	str	r0, [r7, #8]
          ai_application_mlc_load_ucf(p_if_owner->cmdIF, (char*) filename, size, (char*) content);
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	6858      	ldr	r0, [r3, #4]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	6939      	ldr	r1, [r7, #16]
 8005adc:	f7ff f904 	bl	8004ce8 <ai_application_mlc_load_ucf>
        }
      }
    }
  }
  json_value_free(tempJSON);
 8005ae0:	69b8      	ldr	r0, [r7, #24]
 8005ae2:	f010 fa51 	bl	8015f88 <json_value_free>
  return 0;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3720      	adds	r7, #32
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	08022c78 	.word	0x08022c78
 8005af4:	08022c94 	.word	0x08022c94
 8005af8:	08022d28 	.word	0x08022d28
 8005afc:	08022d50 	.word	0x08022d50
 8005b00:	08022d80 	.word	0x08022d80
 8005b04:	08022dac 	.word	0x08022dac

08005b08 <Controller_PnPLAlloc>:
/* Objects instance ----------------------------------------------------------*/
static Controller_PnPL sController_PnPL;

/* Public API definition -----------------------------------------------------*/
IPnPLComponent_t *Controller_PnPLAlloc()
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
  IPnPLComponent_t *pxObj = (IPnPLComponent_t *) &sController_PnPL;
 8005b0e:	4b07      	ldr	r3, [pc, #28]	@ (8005b2c <Controller_PnPLAlloc+0x24>)
 8005b10:	607b      	str	r3, [r7, #4]
  if (pxObj != NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <Controller_PnPLAlloc+0x16>
  {
    pxObj->vptr = &sController_PnPL_CompIF_vtbl;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a05      	ldr	r2, [pc, #20]	@ (8005b30 <Controller_PnPLAlloc+0x28>)
 8005b1c:	601a      	str	r2, [r3, #0]
  }
  return pxObj;
 8005b1e:	687b      	ldr	r3, [r7, #4]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	20045470 	.word	0x20045470
 8005b30:	0803642c 	.word	0x0803642c

08005b34 <Controller_PnPLInit>:

uint8_t Controller_PnPLInit(IPnPLComponent_t *_this,  IController_t *inf)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  IPnPLComponent_t *component_if = _this;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60fb      	str	r3, [r7, #12]
  PnPLAddComponent(component_if);
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f00b fff8 	bl	8011b38 <PnPLAddComponent>
  Controller_PnPL *p_if_owner = (Controller_PnPL *) _this;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	60bb      	str	r3, [r7, #8]
  p_if_owner->cmdIF = inf;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	605a      	str	r2, [r3, #4]
  controller_comp_init();
 8005b52:	f7ff fa73 	bl	800503c <controller_comp_init>
  return 0;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <Controller_PnPL_vtblGetKey>:

/* IPnPLComponent virtual functions definition -------------------------------*/
char *Controller_PnPL_vtblGetKey(IPnPLComponent_t *_this)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  return controller_get_key();
 8005b68:	f7ff fa74 	bl	8005054 <controller_get_key>
 8005b6c:	4603      	mov	r3, r0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <Controller_PnPL_vtblGetNCommands>:

uint8_t Controller_PnPL_vtblGetNCommands(IPnPLComponent_t *_this)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  return 2;
 8005b7e:	2302      	movs	r3, #2
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <Controller_PnPL_vtblGetCommandKey>:

char *Controller_PnPL_vtblGetCommandKey(IPnPLComponent_t *_this, uint8_t id)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
  switch (id)
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <Controller_PnPL_vtblGetCommandKey+0x18>
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d002      	beq.n	8005ba8 <Controller_PnPL_vtblGetCommandKey+0x1c>
 8005ba2:	e003      	b.n	8005bac <Controller_PnPL_vtblGetCommandKey+0x20>
  {
  case 0:
    return "controller*switch_bank";
 8005ba4:	4b05      	ldr	r3, [pc, #20]	@ (8005bbc <Controller_PnPL_vtblGetCommandKey+0x30>)
 8005ba6:	e002      	b.n	8005bae <Controller_PnPL_vtblGetCommandKey+0x22>
    break;
  case 1:
    return "controller*set_dfu_mode";
 8005ba8:	4b05      	ldr	r3, [pc, #20]	@ (8005bc0 <Controller_PnPL_vtblGetCommandKey+0x34>)
 8005baa:	e000      	b.n	8005bae <Controller_PnPL_vtblGetCommandKey+0x22>
    break;
  }
  return 0;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	08022ddc 	.word	0x08022ddc
 8005bc0:	08022df4 	.word	0x08022df4
 8005bc4:	00000000 	.word	0x00000000

08005bc8 <Controller_PnPL_vtblGetStatus>:

uint8_t Controller_PnPL_vtblGetStatus(IPnPLComponent_t *_this, char **serializedJSON, uint32_t *size, uint8_t pretty)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	70fb      	strb	r3, [r7, #3]
  JSON_Value *tempJSON;
  JSON_Object *JSON_Status;

  tempJSON = json_value_init_object();
 8005bd6:	f010 fa05 	bl	8015fe4 <json_value_init_object>
 8005bda:	6178      	str	r0, [r7, #20]
  JSON_Status = json_value_get_object(tempJSON);
 8005bdc:	6978      	ldr	r0, [r7, #20]
 8005bde:	f010 f938 	bl	8015e52 <json_value_get_object>
 8005be2:	6138      	str	r0, [r7, #16]

  json_object_dotset_number(JSON_Status, "controller.c_type", COMP_TYPE_OTHER);
 8005be4:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 8005c38 <Controller_PnPL_vtblGetStatus+0x70>
 8005be8:	4915      	ldr	r1, [pc, #84]	@ (8005c40 <Controller_PnPL_vtblGetStatus+0x78>)
 8005bea:	6938      	ldr	r0, [r7, #16]
 8005bec:	f010 fdc9 	bl	8016782 <json_object_dotset_number>

  if (pretty == 1)
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d10c      	bne.n	8005c10 <Controller_PnPL_vtblGetStatus+0x48>
  {
    *serializedJSON = json_serialize_to_string_pretty(tempJSON);
 8005bf6:	6978      	ldr	r0, [r7, #20]
 8005bf8:	f010 fbde 	bl	80163b8 <json_serialize_to_string_pretty>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	601a      	str	r2, [r3, #0]
    *size = json_serialization_size_pretty(tempJSON);
 8005c02:	6978      	ldr	r0, [r7, #20]
 8005c04:	f010 fb94 	bl	8016330 <json_serialization_size_pretty>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	e00b      	b.n	8005c28 <Controller_PnPL_vtblGetStatus+0x60>
  }
  else
  {
    *serializedJSON = json_serialize_to_string(tempJSON);
 8005c10:	6978      	ldr	r0, [r7, #20]
 8005c12:	f010 fb5b 	bl	80162cc <json_serialize_to_string>
 8005c16:	4602      	mov	r2, r0
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	601a      	str	r2, [r3, #0]
    *size = json_serialization_size(tempJSON);
 8005c1c:	6978      	ldr	r0, [r7, #20]
 8005c1e:	f010 fb11 	bl	8016244 <json_serialization_size>
 8005c22:	4602      	mov	r2, r0
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	601a      	str	r2, [r3, #0]
  }

  /* No need to free temp_j as it is part of tempJSON */
  json_value_free(tempJSON);
 8005c28:	6978      	ldr	r0, [r7, #20]
 8005c2a:	f010 f9ad 	bl	8015f88 <json_value_free>

  return 0;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	00000000 	.word	0x00000000
 8005c3c:	40000000 	.word	0x40000000
 8005c40:	08022e0c 	.word	0x08022e0c

08005c44 <Controller_PnPL_vtblSetProperty>:

uint8_t Controller_PnPL_vtblSetProperty(IPnPLComponent_t *_this, char *serializedJSON)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  return 0;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <Controller_PnPL_vtblExecuteFunction>:

uint8_t Controller_PnPL_vtblExecuteFunction(IPnPLComponent_t *_this, char *serializedJSON)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  Controller_PnPL *p_if_owner = (Controller_PnPL *) _this;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	617b      	str	r3, [r7, #20]
  JSON_Value *tempJSON = json_parse_string(serializedJSON);
 8005c6a:	6838      	ldr	r0, [r7, #0]
 8005c6c:	f00f ff36 	bl	8015adc <json_parse_string>
 8005c70:	6138      	str	r0, [r7, #16]
  JSON_Object *tempJSONObject = json_value_get_object(tempJSON);
 8005c72:	6938      	ldr	r0, [r7, #16]
 8005c74:	f010 f8ed 	bl	8015e52 <json_value_get_object>
 8005c78:	60f8      	str	r0, [r7, #12]
    if (json_object_dothas_value(tempJSONObject, "controller*switch_bank"))
 8005c7a:	4910      	ldr	r1, [pc, #64]	@ (8005cbc <Controller_PnPL_vtblExecuteFunction+0x60>)
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f010 f874 	bl	8015d6a <json_object_dothas_value>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d004      	beq.n	8005c92 <Controller_PnPL_vtblExecuteFunction+0x36>
  {
    controller_switch_bank(p_if_owner->cmdIF);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7ff f9eb 	bl	8005068 <controller_switch_bank>
  }
  if (json_object_dothas_value(tempJSONObject, "controller*set_dfu_mode"))
 8005c92:	490b      	ldr	r1, [pc, #44]	@ (8005cc0 <Controller_PnPL_vtblExecuteFunction+0x64>)
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f010 f868 	bl	8015d6a <json_object_dothas_value>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d004      	beq.n	8005caa <Controller_PnPL_vtblExecuteFunction+0x4e>
  {
    controller_set_dfu_mode(p_if_owner->cmdIF);
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7ff f9ea 	bl	800507e <controller_set_dfu_mode>
  }
  json_value_free(tempJSON);
 8005caa:	6938      	ldr	r0, [r7, #16]
 8005cac:	f010 f96c 	bl	8015f88 <json_value_free>
  return 0;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	08022ddc 	.word	0x08022ddc
 8005cc0:	08022df4 	.word	0x08022df4

08005cc4 <Deviceinformation_PnPLAlloc>:
/* Objects instance ----------------------------------------------------------*/
static Deviceinformation_PnPL sDeviceinformation_PnPL;

/* Public API definition -----------------------------------------------------*/
IPnPLComponent_t *Deviceinformation_PnPLAlloc()
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
  IPnPLComponent_t *pxObj = (IPnPLComponent_t *) &sDeviceinformation_PnPL;
 8005cca:	4b07      	ldr	r3, [pc, #28]	@ (8005ce8 <Deviceinformation_PnPLAlloc+0x24>)
 8005ccc:	607b      	str	r3, [r7, #4]
  if (pxObj != NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <Deviceinformation_PnPLAlloc+0x16>
  {
    pxObj->vptr = &sDeviceinformation_PnPL_CompIF_vtbl;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a05      	ldr	r2, [pc, #20]	@ (8005cec <Deviceinformation_PnPLAlloc+0x28>)
 8005cd8:	601a      	str	r2, [r3, #0]
  }
  return pxObj;
 8005cda:	687b      	ldr	r3, [r7, #4]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	20045478 	.word	0x20045478
 8005cec:	08036444 	.word	0x08036444

08005cf0 <Deviceinformation_PnPLInit>:

uint8_t Deviceinformation_PnPLInit(IPnPLComponent_t *_this)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  IPnPLComponent_t *component_if = _this;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	60fb      	str	r3, [r7, #12]
  PnPLAddComponent(component_if);
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f00b ff1b 	bl	8011b38 <PnPLAddComponent>
  DeviceInformation_comp_init();
 8005d02:	f7ff f9c7 	bl	8005094 <DeviceInformation_comp_init>
  return 0;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <Deviceinformation_PnPL_vtblGetKey>:

/* IPnPLComponent virtual functions definition -------------------------------*/
char *Deviceinformation_PnPL_vtblGetKey(IPnPLComponent_t *_this)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  return DeviceInformation_get_key();
 8005d18:	f7ff f9c4 	bl	80050a4 <DeviceInformation_get_key>
 8005d1c:	4603      	mov	r3, r0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <Deviceinformation_PnPL_vtblGetNCommands>:

uint8_t Deviceinformation_PnPL_vtblGetNCommands(IPnPLComponent_t *_this)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  return 0;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <Deviceinformation_PnPL_vtblGetCommandKey>:

char *Deviceinformation_PnPL_vtblGetCommandKey(IPnPLComponent_t *_this, uint8_t id)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	70fb      	strb	r3, [r7, #3]
  return "";
 8005d48:	4b03      	ldr	r3, [pc, #12]	@ (8005d58 <Deviceinformation_PnPL_vtblGetCommandKey+0x1c>)
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	08022e20 	.word	0x08022e20

08005d5c <Deviceinformation_PnPL_vtblGetStatus>:

uint8_t Deviceinformation_PnPL_vtblGetStatus(IPnPLComponent_t *_this, char **serializedJSON, uint32_t *size, uint8_t pretty)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	70fb      	strb	r3, [r7, #3]
  JSON_Value *tempJSON;
  JSON_Object *JSON_Status;

  tempJSON = json_value_init_object();
 8005d6a:	f010 f93b 	bl	8015fe4 <json_value_init_object>
 8005d6e:	61f8      	str	r0, [r7, #28]
  JSON_Status = json_value_get_object(tempJSON);
 8005d70:	69f8      	ldr	r0, [r7, #28]
 8005d72:	f010 f86e 	bl	8015e52 <json_value_get_object>
 8005d76:	61b8      	str	r0, [r7, #24]

  char *temp_s = "";
 8005d78:	4b46      	ldr	r3, [pc, #280]	@ (8005e94 <Deviceinformation_PnPL_vtblGetStatus+0x138>)
 8005d7a:	617b      	str	r3, [r7, #20]
  DeviceInformation_get_manufacturer(&temp_s);
 8005d7c:	f107 0314 	add.w	r3, r7, #20
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff f999 	bl	80050b8 <DeviceInformation_get_manufacturer>
  json_object_dotset_string(JSON_Status, "DeviceInformation.manufacturer", temp_s);
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	461a      	mov	r2, r3
 8005d8a:	4943      	ldr	r1, [pc, #268]	@ (8005e98 <Deviceinformation_PnPL_vtblGetStatus+0x13c>)
 8005d8c:	69b8      	ldr	r0, [r7, #24]
 8005d8e:	f010 fcd5 	bl	801673c <json_object_dotset_string>
  DeviceInformation_get_model(&temp_s);
 8005d92:	f107 0314 	add.w	r3, r7, #20
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff f99e 	bl	80050d8 <DeviceInformation_get_model>
  json_object_dotset_string(JSON_Status, "DeviceInformation.model", temp_s);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	493e      	ldr	r1, [pc, #248]	@ (8005e9c <Deviceinformation_PnPL_vtblGetStatus+0x140>)
 8005da2:	69b8      	ldr	r0, [r7, #24]
 8005da4:	f010 fcca 	bl	801673c <json_object_dotset_string>
  DeviceInformation_get_swVersion(&temp_s);
 8005da8:	f107 0314 	add.w	r3, r7, #20
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff f9a3 	bl	80050f8 <DeviceInformation_get_swVersion>
  json_object_dotset_string(JSON_Status, "DeviceInformation.swVersion", temp_s);
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	461a      	mov	r2, r3
 8005db6:	493a      	ldr	r1, [pc, #232]	@ (8005ea0 <Deviceinformation_PnPL_vtblGetStatus+0x144>)
 8005db8:	69b8      	ldr	r0, [r7, #24]
 8005dba:	f010 fcbf 	bl	801673c <json_object_dotset_string>
  DeviceInformation_get_osName(&temp_s);
 8005dbe:	f107 0314 	add.w	r3, r7, #20
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7ff f9a8 	bl	8005118 <DeviceInformation_get_osName>
  json_object_dotset_string(JSON_Status, "DeviceInformation.osName", temp_s);
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	4935      	ldr	r1, [pc, #212]	@ (8005ea4 <Deviceinformation_PnPL_vtblGetStatus+0x148>)
 8005dce:	69b8      	ldr	r0, [r7, #24]
 8005dd0:	f010 fcb4 	bl	801673c <json_object_dotset_string>
  DeviceInformation_get_processorArchitecture(&temp_s);
 8005dd4:	f107 0314 	add.w	r3, r7, #20
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff f9ad 	bl	8005138 <DeviceInformation_get_processorArchitecture>
  json_object_dotset_string(JSON_Status, "DeviceInformation.processorArchitecture", temp_s);
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	461a      	mov	r2, r3
 8005de2:	4931      	ldr	r1, [pc, #196]	@ (8005ea8 <Deviceinformation_PnPL_vtblGetStatus+0x14c>)
 8005de4:	69b8      	ldr	r0, [r7, #24]
 8005de6:	f010 fca9 	bl	801673c <json_object_dotset_string>
  DeviceInformation_get_processorManufacturer(&temp_s);
 8005dea:	f107 0314 	add.w	r3, r7, #20
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7ff f9b2 	bl	8005158 <DeviceInformation_get_processorManufacturer>
  json_object_dotset_string(JSON_Status, "DeviceInformation.processorManufacturer", temp_s);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	461a      	mov	r2, r3
 8005df8:	492c      	ldr	r1, [pc, #176]	@ (8005eac <Deviceinformation_PnPL_vtblGetStatus+0x150>)
 8005dfa:	69b8      	ldr	r0, [r7, #24]
 8005dfc:	f010 fc9e 	bl	801673c <json_object_dotset_string>
  float temp_f = 0;
 8005e00:	f04f 0300 	mov.w	r3, #0
 8005e04:	613b      	str	r3, [r7, #16]
  DeviceInformation_get_totalStorage(&temp_f);
 8005e06:	f107 0310 	add.w	r3, r7, #16
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7ff f9b4 	bl	8005178 <DeviceInformation_get_totalStorage>
  json_object_dotset_number(JSON_Status, "DeviceInformation.totalStorage", temp_f);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fa fba6 	bl	8000564 <__aeabi_f2d>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	ec43 2b10 	vmov	d0, r2, r3
 8005e20:	4923      	ldr	r1, [pc, #140]	@ (8005eb0 <Deviceinformation_PnPL_vtblGetStatus+0x154>)
 8005e22:	69b8      	ldr	r0, [r7, #24]
 8005e24:	f010 fcad 	bl	8016782 <json_object_dotset_number>
  DeviceInformation_get_totalMemory(&temp_f);
 8005e28:	f107 0310 	add.w	r3, r7, #16
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff f9b3 	bl	8005198 <DeviceInformation_get_totalMemory>
  json_object_dotset_number(JSON_Status, "DeviceInformation.totalMemory", temp_f);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fa fb95 	bl	8000564 <__aeabi_f2d>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	ec43 2b10 	vmov	d0, r2, r3
 8005e42:	491c      	ldr	r1, [pc, #112]	@ (8005eb4 <Deviceinformation_PnPL_vtblGetStatus+0x158>)
 8005e44:	69b8      	ldr	r0, [r7, #24]
 8005e46:	f010 fc9c 	bl	8016782 <json_object_dotset_number>

  if (pretty == 1)
 8005e4a:	78fb      	ldrb	r3, [r7, #3]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d10c      	bne.n	8005e6a <Deviceinformation_PnPL_vtblGetStatus+0x10e>
  {
    *serializedJSON = json_serialize_to_string_pretty(tempJSON);
 8005e50:	69f8      	ldr	r0, [r7, #28]
 8005e52:	f010 fab1 	bl	80163b8 <json_serialize_to_string_pretty>
 8005e56:	4602      	mov	r2, r0
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	601a      	str	r2, [r3, #0]
    *size = json_serialization_size_pretty(tempJSON);
 8005e5c:	69f8      	ldr	r0, [r7, #28]
 8005e5e:	f010 fa67 	bl	8016330 <json_serialization_size_pretty>
 8005e62:	4602      	mov	r2, r0
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	e00b      	b.n	8005e82 <Deviceinformation_PnPL_vtblGetStatus+0x126>
  }
  else
  {
    *serializedJSON = json_serialize_to_string(tempJSON);
 8005e6a:	69f8      	ldr	r0, [r7, #28]
 8005e6c:	f010 fa2e 	bl	80162cc <json_serialize_to_string>
 8005e70:	4602      	mov	r2, r0
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	601a      	str	r2, [r3, #0]
    *size = json_serialization_size(tempJSON);
 8005e76:	69f8      	ldr	r0, [r7, #28]
 8005e78:	f010 f9e4 	bl	8016244 <json_serialization_size>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	601a      	str	r2, [r3, #0]
  }

  /* No need to free temp_j as it is part of tempJSON */
  json_value_free(tempJSON);
 8005e82:	69f8      	ldr	r0, [r7, #28]
 8005e84:	f010 f880 	bl	8015f88 <json_value_free>

  return 0;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3720      	adds	r7, #32
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	08022e20 	.word	0x08022e20
 8005e98:	08022e24 	.word	0x08022e24
 8005e9c:	08022e44 	.word	0x08022e44
 8005ea0:	08022e5c 	.word	0x08022e5c
 8005ea4:	08022e78 	.word	0x08022e78
 8005ea8:	08022e94 	.word	0x08022e94
 8005eac:	08022ebc 	.word	0x08022ebc
 8005eb0:	08022ee4 	.word	0x08022ee4
 8005eb4:	08022f04 	.word	0x08022f04

08005eb8 <Deviceinformation_PnPL_vtblSetProperty>:

uint8_t Deviceinformation_PnPL_vtblSetProperty(IPnPLComponent_t *_this, char *serializedJSON)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  return 0;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <Deviceinformation_PnPL_vtblExecuteFunction>:

uint8_t Deviceinformation_PnPL_vtblExecuteFunction(IPnPLComponent_t *_this, char *serializedJSON)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  return 1;
 8005eda:	2301      	movs	r3, #1
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <Firmware_Info_PnPLAlloc>:
/* Objects instance ----------------------------------------------------------*/
static Firmware_Info_PnPL sFirmware_Info_PnPL;

/* Public API definition -----------------------------------------------------*/
IPnPLComponent_t *Firmware_Info_PnPLAlloc()
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
  IPnPLComponent_t *pxObj = (IPnPLComponent_t *) &sFirmware_Info_PnPL;
 8005eee:	4b07      	ldr	r3, [pc, #28]	@ (8005f0c <Firmware_Info_PnPLAlloc+0x24>)
 8005ef0:	607b      	str	r3, [r7, #4]
  if (pxObj != NULL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <Firmware_Info_PnPLAlloc+0x16>
  {
    pxObj->vptr = &sFirmware_Info_PnPL_CompIF_vtbl;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a05      	ldr	r2, [pc, #20]	@ (8005f10 <Firmware_Info_PnPLAlloc+0x28>)
 8005efc:	601a      	str	r2, [r3, #0]
  }
  return pxObj;
 8005efe:	687b      	ldr	r3, [r7, #4]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	2004547c 	.word	0x2004547c
 8005f10:	0803645c 	.word	0x0803645c

08005f14 <Firmware_Info_PnPLInit>:

uint8_t Firmware_Info_PnPLInit(IPnPLComponent_t *_this)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  IPnPLComponent_t *component_if = _this;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	60fb      	str	r3, [r7, #12]
  PnPLAddComponent(component_if);
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f00b fe09 	bl	8011b38 <PnPLAddComponent>
  firmware_info_comp_init();
 8005f26:	f7ff f947 	bl	80051b8 <firmware_info_comp_init>
  return 0;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <Firmware_Info_PnPL_vtblGetKey>:

/* IPnPLComponent virtual functions definition -------------------------------*/
char *Firmware_Info_PnPL_vtblGetKey(IPnPLComponent_t *_this)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  return firmware_info_get_key();
 8005f3c:	f7ff f948 	bl	80051d0 <firmware_info_get_key>
 8005f40:	4603      	mov	r3, r0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <Firmware_Info_PnPL_vtblGetNCommands>:

uint8_t Firmware_Info_PnPL_vtblGetNCommands(IPnPLComponent_t *_this)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  return 0;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <Firmware_Info_PnPL_vtblGetCommandKey>:

char *Firmware_Info_PnPL_vtblGetCommandKey(IPnPLComponent_t *_this, uint8_t id)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
  return "";
 8005f6c:	4b03      	ldr	r3, [pc, #12]	@ (8005f7c <Firmware_Info_PnPL_vtblGetCommandKey+0x1c>)
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	08022f24 	.word	0x08022f24

08005f80 <Firmware_Info_PnPL_vtblGetStatus>:

uint8_t Firmware_Info_PnPL_vtblGetStatus(IPnPLComponent_t *_this, char **serializedJSON, uint32_t *size, uint8_t pretty)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	70fb      	strb	r3, [r7, #3]
  JSON_Value *tempJSON;
  JSON_Object *JSON_Status;

  tempJSON = json_value_init_object();
 8005f8e:	f010 f829 	bl	8015fe4 <json_value_init_object>
 8005f92:	61f8      	str	r0, [r7, #28]
  JSON_Status = json_value_get_object(tempJSON);
 8005f94:	69f8      	ldr	r0, [r7, #28]
 8005f96:	f00f ff5c 	bl	8015e52 <json_value_get_object>
 8005f9a:	61b8      	str	r0, [r7, #24]

  char *temp_s = "";
 8005f9c:	4b3e      	ldr	r3, [pc, #248]	@ (8006098 <Firmware_Info_PnPL_vtblGetStatus+0x118>)
 8005f9e:	617b      	str	r3, [r7, #20]
  firmware_info_get_alias(&temp_s);
 8005fa0:	f107 0314 	add.w	r3, r7, #20
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7ff f91d 	bl	80051e4 <firmware_info_get_alias>
  json_object_dotset_string(JSON_Status, "firmware_info.alias", temp_s);
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	461a      	mov	r2, r3
 8005fae:	493b      	ldr	r1, [pc, #236]	@ (800609c <Firmware_Info_PnPL_vtblGetStatus+0x11c>)
 8005fb0:	69b8      	ldr	r0, [r7, #24]
 8005fb2:	f010 fbc3 	bl	801673c <json_object_dotset_string>
  firmware_info_get_fw_name(&temp_s);
 8005fb6:	f107 0314 	add.w	r3, r7, #20
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7ff f922 	bl	8005204 <firmware_info_get_fw_name>
  json_object_dotset_string(JSON_Status, "firmware_info.fw_name", temp_s);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	4936      	ldr	r1, [pc, #216]	@ (80060a0 <Firmware_Info_PnPL_vtblGetStatus+0x120>)
 8005fc6:	69b8      	ldr	r0, [r7, #24]
 8005fc8:	f010 fbb8 	bl	801673c <json_object_dotset_string>
  firmware_info_get_fw_version(&temp_s);
 8005fcc:	f107 0314 	add.w	r3, r7, #20
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff f941 	bl	8005258 <firmware_info_get_fw_version>
  json_object_dotset_string(JSON_Status, "firmware_info.fw_version", temp_s);
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	4932      	ldr	r1, [pc, #200]	@ (80060a4 <Firmware_Info_PnPL_vtblGetStatus+0x124>)
 8005fdc:	69b8      	ldr	r0, [r7, #24]
 8005fde:	f010 fbad 	bl	801673c <json_object_dotset_string>
  firmware_info_get_part_number(&temp_s);
 8005fe2:	f107 0314 	add.w	r3, r7, #20
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff f946 	bl	8005278 <firmware_info_get_part_number>
  json_object_dotset_string(JSON_Status, "firmware_info.part_number", temp_s);
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	492d      	ldr	r1, [pc, #180]	@ (80060a8 <Firmware_Info_PnPL_vtblGetStatus+0x128>)
 8005ff2:	69b8      	ldr	r0, [r7, #24]
 8005ff4:	f010 fba2 	bl	801673c <json_object_dotset_string>
  firmware_info_get_device_url(&temp_s);
 8005ff8:	f107 0314 	add.w	r3, r7, #20
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff f94b 	bl	8005298 <firmware_info_get_device_url>
  json_object_dotset_string(JSON_Status, "firmware_info.device_url", temp_s);
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	461a      	mov	r2, r3
 8006006:	4929      	ldr	r1, [pc, #164]	@ (80060ac <Firmware_Info_PnPL_vtblGetStatus+0x12c>)
 8006008:	69b8      	ldr	r0, [r7, #24]
 800600a:	f010 fb97 	bl	801673c <json_object_dotset_string>
  firmware_info_get_fw_url(&temp_s);
 800600e:	f107 0314 	add.w	r3, r7, #20
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff f950 	bl	80052b8 <firmware_info_get_fw_url>
  json_object_dotset_string(JSON_Status, "firmware_info.fw_url", temp_s);
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	461a      	mov	r2, r3
 800601c:	4924      	ldr	r1, [pc, #144]	@ (80060b0 <Firmware_Info_PnPL_vtblGetStatus+0x130>)
 800601e:	69b8      	ldr	r0, [r7, #24]
 8006020:	f010 fb8c 	bl	801673c <json_object_dotset_string>
  firmware_info_get_mac_address(&temp_s);
 8006024:	f107 0314 	add.w	r3, r7, #20
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff f955 	bl	80052d8 <firmware_info_get_mac_address>
  json_object_dotset_string(JSON_Status, "firmware_info.mac_address", temp_s);
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	461a      	mov	r2, r3
 8006032:	4920      	ldr	r1, [pc, #128]	@ (80060b4 <Firmware_Info_PnPL_vtblGetStatus+0x134>)
 8006034:	69b8      	ldr	r0, [r7, #24]
 8006036:	f010 fb81 	bl	801673c <json_object_dotset_string>
  json_object_dotset_number(JSON_Status, "firmware_info.c_type", COMP_TYPE_OTHER);
 800603a:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 8006090 <Firmware_Info_PnPL_vtblGetStatus+0x110>
 800603e:	491e      	ldr	r1, [pc, #120]	@ (80060b8 <Firmware_Info_PnPL_vtblGetStatus+0x138>)
 8006040:	69b8      	ldr	r0, [r7, #24]
 8006042:	f010 fb9e 	bl	8016782 <json_object_dotset_number>

  if (pretty == 1)
 8006046:	78fb      	ldrb	r3, [r7, #3]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d10c      	bne.n	8006066 <Firmware_Info_PnPL_vtblGetStatus+0xe6>
  {
    *serializedJSON = json_serialize_to_string_pretty(tempJSON);
 800604c:	69f8      	ldr	r0, [r7, #28]
 800604e:	f010 f9b3 	bl	80163b8 <json_serialize_to_string_pretty>
 8006052:	4602      	mov	r2, r0
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	601a      	str	r2, [r3, #0]
    *size = json_serialization_size_pretty(tempJSON);
 8006058:	69f8      	ldr	r0, [r7, #28]
 800605a:	f010 f969 	bl	8016330 <json_serialization_size_pretty>
 800605e:	4602      	mov	r2, r0
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	e00b      	b.n	800607e <Firmware_Info_PnPL_vtblGetStatus+0xfe>
  }
  else
  {
    *serializedJSON = json_serialize_to_string(tempJSON);
 8006066:	69f8      	ldr	r0, [r7, #28]
 8006068:	f010 f930 	bl	80162cc <json_serialize_to_string>
 800606c:	4602      	mov	r2, r0
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	601a      	str	r2, [r3, #0]
    *size = json_serialization_size(tempJSON);
 8006072:	69f8      	ldr	r0, [r7, #28]
 8006074:	f010 f8e6 	bl	8016244 <json_serialization_size>
 8006078:	4602      	mov	r2, r0
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	601a      	str	r2, [r3, #0]
  }

  /* No need to free temp_j as it is part of tempJSON */
  json_value_free(tempJSON);
 800607e:	69f8      	ldr	r0, [r7, #28]
 8006080:	f00f ff82 	bl	8015f88 <json_value_free>

  return 0;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3720      	adds	r7, #32
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	00000000 	.word	0x00000000
 8006094:	40000000 	.word	0x40000000
 8006098:	08022f24 	.word	0x08022f24
 800609c:	08022f28 	.word	0x08022f28
 80060a0:	08022f3c 	.word	0x08022f3c
 80060a4:	08022f54 	.word	0x08022f54
 80060a8:	08022f70 	.word	0x08022f70
 80060ac:	08022f8c 	.word	0x08022f8c
 80060b0:	08022fa8 	.word	0x08022fa8
 80060b4:	08022fc0 	.word	0x08022fc0
 80060b8:	08022fdc 	.word	0x08022fdc

080060bc <Firmware_Info_PnPL_vtblSetProperty>:

uint8_t Firmware_Info_PnPL_vtblSetProperty(IPnPLComponent_t *_this, char *serializedJSON)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  return 0;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <Firmware_Info_PnPL_vtblExecuteFunction>:

uint8_t Firmware_Info_PnPL_vtblExecuteFunction(IPnPLComponent_t *_this, char *serializedJSON)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  return 1;
 80060de:	2301      	movs	r3, #1
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <Lsm6dsv16x_Acc_PnPLAlloc>:
/* Objects instance ----------------------------------------------------------*/
static Lsm6dsv16x_Acc_PnPL sLsm6dsv16x_Acc_PnPL;

/* Public API definition -----------------------------------------------------*/
IPnPLComponent_t *Lsm6dsv16x_Acc_PnPLAlloc()
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
  IPnPLComponent_t *pxObj = (IPnPLComponent_t *) &sLsm6dsv16x_Acc_PnPL;
 80060f2:	4b07      	ldr	r3, [pc, #28]	@ (8006110 <Lsm6dsv16x_Acc_PnPLAlloc+0x24>)
 80060f4:	607b      	str	r3, [r7, #4]
  if (pxObj != NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <Lsm6dsv16x_Acc_PnPLAlloc+0x16>
  {
    pxObj->vptr = &sLsm6dsv16x_Acc_PnPL_CompIF_vtbl;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a05      	ldr	r2, [pc, #20]	@ (8006114 <Lsm6dsv16x_Acc_PnPLAlloc+0x28>)
 8006100:	601a      	str	r2, [r3, #0]
  }
  return pxObj;
 8006102:	687b      	ldr	r3, [r7, #4]
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	20045480 	.word	0x20045480
 8006114:	08036474 	.word	0x08036474

08006118 <Lsm6dsv16x_Acc_PnPLInit>:

uint8_t Lsm6dsv16x_Acc_PnPLInit(IPnPLComponent_t *_this)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  IPnPLComponent_t *component_if = _this;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	60fb      	str	r3, [r7, #12]
  PnPLAddComponent(component_if);
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f00b fd07 	bl	8011b38 <PnPLAddComponent>
  lsm6dsv16x_acc_comp_init();
 800612a:	f7fe fc5f 	bl	80049ec <lsm6dsv16x_acc_comp_init>
  return 0;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <Lsm6dsv16x_Acc_PnPL_vtblGetKey>:

/* IPnPLComponent virtual functions definition -------------------------------*/
char *Lsm6dsv16x_Acc_PnPL_vtblGetKey(IPnPLComponent_t *_this)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  return lsm6dsv16x_acc_get_key();
 8006140:	f7fe fc76 	bl	8004a30 <lsm6dsv16x_acc_get_key>
 8006144:	4603      	mov	r3, r0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <Lsm6dsv16x_Acc_PnPL_vtblGetNCommands>:

uint8_t Lsm6dsv16x_Acc_PnPL_vtblGetNCommands(IPnPLComponent_t *_this)
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  return 0;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <Lsm6dsv16x_Acc_PnPL_vtblGetCommandKey>:

char *Lsm6dsv16x_Acc_PnPL_vtblGetCommandKey(IPnPLComponent_t *_this, uint8_t id)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	70fb      	strb	r3, [r7, #3]
  return "";
 8006170:	4b03      	ldr	r3, [pc, #12]	@ (8006180 <Lsm6dsv16x_Acc_PnPL_vtblGetCommandKey+0x1c>)
}
 8006172:	4618      	mov	r0, r3
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	08022ff4 	.word	0x08022ff4
 8006184:	00000000 	.word	0x00000000

08006188 <Lsm6dsv16x_Acc_PnPL_vtblGetStatus>:

uint8_t Lsm6dsv16x_Acc_PnPL_vtblGetStatus(IPnPLComponent_t *_this, char **serializedJSON, uint32_t *size, uint8_t pretty)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	70fb      	strb	r3, [r7, #3]
  JSON_Value *tempJSON;
  JSON_Object *JSON_Status;

  tempJSON = json_value_init_object();
 8006196:	f00f ff25 	bl	8015fe4 <json_value_init_object>
 800619a:	61f8      	str	r0, [r7, #28]
  JSON_Status = json_value_get_object(tempJSON);
 800619c:	69f8      	ldr	r0, [r7, #28]
 800619e:	f00f fe58 	bl	8015e52 <json_value_get_object>
 80061a2:	61b8      	str	r0, [r7, #24]

  float temp_f = 0;
 80061a4:	f04f 0300 	mov.w	r3, #0
 80061a8:	617b      	str	r3, [r7, #20]
  lsm6dsv16x_acc_get_odr(&temp_f);
 80061aa:	f107 0314 	add.w	r3, r7, #20
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe fc48 	bl	8004a44 <lsm6dsv16x_acc_get_odr>
  json_object_dotset_number(JSON_Status, "lsm6dsv16x_acc.odr", temp_f);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fa f9d4 	bl	8000564 <__aeabi_f2d>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	ec43 2b10 	vmov	d0, r2, r3
 80061c4:	4934      	ldr	r1, [pc, #208]	@ (8006298 <Lsm6dsv16x_Acc_PnPL_vtblGetStatus+0x110>)
 80061c6:	69b8      	ldr	r0, [r7, #24]
 80061c8:	f010 fadb 	bl	8016782 <json_object_dotset_number>
  lsm6dsv16x_acc_get_fs(&temp_f);
 80061cc:	f107 0314 	add.w	r3, r7, #20
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fe fc47 	bl	8004a64 <lsm6dsv16x_acc_get_fs>
  json_object_dotset_number(JSON_Status, "lsm6dsv16x_acc.fs", temp_f);
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fa f9c3 	bl	8000564 <__aeabi_f2d>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	ec43 2b10 	vmov	d0, r2, r3
 80061e6:	492d      	ldr	r1, [pc, #180]	@ (800629c <Lsm6dsv16x_Acc_PnPL_vtblGetStatus+0x114>)
 80061e8:	69b8      	ldr	r0, [r7, #24]
 80061ea:	f010 faca 	bl	8016782 <json_object_dotset_number>
  /* Next fields are not in DTDL model but added looking @ the component schema
  field (this is :sensors). ONLY for Sensors and Algorithms */
  json_object_dotset_number(JSON_Status, "lsm6dsv16x_acc.c_type", COMP_TYPE_SENSOR);
 80061ee:	ed9f 0b28 	vldr	d0, [pc, #160]	@ 8006290 <Lsm6dsv16x_Acc_PnPL_vtblGetStatus+0x108>
 80061f2:	492b      	ldr	r1, [pc, #172]	@ (80062a0 <Lsm6dsv16x_Acc_PnPL_vtblGetStatus+0x118>)
 80061f4:	69b8      	ldr	r0, [r7, #24]
 80061f6:	f010 fac4 	bl	8016782 <json_object_dotset_number>
  int8_t temp_int8 = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	74fb      	strb	r3, [r7, #19]
  lsm6dsv16x_acc_get_stream_id(&temp_int8);
 80061fe:	f107 0313 	add.w	r3, r7, #19
 8006202:	4618      	mov	r0, r3
 8006204:	f7fe fc3d 	bl	8004a82 <lsm6dsv16x_acc_get_stream_id>
  json_object_dotset_number(JSON_Status, "lsm6dsv16x_acc.stream_id", temp_int8);
 8006208:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800620c:	4618      	mov	r0, r3
 800620e:	f7fa f997 	bl	8000540 <__aeabi_i2d>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	ec43 2b10 	vmov	d0, r2, r3
 800621a:	4922      	ldr	r1, [pc, #136]	@ (80062a4 <Lsm6dsv16x_Acc_PnPL_vtblGetStatus+0x11c>)
 800621c:	69b8      	ldr	r0, [r7, #24]
 800621e:	f010 fab0 	bl	8016782 <json_object_dotset_number>
  lsm6dsv16x_acc_get_ep_id(&temp_int8);
 8006222:	f107 0313 	add.w	r3, r7, #19
 8006226:	4618      	mov	r0, r3
 8006228:	f7fe fc36 	bl	8004a98 <lsm6dsv16x_acc_get_ep_id>
  json_object_dotset_number(JSON_Status, "lsm6dsv16x_acc.ep_id", temp_int8);
 800622c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006230:	4618      	mov	r0, r3
 8006232:	f7fa f985 	bl	8000540 <__aeabi_i2d>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	ec43 2b10 	vmov	d0, r2, r3
 800623e:	491a      	ldr	r1, [pc, #104]	@ (80062a8 <Lsm6dsv16x_Acc_PnPL_vtblGetStatus+0x120>)
 8006240:	69b8      	ldr	r0, [r7, #24]
 8006242:	f010 fa9e 	bl	8016782 <json_object_dotset_number>

  if (pretty == 1)
 8006246:	78fb      	ldrb	r3, [r7, #3]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d10c      	bne.n	8006266 <Lsm6dsv16x_Acc_PnPL_vtblGetStatus+0xde>
  {
    *serializedJSON = json_serialize_to_string_pretty(tempJSON);
 800624c:	69f8      	ldr	r0, [r7, #28]
 800624e:	f010 f8b3 	bl	80163b8 <json_serialize_to_string_pretty>
 8006252:	4602      	mov	r2, r0
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	601a      	str	r2, [r3, #0]
    *size = json_serialization_size_pretty(tempJSON);
 8006258:	69f8      	ldr	r0, [r7, #28]
 800625a:	f010 f869 	bl	8016330 <json_serialization_size_pretty>
 800625e:	4602      	mov	r2, r0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	e00b      	b.n	800627e <Lsm6dsv16x_Acc_PnPL_vtblGetStatus+0xf6>
  }
  else
  {
    *serializedJSON = json_serialize_to_string(tempJSON);
 8006266:	69f8      	ldr	r0, [r7, #28]
 8006268:	f010 f830 	bl	80162cc <json_serialize_to_string>
 800626c:	4602      	mov	r2, r0
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	601a      	str	r2, [r3, #0]
    *size = json_serialization_size(tempJSON);
 8006272:	69f8      	ldr	r0, [r7, #28]
 8006274:	f00f ffe6 	bl	8016244 <json_serialization_size>
 8006278:	4602      	mov	r2, r0
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	601a      	str	r2, [r3, #0]
  }

  /* No need to free temp_j as it is part of tempJSON */
  json_value_free(tempJSON);
 800627e:	69f8      	ldr	r0, [r7, #28]
 8006280:	f00f fe82 	bl	8015f88 <json_value_free>

  return 0;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3720      	adds	r7, #32
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
	...
 8006298:	08022ff8 	.word	0x08022ff8
 800629c:	0802300c 	.word	0x0802300c
 80062a0:	08023020 	.word	0x08023020
 80062a4:	08023038 	.word	0x08023038
 80062a8:	08023054 	.word	0x08023054

080062ac <Lsm6dsv16x_Acc_PnPL_vtblSetProperty>:

uint8_t Lsm6dsv16x_Acc_PnPL_vtblSetProperty(IPnPLComponent_t *_this, char *serializedJSON)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  return 0;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <Lsm6dsv16x_Acc_PnPL_vtblExecuteFunction>:

uint8_t Lsm6dsv16x_Acc_PnPL_vtblExecuteFunction(IPnPLComponent_t *_this, char *serializedJSON)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  return 1;
 80062ce:	2301      	movs	r3, #1
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <ai_init>:
ai_buffer *ai_output;
float32_t *p_out0;
float32_t *p_out1;

int ai_init(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create and initialize the c-model */
  const ai_handle acts[] = { activations };
 80062e2:	4b10      	ldr	r3, [pc, #64]	@ (8006324 <ai_init+0x48>)
 80062e4:	603b      	str	r3, [r7, #0]
  err = ai_network_create_and_init(&network, acts, NULL);
 80062e6:	463b      	mov	r3, r7
 80062e8:	2200      	movs	r2, #0
 80062ea:	4619      	mov	r1, r3
 80062ec:	480e      	ldr	r0, [pc, #56]	@ (8006328 <ai_init+0x4c>)
 80062ee:	f7fc fbc9 	bl	8002a84 <ai_network_create_and_init>
 80062f2:	4603      	mov	r3, r0
 80062f4:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {

  };

  /* Retrieve pointers to the model's input/output tensors */
  ai_input = ai_network_inputs_get(network , NULL);
 80062f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006328 <ai_init+0x4c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2100      	movs	r1, #0
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fc fc35 	bl	8002b6c <ai_network_inputs_get>
 8006302:	4603      	mov	r3, r0
 8006304:	4a09      	ldr	r2, [pc, #36]	@ (800632c <ai_init+0x50>)
 8006306:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8006308:	4b07      	ldr	r3, [pc, #28]	@ (8006328 <ai_init+0x4c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2100      	movs	r1, #0
 800630e:	4618      	mov	r0, r3
 8006310:	f7fc fc46 	bl	8002ba0 <ai_network_outputs_get>
 8006314:	4603      	mov	r3, r0
 8006316:	4a06      	ldr	r2, [pc, #24]	@ (8006330 <ai_init+0x54>)
 8006318:	6013      	str	r3, [r2, #0]

  return 0;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	200454a0 	.word	0x200454a0
 8006328:	2004548c 	.word	0x2004548c
 800632c:	20045780 	.word	0x20045780
 8006330:	20045784 	.word	0x20045784

08006334 <aiProcess>:

int aiProcess(float *p_inData, float p_out_data[2])
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  ai_i32 n_batch;

  /* 1 - Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(p_inData);
 800633e:	4b23      	ldr	r3, [pc, #140]	@ (80063cc <aiProcess+0x98>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data[0]);
 8006346:	4b22      	ldr	r3, [pc, #136]	@ (80063d0 <aiProcess+0x9c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a22      	ldr	r2, [pc, #136]	@ (80063d4 <aiProcess+0xa0>)
 800634c:	6812      	ldr	r2, [r2, #0]
 800634e:	605a      	str	r2, [r3, #4]
	  ai_output[1].data = AI_HANDLE_PTR(out_data[1]);
  }

  if (AI_NETWORK_OUT_NUM == 1){
	  /* 2 - Perform the inference */
	  n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8006350:	4b21      	ldr	r3, [pc, #132]	@ (80063d8 <aiProcess+0xa4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a1d      	ldr	r2, [pc, #116]	@ (80063cc <aiProcess+0x98>)
 8006356:	6811      	ldr	r1, [r2, #0]
 8006358:	4a1d      	ldr	r2, [pc, #116]	@ (80063d0 <aiProcess+0x9c>)
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	4618      	mov	r0, r3
 800635e:	f7fc fc75 	bl	8002c4c <ai_network_run>
 8006362:	6178      	str	r0, [r7, #20]
	  p_out0 = (float32_t*) ai_output[0].data;
 8006364:	4b1a      	ldr	r3, [pc, #104]	@ (80063d0 <aiProcess+0x9c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	4a1c      	ldr	r2, [pc, #112]	@ (80063dc <aiProcess+0xa8>)
 800636c:	6013      	str	r3, [r2, #0]
	  float32_t max_out = *p_out0;
 800636e:	4b1b      	ldr	r3, [pc, #108]	@ (80063dc <aiProcess+0xa8>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	613b      	str	r3, [r7, #16]
	  uint32_t max_idx = 0;
 8006376:	2300      	movs	r3, #0
 8006378:	60fb      	str	r3, [r7, #12]

	  arm_max_f32(p_out0,AI_NETWORK_OUT_1_SIZE, &max_out, &max_idx);
 800637a:	4b18      	ldr	r3, [pc, #96]	@ (80063dc <aiProcess+0xa8>)
 800637c:	6818      	ldr	r0, [r3, #0]
 800637e:	f107 030c 	add.w	r3, r7, #12
 8006382:	f107 0210 	add.w	r2, r7, #16
 8006386:	2102      	movs	r1, #2
 8006388:	f011 ff10 	bl	80181ac <arm_max_f32>
	  p_out_data[0] = (float32_t)max_idx;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	ee07 3a90 	vmov	s15, r3
 8006392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	edc3 7a00 	vstr	s15, [r3]
	  p_out_data[1] = max_out * 100.0;
 800639c:	edd7 7a04 	vldr	s15, [r7, #16]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	3304      	adds	r3, #4
 80063a4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80063e0 <aiProcess+0xac>
 80063a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063ac:	edc3 7a00 	vstr	s15, [r3]
	  p_out_data[0] = (float32_t)p_out0[0];
	  p_out_data[1] = (float32_t)p_out1[(int) p_out0[0]];

  }

  if (n_batch != 1) {
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d004      	beq.n	80063c0 <aiProcess+0x8c>
	  ai_network_get_error(network);
 80063b6:	4b08      	ldr	r3, [pc, #32]	@ (80063d8 <aiProcess+0xa4>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fc fb40 	bl	8002a40 <ai_network_get_error>
  };

  return 0;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20045780 	.word	0x20045780
 80063d0:	20045784 	.word	0x20045784
 80063d4:	200007b8 	.word	0x200007b8
 80063d8:	2004548c 	.word	0x2004548c
 80063dc:	20045788 	.word	0x20045788
 80063e0:	42c80000 	.word	0x42c80000

080063e4 <pre_processing_init_mcu>:
#include "arm_math.h"
#include "params.h"
#include "pre_processing_app.h"
#include <stdlib.h>

void pre_processing_init_mcu(pre_processing_data_t* pre_processing_data, float32_t sensor_odr) {
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af02      	add	r7, sp, #8
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	ed87 0a00 	vstr	s0, [r7]
    // Axis selection.
    pre_processing_data->axis_selection_axis = AXIS_SELECTION_AXIS;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	701a      	strb	r2, [r3, #0]

    // MFCC.
    arm_status mfcc_status;
    arm_rfft_fast_init_f32(&((*pre_processing_data).mfcc_handler), INPUT_BUFFER_SIZE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3310      	adds	r3, #16
 80063fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80063fe:	4618      	mov	r0, r3
 8006400:	f012 f808 	bl	8018414 <arm_rfft_fast_init_f32>
    mfcc_status = arm_dct4_init_f32(&((*pre_processing_data).mfcc_dct4f32), &((*pre_processing_data).mfcc_rfftf32), &((*pre_processing_data).mfcc_cfftradix4f32), MFCC_TRIANGULAR_FILTERS_BANK_SIZE, MFCC_TRIANGULAR_FILTERS_BANK_SIZE / 2.0, 0.125);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8006416:	2340      	movs	r3, #64	@ 0x40
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800641e:	2380      	movs	r3, #128	@ 0x80
 8006420:	f012 fc9c 	bl	8018d5c <arm_dct4_init_f32>
 8006424:	4603      	mov	r3, r0
 8006426:	73fb      	strb	r3, [r7, #15]
    if (mfcc_status != ARM_MATH_SUCCESS) {
 8006428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <pre_processing_init_mcu+0x50>
        sys_error_handler();
 8006430:	f00c fdee 	bl	8013010 <sys_error_handler>
    }
    pre_processing_data->mfcc_triangular_filters_scale = MFCC_TRIANGULAR_FILTERS_SCALE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
    pre_processing_data->mfcc_signal_windowing = MFCC_SIGNAL_WINDOWING;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
	triangular_filters_init(INPUT_BUFFER_SIZE, MFCC_TRIANGULAR_FILTERS_BANK_SIZE, MFCC_TRIANGULAR_FILTERS_BANK_FRACTION, sensor_odr, pre_processing_data->mfcc_triangular_filters_scale, (*pre_processing_data).mfcc_bin);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 206c 	ldrb.w	r2, [r3, #108]	@ 0x6c
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	3370      	adds	r3, #112	@ 0x70
 800644e:	edd7 0a00 	vldr	s1, [r7]
 8006452:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8006490 <pre_processing_init_mcu+0xac>
 8006456:	2180      	movs	r1, #128	@ 0x80
 8006458:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800645c:	f00c fa50 	bl	8012900 <triangular_filters_init>
	(*pre_processing_data).mfcc_multipliers = (float32_t*) SysAlloc(INPUT_BUFFER_SIZE * sizeof(float32_t));
 8006460:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006464:	f00c fdd8 	bl	8013018 <SysAlloc>
 8006468:	4602      	mov	r2, r0
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
    multipliers_init((*pre_processing_data).mfcc_multipliers, INPUT_BUFFER_SIZE, (*pre_processing_data).mfcc_signal_windowing);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 0278 	ldr.w	r0, [r3, #632]	@ 0x278
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800647c:	461a      	mov	r2, r3
 800647e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006482:	f00c fb1f 	bl	8012ac4 <multipliers_init>
}
 8006486:	bf00      	nop
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	3ee66666 	.word	0x3ee66666

08006494 <pre_processing_process_mcu>:

void pre_processing_process_mcu(tridimensional_data_t* data_in, uint32_t data_in_size, float32_t* data_out, uint32_t data_out_size, pre_processing_data_t* pre_processing_data) {
 8006494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006498:	b091      	sub	sp, #68	@ 0x44
 800649a:	af06      	add	r7, sp, #24
 800649c:	6178      	str	r0, [r7, #20]
 800649e:	6139      	str	r1, [r7, #16]
 80064a0:	60fa      	str	r2, [r7, #12]
 80064a2:	60bb      	str	r3, [r7, #8]
 80064a4:	466b      	mov	r3, sp
 80064a6:	461e      	mov	r6, r3
    // Axis selection.
    float32_t data_0[data_in_size];
 80064a8:	6939      	ldr	r1, [r7, #16]
 80064aa:	460b      	mov	r3, r1
 80064ac:	3b01      	subs	r3, #1
 80064ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80064b0:	2300      	movs	r3, #0
 80064b2:	6039      	str	r1, [r7, #0]
 80064b4:	607b      	str	r3, [r7, #4]
 80064b6:	f04f 0200 	mov.w	r2, #0
 80064ba:	f04f 0300 	mov.w	r3, #0
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	0143      	lsls	r3, r0, #5
 80064c2:	6838      	ldr	r0, [r7, #0]
 80064c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80064c8:	6838      	ldr	r0, [r7, #0]
 80064ca:	0142      	lsls	r2, r0, #5
 80064cc:	2300      	movs	r3, #0
 80064ce:	468a      	mov	sl, r1
 80064d0:	469b      	mov	fp, r3
 80064d2:	f04f 0200 	mov.w	r2, #0
 80064d6:	f04f 0300 	mov.w	r3, #0
 80064da:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80064de:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80064e2:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80064e6:	008b      	lsls	r3, r1, #2
 80064e8:	3307      	adds	r3, #7
 80064ea:	08db      	lsrs	r3, r3, #3
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	ebad 0d03 	sub.w	sp, sp, r3
 80064f2:	ab06      	add	r3, sp, #24
 80064f4:	3303      	adds	r3, #3
 80064f6:	089b      	lsrs	r3, r3, #2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	623b      	str	r3, [r7, #32]
    axis_selection(data_in, data_in_size, data_0, data_in_size, pre_processing_data->axis_selection_axis);
 80064fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	6a3a      	ldr	r2, [r7, #32]
 8006506:	6939      	ldr	r1, [r7, #16]
 8006508:	6978      	ldr	r0, [r7, #20]
 800650a:	f00c f967 	bl	80127dc <axis_selection>

    // Mean removal.
    float32_t data_1[data_in_size];
 800650e:	6939      	ldr	r1, [r7, #16]
 8006510:	460b      	mov	r3, r1
 8006512:	3b01      	subs	r3, #1
 8006514:	61fb      	str	r3, [r7, #28]
 8006516:	2300      	movs	r3, #0
 8006518:	4688      	mov	r8, r1
 800651a:	4699      	mov	r9, r3
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	f04f 0300 	mov.w	r3, #0
 8006524:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8006528:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800652c:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8006530:	2300      	movs	r3, #0
 8006532:	460c      	mov	r4, r1
 8006534:	461d      	mov	r5, r3
 8006536:	f04f 0200 	mov.w	r2, #0
 800653a:	f04f 0300 	mov.w	r3, #0
 800653e:	016b      	lsls	r3, r5, #5
 8006540:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8006544:	0162      	lsls	r2, r4, #5
 8006546:	008b      	lsls	r3, r1, #2
 8006548:	3307      	adds	r3, #7
 800654a:	08db      	lsrs	r3, r3, #3
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	ebad 0d03 	sub.w	sp, sp, r3
 8006552:	ab06      	add	r3, sp, #24
 8006554:	3303      	adds	r3, #3
 8006556:	089b      	lsrs	r3, r3, #2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	61bb      	str	r3, [r7, #24]
    mean_removal(data_0, data_in_size, data_1, data_in_size);
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	6939      	ldr	r1, [r7, #16]
 8006562:	6a38      	ldr	r0, [r7, #32]
 8006564:	f00c f99e 	bl	80128a4 <mean_removal>

    // MFCC.
    mfcc(data_1, data_in_size, data_out, data_out_size, ((*pre_processing_data).mfcc_bin), &((*pre_processing_data).mfcc_dct4f32), &((*pre_processing_data).mfcc_handler), (*pre_processing_data).mfcc_signal_windowing, (*pre_processing_data).mfcc_multipliers);
 8006568:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800656a:	3370      	adds	r3, #112	@ 0x70
 800656c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800656e:	3228      	adds	r2, #40	@ 0x28
 8006570:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006572:	3110      	adds	r1, #16
 8006574:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8006576:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
 800657a:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 800657c:	f8d4 4278 	ldr.w	r4, [r4, #632]	@ 0x278
 8006580:	9404      	str	r4, [sp, #16]
 8006582:	9003      	str	r0, [sp, #12]
 8006584:	9102      	str	r1, [sp, #8]
 8006586:	9201      	str	r2, [sp, #4]
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	6939      	ldr	r1, [r7, #16]
 8006590:	69b8      	ldr	r0, [r7, #24]
 8006592:	f00c fc71 	bl	8012e78 <mfcc>
 8006596:	46b5      	mov	sp, r6
}
 8006598:	bf00      	nop
 800659a:	372c      	adds	r7, #44	@ 0x2c
 800659c:	46bd      	mov	sp, r7
 800659e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080065a4 <ISM330IS_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_RegisterBusIO(ISM330IS_Object_t *pObj, ISM330IS_IO_t *pIO)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330IS_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d103      	bne.n	80065c0 <ISM330IS_RegisterBusIO+0x1c>
  {
    ret = ISM330IS_ERROR;
 80065b8:	f04f 33ff 	mov.w	r3, #4294967295
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	e04d      	b.n	800665c <ISM330IS_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	7b1a      	ldrb	r2, [r3, #12]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	691a      	ldr	r2, [r3, #16]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	695a      	ldr	r2, [r3, #20]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	699a      	ldr	r2, [r3, #24]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006668 <ISM330IS_RegisterBusIO+0xc4>)
 80065fc:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a1a      	ldr	r2, [pc, #104]	@ (800666c <ISM330IS_RegisterBusIO+0xc8>)
 8006602:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	629a      	str	r2, [r3, #40]	@ 0x28

    if (pObj->IO.Init == NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d103      	bne.n	800661a <ISM330IS_RegisterBusIO+0x76>
    {
      ret = ISM330IS_ERROR;
 8006612:	f04f 33ff 	mov.w	r3, #4294967295
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	e020      	b.n	800665c <ISM330IS_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330IS_OK)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4798      	blx	r3
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <ISM330IS_RegisterBusIO+0x8a>
    {
      ret = ISM330IS_ERROR;
 8006626:	f04f 33ff 	mov.w	r3, #4294967295
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	e016      	b.n	800665c <ISM330IS_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330IS_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	2b02      	cmp	r3, #2
 8006634:	d112      	bne.n	800665c <ISM330IS_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10d      	bne.n	800665c <ISM330IS_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8006640:	230c      	movs	r3, #12
 8006642:	72fb      	strb	r3, [r7, #11]

          if (ISM330IS_Write_Reg(pObj, ISM330IS_CTRL3_C, data) != ISM330IS_OK)
 8006644:	7afb      	ldrb	r3, [r7, #11]
 8006646:	461a      	mov	r2, r3
 8006648:	2112      	movs	r1, #18
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fd85 	bl	800715a <ISM330IS_Write_Reg>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d002      	beq.n	800665c <ISM330IS_RegisterBusIO+0xb8>
          {
            ret = ISM330IS_ERROR;
 8006656:	f04f 33ff 	mov.w	r3, #4294967295
 800665a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800665c:	68fb      	ldr	r3, [r7, #12]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	080075d5 	.word	0x080075d5
 800666c:	0800760b 	.word	0x0800760b

08006670 <ISM330IS_Init>:
  * @brief  Initialize the ISM330IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_Init(ISM330IS_Object_t *pObj)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  int32_t ret = ISM330IS_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	60fb      	str	r3, [r7, #12]

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330is_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330IS_OK)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	331c      	adds	r3, #28
 8006680:	2101      	movs	r1, #1
 8006682:	4618      	mov	r0, r3
 8006684:	f001 fb52 	bl	8007d2c <ism330is_auto_increment_set>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <ISM330IS_Init+0x24>
  {
    ret = ISM330IS_ERROR;
 800668e:	f04f 33ff 	mov.w	r3, #4294967295
 8006692:	60fb      	str	r3, [r7, #12]
  }

  /* Enable BDU */
  if (ism330is_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330IS_OK)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	331c      	adds	r3, #28
 8006698:	2101      	movs	r1, #1
 800669a:	4618      	mov	r0, r3
 800669c:	f001 fb6c 	bl	8007d78 <ism330is_block_data_update_set>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <ISM330IS_Init+0x3c>
  {
    ret = ISM330IS_ERROR;
 80066a6:	f04f 33ff 	mov.w	r3, #4294967295
 80066aa:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330IS_XL_ODR_AT_104Hz_HP;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2204      	movs	r2, #4
 80066b0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* Output data rate selection - power down. */
  if (ism330is_xl_data_rate_set(&(pObj->Ctx), ISM330IS_XL_ODR_OFF) != ISM330IS_OK)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	331c      	adds	r3, #28
 80066b8:	2100      	movs	r1, #0
 80066ba:	4618      	mov	r0, r3
 80066bc:	f001 f886 	bl	80077cc <ism330is_xl_data_rate_set>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <ISM330IS_Init+0x5c>
  {
    ret = ISM330IS_ERROR;
 80066c6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ca:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (ism330is_xl_full_scale_set(&(pObj->Ctx), ISM330IS_2g) != ISM330IS_OK)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	331c      	adds	r3, #28
 80066d0:	2100      	movs	r1, #0
 80066d2:	4618      	mov	r0, r3
 80066d4:	f001 f81b 	bl	800770e <ism330is_xl_full_scale_set>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <ISM330IS_Init+0x74>
  {
    ret = ISM330IS_ERROR;
 80066de:	f04f 33ff 	mov.w	r3, #4294967295
 80066e2:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330IS_GY_ODR_AT_104Hz_HP;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2204      	movs	r2, #4
 80066e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Output data rate selection - power down. */
  if (ism330is_gy_data_rate_set(&(pObj->Ctx), ISM330IS_GY_ODR_OFF) != ISM330IS_OK)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	331c      	adds	r3, #28
 80066f0:	2100      	movs	r1, #0
 80066f2:	4618      	mov	r0, r3
 80066f4:	f001 fa1e 	bl	8007b34 <ism330is_gy_data_rate_set>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <ISM330IS_Init+0x94>
  {
    ret = ISM330IS_ERROR;
 80066fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006702:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (ism330is_gy_full_scale_set(&(pObj->Ctx), ISM330IS_2000dps) != ISM330IS_OK)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	331c      	adds	r3, #28
 8006708:	2103      	movs	r1, #3
 800670a:	4618      	mov	r0, r3
 800670c:	f001 f986 	bl	8007a1c <ism330is_gy_full_scale_set>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <ISM330IS_Init+0xac>
  {
    ret = ISM330IS_ERROR;
 8006716:	f04f 33ff 	mov.w	r3, #4294967295
 800671a:	60fb      	str	r3, [r7, #12]
  }

  if (ret == ISM330IS_OK)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d103      	bne.n	800672a <ISM330IS_Init+0xba>
  {
    pObj->is_initialized = 1;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }

  return ret;
 800672a:	68fb      	ldr	r3, [r7, #12]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <ISM330IS_DeInit>:
  * @brief  Deinitialize the ISM330IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_DeInit(ISM330IS_Object_t *pObj)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  int32_t ret = ISM330IS_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]

  /* Disable the component */
  if (ISM330IS_ACC_Disable(pObj) != ISM330IS_OK)
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f890 	bl	8006866 <ISM330IS_ACC_Disable>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <ISM330IS_DeInit+0x1e>
  {
    ret = ISM330IS_ERROR;
 800674c:	f04f 33ff 	mov.w	r3, #4294967295
 8006750:	60fb      	str	r3, [r7, #12]
  }

  if (ISM330IS_GYRO_Disable(pObj) != ISM330IS_OK)
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 faa8 	bl	8006ca8 <ISM330IS_GYRO_Disable>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <ISM330IS_DeInit+0x30>
  {
    ret = ISM330IS_ERROR;
 800675e:	f04f 33ff 	mov.w	r3, #4294967295
 8006762:	60fb      	str	r3, [r7, #12]
  }

  if (ret == ISM330IS_OK)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10b      	bne.n	8006782 <ISM330IS_DeInit+0x4e>
  {
    /* Reset output data rate. */
    pObj->acc_odr = ISM330IS_XL_ODR_OFF;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
    pObj->gyro_odr = ISM330IS_GY_ODR_OFF;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    pObj->is_initialized = 0;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }

  return ret;
 8006782:	68fb      	ldr	r3, [r7, #12]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <ISM330IS_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_ReadID(ISM330IS_Object_t *pObj, uint8_t *Id)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330IS_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]

  if (ism330is_device_id_get(&(pObj->Ctx), Id) != ISM330IS_OK)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	331c      	adds	r3, #28
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 ff7d 	bl	80076a0 <ism330is_device_id_get>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <ISM330IS_ReadID+0x26>
  {
    ret = ISM330IS_ERROR;
 80067ac:	f04f 33ff 	mov.w	r3, #4294967295
 80067b0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80067b2:	68fb      	ldr	r3, [r7, #12]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <ISM330IS_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to ISM330IS sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_GetCapabilities(ISM330IS_Object_t *pObj, ISM330IS_Capabilities_t *Capabilities)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2201      	movs	r2, #1
 80067ca:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2201      	movs	r2, #1
 80067d0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2200      	movs	r2, #0
 80067d6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2200      	movs	r2, #0
 80067dc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80067e4:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2210      	movs	r2, #16
 80067ea:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2200      	movs	r2, #0
 80067f0:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 3333.0f;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	4a07      	ldr	r2, [pc, #28]	@ (8006814 <ISM330IS_GetCapabilities+0x58>)
 80067f6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 3333.0f;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	4a06      	ldr	r2, [pc, #24]	@ (8006814 <ISM330IS_GetCapabilities+0x58>)
 80067fc:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	f04f 0200 	mov.w	r2, #0
 8006804:	619a      	str	r2, [r3, #24]

  return ISM330IS_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	45505000 	.word	0x45505000

08006818 <ISM330IS_ACC_Enable>:
  * @brief  Enable the ISM330IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_ACC_Enable(ISM330IS_Object_t *pObj)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  int32_t ret = ISM330IS_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800682a:	2b01      	cmp	r3, #1
 800682c:	d102      	bne.n	8006834 <ISM330IS_ACC_Enable+0x1c>
  {
    ret = ISM330IS_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	e013      	b.n	800685c <ISM330IS_ACC_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (ism330is_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330IS_OK)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f103 021c 	add.w	r2, r3, #28
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006840:	4619      	mov	r1, r3
 8006842:	4610      	mov	r0, r2
 8006844:	f000 ffc2 	bl	80077cc <ism330is_xl_data_rate_set>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <ISM330IS_ACC_Enable+0x3c>
    {
      ret = ISM330IS_ERROR;
 800684e:	f04f 33ff 	mov.w	r3, #4294967295
 8006852:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 1;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  return ret;
 800685c:	68fb      	ldr	r3, [r7, #12]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <ISM330IS_ACC_Disable>:
  * @brief  Disable the ISM330IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_ACC_Disable(ISM330IS_Object_t *pObj)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  int32_t ret = ISM330IS_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006878:	2b00      	cmp	r3, #0
 800687a:	d102      	bne.n	8006882 <ISM330IS_ACC_Disable+0x1c>
  {
    ret = ISM330IS_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	e01e      	b.n	80068c0 <ISM330IS_ACC_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (ism330is_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330IS_OK)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f103 021c 	add.w	r2, r3, #28
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	332f      	adds	r3, #47	@ 0x2f
 800688c:	4619      	mov	r1, r3
 800688e:	4610      	mov	r0, r2
 8006890:	f000 ffdc 	bl	800784c <ism330is_xl_data_rate_get>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <ISM330IS_ACC_Disable+0x3a>
    {
      ret = ISM330IS_ERROR;
 800689a:	f04f 33ff 	mov.w	r3, #4294967295
 800689e:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (ism330is_xl_data_rate_set(&(pObj->Ctx), ISM330IS_XL_ODR_OFF) != ISM330IS_OK)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	331c      	adds	r3, #28
 80068a4:	2100      	movs	r1, #0
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 ff90 	bl	80077cc <ism330is_xl_data_rate_set>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d002      	beq.n	80068b8 <ISM330IS_ACC_Disable+0x52>
    {
      ret = ISM330IS_ERROR;
 80068b2:	f04f 33ff 	mov.w	r3, #4294967295
 80068b6:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 0;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  return ret;
 80068c0:	68fb      	ldr	r3, [r7, #12]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <ISM330IS_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_ACC_GetSensitivity(ISM330IS_Object_t *pObj, float_t *Sensitivity)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330IS_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
  ism330is_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330is_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330IS_OK)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	331c      	adds	r3, #28
 80068de:	f107 020b 	add.w	r2, r7, #11
 80068e2:	4611      	mov	r1, r2
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 ff39 	bl	800775c <ism330is_xl_full_scale_get>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <ISM330IS_ACC_GetSensitivity+0x2a>
  {
    ret = ISM330IS_ERROR;
 80068f0:	f04f 33ff 	mov.w	r3, #4294967295
 80068f4:	60fb      	str	r3, [r7, #12]
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80068f6:	7afb      	ldrb	r3, [r7, #11]
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d81b      	bhi.n	8006934 <ISM330IS_ACC_GetSensitivity+0x68>
 80068fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006904 <ISM330IS_ACC_GetSensitivity+0x38>)
 80068fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006902:	bf00      	nop
 8006904:	08006915 	.word	0x08006915
 8006908:	0800692d 	.word	0x0800692d
 800690c:	0800691d 	.word	0x0800691d
 8006910:	08006925 	.word	0x08006925
  {
    case ISM330IS_2g:
      *Sensitivity = ISM330IS_ACC_SENSITIVITY_FS_2G;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	4a0c      	ldr	r2, [pc, #48]	@ (8006948 <ISM330IS_ACC_GetSensitivity+0x7c>)
 8006918:	601a      	str	r2, [r3, #0]
      break;
 800691a:	e00f      	b.n	800693c <ISM330IS_ACC_GetSensitivity+0x70>

    case ISM330IS_4g:
      *Sensitivity = ISM330IS_ACC_SENSITIVITY_FS_4G;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	4a0b      	ldr	r2, [pc, #44]	@ (800694c <ISM330IS_ACC_GetSensitivity+0x80>)
 8006920:	601a      	str	r2, [r3, #0]
      break;
 8006922:	e00b      	b.n	800693c <ISM330IS_ACC_GetSensitivity+0x70>

    case ISM330IS_8g:
      *Sensitivity = ISM330IS_ACC_SENSITIVITY_FS_8G;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	4a0a      	ldr	r2, [pc, #40]	@ (8006950 <ISM330IS_ACC_GetSensitivity+0x84>)
 8006928:	601a      	str	r2, [r3, #0]
      break;
 800692a:	e007      	b.n	800693c <ISM330IS_ACC_GetSensitivity+0x70>

    case ISM330IS_16g:
      *Sensitivity = ISM330IS_ACC_SENSITIVITY_FS_16G;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	4a09      	ldr	r2, [pc, #36]	@ (8006954 <ISM330IS_ACC_GetSensitivity+0x88>)
 8006930:	601a      	str	r2, [r3, #0]
      break;
 8006932:	e003      	b.n	800693c <ISM330IS_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330IS_ERROR;
 8006934:	f04f 33ff 	mov.w	r3, #4294967295
 8006938:	60fb      	str	r3, [r7, #12]
      break;
 800693a:	bf00      	nop
  }

  return ret;
 800693c:	68fb      	ldr	r3, [r7, #12]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	3d79db23 	.word	0x3d79db23
 800694c:	3df9db23 	.word	0x3df9db23
 8006950:	3e79db23 	.word	0x3e79db23
 8006954:	3ef9db23 	.word	0x3ef9db23

08006958 <ISM330IS_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_ACC_GetOutputDataRate(ISM330IS_Object_t *pObj, float_t *Odr)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330IS_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]
  ism330is_xl_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (ism330is_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330IS_OK)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	331c      	adds	r3, #28
 800696a:	f107 020b 	add.w	r2, r7, #11
 800696e:	4611      	mov	r1, r2
 8006970:	4618      	mov	r0, r3
 8006972:	f000 ff6b 	bl	800784c <ism330is_xl_data_rate_get>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <ISM330IS_ACC_GetOutputDataRate+0x2a>
  {
    ret = ISM330IS_ERROR;
 800697c:	f04f 33ff 	mov.w	r3, #4294967295
 8006980:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8006982:	7afb      	ldrb	r3, [r7, #11]
 8006984:	2b0a      	cmp	r3, #10
 8006986:	d846      	bhi.n	8006a16 <ISM330IS_ACC_GetOutputDataRate+0xbe>
 8006988:	a201      	add	r2, pc, #4	@ (adr r2, 8006990 <ISM330IS_ACC_GetOutputDataRate+0x38>)
 800698a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698e:	bf00      	nop
 8006990:	080069bd 	.word	0x080069bd
 8006994:	080069c7 	.word	0x080069c7
 8006998:	080069cf 	.word	0x080069cf
 800699c:	080069d7 	.word	0x080069d7
 80069a0:	080069df 	.word	0x080069df
 80069a4:	080069e7 	.word	0x080069e7
 80069a8:	080069ef 	.word	0x080069ef
 80069ac:	080069f7 	.word	0x080069f7
 80069b0:	080069ff 	.word	0x080069ff
 80069b4:	08006a07 	.word	0x08006a07
 80069b8:	08006a0f 	.word	0x08006a0f
  {
    case ISM330IS_XL_ODR_OFF:
      *Odr = 0.0f;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	601a      	str	r2, [r3, #0]
      break;
 80069c4:	e02b      	b.n	8006a1e <ISM330IS_ACC_GetOutputDataRate+0xc6>

    case ISM330IS_XL_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	4a17      	ldr	r2, [pc, #92]	@ (8006a28 <ISM330IS_ACC_GetOutputDataRate+0xd0>)
 80069ca:	601a      	str	r2, [r3, #0]
      break;
 80069cc:	e027      	b.n	8006a1e <ISM330IS_ACC_GetOutputDataRate+0xc6>

    case ISM330IS_XL_ODR_AT_26H_HP:
      *Odr = 26.0f;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	4a16      	ldr	r2, [pc, #88]	@ (8006a2c <ISM330IS_ACC_GetOutputDataRate+0xd4>)
 80069d2:	601a      	str	r2, [r3, #0]
      break;
 80069d4:	e023      	b.n	8006a1e <ISM330IS_ACC_GetOutputDataRate+0xc6>

    case ISM330IS_XL_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	4a15      	ldr	r2, [pc, #84]	@ (8006a30 <ISM330IS_ACC_GetOutputDataRate+0xd8>)
 80069da:	601a      	str	r2, [r3, #0]
      break;
 80069dc:	e01f      	b.n	8006a1e <ISM330IS_ACC_GetOutputDataRate+0xc6>

    case ISM330IS_XL_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	4a14      	ldr	r2, [pc, #80]	@ (8006a34 <ISM330IS_ACC_GetOutputDataRate+0xdc>)
 80069e2:	601a      	str	r2, [r3, #0]
      break;
 80069e4:	e01b      	b.n	8006a1e <ISM330IS_ACC_GetOutputDataRate+0xc6>

    case ISM330IS_XL_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	4a13      	ldr	r2, [pc, #76]	@ (8006a38 <ISM330IS_ACC_GetOutputDataRate+0xe0>)
 80069ea:	601a      	str	r2, [r3, #0]
      break;
 80069ec:	e017      	b.n	8006a1e <ISM330IS_ACC_GetOutputDataRate+0xc6>

    case ISM330IS_XL_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	4a12      	ldr	r2, [pc, #72]	@ (8006a3c <ISM330IS_ACC_GetOutputDataRate+0xe4>)
 80069f2:	601a      	str	r2, [r3, #0]
      break;
 80069f4:	e013      	b.n	8006a1e <ISM330IS_ACC_GetOutputDataRate+0xc6>

    case ISM330IS_XL_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	4a11      	ldr	r2, [pc, #68]	@ (8006a40 <ISM330IS_ACC_GetOutputDataRate+0xe8>)
 80069fa:	601a      	str	r2, [r3, #0]
      break;
 80069fc:	e00f      	b.n	8006a1e <ISM330IS_ACC_GetOutputDataRate+0xc6>

    case ISM330IS_XL_ODR_AT_1667Hz_HP:
      *Odr = 1667.0f;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	4a10      	ldr	r2, [pc, #64]	@ (8006a44 <ISM330IS_ACC_GetOutputDataRate+0xec>)
 8006a02:	601a      	str	r2, [r3, #0]
      break;
 8006a04:	e00b      	b.n	8006a1e <ISM330IS_ACC_GetOutputDataRate+0xc6>

    case ISM330IS_XL_ODR_AT_3333Hz_HP:
      *Odr = 3333.0f;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	4a0f      	ldr	r2, [pc, #60]	@ (8006a48 <ISM330IS_ACC_GetOutputDataRate+0xf0>)
 8006a0a:	601a      	str	r2, [r3, #0]
      break;
 8006a0c:	e007      	b.n	8006a1e <ISM330IS_ACC_GetOutputDataRate+0xc6>

    case ISM330IS_XL_ODR_AT_6667Hz_HP:
      *Odr = 6667.0f;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	4a0e      	ldr	r2, [pc, #56]	@ (8006a4c <ISM330IS_ACC_GetOutputDataRate+0xf4>)
 8006a12:	601a      	str	r2, [r3, #0]
      break;
 8006a14:	e003      	b.n	8006a1e <ISM330IS_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330IS_ERROR;
 8006a16:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1a:	60fb      	str	r3, [r7, #12]
      break;
 8006a1c:	bf00      	nop
  }

  return ret;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	41480000 	.word	0x41480000
 8006a2c:	41d00000 	.word	0x41d00000
 8006a30:	42500000 	.word	0x42500000
 8006a34:	42d00000 	.word	0x42d00000
 8006a38:	43500000 	.word	0x43500000
 8006a3c:	43d00000 	.word	0x43d00000
 8006a40:	44504000 	.word	0x44504000
 8006a44:	44d06000 	.word	0x44d06000
 8006a48:	45505000 	.word	0x45505000
 8006a4c:	45d05800 	.word	0x45d05800

08006a50 <ISM330IS_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_ACC_SetOutputDataRate(ISM330IS_Object_t *pObj, float_t Odr)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d106      	bne.n	8006a74 <ISM330IS_ACC_SetOutputDataRate+0x24>
  {
    ret = ISM330IS_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006a66:	ed97 0a00 	vldr	s0, [r7]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fb92 	bl	8007194 <ISM330IS_ACC_SetOutputDataRate_When_Enabled>
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	e005      	b.n	8006a80 <ISM330IS_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    ret = ISM330IS_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006a74:	ed97 0a00 	vldr	s0, [r7]
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fc19 	bl	80072b0 <ISM330IS_ACC_SetOutputDataRate_When_Disabled>
 8006a7e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006a80:	68fb      	ldr	r3, [r7, #12]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <ISM330IS_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_ACC_GetFullScale(ISM330IS_Object_t *pObj, int32_t *FullScale)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330IS_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
  ism330is_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330is_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330IS_OK)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	331c      	adds	r3, #28
 8006a9e:	f107 020b 	add.w	r2, r7, #11
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fe59 	bl	800775c <ism330is_xl_full_scale_get>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <ISM330IS_ACC_GetFullScale+0x2a>
  {
    ret = ISM330IS_ERROR;
 8006ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab4:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 8006ab6:	7afb      	ldrb	r3, [r7, #11]
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d81b      	bhi.n	8006af4 <ISM330IS_ACC_GetFullScale+0x68>
 8006abc:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac4 <ISM330IS_ACC_GetFullScale+0x38>)
 8006abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac2:	bf00      	nop
 8006ac4:	08006ad5 	.word	0x08006ad5
 8006ac8:	08006aed 	.word	0x08006aed
 8006acc:	08006add 	.word	0x08006add
 8006ad0:	08006ae5 	.word	0x08006ae5
  {
    case ISM330IS_2g:
      *FullScale =  2;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	601a      	str	r2, [r3, #0]
      break;
 8006ada:	e00f      	b.n	8006afc <ISM330IS_ACC_GetFullScale+0x70>

    case ISM330IS_4g:
      *FullScale =  4;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2204      	movs	r2, #4
 8006ae0:	601a      	str	r2, [r3, #0]
      break;
 8006ae2:	e00b      	b.n	8006afc <ISM330IS_ACC_GetFullScale+0x70>

    case ISM330IS_8g:
      *FullScale =  8;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2208      	movs	r2, #8
 8006ae8:	601a      	str	r2, [r3, #0]
      break;
 8006aea:	e007      	b.n	8006afc <ISM330IS_ACC_GetFullScale+0x70>

    case ISM330IS_16g:
      *FullScale = 16;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2210      	movs	r2, #16
 8006af0:	601a      	str	r2, [r3, #0]
      break;
 8006af2:	e003      	b.n	8006afc <ISM330IS_ACC_GetFullScale+0x70>

    default:
      ret = ISM330IS_ERROR;
 8006af4:	f04f 33ff 	mov.w	r3, #4294967295
 8006af8:	60fb      	str	r3, [r7, #12]
      break;
 8006afa:	bf00      	nop
  }

  return ret;
 8006afc:	68fb      	ldr	r3, [r7, #12]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop

08006b08 <ISM330IS_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_ACC_SetFullScale(ISM330IS_Object_t *pObj, int32_t FullScale)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330IS_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60fb      	str	r3, [r7, #12]
  ism330is_xl_full_scale_t new_fs;

  new_fs = (FullScale <= 2) ? ISM330IS_2g
           : (FullScale <= 4) ? ISM330IS_4g
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	dd0b      	ble.n	8006b34 <ISM330IS_ACC_SetFullScale+0x2c>
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	dd06      	ble.n	8006b30 <ISM330IS_ACC_SetFullScale+0x28>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b08      	cmp	r3, #8
 8006b26:	dc01      	bgt.n	8006b2c <ISM330IS_ACC_SetFullScale+0x24>
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e004      	b.n	8006b36 <ISM330IS_ACC_SetFullScale+0x2e>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e002      	b.n	8006b36 <ISM330IS_ACC_SetFullScale+0x2e>
 8006b30:	2302      	movs	r3, #2
 8006b32:	e000      	b.n	8006b36 <ISM330IS_ACC_SetFullScale+0x2e>
 8006b34:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330IS_2g
 8006b36:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 8) ? ISM330IS_8g
           :                    ISM330IS_16g;

  if (ism330is_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330IS_OK)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	331c      	adds	r3, #28
 8006b3c:	7afa      	ldrb	r2, [r7, #11]
 8006b3e:	4611      	mov	r1, r2
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 fde4 	bl	800770e <ism330is_xl_full_scale_set>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <ISM330IS_ACC_SetFullScale+0x4a>
  {
    ret = ISM330IS_ERROR;
 8006b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b50:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006b52:	68fb      	ldr	r3, [r7, #12]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <ISM330IS_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_ACC_GetAxesRaw(ISM330IS_Object_t *pObj, ISM330IS_AxesRaw_t *Value)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330IS_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (ism330is_acceleration_raw_get(&(pObj->Ctx), data_raw) != ISM330IS_OK)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	331c      	adds	r3, #28
 8006b6e:	f107 020c 	add.w	r2, r7, #12
 8006b72:	4611      	mov	r1, r2
 8006b74:	4618      	mov	r0, r3
 8006b76:	f001 f96d 	bl	8007e54 <ism330is_acceleration_raw_get>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <ISM330IS_ACC_GetAxesRaw+0x2a>
  {
    ret = ISM330IS_ERROR;
 8006b80:	f04f 33ff 	mov.w	r3, #4294967295
 8006b84:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 8006b86:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 8006b8e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 8006b96:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	809a      	strh	r2, [r3, #4]

  return ret;
 8006b9e:	697b      	ldr	r3, [r7, #20]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <ISM330IS_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_ACC_GetAxes(ISM330IS_Object_t *pObj, ISM330IS_Axes_t *Acceleration)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330IS_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 8006bb6:	f04f 0300 	mov.w	r3, #0
 8006bba:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (ism330is_acceleration_raw_get(&(pObj->Ctx), data_raw) != ISM330IS_OK)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	331c      	adds	r3, #28
 8006bc0:	f107 020c 	add.w	r2, r7, #12
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f001 f944 	bl	8007e54 <ism330is_acceleration_raw_get>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <ISM330IS_ACC_GetAxes+0x30>
  {
    ret = ISM330IS_ERROR;
 8006bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd6:	617b      	str	r3, [r7, #20]
  }

  /* Get ISM330IS actual sensitivity. */
  if (ISM330IS_ACC_GetSensitivity(pObj, &sensitivity) != ISM330IS_OK)
 8006bd8:	f107 0308 	add.w	r3, r7, #8
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7ff fe74 	bl	80068cc <ISM330IS_ACC_GetSensitivity>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <ISM330IS_ACC_GetAxes+0x48>
  {
    ret = ISM330IS_ERROR;
 8006bea:	f04f 33ff 	mov.w	r3, #4294967295
 8006bee:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8006bf0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006bf4:	ee07 3a90 	vmov	s15, r3
 8006bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006bfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c08:	ee17 2a90 	vmov	r2, s15
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8006c10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006c14:	ee07 3a90 	vmov	s15, r3
 8006c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c28:	ee17 2a90 	vmov	r2, s15
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8006c30:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006c34:	ee07 3a90 	vmov	s15, r3
 8006c38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c48:	ee17 2a90 	vmov	r2, s15
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	609a      	str	r2, [r3, #8]

  return ret;
 8006c50:	697b      	ldr	r3, [r7, #20]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <ISM330IS_GYRO_Enable>:
  * @brief  Enable the ISM330IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_GYRO_Enable(ISM330IS_Object_t *pObj)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  int32_t ret = ISM330IS_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d102      	bne.n	8006c76 <ISM330IS_GYRO_Enable+0x1c>
  {
    ret = ISM330IS_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	e013      	b.n	8006c9e <ISM330IS_GYRO_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (ism330is_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330IS_OK)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f103 021c 	add.w	r2, r3, #28
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006c82:	4619      	mov	r1, r3
 8006c84:	4610      	mov	r0, r2
 8006c86:	f000 ff55 	bl	8007b34 <ism330is_gy_data_rate_set>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <ISM330IS_GYRO_Enable+0x3c>
    {
      ret = ISM330IS_ERROR;
 8006c90:	f04f 33ff 	mov.w	r3, #4294967295
 8006c94:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  }

  return ret;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <ISM330IS_GYRO_Disable>:
  * @brief  Disable the ISM330IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_GYRO_Disable(ISM330IS_Object_t *pObj)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  int32_t ret = ISM330IS_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d102      	bne.n	8006cc4 <ISM330IS_GYRO_Disable+0x1c>
  {
    ret = ISM330IS_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	e01e      	b.n	8006d02 <ISM330IS_GYRO_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (ism330is_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330IS_OK)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f103 021c 	add.w	r2, r3, #28
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3330      	adds	r3, #48	@ 0x30
 8006cce:	4619      	mov	r1, r3
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	f000 ff6f 	bl	8007bb4 <ism330is_gy_data_rate_get>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <ISM330IS_GYRO_Disable+0x3a>
    {
      ret = ISM330IS_ERROR;
 8006cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce0:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (ism330is_gy_data_rate_set(&(pObj->Ctx), ISM330IS_GY_ODR_OFF) != ISM330IS_OK)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	331c      	adds	r3, #28
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 ff23 	bl	8007b34 <ism330is_gy_data_rate_set>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <ISM330IS_GYRO_Disable+0x52>
    {
      ret = ISM330IS_ERROR;
 8006cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf8:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 0;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  }

  return ret;
 8006d02:	68fb      	ldr	r3, [r7, #12]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <ISM330IS_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_GYRO_GetSensitivity(ISM330IS_Object_t *pObj, float_t *Sensitivity)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330IS_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
  ism330is_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330is_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330IS_OK)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	331c      	adds	r3, #28
 8006d1e:	f107 020b 	add.w	r2, r7, #11
 8006d22:	4611      	mov	r1, r2
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fea9 	bl	8007a7c <ism330is_gy_full_scale_get>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <ISM330IS_GYRO_GetSensitivity+0x2a>
  {
    ret = ISM330IS_ERROR;
 8006d30:	f04f 33ff 	mov.w	r3, #4294967295
 8006d34:	60fb      	str	r3, [r7, #12]
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006d36:	7afb      	ldrb	r3, [r7, #11]
 8006d38:	2b10      	cmp	r3, #16
 8006d3a:	d839      	bhi.n	8006db0 <ISM330IS_GYRO_GetSensitivity+0xa4>
 8006d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d44 <ISM330IS_GYRO_GetSensitivity+0x38>)
 8006d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d42:	bf00      	nop
 8006d44:	08006d91 	.word	0x08006d91
 8006d48:	08006d99 	.word	0x08006d99
 8006d4c:	08006da1 	.word	0x08006da1
 8006d50:	08006da9 	.word	0x08006da9
 8006d54:	08006db1 	.word	0x08006db1
 8006d58:	08006db1 	.word	0x08006db1
 8006d5c:	08006db1 	.word	0x08006db1
 8006d60:	08006db1 	.word	0x08006db1
 8006d64:	08006db1 	.word	0x08006db1
 8006d68:	08006db1 	.word	0x08006db1
 8006d6c:	08006db1 	.word	0x08006db1
 8006d70:	08006db1 	.word	0x08006db1
 8006d74:	08006db1 	.word	0x08006db1
 8006d78:	08006db1 	.word	0x08006db1
 8006d7c:	08006db1 	.word	0x08006db1
 8006d80:	08006db1 	.word	0x08006db1
 8006d84:	08006d89 	.word	0x08006d89
  {
    case ISM330IS_125dps:
      *Sensitivity = ISM330IS_GYRO_SENSITIVITY_FS_125DPS;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	4a0e      	ldr	r2, [pc, #56]	@ (8006dc4 <ISM330IS_GYRO_GetSensitivity+0xb8>)
 8006d8c:	601a      	str	r2, [r3, #0]
      break;
 8006d8e:	e013      	b.n	8006db8 <ISM330IS_GYRO_GetSensitivity+0xac>

    case ISM330IS_250dps:
      *Sensitivity = ISM330IS_GYRO_SENSITIVITY_FS_250DPS;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	4a0d      	ldr	r2, [pc, #52]	@ (8006dc8 <ISM330IS_GYRO_GetSensitivity+0xbc>)
 8006d94:	601a      	str	r2, [r3, #0]
      break;
 8006d96:	e00f      	b.n	8006db8 <ISM330IS_GYRO_GetSensitivity+0xac>

    case ISM330IS_500dps:
      *Sensitivity = ISM330IS_GYRO_SENSITIVITY_FS_500DPS;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8006dcc <ISM330IS_GYRO_GetSensitivity+0xc0>)
 8006d9c:	601a      	str	r2, [r3, #0]
      break;
 8006d9e:	e00b      	b.n	8006db8 <ISM330IS_GYRO_GetSensitivity+0xac>

    case ISM330IS_1000dps:
      *Sensitivity = ISM330IS_GYRO_SENSITIVITY_FS_1000DPS;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	4a0b      	ldr	r2, [pc, #44]	@ (8006dd0 <ISM330IS_GYRO_GetSensitivity+0xc4>)
 8006da4:	601a      	str	r2, [r3, #0]
      break;
 8006da6:	e007      	b.n	8006db8 <ISM330IS_GYRO_GetSensitivity+0xac>

    case ISM330IS_2000dps:
      *Sensitivity = ISM330IS_GYRO_SENSITIVITY_FS_2000DPS;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	4a0a      	ldr	r2, [pc, #40]	@ (8006dd4 <ISM330IS_GYRO_GetSensitivity+0xc8>)
 8006dac:	601a      	str	r2, [r3, #0]
      break;
 8006dae:	e003      	b.n	8006db8 <ISM330IS_GYRO_GetSensitivity+0xac>

    default:
      ret = ISM330IS_ERROR;
 8006db0:	f04f 33ff 	mov.w	r3, #4294967295
 8006db4:	60fb      	str	r3, [r7, #12]
      break;
 8006db6:	bf00      	nop
  }

  return ret;
 8006db8:	68fb      	ldr	r3, [r7, #12]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	408c0000 	.word	0x408c0000
 8006dc8:	410c0000 	.word	0x410c0000
 8006dcc:	418c0000 	.word	0x418c0000
 8006dd0:	420c0000 	.word	0x420c0000
 8006dd4:	428c0000 	.word	0x428c0000

08006dd8 <ISM330IS_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_GYRO_GetOutputDataRate(ISM330IS_Object_t *pObj, float_t *Odr)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330IS_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
  ism330is_gy_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (ism330is_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330IS_OK)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	331c      	adds	r3, #28
 8006dea:	f107 020b 	add.w	r2, r7, #11
 8006dee:	4611      	mov	r1, r2
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 fedf 	bl	8007bb4 <ism330is_gy_data_rate_get>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <ISM330IS_GYRO_GetOutputDataRate+0x2a>
  {
    ret = ISM330IS_ERROR;
 8006dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8006e00:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8006e02:	7afb      	ldrb	r3, [r7, #11]
 8006e04:	2b0a      	cmp	r3, #10
 8006e06:	d846      	bhi.n	8006e96 <ISM330IS_GYRO_GetOutputDataRate+0xbe>
 8006e08:	a201      	add	r2, pc, #4	@ (adr r2, 8006e10 <ISM330IS_GYRO_GetOutputDataRate+0x38>)
 8006e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0e:	bf00      	nop
 8006e10:	08006e3d 	.word	0x08006e3d
 8006e14:	08006e47 	.word	0x08006e47
 8006e18:	08006e4f 	.word	0x08006e4f
 8006e1c:	08006e57 	.word	0x08006e57
 8006e20:	08006e5f 	.word	0x08006e5f
 8006e24:	08006e67 	.word	0x08006e67
 8006e28:	08006e6f 	.word	0x08006e6f
 8006e2c:	08006e77 	.word	0x08006e77
 8006e30:	08006e7f 	.word	0x08006e7f
 8006e34:	08006e87 	.word	0x08006e87
 8006e38:	08006e8f 	.word	0x08006e8f
  {
    case ISM330IS_GY_ODR_OFF:
      *Odr = 0.0f;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	f04f 0200 	mov.w	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]
      break;
 8006e44:	e02b      	b.n	8006e9e <ISM330IS_GYRO_GetOutputDataRate+0xc6>

    case ISM330IS_GY_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	4a17      	ldr	r2, [pc, #92]	@ (8006ea8 <ISM330IS_GYRO_GetOutputDataRate+0xd0>)
 8006e4a:	601a      	str	r2, [r3, #0]
      break;
 8006e4c:	e027      	b.n	8006e9e <ISM330IS_GYRO_GetOutputDataRate+0xc6>

    case ISM330IS_GY_ODR_AT_26H_HP:
      *Odr = 26.0f;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	4a16      	ldr	r2, [pc, #88]	@ (8006eac <ISM330IS_GYRO_GetOutputDataRate+0xd4>)
 8006e52:	601a      	str	r2, [r3, #0]
      break;
 8006e54:	e023      	b.n	8006e9e <ISM330IS_GYRO_GetOutputDataRate+0xc6>

    case ISM330IS_GY_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	4a15      	ldr	r2, [pc, #84]	@ (8006eb0 <ISM330IS_GYRO_GetOutputDataRate+0xd8>)
 8006e5a:	601a      	str	r2, [r3, #0]
      break;
 8006e5c:	e01f      	b.n	8006e9e <ISM330IS_GYRO_GetOutputDataRate+0xc6>

    case ISM330IS_GY_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	4a14      	ldr	r2, [pc, #80]	@ (8006eb4 <ISM330IS_GYRO_GetOutputDataRate+0xdc>)
 8006e62:	601a      	str	r2, [r3, #0]
      break;
 8006e64:	e01b      	b.n	8006e9e <ISM330IS_GYRO_GetOutputDataRate+0xc6>

    case ISM330IS_GY_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	4a13      	ldr	r2, [pc, #76]	@ (8006eb8 <ISM330IS_GYRO_GetOutputDataRate+0xe0>)
 8006e6a:	601a      	str	r2, [r3, #0]
      break;
 8006e6c:	e017      	b.n	8006e9e <ISM330IS_GYRO_GetOutputDataRate+0xc6>

    case ISM330IS_GY_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	4a12      	ldr	r2, [pc, #72]	@ (8006ebc <ISM330IS_GYRO_GetOutputDataRate+0xe4>)
 8006e72:	601a      	str	r2, [r3, #0]
      break;
 8006e74:	e013      	b.n	8006e9e <ISM330IS_GYRO_GetOutputDataRate+0xc6>

    case ISM330IS_GY_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	4a11      	ldr	r2, [pc, #68]	@ (8006ec0 <ISM330IS_GYRO_GetOutputDataRate+0xe8>)
 8006e7a:	601a      	str	r2, [r3, #0]
      break;
 8006e7c:	e00f      	b.n	8006e9e <ISM330IS_GYRO_GetOutputDataRate+0xc6>

    case ISM330IS_GY_ODR_AT_1667Hz_HP:
      *Odr =  1667.0f;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	4a10      	ldr	r2, [pc, #64]	@ (8006ec4 <ISM330IS_GYRO_GetOutputDataRate+0xec>)
 8006e82:	601a      	str	r2, [r3, #0]
      break;
 8006e84:	e00b      	b.n	8006e9e <ISM330IS_GYRO_GetOutputDataRate+0xc6>

    case ISM330IS_GY_ODR_AT_3333Hz_HP:
      *Odr =  3333.0f;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	4a0f      	ldr	r2, [pc, #60]	@ (8006ec8 <ISM330IS_GYRO_GetOutputDataRate+0xf0>)
 8006e8a:	601a      	str	r2, [r3, #0]
      break;
 8006e8c:	e007      	b.n	8006e9e <ISM330IS_GYRO_GetOutputDataRate+0xc6>

    case ISM330IS_GY_ODR_AT_6667Hz_HP:
      *Odr =  6667.0f;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	4a0e      	ldr	r2, [pc, #56]	@ (8006ecc <ISM330IS_GYRO_GetOutputDataRate+0xf4>)
 8006e92:	601a      	str	r2, [r3, #0]
      break;
 8006e94:	e003      	b.n	8006e9e <ISM330IS_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330IS_ERROR;
 8006e96:	f04f 33ff 	mov.w	r3, #4294967295
 8006e9a:	60fb      	str	r3, [r7, #12]
      break;
 8006e9c:	bf00      	nop
  }

  return ret;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	41480000 	.word	0x41480000
 8006eac:	41d00000 	.word	0x41d00000
 8006eb0:	42500000 	.word	0x42500000
 8006eb4:	42d00000 	.word	0x42d00000
 8006eb8:	43500000 	.word	0x43500000
 8006ebc:	43d00000 	.word	0x43d00000
 8006ec0:	44504000 	.word	0x44504000
 8006ec4:	44d06000 	.word	0x44d06000
 8006ec8:	45505000 	.word	0x45505000
 8006ecc:	45d05800 	.word	0x45d05800

08006ed0 <ISM330IS_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_GYRO_SetOutputDataRate(ISM330IS_Object_t *pObj, float_t Odr)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d106      	bne.n	8006ef4 <ISM330IS_GYRO_SetOutputDataRate+0x24>
  {
    ret = ISM330IS_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006ee6:	ed97 0a00 	vldr	s0, [r7]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fa62 	bl	80073b4 <ISM330IS_GYRO_SetOutputDataRate_When_Enabled>
 8006ef0:	60f8      	str	r0, [r7, #12]
 8006ef2:	e005      	b.n	8006f00 <ISM330IS_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    ret = ISM330IS_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006ef4:	ed97 0a00 	vldr	s0, [r7]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fae9 	bl	80074d0 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled>
 8006efe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006f00:	68fb      	ldr	r3, [r7, #12]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
	...

08006f0c <ISM330IS_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_GYRO_GetFullScale(ISM330IS_Object_t *pObj, int32_t  *FullScale)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330IS_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]
  ism330is_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330is_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330IS_OK)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	331c      	adds	r3, #28
 8006f1e:	f107 020b 	add.w	r2, r7, #11
 8006f22:	4611      	mov	r1, r2
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 fda9 	bl	8007a7c <ism330is_gy_full_scale_get>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <ISM330IS_GYRO_GetFullScale+0x2a>
  {
    ret = ISM330IS_ERROR;
 8006f30:	f04f 33ff 	mov.w	r3, #4294967295
 8006f34:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 8006f36:	7afb      	ldrb	r3, [r7, #11]
 8006f38:	2b10      	cmp	r3, #16
 8006f3a:	d83c      	bhi.n	8006fb6 <ISM330IS_GYRO_GetFullScale+0xaa>
 8006f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f44 <ISM330IS_GYRO_GetFullScale+0x38>)
 8006f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f42:	bf00      	nop
 8006f44:	08006f91 	.word	0x08006f91
 8006f48:	08006f99 	.word	0x08006f99
 8006f4c:	08006fa3 	.word	0x08006fa3
 8006f50:	08006fad 	.word	0x08006fad
 8006f54:	08006fb7 	.word	0x08006fb7
 8006f58:	08006fb7 	.word	0x08006fb7
 8006f5c:	08006fb7 	.word	0x08006fb7
 8006f60:	08006fb7 	.word	0x08006fb7
 8006f64:	08006fb7 	.word	0x08006fb7
 8006f68:	08006fb7 	.word	0x08006fb7
 8006f6c:	08006fb7 	.word	0x08006fb7
 8006f70:	08006fb7 	.word	0x08006fb7
 8006f74:	08006fb7 	.word	0x08006fb7
 8006f78:	08006fb7 	.word	0x08006fb7
 8006f7c:	08006fb7 	.word	0x08006fb7
 8006f80:	08006fb7 	.word	0x08006fb7
 8006f84:	08006f89 	.word	0x08006f89
  {
    case ISM330IS_125dps:
      *FullScale =  125;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	227d      	movs	r2, #125	@ 0x7d
 8006f8c:	601a      	str	r2, [r3, #0]
      break;
 8006f8e:	e016      	b.n	8006fbe <ISM330IS_GYRO_GetFullScale+0xb2>

    case ISM330IS_250dps:
      *FullScale =  250;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	22fa      	movs	r2, #250	@ 0xfa
 8006f94:	601a      	str	r2, [r3, #0]
      break;
 8006f96:	e012      	b.n	8006fbe <ISM330IS_GYRO_GetFullScale+0xb2>

    case ISM330IS_500dps:
      *FullScale =  500;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8006f9e:	601a      	str	r2, [r3, #0]
      break;
 8006fa0:	e00d      	b.n	8006fbe <ISM330IS_GYRO_GetFullScale+0xb2>

    case ISM330IS_1000dps:
      *FullScale = 1000;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006fa8:	601a      	str	r2, [r3, #0]
      break;
 8006faa:	e008      	b.n	8006fbe <ISM330IS_GYRO_GetFullScale+0xb2>

    case ISM330IS_2000dps:
      *FullScale = 2000;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006fb2:	601a      	str	r2, [r3, #0]
      break;
 8006fb4:	e003      	b.n	8006fbe <ISM330IS_GYRO_GetFullScale+0xb2>

    default:
      ret = ISM330IS_ERROR;
 8006fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fba:	60fb      	str	r3, [r7, #12]
      break;
 8006fbc:	bf00      	nop
  }

  return ret;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <ISM330IS_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_GYRO_SetFullScale(ISM330IS_Object_t *pObj, int32_t FullScale)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330IS_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60fb      	str	r3, [r7, #12]
  ism330is_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330IS_125dps
           : (FullScale <= 250)  ? ISM330IS_250dps
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b7d      	cmp	r3, #125	@ 0x7d
 8006fda:	dd12      	ble.n	8007002 <ISM330IS_GYRO_SetFullScale+0x3a>
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2bfa      	cmp	r3, #250	@ 0xfa
 8006fe0:	dd0d      	ble.n	8006ffe <ISM330IS_GYRO_SetFullScale+0x36>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006fe8:	dd07      	ble.n	8006ffa <ISM330IS_GYRO_SetFullScale+0x32>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ff0:	dc01      	bgt.n	8006ff6 <ISM330IS_GYRO_SetFullScale+0x2e>
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	e006      	b.n	8007004 <ISM330IS_GYRO_SetFullScale+0x3c>
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e004      	b.n	8007004 <ISM330IS_GYRO_SetFullScale+0x3c>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e002      	b.n	8007004 <ISM330IS_GYRO_SetFullScale+0x3c>
 8006ffe:	2300      	movs	r3, #0
 8007000:	e000      	b.n	8007004 <ISM330IS_GYRO_SetFullScale+0x3c>
 8007002:	2310      	movs	r3, #16
  new_fs = (FullScale <= 125)  ? ISM330IS_125dps
 8007004:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 500)  ? ISM330IS_500dps
           : (FullScale <= 1000) ? ISM330IS_1000dps
           :                       ISM330IS_2000dps;

  if (ism330is_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330IS_OK)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	331c      	adds	r3, #28
 800700a:	7afa      	ldrb	r2, [r7, #11]
 800700c:	4611      	mov	r1, r2
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fd04 	bl	8007a1c <ism330is_gy_full_scale_set>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <ISM330IS_GYRO_SetFullScale+0x58>
  {
    ret = ISM330IS_ERROR;
 800701a:	f04f 33ff 	mov.w	r3, #4294967295
 800701e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007020:	68fb      	ldr	r3, [r7, #12]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <ISM330IS_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_GYRO_GetAxesRaw(ISM330IS_Object_t *pObj, ISM330IS_AxesRaw_t *Value)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b086      	sub	sp, #24
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330IS_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (ism330is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != ISM330IS_OK)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	331c      	adds	r3, #28
 800703c:	f107 020c 	add.w	r2, r7, #12
 8007040:	4611      	mov	r1, r2
 8007042:	4618      	mov	r0, r3
 8007044:	f000 febe 	bl	8007dc4 <ism330is_angular_rate_raw_get>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d002      	beq.n	8007054 <ISM330IS_GYRO_GetAxesRaw+0x2a>
  {
    ret = ISM330IS_ERROR;
 800704e:	f04f 33ff 	mov.w	r3, #4294967295
 8007052:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 8007054:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 800705c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 8007064:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	809a      	strh	r2, [r3, #4]

  return ret;
 800706c:	697b      	ldr	r3, [r7, #20]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <ISM330IS_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_GYRO_GetAxes(ISM330IS_Object_t *pObj, ISM330IS_Axes_t *AngularRate)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b086      	sub	sp, #24
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330IS_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity;

  /* Read raw data values. */
  if (ism330is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != ISM330IS_OK)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	331c      	adds	r3, #28
 8007088:	f107 020c 	add.w	r2, r7, #12
 800708c:	4611      	mov	r1, r2
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fe98 	bl	8007dc4 <ism330is_angular_rate_raw_get>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d002      	beq.n	80070a0 <ISM330IS_GYRO_GetAxes+0x2a>
  {
    ret = ISM330IS_ERROR;
 800709a:	f04f 33ff 	mov.w	r3, #4294967295
 800709e:	617b      	str	r3, [r7, #20]
  }

  /* Get ISM330IS actual sensitivity. */
  if (ISM330IS_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330IS_OK)
 80070a0:	f107 0308 	add.w	r3, r7, #8
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7ff fe30 	bl	8006d0c <ISM330IS_GYRO_GetSensitivity>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <ISM330IS_GYRO_GetAxes+0x42>
  {
    ret = ISM330IS_ERROR;
 80070b2:	f04f 33ff 	mov.w	r3, #4294967295
 80070b6:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 80070b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80070bc:	ee07 3a90 	vmov	s15, r3
 80070c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80070c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070d0:	ee17 2a90 	vmov	r2, s15
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 80070d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80070dc:	ee07 3a90 	vmov	s15, r3
 80070e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80070e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070f0:	ee17 2a90 	vmov	r2, s15
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 80070f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80070fc:	ee07 3a90 	vmov	s15, r3
 8007100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007104:	edd7 7a02 	vldr	s15, [r7, #8]
 8007108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007110:	ee17 2a90 	vmov	r2, s15
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	609a      	str	r2, [r3, #8]

  return ret;
 8007118:	697b      	ldr	r3, [r7, #20]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <ISM330IS_Read_Reg>:
  * @param  Reg address to be read
  * @param  Data pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_Read_Reg(ISM330IS_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b086      	sub	sp, #24
 8007126:	af00      	add	r7, sp, #0
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	460b      	mov	r3, r1
 800712c:	607a      	str	r2, [r7, #4]
 800712e:	72fb      	strb	r3, [r7, #11]
  int32_t ret = ISM330IS_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	617b      	str	r3, [r7, #20]

  if (ism330is_read_reg(&(pObj->Ctx), Reg, Data, 1) != ISM330IS_OK)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f103 001c 	add.w	r0, r3, #28
 800713a:	7af9      	ldrb	r1, [r7, #11]
 800713c:	2301      	movs	r3, #1
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	f000 fa7e 	bl	8007640 <ism330is_read_reg>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d002      	beq.n	8007150 <ISM330IS_Read_Reg+0x2e>
  {
    ret = ISM330IS_ERROR;
 800714a:	f04f 33ff 	mov.w	r3, #4294967295
 800714e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8007150:	697b      	ldr	r3, [r7, #20]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <ISM330IS_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_Write_Reg(ISM330IS_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	460b      	mov	r3, r1
 8007164:	70fb      	strb	r3, [r7, #3]
 8007166:	4613      	mov	r3, r2
 8007168:	70bb      	strb	r3, [r7, #2]
  int32_t ret = ISM330IS_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	60fb      	str	r3, [r7, #12]

  if (ism330is_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330IS_OK)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f103 001c 	add.w	r0, r3, #28
 8007174:	1cba      	adds	r2, r7, #2
 8007176:	78f9      	ldrb	r1, [r7, #3]
 8007178:	2301      	movs	r3, #1
 800717a:	f000 fa79 	bl	8007670 <ism330is_write_reg>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <ISM330IS_Write_Reg+0x30>
  {
    ret = ISM330IS_ERROR;
 8007184:	f04f 33ff 	mov.w	r3, #4294967295
 8007188:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800718a:	68fb      	ldr	r3, [r7, #12]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <ISM330IS_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330IS_ACC_SetOutputDataRate_When_Enabled(ISM330IS_Object_t *pObj, float_t Odr)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = ISM330IS_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]
  ism330is_xl_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330IS_XL_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? ISM330IS_XL_ODR_AT_26H_HP
 80071a4:	edd7 7a00 	vldr	s15, [r7]
 80071a8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80071ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b4:	d801      	bhi.n	80071ba <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0x26>
 80071b6:	2301      	movs	r3, #1
 80071b8:	e058      	b.n	800726c <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80071ba:	edd7 7a00 	vldr	s15, [r7]
 80071be:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80071c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ca:	d801      	bhi.n	80071d0 <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0x3c>
 80071cc:	2302      	movs	r3, #2
 80071ce:	e04d      	b.n	800726c <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80071d0:	edd7 7a00 	vldr	s15, [r7]
 80071d4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8007294 <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0x100>
 80071d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e0:	d801      	bhi.n	80071e6 <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0x52>
 80071e2:	2303      	movs	r3, #3
 80071e4:	e042      	b.n	800726c <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80071e6:	edd7 7a00 	vldr	s15, [r7]
 80071ea:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8007298 <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0x104>
 80071ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f6:	d801      	bhi.n	80071fc <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0x68>
 80071f8:	2304      	movs	r3, #4
 80071fa:	e037      	b.n	800726c <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80071fc:	edd7 7a00 	vldr	s15, [r7]
 8007200:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800729c <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0x108>
 8007204:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800720c:	d801      	bhi.n	8007212 <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0x7e>
 800720e:	2305      	movs	r3, #5
 8007210:	e02c      	b.n	800726c <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007212:	edd7 7a00 	vldr	s15, [r7]
 8007216:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80072a0 <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0x10c>
 800721a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800721e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007222:	d801      	bhi.n	8007228 <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0x94>
 8007224:	2306      	movs	r3, #6
 8007226:	e021      	b.n	800726c <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007228:	edd7 7a00 	vldr	s15, [r7]
 800722c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80072a4 <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0x110>
 8007230:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007238:	d801      	bhi.n	800723e <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0xaa>
 800723a:	2307      	movs	r3, #7
 800723c:	e016      	b.n	800726c <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800723e:	edd7 7a00 	vldr	s15, [r7]
 8007242:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80072a8 <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0x114>
 8007246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800724a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800724e:	d801      	bhi.n	8007254 <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007250:	2308      	movs	r3, #8
 8007252:	e00b      	b.n	800726c <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007254:	edd7 7a00 	vldr	s15, [r7]
 8007258:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80072ac <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0x118>
 800725c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007264:	d801      	bhi.n	800726a <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0xd6>
 8007266:	2309      	movs	r3, #9
 8007268:	e000      	b.n	800726c <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800726a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330IS_XL_ODR_AT_12Hz5_HP
 800726c:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? ISM330IS_XL_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? ISM330IS_XL_ODR_AT_3333Hz_HP
            :                    ISM330IS_XL_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (ism330is_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330IS_OK)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	331c      	adds	r3, #28
 8007272:	7afa      	ldrb	r2, [r7, #11]
 8007274:	4611      	mov	r1, r2
 8007276:	4618      	mov	r0, r3
 8007278:	f000 faa8 	bl	80077cc <ism330is_xl_data_rate_set>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <ISM330IS_ACC_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = ISM330IS_ERROR;
 8007282:	f04f 33ff 	mov.w	r3, #4294967295
 8007286:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007288:	68fb      	ldr	r3, [r7, #12]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	42500000 	.word	0x42500000
 8007298:	42d00000 	.word	0x42d00000
 800729c:	43500000 	.word	0x43500000
 80072a0:	43d00000 	.word	0x43d00000
 80072a4:	44504000 	.word	0x44504000
 80072a8:	44d06000 	.word	0x44d06000
 80072ac:	45505000 	.word	0x45505000

080072b0 <ISM330IS_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330IS_ACC_SetOutputDataRate_When_Disabled(ISM330IS_Object_t *pObj, float_t Odr)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330IS_XL_ODR_AT_12Hz5_HP
                  : (Odr <=   26.0f) ? ISM330IS_XL_ODR_AT_26H_HP
 80072bc:	edd7 7a00 	vldr	s15, [r7]
 80072c0:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80072c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072cc:	d801      	bhi.n	80072d2 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0x22>
 80072ce:	2301      	movs	r3, #1
 80072d0:	e058      	b.n	8007384 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80072d2:	edd7 7a00 	vldr	s15, [r7]
 80072d6:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80072da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e2:	d801      	bhi.n	80072e8 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0x38>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e04d      	b.n	8007384 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80072e8:	edd7 7a00 	vldr	s15, [r7]
 80072ec:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8007398 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80072f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f8:	d801      	bhi.n	80072fe <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80072fa:	2303      	movs	r3, #3
 80072fc:	e042      	b.n	8007384 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80072fe:	edd7 7a00 	vldr	s15, [r7]
 8007302:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800739c <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0xec>
 8007306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800730a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730e:	d801      	bhi.n	8007314 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0x64>
 8007310:	2304      	movs	r3, #4
 8007312:	e037      	b.n	8007384 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007314:	edd7 7a00 	vldr	s15, [r7]
 8007318:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80073a0 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0xf0>
 800731c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007324:	d801      	bhi.n	800732a <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8007326:	2305      	movs	r3, #5
 8007328:	e02c      	b.n	8007384 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800732a:	edd7 7a00 	vldr	s15, [r7]
 800732e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80073a4 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8007332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733a:	d801      	bhi.n	8007340 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0x90>
 800733c:	2306      	movs	r3, #6
 800733e:	e021      	b.n	8007384 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007340:	edd7 7a00 	vldr	s15, [r7]
 8007344:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80073a8 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8007348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800734c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007350:	d801      	bhi.n	8007356 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8007352:	2307      	movs	r3, #7
 8007354:	e016      	b.n	8007384 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007356:	edd7 7a00 	vldr	s15, [r7]
 800735a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80073ac <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800735e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007366:	d801      	bhi.n	800736c <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8007368:	2308      	movs	r3, #8
 800736a:	e00b      	b.n	8007384 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800736c:	edd7 7a00 	vldr	s15, [r7]
 8007370:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80073b0 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007374:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737c:	d801      	bhi.n	8007382 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800737e:	2309      	movs	r3, #9
 8007380:	e000      	b.n	8007384 <ISM330IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007382:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330IS_XL_ODR_AT_12Hz5_HP
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	f882 302f 	strb.w	r3, [r2, #47]	@ 0x2f
                  : (Odr <=  833.0f) ? ISM330IS_XL_ODR_AT_833Hz_HP
                  : (Odr <= 1667.0f) ? ISM330IS_XL_ODR_AT_1667Hz_HP
                  : (Odr <= 3333.0f) ? ISM330IS_XL_ODR_AT_3333Hz_HP
                  :                    ISM330IS_XL_ODR_AT_6667Hz_HP;

  return ISM330IS_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	42500000 	.word	0x42500000
 800739c:	42d00000 	.word	0x42d00000
 80073a0:	43500000 	.word	0x43500000
 80073a4:	43d00000 	.word	0x43d00000
 80073a8:	44504000 	.word	0x44504000
 80073ac:	44d06000 	.word	0x44d06000
 80073b0:	45505000 	.word	0x45505000

080073b4 <ISM330IS_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330IS_GYRO_SetOutputDataRate_When_Enabled(ISM330IS_Object_t *pObj, float_t Odr)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = ISM330IS_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	60fb      	str	r3, [r7, #12]
  ism330is_gy_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330IS_GY_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? ISM330IS_GY_ODR_AT_26H_HP
 80073c4:	edd7 7a00 	vldr	s15, [r7]
 80073c8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80073cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d4:	d801      	bhi.n	80073da <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0x26>
 80073d6:	2301      	movs	r3, #1
 80073d8:	e058      	b.n	800748c <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80073da:	edd7 7a00 	vldr	s15, [r7]
 80073de:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80073e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ea:	d801      	bhi.n	80073f0 <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0x3c>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e04d      	b.n	800748c <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80073f0:	edd7 7a00 	vldr	s15, [r7]
 80073f4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80074b4 <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80073f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007400:	d801      	bhi.n	8007406 <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0x52>
 8007402:	2303      	movs	r3, #3
 8007404:	e042      	b.n	800748c <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007406:	edd7 7a00 	vldr	s15, [r7]
 800740a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80074b8 <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800740e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007416:	d801      	bhi.n	800741c <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0x68>
 8007418:	2304      	movs	r3, #4
 800741a:	e037      	b.n	800748c <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800741c:	edd7 7a00 	vldr	s15, [r7]
 8007420:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80074bc <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8007424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800742c:	d801      	bhi.n	8007432 <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0x7e>
 800742e:	2305      	movs	r3, #5
 8007430:	e02c      	b.n	800748c <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007432:	edd7 7a00 	vldr	s15, [r7]
 8007436:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80074c0 <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800743a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800743e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007442:	d801      	bhi.n	8007448 <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0x94>
 8007444:	2306      	movs	r3, #6
 8007446:	e021      	b.n	800748c <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007448:	edd7 7a00 	vldr	s15, [r7]
 800744c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80074c4 <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8007450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007458:	d801      	bhi.n	800745e <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0xaa>
 800745a:	2307      	movs	r3, #7
 800745c:	e016      	b.n	800748c <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800745e:	edd7 7a00 	vldr	s15, [r7]
 8007462:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80074c8 <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8007466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800746a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800746e:	d801      	bhi.n	8007474 <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 8007470:	2308      	movs	r3, #8
 8007472:	e00b      	b.n	800748c <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007474:	edd7 7a00 	vldr	s15, [r7]
 8007478:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80074cc <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0x118>
 800747c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007484:	d801      	bhi.n	800748a <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0xd6>
 8007486:	2309      	movs	r3, #9
 8007488:	e000      	b.n	800748c <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800748a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330IS_GY_ODR_AT_12Hz5_HP
 800748c:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? ISM330IS_GY_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? ISM330IS_GY_ODR_AT_3333Hz_HP
            :                    ISM330IS_GY_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (ism330is_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330IS_OK)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	331c      	adds	r3, #28
 8007492:	7afa      	ldrb	r2, [r7, #11]
 8007494:	4611      	mov	r1, r2
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fb4c 	bl	8007b34 <ism330is_gy_data_rate_set>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <ISM330IS_GYRO_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = ISM330IS_ERROR;
 80074a2:	f04f 33ff 	mov.w	r3, #4294967295
 80074a6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80074a8:	68fb      	ldr	r3, [r7, #12]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	42500000 	.word	0x42500000
 80074b8:	42d00000 	.word	0x42d00000
 80074bc:	43500000 	.word	0x43500000
 80074c0:	43d00000 	.word	0x43d00000
 80074c4:	44504000 	.word	0x44504000
 80074c8:	44d06000 	.word	0x44d06000
 80074cc:	45505000 	.word	0x45505000

080074d0 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330IS_GYRO_SetOutputDataRate_When_Disabled(ISM330IS_Object_t *pObj, float_t Odr)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330IS_GY_ODR_AT_12Hz5_HP
                   : (Odr <=   26.0f) ? ISM330IS_GY_ODR_AT_26H_HP
 80074dc:	edd7 7a00 	vldr	s15, [r7]
 80074e0:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80074e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ec:	d801      	bhi.n	80074f2 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e058      	b.n	80075a4 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80074f2:	edd7 7a00 	vldr	s15, [r7]
 80074f6:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80074fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007502:	d801      	bhi.n	8007508 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8007504:	2302      	movs	r3, #2
 8007506:	e04d      	b.n	80075a4 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007508:	edd7 7a00 	vldr	s15, [r7]
 800750c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80075b8 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8007510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007518:	d801      	bhi.n	800751e <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800751a:	2303      	movs	r3, #3
 800751c:	e042      	b.n	80075a4 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800751e:	edd7 7a00 	vldr	s15, [r7]
 8007522:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80075bc <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8007526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800752a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800752e:	d801      	bhi.n	8007534 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8007530:	2304      	movs	r3, #4
 8007532:	e037      	b.n	80075a4 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007534:	edd7 7a00 	vldr	s15, [r7]
 8007538:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80075c0 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800753c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007544:	d801      	bhi.n	800754a <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8007546:	2305      	movs	r3, #5
 8007548:	e02c      	b.n	80075a4 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800754a:	edd7 7a00 	vldr	s15, [r7]
 800754e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80075c4 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8007552:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800755a:	d801      	bhi.n	8007560 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800755c:	2306      	movs	r3, #6
 800755e:	e021      	b.n	80075a4 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007560:	edd7 7a00 	vldr	s15, [r7]
 8007564:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80075c8 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8007568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800756c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007570:	d801      	bhi.n	8007576 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8007572:	2307      	movs	r3, #7
 8007574:	e016      	b.n	80075a4 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007576:	edd7 7a00 	vldr	s15, [r7]
 800757a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80075cc <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800757e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007586:	d801      	bhi.n	800758c <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8007588:	2308      	movs	r3, #8
 800758a:	e00b      	b.n	80075a4 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800758c:	edd7 7a00 	vldr	s15, [r7]
 8007590:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80075d0 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8007594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759c:	d801      	bhi.n	80075a2 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800759e:	2309      	movs	r3, #9
 80075a0:	e000      	b.n	80075a4 <ISM330IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80075a2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330IS_GY_ODR_AT_12Hz5_HP
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
                   : (Odr <=  833.0f) ? ISM330IS_GY_ODR_AT_833Hz_HP
                   : (Odr <= 1667.0f) ? ISM330IS_GY_ODR_AT_1667Hz_HP
                   : (Odr <= 3333.0f) ? ISM330IS_GY_ODR_AT_3333Hz_HP
                   :                    ISM330IS_GY_ODR_AT_6667Hz_HP;

  return ISM330IS_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	42500000 	.word	0x42500000
 80075bc:	42d00000 	.word	0x42d00000
 80075c0:	43500000 	.word	0x43500000
 80075c4:	43d00000 	.word	0x43d00000
 80075c8:	44504000 	.word	0x44504000
 80075cc:	44d06000 	.word	0x44d06000
 80075d0:	45505000 	.word	0x45505000

080075d4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80075d4:	b590      	push	{r4, r7, lr}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	607a      	str	r2, [r7, #4]
 80075de:	461a      	mov	r2, r3
 80075e0:	460b      	mov	r3, r1
 80075e2:	72fb      	strb	r3, [r7, #11]
 80075e4:	4613      	mov	r3, r2
 80075e6:	813b      	strh	r3, [r7, #8]
  ISM330IS_Object_t *pObj = (ISM330IS_Object_t *)Handle;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	695c      	ldr	r4, [r3, #20]
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	7b1b      	ldrb	r3, [r3, #12]
 80075f4:	4618      	mov	r0, r3
 80075f6:	7afb      	ldrb	r3, [r7, #11]
 80075f8:	b299      	uxth	r1, r3
 80075fa:	893b      	ldrh	r3, [r7, #8]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	47a0      	blx	r4
 8007600:	4603      	mov	r3, r0
}
 8007602:	4618      	mov	r0, r3
 8007604:	371c      	adds	r7, #28
 8007606:	46bd      	mov	sp, r7
 8007608:	bd90      	pop	{r4, r7, pc}

0800760a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800760a:	b590      	push	{r4, r7, lr}
 800760c:	b087      	sub	sp, #28
 800760e:	af00      	add	r7, sp, #0
 8007610:	60f8      	str	r0, [r7, #12]
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	461a      	mov	r2, r3
 8007616:	460b      	mov	r3, r1
 8007618:	72fb      	strb	r3, [r7, #11]
 800761a:	4613      	mov	r3, r2
 800761c:	813b      	strh	r3, [r7, #8]
  ISM330IS_Object_t *pObj = (ISM330IS_Object_t *)Handle;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	691c      	ldr	r4, [r3, #16]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	7b1b      	ldrb	r3, [r3, #12]
 800762a:	4618      	mov	r0, r3
 800762c:	7afb      	ldrb	r3, [r7, #11]
 800762e:	b299      	uxth	r1, r3
 8007630:	893b      	ldrh	r3, [r7, #8]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	47a0      	blx	r4
 8007636:	4603      	mov	r3, r0
}
 8007638:	4618      	mov	r0, r3
 800763a:	371c      	adds	r7, #28
 800763c:	46bd      	mov	sp, r7
 800763e:	bd90      	pop	{r4, r7, pc}

08007640 <ism330is_read_reg>:
  *
  */
int32_t ism330is_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8007640:	b590      	push	{r4, r7, lr}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	607a      	str	r2, [r7, #4]
 800764a:	461a      	mov	r2, r3
 800764c:	460b      	mov	r3, r1
 800764e:	72fb      	strb	r3, [r7, #11]
 8007650:	4613      	mov	r3, r2
 8007652:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	685c      	ldr	r4, [r3, #4]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	68d8      	ldr	r0, [r3, #12]
 800765c:	893b      	ldrh	r3, [r7, #8]
 800765e:	7af9      	ldrb	r1, [r7, #11]
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	47a0      	blx	r4
 8007664:	6178      	str	r0, [r7, #20]

  return ret;
 8007666:	697b      	ldr	r3, [r7, #20]
}
 8007668:	4618      	mov	r0, r3
 800766a:	371c      	adds	r7, #28
 800766c:	46bd      	mov	sp, r7
 800766e:	bd90      	pop	{r4, r7, pc}

08007670 <ism330is_write_reg>:
  *
  */
int32_t ism330is_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8007670:	b590      	push	{r4, r7, lr}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	607a      	str	r2, [r7, #4]
 800767a:	461a      	mov	r2, r3
 800767c:	460b      	mov	r3, r1
 800767e:	72fb      	strb	r3, [r7, #11]
 8007680:	4613      	mov	r3, r2
 8007682:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681c      	ldr	r4, [r3, #0]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	68d8      	ldr	r0, [r3, #12]
 800768c:	893b      	ldrh	r3, [r7, #8]
 800768e:	7af9      	ldrb	r1, [r7, #11]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	47a0      	blx	r4
 8007694:	6178      	str	r0, [r7, #20]

  return ret;
 8007696:	697b      	ldr	r3, [r7, #20]
}
 8007698:	4618      	mov	r0, r3
 800769a:	371c      	adds	r7, #28
 800769c:	46bd      	mov	sp, r7
 800769e:	bd90      	pop	{r4, r7, pc}

080076a0 <ism330is_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_WHO_AM_I, (uint8_t *)val, 1);
 80076aa:	2301      	movs	r3, #1
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	210f      	movs	r1, #15
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7ff ffc5 	bl	8007640 <ism330is_read_reg>
 80076b6:	60f8      	str	r0, [r7, #12]

  return ret;
 80076b8:	68fb      	ldr	r3, [r7, #12]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <ism330is_xl_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_xl_hm_mode_set(stmdev_ctx_t *ctx, ism330is_hm_mode_t val)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	460b      	mov	r3, r1
 80076cc:	70fb      	strb	r3, [r7, #3]
  ism330is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80076ce:	f107 0208 	add.w	r2, r7, #8
 80076d2:	2301      	movs	r3, #1
 80076d4:	2115      	movs	r1, #21
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7ff ffb2 	bl	8007640 <ism330is_read_reg>
 80076dc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10f      	bne.n	8007704 <ism330is_xl_hm_mode_set+0x42>
  {
    ctrl6_c.xl_hm_mode = ((uint8_t)val & 0x1U);
 80076e4:	78fb      	ldrb	r3, [r7, #3]
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	7a3b      	ldrb	r3, [r7, #8]
 80076ee:	f362 1304 	bfi	r3, r2, #4, #1
 80076f2:	723b      	strb	r3, [r7, #8]
    ret = ism330is_write_reg(ctx, ISM330IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80076f4:	f107 0208 	add.w	r2, r7, #8
 80076f8:	2301      	movs	r3, #1
 80076fa:	2115      	movs	r1, #21
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff ffb7 	bl	8007670 <ism330is_write_reg>
 8007702:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007704:	68fb      	ldr	r3, [r7, #12]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <ism330is_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_xl_full_scale_set(stmdev_ctx_t *ctx,
                                   ism330is_xl_full_scale_t val)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	460b      	mov	r3, r1
 8007718:	70fb      	strb	r3, [r7, #3]
  ism330is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800771a:	f107 0208 	add.w	r2, r7, #8
 800771e:	2301      	movs	r3, #1
 8007720:	2110      	movs	r1, #16
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7ff ff8c 	bl	8007640 <ism330is_read_reg>
 8007728:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10f      	bne.n	8007750 <ism330is_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = ((uint8_t)val & 0x3U);
 8007730:	78fb      	ldrb	r3, [r7, #3]
 8007732:	f003 0303 	and.w	r3, r3, #3
 8007736:	b2da      	uxtb	r2, r3
 8007738:	7a3b      	ldrb	r3, [r7, #8]
 800773a:	f362 0383 	bfi	r3, r2, #2, #2
 800773e:	723b      	strb	r3, [r7, #8]
    ret = ism330is_write_reg(ctx, ISM330IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007740:	f107 0208 	add.w	r2, r7, #8
 8007744:	2301      	movs	r3, #1
 8007746:	2110      	movs	r1, #16
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7ff ff91 	bl	8007670 <ism330is_write_reg>
 800774e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007750:	68fb      	ldr	r3, [r7, #12]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <ism330is_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_xl_full_scale_get(stmdev_ctx_t *ctx,
                                   ism330is_xl_full_scale_t *val)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  ism330is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007766:	f107 0208 	add.w	r2, r7, #8
 800776a:	2301      	movs	r3, #1
 800776c:	2110      	movs	r1, #16
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff ff66 	bl	8007640 <ism330is_read_reg>
 8007774:	60f8      	str	r0, [r7, #12]

  switch ((ctrl1_xl.fs_xl))
 8007776:	7a3b      	ldrb	r3, [r7, #8]
 8007778:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b03      	cmp	r3, #3
 8007780:	d81a      	bhi.n	80077b8 <ism330is_xl_full_scale_get+0x5c>
 8007782:	a201      	add	r2, pc, #4	@ (adr r2, 8007788 <ism330is_xl_full_scale_get+0x2c>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	08007799 	.word	0x08007799
 800778c:	080077b1 	.word	0x080077b1
 8007790:	080077a1 	.word	0x080077a1
 8007794:	080077a9 	.word	0x080077a9
  {
    case ISM330IS_2g:
      *val = ISM330IS_2g;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2200      	movs	r2, #0
 800779c:	701a      	strb	r2, [r3, #0]
      break;
 800779e:	e00f      	b.n	80077c0 <ism330is_xl_full_scale_get+0x64>

    case ISM330IS_4g:
      *val = ISM330IS_4g;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2202      	movs	r2, #2
 80077a4:	701a      	strb	r2, [r3, #0]
      break;
 80077a6:	e00b      	b.n	80077c0 <ism330is_xl_full_scale_get+0x64>

    case ISM330IS_8g:
      *val = ISM330IS_8g;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	2203      	movs	r2, #3
 80077ac:	701a      	strb	r2, [r3, #0]
      break;
 80077ae:	e007      	b.n	80077c0 <ism330is_xl_full_scale_get+0x64>

    case ISM330IS_16g:
      *val = ISM330IS_16g;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2201      	movs	r2, #1
 80077b4:	701a      	strb	r2, [r3, #0]
      break;
 80077b6:	e003      	b.n	80077c0 <ism330is_xl_full_scale_get+0x64>

    default:
      *val = ISM330IS_2g;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2200      	movs	r2, #0
 80077bc:	701a      	strb	r2, [r3, #0]
      break;
 80077be:	bf00      	nop
  }
  return ret;
 80077c0:	68fb      	ldr	r3, [r7, #12]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop

080077cc <ism330is_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_xl_data_rate_set(stmdev_ctx_t *ctx,
                                  ism330is_xl_data_rate_t val)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	460b      	mov	r3, r1
 80077d6:	70fb      	strb	r3, [r7, #3]
  ism330is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80077d8:	f107 0208 	add.w	r2, r7, #8
 80077dc:	2301      	movs	r3, #1
 80077de:	2110      	movs	r1, #16
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff ff2d 	bl	8007640 <ism330is_read_reg>
 80077e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d128      	bne.n	8007840 <ism330is_xl_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 80077ee:	78fb      	ldrb	r3, [r7, #3]
 80077f0:	f003 0310 	and.w	r3, r3, #16
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d008      	beq.n	800780a <ism330is_xl_data_rate_set+0x3e>
    {
      ret += ism330is_xl_hm_mode_set(ctx, ISM330IS_HIGH_PERFOMANCE_MODE_DISABLED);
 80077f8:	2101      	movs	r1, #1
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7ff ff61 	bl	80076c2 <ism330is_xl_hm_mode_set>
 8007800:	4602      	mov	r2, r0
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	4413      	add	r3, r2
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	e007      	b.n	800781a <ism330is_xl_data_rate_set+0x4e>
    }
    else
    {
      ret += ism330is_xl_hm_mode_set(ctx, ISM330IS_HIGH_PERFOMANCE_MODE_ENABLED);
 800780a:	2100      	movs	r1, #0
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7ff ff58 	bl	80076c2 <ism330is_xl_hm_mode_set>
 8007812:	4602      	mov	r2, r0
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4413      	add	r3, r2
 8007818:	60fb      	str	r3, [r7, #12]
    }

    ctrl1_xl.odr_xl = ((uint8_t)val & 0xfU);
 800781a:	78fb      	ldrb	r3, [r7, #3]
 800781c:	f003 030f 	and.w	r3, r3, #15
 8007820:	b2da      	uxtb	r2, r3
 8007822:	7a3b      	ldrb	r3, [r7, #8]
 8007824:	f362 1307 	bfi	r3, r2, #4, #4
 8007828:	723b      	strb	r3, [r7, #8]
    ret += ism330is_write_reg(ctx, ISM330IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800782a:	f107 0208 	add.w	r2, r7, #8
 800782e:	2301      	movs	r3, #1
 8007830:	2110      	movs	r1, #16
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7ff ff1c 	bl	8007670 <ism330is_write_reg>
 8007838:	4602      	mov	r2, r0
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	4413      	add	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007840:	68fb      	ldr	r3, [r7, #12]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <ism330is_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_xl_data_rate_get(stmdev_ctx_t *ctx,
                                  ism330is_xl_data_rate_t *val)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  ism330is_ctrl1_xl_t ctrl1_xl;
  ism330is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007856:	f107 0210 	add.w	r2, r7, #16
 800785a:	2301      	movs	r3, #1
 800785c:	2110      	movs	r1, #16
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7ff feee 	bl	8007640 <ism330is_read_reg>
 8007864:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d107      	bne.n	800787c <ism330is_xl_data_rate_get+0x30>
  {
    ret = ism330is_read_reg(ctx, ISM330IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800786c:	f107 020c 	add.w	r2, r7, #12
 8007870:	2301      	movs	r3, #1
 8007872:	2115      	movs	r1, #21
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff fee3 	bl	8007640 <ism330is_read_reg>
 800787a:	6178      	str	r0, [r7, #20]
  }

  switch ((ctrl6_c.xl_hm_mode << 4) | (ctrl1_xl.odr_xl))
 800787c:	7b3b      	ldrb	r3, [r7, #12]
 800787e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007882:	b2db      	uxtb	r3, r3
 8007884:	011b      	lsls	r3, r3, #4
 8007886:	7c3a      	ldrb	r2, [r7, #16]
 8007888:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800788c:	b2d2      	uxtb	r2, r2
 800788e:	4313      	orrs	r3, r2
 8007890:	2b1b      	cmp	r3, #27
 8007892:	f200 8093 	bhi.w	80079bc <ism330is_xl_data_rate_get+0x170>
 8007896:	a201      	add	r2, pc, #4	@ (adr r2, 800789c <ism330is_xl_data_rate_get+0x50>)
 8007898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789c:	0800790d 	.word	0x0800790d
 80078a0:	08007915 	.word	0x08007915
 80078a4:	0800791d 	.word	0x0800791d
 80078a8:	08007925 	.word	0x08007925
 80078ac:	0800792d 	.word	0x0800792d
 80078b0:	08007935 	.word	0x08007935
 80078b4:	0800793d 	.word	0x0800793d
 80078b8:	08007945 	.word	0x08007945
 80078bc:	0800794d 	.word	0x0800794d
 80078c0:	08007955 	.word	0x08007955
 80078c4:	0800795d 	.word	0x0800795d
 80078c8:	080079bd 	.word	0x080079bd
 80078cc:	080079bd 	.word	0x080079bd
 80078d0:	080079bd 	.word	0x080079bd
 80078d4:	080079bd 	.word	0x080079bd
 80078d8:	080079bd 	.word	0x080079bd
 80078dc:	080079bd 	.word	0x080079bd
 80078e0:	08007965 	.word	0x08007965
 80078e4:	0800796d 	.word	0x0800796d
 80078e8:	08007975 	.word	0x08007975
 80078ec:	0800797d 	.word	0x0800797d
 80078f0:	08007985 	.word	0x08007985
 80078f4:	0800798d 	.word	0x0800798d
 80078f8:	08007995 	.word	0x08007995
 80078fc:	0800799d 	.word	0x0800799d
 8007900:	080079a5 	.word	0x080079a5
 8007904:	080079ad 	.word	0x080079ad
 8007908:	080079b5 	.word	0x080079b5
  {
    case ISM330IS_XL_ODR_OFF:
      *val = ISM330IS_XL_ODR_OFF;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2200      	movs	r2, #0
 8007910:	701a      	strb	r2, [r3, #0]
      break;
 8007912:	e057      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_12Hz5_HP:
      *val = ISM330IS_XL_ODR_AT_12Hz5_HP;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2201      	movs	r2, #1
 8007918:	701a      	strb	r2, [r3, #0]
      break;
 800791a:	e053      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_26H_HP:
      *val = ISM330IS_XL_ODR_AT_26H_HP;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2202      	movs	r2, #2
 8007920:	701a      	strb	r2, [r3, #0]
      break;
 8007922:	e04f      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_52Hz_HP:
      *val = ISM330IS_XL_ODR_AT_52Hz_HP;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	2203      	movs	r2, #3
 8007928:	701a      	strb	r2, [r3, #0]
      break;
 800792a:	e04b      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_104Hz_HP:
      *val = ISM330IS_XL_ODR_AT_104Hz_HP;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2204      	movs	r2, #4
 8007930:	701a      	strb	r2, [r3, #0]
      break;
 8007932:	e047      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_208Hz_HP:
      *val = ISM330IS_XL_ODR_AT_208Hz_HP;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	2205      	movs	r2, #5
 8007938:	701a      	strb	r2, [r3, #0]
      break;
 800793a:	e043      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_416Hz_HP:
      *val = ISM330IS_XL_ODR_AT_416Hz_HP;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2206      	movs	r2, #6
 8007940:	701a      	strb	r2, [r3, #0]
      break;
 8007942:	e03f      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_833Hz_HP:
      *val = ISM330IS_XL_ODR_AT_833Hz_HP;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2207      	movs	r2, #7
 8007948:	701a      	strb	r2, [r3, #0]
      break;
 800794a:	e03b      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_1667Hz_HP:
      *val = ISM330IS_XL_ODR_AT_1667Hz_HP;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2208      	movs	r2, #8
 8007950:	701a      	strb	r2, [r3, #0]
      break;
 8007952:	e037      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_3333Hz_HP:
      *val = ISM330IS_XL_ODR_AT_3333Hz_HP;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	2209      	movs	r2, #9
 8007958:	701a      	strb	r2, [r3, #0]
      break;
 800795a:	e033      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_6667Hz_HP:
      *val = ISM330IS_XL_ODR_AT_6667Hz_HP;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	220a      	movs	r2, #10
 8007960:	701a      	strb	r2, [r3, #0]
      break;
 8007962:	e02f      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_12Hz5_LP:
      *val = ISM330IS_XL_ODR_AT_12Hz5_LP;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	2211      	movs	r2, #17
 8007968:	701a      	strb	r2, [r3, #0]
      break;
 800796a:	e02b      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_26H_LP:
      *val = ISM330IS_XL_ODR_AT_26H_LP;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	2212      	movs	r2, #18
 8007970:	701a      	strb	r2, [r3, #0]
      break;
 8007972:	e027      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_52Hz_LP:
      *val = ISM330IS_XL_ODR_AT_52Hz_LP;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2213      	movs	r2, #19
 8007978:	701a      	strb	r2, [r3, #0]
      break;
 800797a:	e023      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_104Hz_LP:
      *val = ISM330IS_XL_ODR_AT_104Hz_LP;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	2214      	movs	r2, #20
 8007980:	701a      	strb	r2, [r3, #0]
      break;
 8007982:	e01f      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_208Hz_LP:
      *val = ISM330IS_XL_ODR_AT_208Hz_LP;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	2215      	movs	r2, #21
 8007988:	701a      	strb	r2, [r3, #0]
      break;
 800798a:	e01b      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_416Hz_LP:
      *val = ISM330IS_XL_ODR_AT_416Hz_LP;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2216      	movs	r2, #22
 8007990:	701a      	strb	r2, [r3, #0]
      break;
 8007992:	e017      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_833Hz_LP:
      *val = ISM330IS_XL_ODR_AT_833Hz_LP;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2217      	movs	r2, #23
 8007998:	701a      	strb	r2, [r3, #0]
      break;
 800799a:	e013      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_1667Hz_LP:
      *val = ISM330IS_XL_ODR_AT_1667Hz_LP;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2218      	movs	r2, #24
 80079a0:	701a      	strb	r2, [r3, #0]
      break;
 80079a2:	e00f      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_3333Hz_LP:
      *val = ISM330IS_XL_ODR_AT_3333Hz_LP;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2219      	movs	r2, #25
 80079a8:	701a      	strb	r2, [r3, #0]
      break;
 80079aa:	e00b      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_6667Hz_LP:
      *val = ISM330IS_XL_ODR_AT_6667Hz_LP;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	221a      	movs	r2, #26
 80079b0:	701a      	strb	r2, [r3, #0]
      break;
 80079b2:	e007      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    case ISM330IS_XL_ODR_AT_1Hz6_LP:
      *val = ISM330IS_XL_ODR_AT_1Hz6_LP;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	221b      	movs	r2, #27
 80079b8:	701a      	strb	r2, [r3, #0]
      break;
 80079ba:	e003      	b.n	80079c4 <ism330is_xl_data_rate_get+0x178>

    default:
      *val = ISM330IS_XL_ODR_OFF;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	2200      	movs	r2, #0
 80079c0:	701a      	strb	r2, [r3, #0]
      break;
 80079c2:	bf00      	nop
  }
  return ret;
 80079c4:	697b      	ldr	r3, [r7, #20]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3718      	adds	r7, #24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop

080079d0 <ism330is_gy_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_gy_hm_mode_set(stmdev_ctx_t *ctx, ism330is_hm_mode_t val)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	460b      	mov	r3, r1
 80079da:	70fb      	strb	r3, [r7, #3]
  ism330is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80079dc:	f107 0208 	add.w	r2, r7, #8
 80079e0:	2301      	movs	r3, #1
 80079e2:	2116      	movs	r1, #22
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7ff fe2b 	bl	8007640 <ism330is_read_reg>
 80079ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10f      	bne.n	8007a12 <ism330is_gy_hm_mode_set+0x42>
  {
    ctrl7_g.g_hm_mode = ((uint8_t)val & 0x1U);
 80079f2:	78fb      	ldrb	r3, [r7, #3]
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	7a3b      	ldrb	r3, [r7, #8]
 80079fc:	f362 13c7 	bfi	r3, r2, #7, #1
 8007a00:	723b      	strb	r3, [r7, #8]
    ret = ism330is_write_reg(ctx, ISM330IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8007a02:	f107 0208 	add.w	r2, r7, #8
 8007a06:	2301      	movs	r3, #1
 8007a08:	2116      	movs	r1, #22
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff fe30 	bl	8007670 <ism330is_write_reg>
 8007a10:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007a12:	68fb      	ldr	r3, [r7, #12]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <ism330is_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_gy_full_scale_set(stmdev_ctx_t *ctx,
                                   ism330is_gy_full_scale_t val)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  ism330is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007a28:	f107 0208 	add.w	r2, r7, #8
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	2111      	movs	r1, #17
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff fe05 	bl	8007640 <ism330is_read_reg>
 8007a36:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d119      	bne.n	8007a72 <ism330is_gy_full_scale_set+0x56>
  {
    ctrl2_g.fs_g = ((uint8_t)val & 0x3U);
 8007a3e:	78fb      	ldrb	r3, [r7, #3]
 8007a40:	f003 0303 	and.w	r3, r3, #3
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	7a3b      	ldrb	r3, [r7, #8]
 8007a48:	f362 0383 	bfi	r3, r2, #2, #2
 8007a4c:	723b      	strb	r3, [r7, #8]
    ctrl2_g.fs_125 = ((uint8_t)val >> 4);
 8007a4e:	78fb      	ldrb	r3, [r7, #3]
 8007a50:	091b      	lsrs	r3, r3, #4
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	7a3b      	ldrb	r3, [r7, #8]
 8007a5c:	f362 0341 	bfi	r3, r2, #1, #1
 8007a60:	723b      	strb	r3, [r7, #8]
    ret = ism330is_write_reg(ctx, ISM330IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007a62:	f107 0208 	add.w	r2, r7, #8
 8007a66:	2301      	movs	r3, #1
 8007a68:	2111      	movs	r1, #17
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7ff fe00 	bl	8007670 <ism330is_write_reg>
 8007a70:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007a72:	68fb      	ldr	r3, [r7, #12]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <ism330is_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_gy_full_scale_get(stmdev_ctx_t *ctx,
                                   ism330is_gy_full_scale_t *val)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  ism330is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007a86:	f107 0208 	add.w	r2, r7, #8
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	2111      	movs	r1, #17
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7ff fdd6 	bl	8007640 <ism330is_read_reg>
 8007a94:	60f8      	str	r0, [r7, #12]

  switch ((ctrl2_g.fs_125 << 4) | (ctrl2_g.fs_g))
 8007a96:	7a3b      	ldrb	r3, [r7, #8]
 8007a98:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	011b      	lsls	r3, r3, #4
 8007aa0:	7a3a      	ldrb	r2, [r7, #8]
 8007aa2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8007aa6:	b2d2      	uxtb	r2, r2
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	2b10      	cmp	r3, #16
 8007aac:	d838      	bhi.n	8007b20 <ism330is_gy_full_scale_get+0xa4>
 8007aae:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab4 <ism330is_gy_full_scale_get+0x38>)
 8007ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab4:	08007b01 	.word	0x08007b01
 8007ab8:	08007b09 	.word	0x08007b09
 8007abc:	08007b11 	.word	0x08007b11
 8007ac0:	08007b19 	.word	0x08007b19
 8007ac4:	08007b21 	.word	0x08007b21
 8007ac8:	08007b21 	.word	0x08007b21
 8007acc:	08007b21 	.word	0x08007b21
 8007ad0:	08007b21 	.word	0x08007b21
 8007ad4:	08007b21 	.word	0x08007b21
 8007ad8:	08007b21 	.word	0x08007b21
 8007adc:	08007b21 	.word	0x08007b21
 8007ae0:	08007b21 	.word	0x08007b21
 8007ae4:	08007b21 	.word	0x08007b21
 8007ae8:	08007b21 	.word	0x08007b21
 8007aec:	08007b21 	.word	0x08007b21
 8007af0:	08007b21 	.word	0x08007b21
 8007af4:	08007af9 	.word	0x08007af9
  {
    case ISM330IS_125dps:
      *val = ISM330IS_125dps;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	2210      	movs	r2, #16
 8007afc:	701a      	strb	r2, [r3, #0]
      break;
 8007afe:	e013      	b.n	8007b28 <ism330is_gy_full_scale_get+0xac>

    case ISM330IS_250dps:
      *val = ISM330IS_250dps;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2200      	movs	r2, #0
 8007b04:	701a      	strb	r2, [r3, #0]
      break;
 8007b06:	e00f      	b.n	8007b28 <ism330is_gy_full_scale_get+0xac>

    case ISM330IS_500dps:
      *val = ISM330IS_500dps;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	701a      	strb	r2, [r3, #0]
      break;
 8007b0e:	e00b      	b.n	8007b28 <ism330is_gy_full_scale_get+0xac>

    case ISM330IS_1000dps:
      *val = ISM330IS_1000dps;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2202      	movs	r2, #2
 8007b14:	701a      	strb	r2, [r3, #0]
      break;
 8007b16:	e007      	b.n	8007b28 <ism330is_gy_full_scale_get+0xac>

    case ISM330IS_2000dps:
      *val = ISM330IS_2000dps;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2203      	movs	r2, #3
 8007b1c:	701a      	strb	r2, [r3, #0]
      break;
 8007b1e:	e003      	b.n	8007b28 <ism330is_gy_full_scale_get+0xac>

    default:
      *val = ISM330IS_125dps;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2210      	movs	r2, #16
 8007b24:	701a      	strb	r2, [r3, #0]
      break;
 8007b26:	bf00      	nop
  }
  return ret;
 8007b28:	68fb      	ldr	r3, [r7, #12]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop

08007b34 <ism330is_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_gy_data_rate_set(stmdev_ctx_t *ctx,
                                  ism330is_gy_data_rate_t val)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  ism330is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007b40:	f107 0208 	add.w	r2, r7, #8
 8007b44:	2301      	movs	r3, #1
 8007b46:	2111      	movs	r1, #17
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7ff fd79 	bl	8007640 <ism330is_read_reg>
 8007b4e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d128      	bne.n	8007ba8 <ism330is_gy_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 8007b56:	78fb      	ldrb	r3, [r7, #3]
 8007b58:	f003 0310 	and.w	r3, r3, #16
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d008      	beq.n	8007b72 <ism330is_gy_data_rate_set+0x3e>
    {
      ret += ism330is_gy_hm_mode_set(ctx, ISM330IS_HIGH_PERFOMANCE_MODE_DISABLED);
 8007b60:	2101      	movs	r1, #1
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff ff34 	bl	80079d0 <ism330is_gy_hm_mode_set>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	e007      	b.n	8007b82 <ism330is_gy_data_rate_set+0x4e>
    }
    else
    {
      ret += ism330is_gy_hm_mode_set(ctx, ISM330IS_HIGH_PERFOMANCE_MODE_ENABLED);
 8007b72:	2100      	movs	r1, #0
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff ff2b 	bl	80079d0 <ism330is_gy_hm_mode_set>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4413      	add	r3, r2
 8007b80:	60fb      	str	r3, [r7, #12]
    }

    ctrl2_g.odr_g = ((uint8_t)val & 0xfU);
 8007b82:	78fb      	ldrb	r3, [r7, #3]
 8007b84:	f003 030f 	and.w	r3, r3, #15
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	7a3b      	ldrb	r3, [r7, #8]
 8007b8c:	f362 1307 	bfi	r3, r2, #4, #4
 8007b90:	723b      	strb	r3, [r7, #8]
    ret += ism330is_write_reg(ctx, ISM330IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007b92:	f107 0208 	add.w	r2, r7, #8
 8007b96:	2301      	movs	r3, #1
 8007b98:	2111      	movs	r1, #17
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff fd68 	bl	8007670 <ism330is_write_reg>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <ism330is_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_gy_data_rate_get(stmdev_ctx_t *ctx,
                                  ism330is_gy_data_rate_t *val)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  ism330is_ctrl2_g_t ctrl2_g;
  ism330is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007bbe:	f107 0210 	add.w	r2, r7, #16
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	2111      	movs	r1, #17
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7ff fd3a 	bl	8007640 <ism330is_read_reg>
 8007bcc:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d107      	bne.n	8007be4 <ism330is_gy_data_rate_get+0x30>
  {
    ret = ism330is_read_reg(ctx, ISM330IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8007bd4:	f107 020c 	add.w	r2, r7, #12
 8007bd8:	2301      	movs	r3, #1
 8007bda:	2116      	movs	r1, #22
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff fd2f 	bl	8007640 <ism330is_read_reg>
 8007be2:	6178      	str	r0, [r7, #20]
  }

  switch ((ctrl7_g.g_hm_mode << 4) | (ctrl2_g.odr_g))
 8007be4:	7b3b      	ldrb	r3, [r7, #12]
 8007be6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	011b      	lsls	r3, r3, #4
 8007bee:	7c3a      	ldrb	r2, [r7, #16]
 8007bf0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007bf4:	b2d2      	uxtb	r2, r2
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	2b1a      	cmp	r3, #26
 8007bfa:	f200 808d 	bhi.w	8007d18 <ism330is_gy_data_rate_get+0x164>
 8007bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8007c04 <ism330is_gy_data_rate_get+0x50>)
 8007c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c04:	08007c71 	.word	0x08007c71
 8007c08:	08007c79 	.word	0x08007c79
 8007c0c:	08007c81 	.word	0x08007c81
 8007c10:	08007c89 	.word	0x08007c89
 8007c14:	08007c91 	.word	0x08007c91
 8007c18:	08007c99 	.word	0x08007c99
 8007c1c:	08007ca1 	.word	0x08007ca1
 8007c20:	08007ca9 	.word	0x08007ca9
 8007c24:	08007cb1 	.word	0x08007cb1
 8007c28:	08007cb9 	.word	0x08007cb9
 8007c2c:	08007cc1 	.word	0x08007cc1
 8007c30:	08007d19 	.word	0x08007d19
 8007c34:	08007d19 	.word	0x08007d19
 8007c38:	08007d19 	.word	0x08007d19
 8007c3c:	08007d19 	.word	0x08007d19
 8007c40:	08007d19 	.word	0x08007d19
 8007c44:	08007d19 	.word	0x08007d19
 8007c48:	08007cc9 	.word	0x08007cc9
 8007c4c:	08007cd1 	.word	0x08007cd1
 8007c50:	08007cd9 	.word	0x08007cd9
 8007c54:	08007ce1 	.word	0x08007ce1
 8007c58:	08007ce9 	.word	0x08007ce9
 8007c5c:	08007cf1 	.word	0x08007cf1
 8007c60:	08007cf9 	.word	0x08007cf9
 8007c64:	08007d01 	.word	0x08007d01
 8007c68:	08007d09 	.word	0x08007d09
 8007c6c:	08007d11 	.word	0x08007d11
  {
    case ISM330IS_GY_ODR_OFF:
      *val = ISM330IS_GY_ODR_OFF;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2200      	movs	r2, #0
 8007c74:	701a      	strb	r2, [r3, #0]
      break;
 8007c76:	e053      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_12Hz5_HP:
      *val = ISM330IS_GY_ODR_AT_12Hz5_HP;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	701a      	strb	r2, [r3, #0]
      break;
 8007c7e:	e04f      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_26H_HP:
      *val = ISM330IS_GY_ODR_AT_26H_HP;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2202      	movs	r2, #2
 8007c84:	701a      	strb	r2, [r3, #0]
      break;
 8007c86:	e04b      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_52Hz_HP:
      *val = ISM330IS_GY_ODR_AT_52Hz_HP;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	2203      	movs	r2, #3
 8007c8c:	701a      	strb	r2, [r3, #0]
      break;
 8007c8e:	e047      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_104Hz_HP:
      *val = ISM330IS_GY_ODR_AT_104Hz_HP;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2204      	movs	r2, #4
 8007c94:	701a      	strb	r2, [r3, #0]
      break;
 8007c96:	e043      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_208Hz_HP:
      *val = ISM330IS_GY_ODR_AT_208Hz_HP;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	2205      	movs	r2, #5
 8007c9c:	701a      	strb	r2, [r3, #0]
      break;
 8007c9e:	e03f      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_416Hz_HP:
      *val = ISM330IS_GY_ODR_AT_416Hz_HP;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	2206      	movs	r2, #6
 8007ca4:	701a      	strb	r2, [r3, #0]
      break;
 8007ca6:	e03b      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_833Hz_HP:
      *val = ISM330IS_GY_ODR_AT_833Hz_HP;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2207      	movs	r2, #7
 8007cac:	701a      	strb	r2, [r3, #0]
      break;
 8007cae:	e037      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_1667Hz_HP:
      *val = ISM330IS_GY_ODR_AT_1667Hz_HP;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	2208      	movs	r2, #8
 8007cb4:	701a      	strb	r2, [r3, #0]
      break;
 8007cb6:	e033      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_3333Hz_HP:
      *val = ISM330IS_GY_ODR_AT_3333Hz_HP;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	2209      	movs	r2, #9
 8007cbc:	701a      	strb	r2, [r3, #0]
      break;
 8007cbe:	e02f      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_6667Hz_HP:
      *val = ISM330IS_GY_ODR_AT_6667Hz_HP;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	220a      	movs	r2, #10
 8007cc4:	701a      	strb	r2, [r3, #0]
      break;
 8007cc6:	e02b      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_12Hz5_LP:
      *val = ISM330IS_GY_ODR_AT_12Hz5_LP;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	2211      	movs	r2, #17
 8007ccc:	701a      	strb	r2, [r3, #0]
      break;
 8007cce:	e027      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_26H_LP:
      *val = ISM330IS_GY_ODR_AT_26H_LP;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2212      	movs	r2, #18
 8007cd4:	701a      	strb	r2, [r3, #0]
      break;
 8007cd6:	e023      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_52Hz_LP:
      *val = ISM330IS_GY_ODR_AT_52Hz_LP;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	2213      	movs	r2, #19
 8007cdc:	701a      	strb	r2, [r3, #0]
      break;
 8007cde:	e01f      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_104Hz_LP:
      *val = ISM330IS_GY_ODR_AT_104Hz_LP;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	2214      	movs	r2, #20
 8007ce4:	701a      	strb	r2, [r3, #0]
      break;
 8007ce6:	e01b      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_208Hz_LP:
      *val = ISM330IS_GY_ODR_AT_208Hz_LP;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2215      	movs	r2, #21
 8007cec:	701a      	strb	r2, [r3, #0]
      break;
 8007cee:	e017      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_416Hz_LP:
      *val = ISM330IS_GY_ODR_AT_416Hz_LP;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2216      	movs	r2, #22
 8007cf4:	701a      	strb	r2, [r3, #0]
      break;
 8007cf6:	e013      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_833Hz_LP:
      *val = ISM330IS_GY_ODR_AT_833Hz_LP;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2217      	movs	r2, #23
 8007cfc:	701a      	strb	r2, [r3, #0]
      break;
 8007cfe:	e00f      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_1667Hz_LP:
      *val = ISM330IS_GY_ODR_AT_1667Hz_LP;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2218      	movs	r2, #24
 8007d04:	701a      	strb	r2, [r3, #0]
      break;
 8007d06:	e00b      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_3333Hz_LP:
      *val = ISM330IS_GY_ODR_AT_3333Hz_LP;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2219      	movs	r2, #25
 8007d0c:	701a      	strb	r2, [r3, #0]
      break;
 8007d0e:	e007      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    case ISM330IS_GY_ODR_AT_6667Hz_LP:
      *val = ISM330IS_GY_ODR_AT_6667Hz_LP;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	221a      	movs	r2, #26
 8007d14:	701a      	strb	r2, [r3, #0]
      break;
 8007d16:	e003      	b.n	8007d20 <ism330is_gy_data_rate_get+0x16c>

    default:
      *val = ISM330IS_GY_ODR_OFF;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	701a      	strb	r2, [r3, #0]
      break;
 8007d1e:	bf00      	nop
  }

  return ret;
 8007d20:	697b      	ldr	r3, [r7, #20]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop

08007d2c <ism330is_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	70fb      	strb	r3, [r7, #3]
  ism330is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007d38:	f107 0208 	add.w	r2, r7, #8
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	2112      	movs	r1, #18
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff fc7d 	bl	8007640 <ism330is_read_reg>
 8007d46:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10f      	bne.n	8007d6e <ism330is_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8007d4e:	78fb      	ldrb	r3, [r7, #3]
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	7a3b      	ldrb	r3, [r7, #8]
 8007d58:	f362 0382 	bfi	r3, r2, #2, #1
 8007d5c:	723b      	strb	r3, [r7, #8]
    ret = ism330is_write_reg(ctx, ISM330IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007d5e:	f107 0208 	add.w	r2, r7, #8
 8007d62:	2301      	movs	r3, #1
 8007d64:	2112      	movs	r1, #18
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7ff fc82 	bl	8007670 <ism330is_write_reg>
 8007d6c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <ism330is_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	70fb      	strb	r3, [r7, #3]
  ism330is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007d84:	f107 0208 	add.w	r2, r7, #8
 8007d88:	2301      	movs	r3, #1
 8007d8a:	2112      	movs	r1, #18
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7ff fc57 	bl	8007640 <ism330is_read_reg>
 8007d92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10f      	bne.n	8007dba <ism330is_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8007d9a:	78fb      	ldrb	r3, [r7, #3]
 8007d9c:	f003 0301 	and.w	r3, r3, #1
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	7a3b      	ldrb	r3, [r7, #8]
 8007da4:	f362 1386 	bfi	r3, r2, #6, #1
 8007da8:	723b      	strb	r3, [r7, #8]
    ret = ism330is_write_reg(ctx, ISM330IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007daa:	f107 0208 	add.w	r2, r7, #8
 8007dae:	2301      	movs	r3, #1
 8007db0:	2112      	movs	r1, #18
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7ff fc5c 	bl	8007670 <ism330is_write_reg>
 8007db8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007dba:	68fb      	ldr	r3, [r7, #12]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <ism330is_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_OUTX_L_G, buff, 6);
 8007dce:	f107 020c 	add.w	r2, r7, #12
 8007dd2:	2306      	movs	r3, #6
 8007dd4:	2122      	movs	r1, #34	@ 0x22
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7ff fc32 	bl	8007640 <ism330is_read_reg>
 8007ddc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007dde:	7b7b      	ldrb	r3, [r7, #13]
 8007de0:	b21a      	sxth	r2, r3
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	021b      	lsls	r3, r3, #8
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	7b3a      	ldrb	r2, [r7, #12]
 8007df4:	4413      	add	r3, r2
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	b21a      	sxth	r2, r3
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007dfe:	7bfa      	ldrb	r2, [r7, #15]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	3302      	adds	r3, #2
 8007e04:	b212      	sxth	r2, r2
 8007e06:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	3302      	adds	r3, #2
 8007e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	021b      	lsls	r3, r3, #8
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	7bba      	ldrb	r2, [r7, #14]
 8007e18:	4413      	add	r3, r2
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	3302      	adds	r3, #2
 8007e20:	b212      	sxth	r2, r2
 8007e22:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007e24:	7c7a      	ldrb	r2, [r7, #17]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	3304      	adds	r3, #4
 8007e2a:	b212      	sxth	r2, r2
 8007e2c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	3304      	adds	r3, #4
 8007e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	021b      	lsls	r3, r3, #8
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	7c3a      	ldrb	r2, [r7, #16]
 8007e3e:	4413      	add	r3, r2
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	3304      	adds	r3, #4
 8007e46:	b212      	sxth	r2, r2
 8007e48:	801a      	strh	r2, [r3, #0]

  return ret;
 8007e4a:	697b      	ldr	r3, [r7, #20]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3718      	adds	r7, #24
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <ism330is_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_OUTX_L_A, buff, 6);
 8007e5e:	f107 020c 	add.w	r2, r7, #12
 8007e62:	2306      	movs	r3, #6
 8007e64:	2128      	movs	r1, #40	@ 0x28
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff fbea 	bl	8007640 <ism330is_read_reg>
 8007e6c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007e6e:	7b7b      	ldrb	r3, [r7, #13]
 8007e70:	b21a      	sxth	r2, r3
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	021b      	lsls	r3, r3, #8
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	7b3a      	ldrb	r2, [r7, #12]
 8007e84:	4413      	add	r3, r2
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	b21a      	sxth	r2, r3
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007e8e:	7bfa      	ldrb	r2, [r7, #15]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	3302      	adds	r3, #2
 8007e94:	b212      	sxth	r2, r2
 8007e96:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	3302      	adds	r3, #2
 8007e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	021b      	lsls	r3, r3, #8
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	7bba      	ldrb	r2, [r7, #14]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	3302      	adds	r3, #2
 8007eb0:	b212      	sxth	r2, r2
 8007eb2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007eb4:	7c7a      	ldrb	r2, [r7, #17]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	b212      	sxth	r2, r2
 8007ebc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	7c3a      	ldrb	r2, [r7, #16]
 8007ece:	4413      	add	r3, r2
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	b212      	sxth	r2, r2
 8007ed8:	801a      	strh	r2, [r3, #0]

  return ret;
 8007eda:	697b      	ldr	r3, [r7, #20]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <LSM6DSV16X_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_RegisterBusIO(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_IO_t *pIO)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d103      	bne.n	8007f00 <LSM6DSV16X_RegisterBusIO+0x1c>
  {
    ret = LSM6DSV16X_ERROR;
 8007ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	e05d      	b.n	8007fbc <LSM6DSV16X_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	689a      	ldr	r2, [r3, #8]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	7b1a      	ldrb	r2, [r3, #12]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	695a      	ldr	r2, [r3, #20]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	699a      	ldr	r2, [r3, #24]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a23      	ldr	r2, [pc, #140]	@ (8007fc8 <LSM6DSV16X_RegisterBusIO+0xe4>)
 8007f3c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a22      	ldr	r2, [pc, #136]	@ (8007fcc <LSM6DSV16X_RegisterBusIO+0xe8>)
 8007f42:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	69da      	ldr	r2, [r3, #28]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d103      	bne.n	8007f62 <LSM6DSV16X_RegisterBusIO+0x7e>
    {
      ret = LSM6DSV16X_ERROR;
 8007f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5e:	60fb      	str	r3, [r7, #12]
 8007f60:	e02c      	b.n	8007fbc <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LSM6DSV16X_OK)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4798      	blx	r3
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <LSM6DSV16X_RegisterBusIO+0x92>
    {
      ret = LSM6DSV16X_ERROR;
 8007f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	e022      	b.n	8007fbc <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSV16X_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d11e      	bne.n	8007fbc <LSM6DSV16X_RegisterBusIO+0xd8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d119      	bne.n	8007fbc <LSM6DSV16X_RegisterBusIO+0xd8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x04;
 8007f88:	2304      	movs	r3, #4
 8007f8a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_CTRL3, data) != LSM6DSV16X_OK)
 8007f8c:	7afb      	ldrb	r3, [r7, #11]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	2112      	movs	r1, #18
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 ff85 	bl	8008ea2 <LSM6DSV16X_Write_Reg>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d002      	beq.n	8007fa4 <LSM6DSV16X_RegisterBusIO+0xc0>
          {
            ret = LSM6DSV16X_ERROR;
 8007f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa2:	60fb      	str	r3, [r7, #12]
          }

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_IF_CFG, data) != LSM6DSV16X_OK)
 8007fa4:	7afb      	ldrb	r3, [r7, #11]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	2103      	movs	r1, #3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 ff79 	bl	8008ea2 <LSM6DSV16X_Write_Reg>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d002      	beq.n	8007fbc <LSM6DSV16X_RegisterBusIO+0xd8>
          {
            ret = LSM6DSV16X_ERROR;
 8007fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fba:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	08009395 	.word	0x08009395
 8007fcc:	080093cb 	.word	0x080093cb

08007fd0 <LSM6DSV16X_Init>:
 * @brief  Initialize the LSM6DSV16X sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_Init(LSM6DSV16X_Object_t *pObj)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsv16x_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	3320      	adds	r3, #32
 8007fdc:	2101      	movs	r1, #1
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f001 fb74 	bl	80096cc <lsm6dsv16x_auto_increment_set>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <LSM6DSV16X_Init+0x20>
  {
    return LSM6DSV16X_ERROR;
 8007fea:	f04f 33ff 	mov.w	r3, #4294967295
 8007fee:	e064      	b.n	80080ba <LSM6DSV16X_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dsv16x_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3320      	adds	r3, #32
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f001 fb8e 	bl	8009718 <lsm6dsv16x_block_data_update_set>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <LSM6DSV16X_Init+0x38>
  {
    return LSM6DSV16X_ERROR;
 8008002:	f04f 33ff 	mov.w	r3, #4294967295
 8008006:	e058      	b.n	80080ba <LSM6DSV16X_Init+0xea>
  }

  /* WAKE_UP mode selection */
  if (lsm6dsv16x_fifo_mode_set(&(pObj->Ctx), LSM6DSV16X_BYPASS_MODE) != LSM6DSV16X_OK)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	3320      	adds	r3, #32
 800800c:	2100      	movs	r1, #0
 800800e:	4618      	mov	r0, r3
 8008010:	f001 fd4c 	bl	8009aac <lsm6dsv16x_fifo_mode_set>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d002      	beq.n	8008020 <LSM6DSV16X_Init+0x50>
  {
    return LSM6DSV16X_ERROR;
 800801a:	f04f 33ff 	mov.w	r3, #4294967295
 800801e:	e04c      	b.n	80080ba <LSM6DSV16X_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSV16X_XL_ODR_AT_120Hz;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2206      	movs	r2, #6
 8008024:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_XL_ODR_OFF) != LSM6DSV16X_OK)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	3320      	adds	r3, #32
 800802c:	2100      	movs	r1, #0
 800802e:	4618      	mov	r0, r3
 8008030:	f001 fa27 	bl	8009482 <lsm6dsv16x_xl_data_rate_set>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <LSM6DSV16X_Init+0x70>
  {
    return LSM6DSV16X_ERROR;
 800803a:	f04f 33ff 	mov.w	r3, #4294967295
 800803e:	e03c      	b.n	80080ba <LSM6DSV16X_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2g) != LSM6DSV16X_OK)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3320      	adds	r3, #32
 8008044:	2100      	movs	r1, #0
 8008046:	4618      	mov	r0, r3
 8008048:	f001 fbf6 	bl	8009838 <lsm6dsv16x_xl_full_scale_set>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d002      	beq.n	8008058 <LSM6DSV16X_Init+0x88>
  {
    return LSM6DSV16X_ERROR;
 8008052:	f04f 33ff 	mov.w	r3, #4294967295
 8008056:	e030      	b.n	80080ba <LSM6DSV16X_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSV16X_GY_ODR_AT_120Hz;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2206      	movs	r2, #6
 800805c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_GY_ODR_OFF) != LSM6DSV16X_OK)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3320      	adds	r3, #32
 8008064:	2100      	movs	r1, #0
 8008066:	4618      	mov	r0, r3
 8008068:	f001 faa0 	bl	80095ac <lsm6dsv16x_gy_data_rate_set>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d002      	beq.n	8008078 <LSM6DSV16X_Init+0xa8>
  {
    return LSM6DSV16X_ERROR;
 8008072:	f04f 33ff 	mov.w	r3, #4294967295
 8008076:	e020      	b.n	80080ba <LSM6DSV16X_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2000dps) != LSM6DSV16X_OK)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3320      	adds	r3, #32
 800807c:	2104      	movs	r1, #4
 800807e:	4618      	mov	r0, r3
 8008080:	f001 fb70 	bl	8009764 <lsm6dsv16x_gy_full_scale_set>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d002      	beq.n	8008090 <LSM6DSV16X_Init+0xc0>
  {
    return LSM6DSV16X_ERROR;
 800808a:	f04f 33ff 	mov.w	r3, #4294967295
 800808e:	e014      	b.n	80080ba <LSM6DSV16X_Init+0xea>
  }

  /* Enable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 1;
 8008090:	7b3b      	ldrb	r3, [r7, #12]
 8008092:	f043 0301 	orr.w	r3, r3, #1
 8008096:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	3320      	adds	r3, #32
 800809c:	7b39      	ldrb	r1, [r7, #12]
 800809e:	4618      	mov	r0, r3
 80080a0:	f001 fd2a 	bl	8009af8 <lsm6dsv16x_ah_qvar_mode_set>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d002      	beq.n	80080b0 <LSM6DSV16X_Init+0xe0>
  {
    return LSM6DSV16X_ERROR;
 80080aa:	f04f 33ff 	mov.w	r3, #4294967295
 80080ae:	e004      	b.n	80080ba <LSM6DSV16X_Init+0xea>
  }

  pObj->is_initialized = 1;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <LSM6DSV16X_DeInit>:
 * @brief  Deinitialize the LSM6DSV16X sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_DeInit(LSM6DSV16X_Object_t *pObj)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b084      	sub	sp, #16
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSV16X_ACC_Disable(pObj) != LSM6DSV16X_OK)
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f898 	bl	8008200 <LSM6DSV16X_ACC_Disable>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <LSM6DSV16X_DeInit+0x1a>
  {
    return LSM6DSV16X_ERROR;
 80080d6:	f04f 33ff 	mov.w	r3, #4294967295
 80080da:	e025      	b.n	8008128 <LSM6DSV16X_DeInit+0x66>
  }

  if (LSM6DSV16X_GYRO_Disable(pObj) != LSM6DSV16X_OK)
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fca3 	bl	8008a28 <LSM6DSV16X_GYRO_Disable>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d002      	beq.n	80080ee <LSM6DSV16X_DeInit+0x2c>
  {
    return LSM6DSV16X_ERROR;
 80080e8:	f04f 33ff 	mov.w	r3, #4294967295
 80080ec:	e01c      	b.n	8008128 <LSM6DSV16X_DeInit+0x66>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSV16X_XL_ODR_OFF;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSV16X_GY_ODR_OFF;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 0;
 80080fe:	7b3b      	ldrb	r3, [r7, #12]
 8008100:	f36f 0300 	bfc	r3, #0, #1
 8008104:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	3320      	adds	r3, #32
 800810a:	7b39      	ldrb	r1, [r7, #12]
 800810c:	4618      	mov	r0, r3
 800810e:	f001 fcf3 	bl	8009af8 <lsm6dsv16x_ah_qvar_mode_set>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d002      	beq.n	800811e <LSM6DSV16X_DeInit+0x5c>
  {
    return LSM6DSV16X_ERROR;
 8008118:	f04f 33ff 	mov.w	r3, #4294967295
 800811c:	e004      	b.n	8008128 <LSM6DSV16X_DeInit+0x66>
  }

  pObj->is_initialized = 0;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <LSM6DSV16X_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_ReadID(LSM6DSV16X_Object_t *pObj, uint8_t *Id)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  if (lsm6dsv16x_device_id_get(&(pObj->Ctx), Id) != LSM6DSV16X_OK)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	3320      	adds	r3, #32
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	4618      	mov	r0, r3
 8008142:	f001 f98d 	bl	8009460 <lsm6dsv16x_device_id_get>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <LSM6DSV16X_ReadID+0x22>
  {
    return LSM6DSV16X_ERROR;
 800814c:	f04f 33ff 	mov.w	r3, #4294967295
 8008150:	e000      	b.n	8008154 <LSM6DSV16X_ReadID+0x24>
  }

  return LSM6DSV16X_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <LSM6DSV16X_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSV16X sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_GetCapabilities(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Capabilities_t *Capabilities)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2201      	movs	r2, #1
 800816a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2201      	movs	r2, #1
 8008170:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2200      	movs	r2, #0
 8008176:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 1;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	2201      	movs	r2, #1
 800817c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8008184:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2210      	movs	r2, #16
 800818a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2200      	movs	r2, #0
 8008190:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 7680.0f;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	4a07      	ldr	r2, [pc, #28]	@ (80081b4 <LSM6DSV16X_GetCapabilities+0x58>)
 8008196:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 7680.0f;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	4a06      	ldr	r2, [pc, #24]	@ (80081b4 <LSM6DSV16X_GetCapabilities+0x58>)
 800819c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	f04f 0200 	mov.w	r2, #0
 80081a4:	619a      	str	r2, [r3, #24]
  return LSM6DSV16X_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	45f00000 	.word	0x45f00000

080081b8 <LSM6DSV16X_ACC_Enable>:
 * @brief  Enable the LSM6DSV16X accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_ACC_Enable(LSM6DSV16X_Object_t *pObj)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d101      	bne.n	80081ce <LSM6DSV16X_ACC_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	e014      	b.n	80081f8 <LSM6DSV16X_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSV16X_OK)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f103 0220 	add.w	r2, r3, #32
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80081da:	4619      	mov	r1, r3
 80081dc:	4610      	mov	r0, r2
 80081de:	f001 f950 	bl	8009482 <lsm6dsv16x_xl_data_rate_set>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <LSM6DSV16X_ACC_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 80081e8:	f04f 33ff 	mov.w	r3, #4294967295
 80081ec:	e004      	b.n	80081f8 <LSM6DSV16X_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <LSM6DSV16X_ACC_Disable>:
 * @brief  Disable the LSM6DSV16X accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_ACC_Disable(LSM6DSV16X_Object_t *pObj)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <LSM6DSV16X_ACC_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	e01f      	b.n	8008256 <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSV16X_OK)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f103 0220 	add.w	r2, r3, #32
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3333      	adds	r3, #51	@ 0x33
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f001 f954 	bl	80094d0 <lsm6dsv16x_xl_data_rate_get>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <LSM6DSV16X_ACC_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 800822e:	f04f 33ff 	mov.w	r3, #4294967295
 8008232:	e010      	b.n	8008256 <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_XL_ODR_OFF) != LSM6DSV16X_OK)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	3320      	adds	r3, #32
 8008238:	2100      	movs	r1, #0
 800823a:	4618      	mov	r0, r3
 800823c:	f001 f921 	bl	8009482 <lsm6dsv16x_xl_data_rate_set>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d002      	beq.n	800824c <LSM6DSV16X_ACC_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8008246:	f04f 33ff 	mov.w	r3, #4294967295
 800824a:	e004      	b.n	8008256 <LSM6DSV16X_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
	...

08008260 <LSM6DSV16X_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_ACC_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	3320      	adds	r3, #32
 8008272:	f107 020b 	add.w	r2, r7, #11
 8008276:	4611      	mov	r1, r2
 8008278:	4618      	mov	r0, r3
 800827a:	f001 fb03 	bl	8009884 <lsm6dsv16x_xl_full_scale_get>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <LSM6DSV16X_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008284:	f04f 33ff 	mov.w	r3, #4294967295
 8008288:	e023      	b.n	80082d2 <LSM6DSV16X_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800828a:	7afb      	ldrb	r3, [r7, #11]
 800828c:	2b03      	cmp	r3, #3
 800828e:	d81b      	bhi.n	80082c8 <LSM6DSV16X_ACC_GetSensitivity+0x68>
 8008290:	a201      	add	r2, pc, #4	@ (adr r2, 8008298 <LSM6DSV16X_ACC_GetSensitivity+0x38>)
 8008292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008296:	bf00      	nop
 8008298:	080082a9 	.word	0x080082a9
 800829c:	080082b1 	.word	0x080082b1
 80082a0:	080082b9 	.word	0x080082b9
 80082a4:	080082c1 	.word	0x080082c1
  {
    case LSM6DSV16X_2g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_2G;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	4a0c      	ldr	r2, [pc, #48]	@ (80082dc <LSM6DSV16X_ACC_GetSensitivity+0x7c>)
 80082ac:	601a      	str	r2, [r3, #0]
      break;
 80082ae:	e00f      	b.n	80082d0 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_4g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_4G;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	4a0b      	ldr	r2, [pc, #44]	@ (80082e0 <LSM6DSV16X_ACC_GetSensitivity+0x80>)
 80082b4:	601a      	str	r2, [r3, #0]
      break;
 80082b6:	e00b      	b.n	80082d0 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_8g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_8G;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	4a0a      	ldr	r2, [pc, #40]	@ (80082e4 <LSM6DSV16X_ACC_GetSensitivity+0x84>)
 80082bc:	601a      	str	r2, [r3, #0]
      break;
 80082be:	e007      	b.n	80082d0 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_16g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_16G;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	4a09      	ldr	r2, [pc, #36]	@ (80082e8 <LSM6DSV16X_ACC_GetSensitivity+0x88>)
 80082c4:	601a      	str	r2, [r3, #0]
      break;
 80082c6:	e003      	b.n	80082d0 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 80082c8:	f04f 33ff 	mov.w	r3, #4294967295
 80082cc:	60fb      	str	r3, [r7, #12]
      break;
 80082ce:	bf00      	nop
  }

  return ret;
 80082d0:	68fb      	ldr	r3, [r7, #12]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	3d79db23 	.word	0x3d79db23
 80082e0:	3df9db23 	.word	0x3df9db23
 80082e4:	3e79db23 	.word	0x3e79db23
 80082e8:	3ef9db23 	.word	0x3ef9db23

080082ec <LSM6DSV16X_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_ACC_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	3320      	adds	r3, #32
 80082fe:	f107 020b 	add.w	r2, r7, #11
 8008302:	4611      	mov	r1, r2
 8008304:	4618      	mov	r0, r3
 8008306:	f001 f8e3 	bl	80094d0 <lsm6dsv16x_xl_data_rate_get>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d002      	beq.n	8008316 <LSM6DSV16X_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008310:	f04f 33ff 	mov.w	r3, #4294967295
 8008314:	e05a      	b.n	80083cc <LSM6DSV16X_ACC_GetOutputDataRate+0xe0>
  }

  switch (odr_low_level)
 8008316:	7afb      	ldrb	r3, [r7, #11]
 8008318:	2b0c      	cmp	r3, #12
 800831a:	d852      	bhi.n	80083c2 <LSM6DSV16X_ACC_GetOutputDataRate+0xd6>
 800831c:	a201      	add	r2, pc, #4	@ (adr r2, 8008324 <LSM6DSV16X_ACC_GetOutputDataRate+0x38>)
 800831e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008322:	bf00      	nop
 8008324:	08008359 	.word	0x08008359
 8008328:	08008363 	.word	0x08008363
 800832c:	0800836b 	.word	0x0800836b
 8008330:	08008373 	.word	0x08008373
 8008334:	0800837b 	.word	0x0800837b
 8008338:	08008383 	.word	0x08008383
 800833c:	0800838b 	.word	0x0800838b
 8008340:	08008393 	.word	0x08008393
 8008344:	0800839b 	.word	0x0800839b
 8008348:	080083a3 	.word	0x080083a3
 800834c:	080083ab 	.word	0x080083ab
 8008350:	080083b3 	.word	0x080083b3
 8008354:	080083bb 	.word	0x080083bb
  {
    case LSM6DSV16X_XL_ODR_OFF:
      *Odr = 0.0f;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	f04f 0200 	mov.w	r2, #0
 800835e:	601a      	str	r2, [r3, #0]
      break;
 8008360:	e033      	b.n	80083ca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_XL_ODR_AT_1Hz875:
      *Odr = 1.875f;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	4a1b      	ldr	r2, [pc, #108]	@ (80083d4 <LSM6DSV16X_ACC_GetOutputDataRate+0xe8>)
 8008366:	601a      	str	r2, [r3, #0]
      break;
 8008368:	e02f      	b.n	80083ca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_XL_ODR_AT_7Hz5:
      *Odr = 7.5f;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	4a1a      	ldr	r2, [pc, #104]	@ (80083d8 <LSM6DSV16X_ACC_GetOutputDataRate+0xec>)
 800836e:	601a      	str	r2, [r3, #0]
      break;
 8008370:	e02b      	b.n	80083ca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_XL_ODR_AT_15Hz:
      *Odr = 15.0f;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	4a19      	ldr	r2, [pc, #100]	@ (80083dc <LSM6DSV16X_ACC_GetOutputDataRate+0xf0>)
 8008376:	601a      	str	r2, [r3, #0]
      break;
 8008378:	e027      	b.n	80083ca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_XL_ODR_AT_30Hz:
      *Odr = 30.0f;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	4a18      	ldr	r2, [pc, #96]	@ (80083e0 <LSM6DSV16X_ACC_GetOutputDataRate+0xf4>)
 800837e:	601a      	str	r2, [r3, #0]
      break;
 8008380:	e023      	b.n	80083ca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_XL_ODR_AT_60Hz:
      *Odr = 60.0f;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	4a17      	ldr	r2, [pc, #92]	@ (80083e4 <LSM6DSV16X_ACC_GetOutputDataRate+0xf8>)
 8008386:	601a      	str	r2, [r3, #0]
      break;
 8008388:	e01f      	b.n	80083ca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_XL_ODR_AT_120Hz:
      *Odr = 120.0f;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	4a16      	ldr	r2, [pc, #88]	@ (80083e8 <LSM6DSV16X_ACC_GetOutputDataRate+0xfc>)
 800838e:	601a      	str	r2, [r3, #0]
      break;
 8008390:	e01b      	b.n	80083ca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_XL_ODR_AT_240Hz:
      *Odr = 240.0f;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	4a15      	ldr	r2, [pc, #84]	@ (80083ec <LSM6DSV16X_ACC_GetOutputDataRate+0x100>)
 8008396:	601a      	str	r2, [r3, #0]
      break;
 8008398:	e017      	b.n	80083ca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_XL_ODR_AT_480Hz:
      *Odr = 480.0f;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	4a14      	ldr	r2, [pc, #80]	@ (80083f0 <LSM6DSV16X_ACC_GetOutputDataRate+0x104>)
 800839e:	601a      	str	r2, [r3, #0]
      break;
 80083a0:	e013      	b.n	80083ca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_XL_ODR_AT_960Hz:
      *Odr = 960.0f;
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	4a13      	ldr	r2, [pc, #76]	@ (80083f4 <LSM6DSV16X_ACC_GetOutputDataRate+0x108>)
 80083a6:	601a      	str	r2, [r3, #0]
      break;
 80083a8:	e00f      	b.n	80083ca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_XL_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	4a12      	ldr	r2, [pc, #72]	@ (80083f8 <LSM6DSV16X_ACC_GetOutputDataRate+0x10c>)
 80083ae:	601a      	str	r2, [r3, #0]
      break;
 80083b0:	e00b      	b.n	80083ca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_XL_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	4a11      	ldr	r2, [pc, #68]	@ (80083fc <LSM6DSV16X_ACC_GetOutputDataRate+0x110>)
 80083b6:	601a      	str	r2, [r3, #0]
      break;
 80083b8:	e007      	b.n	80083ca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_XL_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	4a10      	ldr	r2, [pc, #64]	@ (8008400 <LSM6DSV16X_ACC_GetOutputDataRate+0x114>)
 80083be:	601a      	str	r2, [r3, #0]
      break;
 80083c0:	e003      	b.n	80083ca <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    default:
      ret = LSM6DSV16X_ERROR;
 80083c2:	f04f 33ff 	mov.w	r3, #4294967295
 80083c6:	60fb      	str	r3, [r7, #12]
      break;
 80083c8:	bf00      	nop
  }

  return ret;
 80083ca:	68fb      	ldr	r3, [r7, #12]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	3ff00000 	.word	0x3ff00000
 80083d8:	40f00000 	.word	0x40f00000
 80083dc:	41700000 	.word	0x41700000
 80083e0:	41f00000 	.word	0x41f00000
 80083e4:	42700000 	.word	0x42700000
 80083e8:	42f00000 	.word	0x42f00000
 80083ec:	43700000 	.word	0x43700000
 80083f0:	43f00000 	.word	0x43f00000
 80083f4:	44700000 	.word	0x44700000
 80083f8:	44f00000 	.word	0x44f00000
 80083fc:	45700000 	.word	0x45700000
 8008400:	45f00000 	.word	0x45f00000

08008404 <LSM6DSV16X_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_ACC_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->acc_is_enabled == 1U)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008416:	2b01      	cmp	r3, #1
 8008418:	d106      	bne.n	8008428 <LSM6DSV16X_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800841a:	ed97 0a00 	vldr	s0, [r7]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fd5a 	bl	8008ed8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>
 8008424:	4603      	mov	r3, r0
 8008426:	e005      	b.n	8008434 <LSM6DSV16X_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8008428:	ed97 0a00 	vldr	s0, [r7]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fdf5 	bl	800901c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>
 8008432:	4603      	mov	r3, r0
  }
}
 8008434:	4618      	mov	r0, r3
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <LSM6DSV16X_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_ACC_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t *FullScale)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3320      	adds	r3, #32
 800844e:	f107 020b 	add.w	r2, r7, #11
 8008452:	4611      	mov	r1, r2
 8008454:	4618      	mov	r0, r3
 8008456:	f001 fa15 	bl	8009884 <lsm6dsv16x_xl_full_scale_get>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <LSM6DSV16X_ACC_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008460:	f04f 33ff 	mov.w	r3, #4294967295
 8008464:	e023      	b.n	80084ae <LSM6DSV16X_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8008466:	7afb      	ldrb	r3, [r7, #11]
 8008468:	2b03      	cmp	r3, #3
 800846a:	d81b      	bhi.n	80084a4 <LSM6DSV16X_ACC_GetFullScale+0x68>
 800846c:	a201      	add	r2, pc, #4	@ (adr r2, 8008474 <LSM6DSV16X_ACC_GetFullScale+0x38>)
 800846e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008472:	bf00      	nop
 8008474:	08008485 	.word	0x08008485
 8008478:	0800848d 	.word	0x0800848d
 800847c:	08008495 	.word	0x08008495
 8008480:	0800849d 	.word	0x0800849d
  {
    case LSM6DSV16X_2g:
      *FullScale =  2;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	2202      	movs	r2, #2
 8008488:	601a      	str	r2, [r3, #0]
      break;
 800848a:	e00f      	b.n	80084ac <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_4g:
      *FullScale =  4;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	2204      	movs	r2, #4
 8008490:	601a      	str	r2, [r3, #0]
      break;
 8008492:	e00b      	b.n	80084ac <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_8g:
      *FullScale =  8;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	2208      	movs	r2, #8
 8008498:	601a      	str	r2, [r3, #0]
      break;
 800849a:	e007      	b.n	80084ac <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_16g:
      *FullScale = 16;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2210      	movs	r2, #16
 80084a0:	601a      	str	r2, [r3, #0]
      break;
 80084a2:	e003      	b.n	80084ac <LSM6DSV16X_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 80084a4:	f04f 33ff 	mov.w	r3, #4294967295
 80084a8:	60fb      	str	r3, [r7, #12]
      break;
 80084aa:	bf00      	nop
  }

  return ret;
 80084ac:	68fb      	ldr	r3, [r7, #12]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop

080084b8 <LSM6DSV16X_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_ACC_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_xl_full_scale_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
           : (FullScale <= 4) ? LSM6DSV16X_4g
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	dd0b      	ble.n	80084e0 <LSM6DSV16X_ACC_SetFullScale+0x28>
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2b04      	cmp	r3, #4
 80084cc:	dd06      	ble.n	80084dc <LSM6DSV16X_ACC_SetFullScale+0x24>
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2b08      	cmp	r3, #8
 80084d2:	dc01      	bgt.n	80084d8 <LSM6DSV16X_ACC_SetFullScale+0x20>
 80084d4:	2302      	movs	r3, #2
 80084d6:	e004      	b.n	80084e2 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 80084d8:	2303      	movs	r3, #3
 80084da:	e002      	b.n	80084e2 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 80084dc:	2301      	movs	r3, #1
 80084de:	e000      	b.n	80084e2 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 80084e0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
 80084e2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSV16X_8g
           :                    LSM6DSV16X_16g;

  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3320      	adds	r3, #32
 80084e8:	7bfa      	ldrb	r2, [r7, #15]
 80084ea:	4611      	mov	r1, r2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f001 f9a3 	bl	8009838 <lsm6dsv16x_xl_full_scale_set>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <LSM6DSV16X_ACC_SetFullScale+0x46>
  {
    return LSM6DSV16X_ERROR;
 80084f8:	f04f 33ff 	mov.w	r3, #4294967295
 80084fc:	e000      	b.n	8008500 <LSM6DSV16X_ACC_SetFullScale+0x48>
  }

  return LSM6DSV16X_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <LSM6DSV16X_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_ACC_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	3320      	adds	r3, #32
 8008516:	f107 0208 	add.w	r2, r7, #8
 800851a:	4611      	mov	r1, r2
 800851c:	4618      	mov	r0, r3
 800851e:	f001 fa31 	bl	8009984 <lsm6dsv16x_acceleration_raw_get>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d002      	beq.n	800852e <LSM6DSV16X_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 8008528:	f04f 33ff 	mov.w	r3, #4294967295
 800852c:	e00c      	b.n	8008548 <LSM6DSV16X_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800852e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008536:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800853e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <LSM6DSV16X_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_ACC_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *Acceleration)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800855a:	f04f 0300 	mov.w	r3, #0
 800855e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3320      	adds	r3, #32
 8008564:	f107 0210 	add.w	r2, r7, #16
 8008568:	4611      	mov	r1, r2
 800856a:	4618      	mov	r0, r3
 800856c:	f001 fa0a 	bl	8009984 <lsm6dsv16x_acceleration_raw_get>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <LSM6DSV16X_ACC_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8008576:	f04f 33ff 	mov.w	r3, #4294967295
 800857a:	e03c      	b.n	80085f6 <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity. */
  if (LSM6DSV16X_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 800857c:	f107 030c 	add.w	r3, r7, #12
 8008580:	4619      	mov	r1, r3
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7ff fe6c 	bl	8008260 <LSM6DSV16X_ACC_GetSensitivity>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <LSM6DSV16X_ACC_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 800858e:	f04f 33ff 	mov.w	r3, #4294967295
 8008592:	e030      	b.n	80085f6 <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8008594:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80085a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085ac:	ee17 2a90 	vmov	r2, s15
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80085b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085b8:	ee07 3a90 	vmov	s15, r3
 80085bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80085c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085cc:	ee17 2a90 	vmov	r2, s15
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80085d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80085d8:	ee07 3a90 	vmov	s15, r3
 80085dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80085e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085ec:	ee17 2a90 	vmov	r2, s15
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3718      	adds	r7, #24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <LSM6DSV16X_FIFO_Set_INT2_FIFO_Full>:
  * @param  pObj the device pObj
  * @param  Status FIFO full interrupt on INT1 pin status
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_FIFO_Set_INT2_FIFO_Full(LSM6DSV16X_Object_t *pObj, uint8_t Status)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	460b      	mov	r3, r1
 8008608:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_int2_ctrl_t reg;

  if (lsm6dsv16x_read_reg(&(pObj->Ctx), LSM6DSV16X_INT2_CTRL, (uint8_t *)&reg, 1) != LSM6DSV16X_OK)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f103 0020 	add.w	r0, r3, #32
 8008610:	f107 020c 	add.w	r2, r7, #12
 8008614:	2301      	movs	r3, #1
 8008616:	210e      	movs	r1, #14
 8008618:	f000 fef2 	bl	8009400 <lsm6dsv16x_read_reg>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d002      	beq.n	8008628 <LSM6DSV16X_FIFO_Set_INT2_FIFO_Full+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008622:	f04f 33ff 	mov.w	r3, #4294967295
 8008626:	e017      	b.n	8008658 <LSM6DSV16X_FIFO_Set_INT2_FIFO_Full+0x5a>
  }

  reg.int2_fifo_full = Status;
 8008628:	78fb      	ldrb	r3, [r7, #3]
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	b2da      	uxtb	r2, r3
 8008630:	7b3b      	ldrb	r3, [r7, #12]
 8008632:	f362 1345 	bfi	r3, r2, #5, #1
 8008636:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_write_reg(&(pObj->Ctx), LSM6DSV16X_INT2_CTRL, (uint8_t *)&reg, 1) != LSM6DSV16X_OK)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f103 0020 	add.w	r0, r3, #32
 800863e:	f107 020c 	add.w	r2, r7, #12
 8008642:	2301      	movs	r3, #1
 8008644:	210e      	movs	r1, #14
 8008646:	f000 fef3 	bl	8009430 <lsm6dsv16x_write_reg>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <LSM6DSV16X_FIFO_Set_INT2_FIFO_Full+0x58>
  {
    return LSM6DSV16X_ERROR;
 8008650:	f04f 33ff 	mov.w	r3, #4294967295
 8008654:	e000      	b.n	8008658 <LSM6DSV16X_FIFO_Set_INT2_FIFO_Full+0x5a>
  }

  return LSM6DSV16X_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <LSM6DSV16X_FIFO_Set_Mode>:
  * @param  pObj the device pObj
  * @param  Mode FIFO mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_FIFO_Set_Mode(LSM6DSV16X_Object_t *pObj, uint8_t Mode)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	460b      	mov	r3, r1
 800866a:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSV16X_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_fifo_mode_t newMode = LSM6DSV16X_BYPASS_MODE;
 8008670:	2300      	movs	r3, #0
 8008672:	72fb      	strb	r3, [r7, #11]

  switch (Mode)
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	2b07      	cmp	r3, #7
 8008678:	d824      	bhi.n	80086c4 <LSM6DSV16X_FIFO_Set_Mode+0x64>
 800867a:	a201      	add	r2, pc, #4	@ (adr r2, 8008680 <LSM6DSV16X_FIFO_Set_Mode+0x20>)
 800867c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008680:	080086a1 	.word	0x080086a1
 8008684:	080086a7 	.word	0x080086a7
 8008688:	080086c5 	.word	0x080086c5
 800868c:	080086ad 	.word	0x080086ad
 8008690:	080086b3 	.word	0x080086b3
 8008694:	080086c5 	.word	0x080086c5
 8008698:	080086b9 	.word	0x080086b9
 800869c:	080086bf 	.word	0x080086bf
  {
    case 0:
      newMode = LSM6DSV16X_BYPASS_MODE;
 80086a0:	2300      	movs	r3, #0
 80086a2:	72fb      	strb	r3, [r7, #11]
      break;
 80086a4:	e012      	b.n	80086cc <LSM6DSV16X_FIFO_Set_Mode+0x6c>
    case 1:
      newMode = LSM6DSV16X_FIFO_MODE;
 80086a6:	2301      	movs	r3, #1
 80086a8:	72fb      	strb	r3, [r7, #11]
      break;
 80086aa:	e00f      	b.n	80086cc <LSM6DSV16X_FIFO_Set_Mode+0x6c>
    case 3:
      newMode = LSM6DSV16X_STREAM_TO_FIFO_MODE;
 80086ac:	2303      	movs	r3, #3
 80086ae:	72fb      	strb	r3, [r7, #11]
      break;
 80086b0:	e00c      	b.n	80086cc <LSM6DSV16X_FIFO_Set_Mode+0x6c>
    case 4:
      newMode = LSM6DSV16X_BYPASS_TO_STREAM_MODE;
 80086b2:	2304      	movs	r3, #4
 80086b4:	72fb      	strb	r3, [r7, #11]
      break;
 80086b6:	e009      	b.n	80086cc <LSM6DSV16X_FIFO_Set_Mode+0x6c>
    case 6:
      newMode = LSM6DSV16X_STREAM_MODE;
 80086b8:	2306      	movs	r3, #6
 80086ba:	72fb      	strb	r3, [r7, #11]
      break;
 80086bc:	e006      	b.n	80086cc <LSM6DSV16X_FIFO_Set_Mode+0x6c>
    case 7:
      newMode = LSM6DSV16X_BYPASS_TO_FIFO_MODE;
 80086be:	2307      	movs	r3, #7
 80086c0:	72fb      	strb	r3, [r7, #11]
      break;
 80086c2:	e003      	b.n	80086cc <LSM6DSV16X_FIFO_Set_Mode+0x6c>
    default:
      ret = LSM6DSV16X_ERROR;
 80086c4:	f04f 33ff 	mov.w	r3, #4294967295
 80086c8:	60fb      	str	r3, [r7, #12]
      break;
 80086ca:	bf00      	nop
  }

  if (ret == LSM6DSV16X_ERROR)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d2:	d102      	bne.n	80086da <LSM6DSV16X_FIFO_Set_Mode+0x7a>
  {
    return LSM6DSV16X_ERROR;
 80086d4:	f04f 33ff 	mov.w	r3, #4294967295
 80086d8:	e00d      	b.n	80086f6 <LSM6DSV16X_FIFO_Set_Mode+0x96>
  }

  if (lsm6dsv16x_fifo_mode_set(&(pObj->Ctx), newMode) != LSM6DSV16X_OK)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3320      	adds	r3, #32
 80086de:	7afa      	ldrb	r2, [r7, #11]
 80086e0:	4611      	mov	r1, r2
 80086e2:	4618      	mov	r0, r3
 80086e4:	f001 f9e2 	bl	8009aac <lsm6dsv16x_fifo_mode_set>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d002      	beq.n	80086f4 <LSM6DSV16X_FIFO_Set_Mode+0x94>
  {
    return LSM6DSV16X_ERROR;
 80086ee:	f04f 33ff 	mov.w	r3, #4294967295
 80086f2:	e000      	b.n	80086f6 <LSM6DSV16X_FIFO_Set_Mode+0x96>
  }

  return ret;
 80086f4:	68fb      	ldr	r3, [r7, #12]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop

08008700 <LSM6DSV16X_FIFO_Get_Data>:
  * @param  pObj the device pObj
  * @param  Data FIFO raw data array [6]
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_FIFO_Get_Data(LSM6DSV16X_Object_t *pObj, uint8_t *Data)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  if (lsm6dsv16x_read_reg(&(pObj->Ctx), LSM6DSV16X_FIFO_DATA_OUT_X_L, Data, 6) != LSM6DSV16X_OK)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f103 0020 	add.w	r0, r3, #32
 8008710:	2306      	movs	r3, #6
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	2179      	movs	r1, #121	@ 0x79
 8008716:	f000 fe73 	bl	8009400 <lsm6dsv16x_read_reg>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d002      	beq.n	8008726 <LSM6DSV16X_FIFO_Get_Data+0x26>
  {
    return LSM6DSV16X_ERROR;
 8008720:	f04f 33ff 	mov.w	r3, #4294967295
 8008724:	e000      	b.n	8008728 <LSM6DSV16X_FIFO_Get_Data+0x28>
  }

  return LSM6DSV16X_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <LSM6DSV16X_FIFO_ACC_Set_BDR>:
  * @param  pObj the device pObj
  * @param  Bdr FIFO accelero BDR value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_FIFO_ACC_Set_BDR(LSM6DSV16X_Object_t *pObj, float_t Bdr)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_fifo_xl_batch_t new_bdr;

  new_bdr = (Bdr <=    0.0f) ? LSM6DSV16X_XL_NOT_BATCHED
            : (Bdr <=    1.8f) ? LSM6DSV16X_XL_BATCHED_AT_1Hz875
 800873c:	edd7 7a00 	vldr	s15, [r7]
 8008740:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008748:	d801      	bhi.n	800874e <LSM6DSV16X_FIFO_ACC_Set_BDR+0x1e>
 800874a:	2300      	movs	r3, #0
 800874c:	e079      	b.n	8008842 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x112>
 800874e:	edd7 7a00 	vldr	s15, [r7]
 8008752:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8008868 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x138>
 8008756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800875a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800875e:	d801      	bhi.n	8008764 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x34>
 8008760:	2301      	movs	r3, #1
 8008762:	e06e      	b.n	8008842 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x112>
 8008764:	edd7 7a00 	vldr	s15, [r7]
 8008768:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 800876c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008774:	d801      	bhi.n	800877a <LSM6DSV16X_FIFO_ACC_Set_BDR+0x4a>
 8008776:	2302      	movs	r3, #2
 8008778:	e063      	b.n	8008842 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x112>
 800877a:	edd7 7a00 	vldr	s15, [r7]
 800877e:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8008782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800878a:	d801      	bhi.n	8008790 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x60>
 800878c:	2303      	movs	r3, #3
 800878e:	e058      	b.n	8008842 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x112>
 8008790:	edd7 7a00 	vldr	s15, [r7]
 8008794:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800879c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a0:	d801      	bhi.n	80087a6 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x76>
 80087a2:	2304      	movs	r3, #4
 80087a4:	e04d      	b.n	8008842 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x112>
 80087a6:	edd7 7a00 	vldr	s15, [r7]
 80087aa:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800886c <LSM6DSV16X_FIFO_ACC_Set_BDR+0x13c>
 80087ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b6:	d801      	bhi.n	80087bc <LSM6DSV16X_FIFO_ACC_Set_BDR+0x8c>
 80087b8:	2305      	movs	r3, #5
 80087ba:	e042      	b.n	8008842 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x112>
 80087bc:	edd7 7a00 	vldr	s15, [r7]
 80087c0:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8008870 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x140>
 80087c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087cc:	d801      	bhi.n	80087d2 <LSM6DSV16X_FIFO_ACC_Set_BDR+0xa2>
 80087ce:	2306      	movs	r3, #6
 80087d0:	e037      	b.n	8008842 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x112>
 80087d2:	edd7 7a00 	vldr	s15, [r7]
 80087d6:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8008874 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x144>
 80087da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e2:	d801      	bhi.n	80087e8 <LSM6DSV16X_FIFO_ACC_Set_BDR+0xb8>
 80087e4:	2307      	movs	r3, #7
 80087e6:	e02c      	b.n	8008842 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x112>
 80087e8:	edd7 7a00 	vldr	s15, [r7]
 80087ec:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8008878 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x148>
 80087f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087f8:	d801      	bhi.n	80087fe <LSM6DSV16X_FIFO_ACC_Set_BDR+0xce>
 80087fa:	2308      	movs	r3, #8
 80087fc:	e021      	b.n	8008842 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x112>
 80087fe:	edd7 7a00 	vldr	s15, [r7]
 8008802:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800887c <LSM6DSV16X_FIFO_ACC_Set_BDR+0x14c>
 8008806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800880a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800880e:	d801      	bhi.n	8008814 <LSM6DSV16X_FIFO_ACC_Set_BDR+0xe4>
 8008810:	2309      	movs	r3, #9
 8008812:	e016      	b.n	8008842 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x112>
 8008814:	edd7 7a00 	vldr	s15, [r7]
 8008818:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008880 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x150>
 800881c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008824:	d801      	bhi.n	800882a <LSM6DSV16X_FIFO_ACC_Set_BDR+0xfa>
 8008826:	230a      	movs	r3, #10
 8008828:	e00b      	b.n	8008842 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x112>
 800882a:	edd7 7a00 	vldr	s15, [r7]
 800882e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8008884 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x154>
 8008832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800883a:	d801      	bhi.n	8008840 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x110>
 800883c:	230b      	movs	r3, #11
 800883e:	e000      	b.n	8008842 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x112>
 8008840:	230c      	movs	r3, #12
  new_bdr = (Bdr <=    0.0f) ? LSM6DSV16X_XL_NOT_BATCHED
 8008842:	73fb      	strb	r3, [r7, #15]
            : (Bdr <=  960.0f) ? LSM6DSV16X_XL_BATCHED_AT_960Hz
            : (Bdr <=  1920.0f) ? LSM6DSV16X_XL_BATCHED_AT_1920Hz
            : (Bdr <= 3840.0f) ? LSM6DSV16X_XL_BATCHED_AT_3840Hz
            :                    LSM6DSV16X_XL_BATCHED_AT_7680Hz;

  if (lsm6dsv16x_fifo_xl_batch_set(&(pObj->Ctx), new_bdr) != LSM6DSV16X_OK)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3320      	adds	r3, #32
 8008848:	7bfa      	ldrb	r2, [r7, #15]
 800884a:	4611      	mov	r1, r2
 800884c:	4618      	mov	r0, r3
 800884e:	f001 f8e1 	bl	8009a14 <lsm6dsv16x_fifo_xl_batch_set>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <LSM6DSV16X_FIFO_ACC_Set_BDR+0x12e>
  {
    return LSM6DSV16X_ERROR;
 8008858:	f04f 33ff 	mov.w	r3, #4294967295
 800885c:	e000      	b.n	8008860 <LSM6DSV16X_FIFO_ACC_Set_BDR+0x130>
  }

  return LSM6DSV16X_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	3fe66666 	.word	0x3fe66666
 800886c:	42700000 	.word	0x42700000
 8008870:	42f00000 	.word	0x42f00000
 8008874:	43700000 	.word	0x43700000
 8008878:	43f00000 	.word	0x43f00000
 800887c:	44700000 	.word	0x44700000
 8008880:	44f00000 	.word	0x44f00000
 8008884:	45700000 	.word	0x45700000

08008888 <LSM6DSV16X_FIFO_GYRO_Set_BDR>:
  * @param  pObj the device pObj
  * @param  Bdr FIFO gyro BDR value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_FIFO_GYRO_Set_BDR(LSM6DSV16X_Object_t *pObj, float_t Bdr)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_fifo_gy_batch_t new_bdr;

  new_bdr = (Bdr <=    0.0f) ? LSM6DSV16X_GY_NOT_BATCHED
            : (Bdr <=    1.8f) ? LSM6DSV16X_GY_BATCHED_AT_1Hz875
 8008894:	edd7 7a00 	vldr	s15, [r7]
 8008898:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800889c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a0:	d801      	bhi.n	80088a6 <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x1e>
 80088a2:	2300      	movs	r3, #0
 80088a4:	e079      	b.n	800899a <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x112>
 80088a6:	edd7 7a00 	vldr	s15, [r7]
 80088aa:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80089c0 <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x138>
 80088ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088b6:	d801      	bhi.n	80088bc <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x34>
 80088b8:	2301      	movs	r3, #1
 80088ba:	e06e      	b.n	800899a <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x112>
 80088bc:	edd7 7a00 	vldr	s15, [r7]
 80088c0:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 80088c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088cc:	d801      	bhi.n	80088d2 <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x4a>
 80088ce:	2302      	movs	r3, #2
 80088d0:	e063      	b.n	800899a <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x112>
 80088d2:	edd7 7a00 	vldr	s15, [r7]
 80088d6:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80088da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e2:	d801      	bhi.n	80088e8 <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x60>
 80088e4:	2303      	movs	r3, #3
 80088e6:	e058      	b.n	800899a <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x112>
 80088e8:	edd7 7a00 	vldr	s15, [r7]
 80088ec:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80088f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f8:	d801      	bhi.n	80088fe <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x76>
 80088fa:	2304      	movs	r3, #4
 80088fc:	e04d      	b.n	800899a <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x112>
 80088fe:	edd7 7a00 	vldr	s15, [r7]
 8008902:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80089c4 <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x13c>
 8008906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800890a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800890e:	d801      	bhi.n	8008914 <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x8c>
 8008910:	2305      	movs	r3, #5
 8008912:	e042      	b.n	800899a <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x112>
 8008914:	edd7 7a00 	vldr	s15, [r7]
 8008918:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80089c8 <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x140>
 800891c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008924:	d801      	bhi.n	800892a <LSM6DSV16X_FIFO_GYRO_Set_BDR+0xa2>
 8008926:	2306      	movs	r3, #6
 8008928:	e037      	b.n	800899a <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x112>
 800892a:	edd7 7a00 	vldr	s15, [r7]
 800892e:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80089cc <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x144>
 8008932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800893a:	d801      	bhi.n	8008940 <LSM6DSV16X_FIFO_GYRO_Set_BDR+0xb8>
 800893c:	2307      	movs	r3, #7
 800893e:	e02c      	b.n	800899a <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x112>
 8008940:	edd7 7a00 	vldr	s15, [r7]
 8008944:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80089d0 <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x148>
 8008948:	eef4 7ac7 	vcmpe.f32	s15, s14
 800894c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008950:	d801      	bhi.n	8008956 <LSM6DSV16X_FIFO_GYRO_Set_BDR+0xce>
 8008952:	2308      	movs	r3, #8
 8008954:	e021      	b.n	800899a <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x112>
 8008956:	edd7 7a00 	vldr	s15, [r7]
 800895a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80089d4 <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x14c>
 800895e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008966:	d801      	bhi.n	800896c <LSM6DSV16X_FIFO_GYRO_Set_BDR+0xe4>
 8008968:	2309      	movs	r3, #9
 800896a:	e016      	b.n	800899a <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x112>
 800896c:	edd7 7a00 	vldr	s15, [r7]
 8008970:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80089d8 <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x150>
 8008974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800897c:	d801      	bhi.n	8008982 <LSM6DSV16X_FIFO_GYRO_Set_BDR+0xfa>
 800897e:	230a      	movs	r3, #10
 8008980:	e00b      	b.n	800899a <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x112>
 8008982:	edd7 7a00 	vldr	s15, [r7]
 8008986:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80089dc <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x154>
 800898a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800898e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008992:	d801      	bhi.n	8008998 <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x110>
 8008994:	230b      	movs	r3, #11
 8008996:	e000      	b.n	800899a <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x112>
 8008998:	230c      	movs	r3, #12
  new_bdr = (Bdr <=    0.0f) ? LSM6DSV16X_GY_NOT_BATCHED
 800899a:	73fb      	strb	r3, [r7, #15]
            : (Bdr <=  960.0f) ? LSM6DSV16X_GY_BATCHED_AT_960Hz
            : (Bdr <=  1920.0f) ? LSM6DSV16X_GY_BATCHED_AT_1920Hz
            : (Bdr <= 3840.0f) ? LSM6DSV16X_GY_BATCHED_AT_3840Hz
            :                    LSM6DSV16X_GY_BATCHED_AT_7680Hz;

  if (lsm6dsv16x_fifo_gy_batch_set(&(pObj->Ctx), new_bdr) != LSM6DSV16X_OK)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3320      	adds	r3, #32
 80089a0:	7bfa      	ldrb	r2, [r7, #15]
 80089a2:	4611      	mov	r1, r2
 80089a4:	4618      	mov	r0, r3
 80089a6:	f001 f85b 	bl	8009a60 <lsm6dsv16x_fifo_gy_batch_set>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x12e>
  {
    return LSM6DSV16X_ERROR;
 80089b0:	f04f 33ff 	mov.w	r3, #4294967295
 80089b4:	e000      	b.n	80089b8 <LSM6DSV16X_FIFO_GYRO_Set_BDR+0x130>
  }

  return LSM6DSV16X_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	3fe66666 	.word	0x3fe66666
 80089c4:	42700000 	.word	0x42700000
 80089c8:	42f00000 	.word	0x42f00000
 80089cc:	43700000 	.word	0x43700000
 80089d0:	43f00000 	.word	0x43f00000
 80089d4:	44700000 	.word	0x44700000
 80089d8:	44f00000 	.word	0x44f00000
 80089dc:	45700000 	.word	0x45700000

080089e0 <LSM6DSV16X_GYRO_Enable>:
 * @brief  Enable the LSM6DSV16X gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_GYRO_Enable(LSM6DSV16X_Object_t *pObj)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d101      	bne.n	80089f6 <LSM6DSV16X_GYRO_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	e014      	b.n	8008a20 <LSM6DSV16X_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSV16X_OK)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f103 0220 	add.w	r2, r3, #32
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008a02:	4619      	mov	r1, r3
 8008a04:	4610      	mov	r0, r2
 8008a06:	f000 fdd1 	bl	80095ac <lsm6dsv16x_gy_data_rate_set>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <LSM6DSV16X_GYRO_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 8008a10:	f04f 33ff 	mov.w	r3, #4294967295
 8008a14:	e004      	b.n	8008a20 <LSM6DSV16X_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <LSM6DSV16X_GYRO_Disable>:
 * @brief  Disable the LSM6DSV16X gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_GYRO_Disable(LSM6DSV16X_Object_t *pObj)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d101      	bne.n	8008a3e <LSM6DSV16X_GYRO_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	e01f      	b.n	8008a7e <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSV16X_OK)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f103 0220 	add.w	r2, r3, #32
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	3334      	adds	r3, #52	@ 0x34
 8008a48:	4619      	mov	r1, r3
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	f000 fdd4 	bl	80095f8 <lsm6dsv16x_gy_data_rate_get>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <LSM6DSV16X_GYRO_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 8008a56:	f04f 33ff 	mov.w	r3, #4294967295
 8008a5a:	e010      	b.n	8008a7e <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_GY_ODR_OFF) != LSM6DSV16X_OK)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	3320      	adds	r3, #32
 8008a60:	2100      	movs	r1, #0
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 fda2 	bl	80095ac <lsm6dsv16x_gy_data_rate_set>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d002      	beq.n	8008a74 <LSM6DSV16X_GYRO_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8008a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a72:	e004      	b.n	8008a7e <LSM6DSV16X_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
	...

08008a88 <LSM6DSV16X_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_GYRO_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	3320      	adds	r3, #32
 8008a9a:	f107 020b 	add.w	r2, r7, #11
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fe85 	bl	80097b0 <lsm6dsv16x_gy_full_scale_get>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d002      	beq.n	8008ab2 <LSM6DSV16X_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008aac:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab0:	e02f      	b.n	8008b12 <LSM6DSV16X_GYRO_GetSensitivity+0x8a>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8008ab2:	7afb      	ldrb	r3, [r7, #11]
 8008ab4:	2b05      	cmp	r3, #5
 8008ab6:	d827      	bhi.n	8008b08 <LSM6DSV16X_GYRO_GetSensitivity+0x80>
 8008ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ac0 <LSM6DSV16X_GYRO_GetSensitivity+0x38>)
 8008aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abe:	bf00      	nop
 8008ac0:	08008ad9 	.word	0x08008ad9
 8008ac4:	08008ae1 	.word	0x08008ae1
 8008ac8:	08008ae9 	.word	0x08008ae9
 8008acc:	08008af1 	.word	0x08008af1
 8008ad0:	08008af9 	.word	0x08008af9
 8008ad4:	08008b01 	.word	0x08008b01
  {
    case LSM6DSV16X_125dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_125DPS;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	4a10      	ldr	r2, [pc, #64]	@ (8008b1c <LSM6DSV16X_GYRO_GetSensitivity+0x94>)
 8008adc:	601a      	str	r2, [r3, #0]
      break;
 8008ade:	e017      	b.n	8008b10 <LSM6DSV16X_GYRO_GetSensitivity+0x88>

    case LSM6DSV16X_250dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_250DPS;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	4a0f      	ldr	r2, [pc, #60]	@ (8008b20 <LSM6DSV16X_GYRO_GetSensitivity+0x98>)
 8008ae4:	601a      	str	r2, [r3, #0]
      break;
 8008ae6:	e013      	b.n	8008b10 <LSM6DSV16X_GYRO_GetSensitivity+0x88>

    case LSM6DSV16X_500dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_500DPS;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	4a0e      	ldr	r2, [pc, #56]	@ (8008b24 <LSM6DSV16X_GYRO_GetSensitivity+0x9c>)
 8008aec:	601a      	str	r2, [r3, #0]
      break;
 8008aee:	e00f      	b.n	8008b10 <LSM6DSV16X_GYRO_GetSensitivity+0x88>

    case LSM6DSV16X_1000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_1000DPS;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	4a0d      	ldr	r2, [pc, #52]	@ (8008b28 <LSM6DSV16X_GYRO_GetSensitivity+0xa0>)
 8008af4:	601a      	str	r2, [r3, #0]
      break;
 8008af6:	e00b      	b.n	8008b10 <LSM6DSV16X_GYRO_GetSensitivity+0x88>

    case LSM6DSV16X_2000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_2000DPS;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	4a0c      	ldr	r2, [pc, #48]	@ (8008b2c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>)
 8008afc:	601a      	str	r2, [r3, #0]
      break;
 8008afe:	e007      	b.n	8008b10 <LSM6DSV16X_GYRO_GetSensitivity+0x88>

    case LSM6DSV16X_4000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_4000DPS;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	4a0b      	ldr	r2, [pc, #44]	@ (8008b30 <LSM6DSV16X_GYRO_GetSensitivity+0xa8>)
 8008b04:	601a      	str	r2, [r3, #0]
      break;
 8008b06:	e003      	b.n	8008b10 <LSM6DSV16X_GYRO_GetSensitivity+0x88>

    default:
      ret = LSM6DSV16X_ERROR;
 8008b08:	f04f 33ff 	mov.w	r3, #4294967295
 8008b0c:	60fb      	str	r3, [r7, #12]
      break;
 8008b0e:	bf00      	nop
  }

  return ret;
 8008b10:	68fb      	ldr	r3, [r7, #12]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	408c0000 	.word	0x408c0000
 8008b20:	410c0000 	.word	0x410c0000
 8008b24:	418c0000 	.word	0x418c0000
 8008b28:	420c0000 	.word	0x420c0000
 8008b2c:	428c0000 	.word	0x428c0000
 8008b30:	430c0000 	.word	0x430c0000

08008b34 <LSM6DSV16X_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_GYRO_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	3320      	adds	r3, #32
 8008b46:	f107 020b 	add.w	r2, r7, #11
 8008b4a:	4611      	mov	r1, r2
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 fd53 	bl	80095f8 <lsm6dsv16x_gy_data_rate_get>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d002      	beq.n	8008b5e <LSM6DSV16X_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008b58:	f04f 33ff 	mov.w	r3, #4294967295
 8008b5c:	e056      	b.n	8008c0c <LSM6DSV16X_GYRO_GetOutputDataRate+0xd8>
  }

  switch (odr_low_level)
 8008b5e:	7afb      	ldrb	r3, [r7, #11]
 8008b60:	2b0c      	cmp	r3, #12
 8008b62:	d84e      	bhi.n	8008c02 <LSM6DSV16X_GYRO_GetOutputDataRate+0xce>
 8008b64:	a201      	add	r2, pc, #4	@ (adr r2, 8008b6c <LSM6DSV16X_GYRO_GetOutputDataRate+0x38>)
 8008b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6a:	bf00      	nop
 8008b6c:	08008ba1 	.word	0x08008ba1
 8008b70:	08008c03 	.word	0x08008c03
 8008b74:	08008bab 	.word	0x08008bab
 8008b78:	08008bb3 	.word	0x08008bb3
 8008b7c:	08008bbb 	.word	0x08008bbb
 8008b80:	08008bc3 	.word	0x08008bc3
 8008b84:	08008bcb 	.word	0x08008bcb
 8008b88:	08008bd3 	.word	0x08008bd3
 8008b8c:	08008bdb 	.word	0x08008bdb
 8008b90:	08008be3 	.word	0x08008be3
 8008b94:	08008beb 	.word	0x08008beb
 8008b98:	08008bf3 	.word	0x08008bf3
 8008b9c:	08008bfb 	.word	0x08008bfb
  {
    case LSM6DSV16X_GY_ODR_OFF:
      *Odr = 0.0f;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	f04f 0200 	mov.w	r2, #0
 8008ba6:	601a      	str	r2, [r3, #0]
      break;
 8008ba8:	e02f      	b.n	8008c0a <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_GY_ODR_AT_7Hz5:
      *Odr = 7.5f;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	4a19      	ldr	r2, [pc, #100]	@ (8008c14 <LSM6DSV16X_GYRO_GetOutputDataRate+0xe0>)
 8008bae:	601a      	str	r2, [r3, #0]
      break;
 8008bb0:	e02b      	b.n	8008c0a <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_GY_ODR_AT_15Hz:
      *Odr = 15.0f;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	4a18      	ldr	r2, [pc, #96]	@ (8008c18 <LSM6DSV16X_GYRO_GetOutputDataRate+0xe4>)
 8008bb6:	601a      	str	r2, [r3, #0]
      break;
 8008bb8:	e027      	b.n	8008c0a <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_GY_ODR_AT_30Hz:
      *Odr = 30.0f;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	4a17      	ldr	r2, [pc, #92]	@ (8008c1c <LSM6DSV16X_GYRO_GetOutputDataRate+0xe8>)
 8008bbe:	601a      	str	r2, [r3, #0]
      break;
 8008bc0:	e023      	b.n	8008c0a <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_GY_ODR_AT_60Hz:
      *Odr = 60.0f;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	4a16      	ldr	r2, [pc, #88]	@ (8008c20 <LSM6DSV16X_GYRO_GetOutputDataRate+0xec>)
 8008bc6:	601a      	str	r2, [r3, #0]
      break;
 8008bc8:	e01f      	b.n	8008c0a <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_GY_ODR_AT_120Hz:
      *Odr = 120.0f;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	4a15      	ldr	r2, [pc, #84]	@ (8008c24 <LSM6DSV16X_GYRO_GetOutputDataRate+0xf0>)
 8008bce:	601a      	str	r2, [r3, #0]
      break;
 8008bd0:	e01b      	b.n	8008c0a <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_GY_ODR_AT_240Hz:
      *Odr = 240.0f;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	4a14      	ldr	r2, [pc, #80]	@ (8008c28 <LSM6DSV16X_GYRO_GetOutputDataRate+0xf4>)
 8008bd6:	601a      	str	r2, [r3, #0]
      break;
 8008bd8:	e017      	b.n	8008c0a <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_GY_ODR_AT_480Hz:
      *Odr = 480.0f;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	4a13      	ldr	r2, [pc, #76]	@ (8008c2c <LSM6DSV16X_GYRO_GetOutputDataRate+0xf8>)
 8008bde:	601a      	str	r2, [r3, #0]
      break;
 8008be0:	e013      	b.n	8008c0a <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_GY_ODR_AT_960Hz:
      *Odr = 960.0f;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	4a12      	ldr	r2, [pc, #72]	@ (8008c30 <LSM6DSV16X_GYRO_GetOutputDataRate+0xfc>)
 8008be6:	601a      	str	r2, [r3, #0]
      break;
 8008be8:	e00f      	b.n	8008c0a <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_GY_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	4a11      	ldr	r2, [pc, #68]	@ (8008c34 <LSM6DSV16X_GYRO_GetOutputDataRate+0x100>)
 8008bee:	601a      	str	r2, [r3, #0]
      break;
 8008bf0:	e00b      	b.n	8008c0a <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_GY_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	4a10      	ldr	r2, [pc, #64]	@ (8008c38 <LSM6DSV16X_GYRO_GetOutputDataRate+0x104>)
 8008bf6:	601a      	str	r2, [r3, #0]
      break;
 8008bf8:	e007      	b.n	8008c0a <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_GY_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	4a0f      	ldr	r2, [pc, #60]	@ (8008c3c <LSM6DSV16X_GYRO_GetOutputDataRate+0x108>)
 8008bfe:	601a      	str	r2, [r3, #0]
      break;
 8008c00:	e003      	b.n	8008c0a <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    default:
      ret = LSM6DSV16X_ERROR;
 8008c02:	f04f 33ff 	mov.w	r3, #4294967295
 8008c06:	60fb      	str	r3, [r7, #12]
      break;
 8008c08:	bf00      	nop
  }

  return ret;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	40f00000 	.word	0x40f00000
 8008c18:	41700000 	.word	0x41700000
 8008c1c:	41f00000 	.word	0x41f00000
 8008c20:	42700000 	.word	0x42700000
 8008c24:	42f00000 	.word	0x42f00000
 8008c28:	43700000 	.word	0x43700000
 8008c2c:	43f00000 	.word	0x43f00000
 8008c30:	44700000 	.word	0x44700000
 8008c34:	44f00000 	.word	0x44f00000
 8008c38:	45700000 	.word	0x45700000
 8008c3c:	45f00000 	.word	0x45f00000

08008c40 <LSM6DSV16X_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_GYRO_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->gyro_is_enabled == 1U)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d106      	bne.n	8008c64 <LSM6DSV16X_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8008c56:	ed97 0a00 	vldr	s0, [r7]
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fa76 	bl	800914c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>
 8008c60:	4603      	mov	r3, r0
 8008c62:	e005      	b.n	8008c70 <LSM6DSV16X_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8008c64:	ed97 0a00 	vldr	s0, [r7]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fb05 	bl	8009278 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>
 8008c6e:	4603      	mov	r3, r0
  }
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <LSM6DSV16X_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_GYRO_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t  *FullScale)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	3320      	adds	r3, #32
 8008c8a:	f107 020b 	add.w	r2, r7, #11
 8008c8e:	4611      	mov	r1, r2
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 fd8d 	bl	80097b0 <lsm6dsv16x_gy_full_scale_get>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <LSM6DSV16X_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca0:	e033      	b.n	8008d0a <LSM6DSV16X_GYRO_GetFullScale+0x92>
  }

  switch (fs_low_level)
 8008ca2:	7afb      	ldrb	r3, [r7, #11]
 8008ca4:	2b05      	cmp	r3, #5
 8008ca6:	d82b      	bhi.n	8008d00 <LSM6DSV16X_GYRO_GetFullScale+0x88>
 8008ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8008cb0 <LSM6DSV16X_GYRO_GetFullScale+0x38>)
 8008caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cae:	bf00      	nop
 8008cb0:	08008cc9 	.word	0x08008cc9
 8008cb4:	08008cd1 	.word	0x08008cd1
 8008cb8:	08008cd9 	.word	0x08008cd9
 8008cbc:	08008ce3 	.word	0x08008ce3
 8008cc0:	08008ced 	.word	0x08008ced
 8008cc4:	08008cf7 	.word	0x08008cf7
  {
    case LSM6DSV16X_125dps:
      *FullScale =  125;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	227d      	movs	r2, #125	@ 0x7d
 8008ccc:	601a      	str	r2, [r3, #0]
      break;
 8008cce:	e01b      	b.n	8008d08 <LSM6DSV16X_GYRO_GetFullScale+0x90>

    case LSM6DSV16X_250dps:
      *FullScale =  250;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	22fa      	movs	r2, #250	@ 0xfa
 8008cd4:	601a      	str	r2, [r3, #0]
      break;
 8008cd6:	e017      	b.n	8008d08 <LSM6DSV16X_GYRO_GetFullScale+0x90>

    case LSM6DSV16X_500dps:
      *FullScale =  500;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008cde:	601a      	str	r2, [r3, #0]
      break;
 8008ce0:	e012      	b.n	8008d08 <LSM6DSV16X_GYRO_GetFullScale+0x90>

    case LSM6DSV16X_1000dps:
      *FullScale = 1000;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008ce8:	601a      	str	r2, [r3, #0]
      break;
 8008cea:	e00d      	b.n	8008d08 <LSM6DSV16X_GYRO_GetFullScale+0x90>

    case LSM6DSV16X_2000dps:
      *FullScale = 2000;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8008cf2:	601a      	str	r2, [r3, #0]
      break;
 8008cf4:	e008      	b.n	8008d08 <LSM6DSV16X_GYRO_GetFullScale+0x90>

    case LSM6DSV16X_4000dps:
      *FullScale = 4000;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8008cfc:	601a      	str	r2, [r3, #0]
      break;
 8008cfe:	e003      	b.n	8008d08 <LSM6DSV16X_GYRO_GetFullScale+0x90>

    default:
      ret = LSM6DSV16X_ERROR;
 8008d00:	f04f 33ff 	mov.w	r3, #4294967295
 8008d04:	60fb      	str	r3, [r7, #12]
      break;
 8008d06:	bf00      	nop
  }

  return ret;
 8008d08:	68fb      	ldr	r3, [r7, #12]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop

08008d14 <LSM6DSV16X_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_GYRO_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
           : (FullScale <= 250)  ? LSM6DSV16X_250dps
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b7d      	cmp	r3, #125	@ 0x7d
 8008d22:	dd18      	ble.n	8008d56 <LSM6DSV16X_GYRO_SetFullScale+0x42>
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2bfa      	cmp	r3, #250	@ 0xfa
 8008d28:	dd13      	ble.n	8008d52 <LSM6DSV16X_GYRO_SetFullScale+0x3e>
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008d30:	dd0d      	ble.n	8008d4e <LSM6DSV16X_GYRO_SetFullScale+0x3a>
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d38:	dd07      	ble.n	8008d4a <LSM6DSV16X_GYRO_SetFullScale+0x36>
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8008d40:	dc01      	bgt.n	8008d46 <LSM6DSV16X_GYRO_SetFullScale+0x32>
 8008d42:	2304      	movs	r3, #4
 8008d44:	e008      	b.n	8008d58 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008d46:	2305      	movs	r3, #5
 8008d48:	e006      	b.n	8008d58 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e004      	b.n	8008d58 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008d4e:	2302      	movs	r3, #2
 8008d50:	e002      	b.n	8008d58 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008d52:	2301      	movs	r3, #1
 8008d54:	e000      	b.n	8008d58 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008d56:	2300      	movs	r3, #0
  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
 8008d58:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSV16X_500dps
           : (FullScale <= 1000) ? LSM6DSV16X_1000dps
           : (FullScale <= 2000) ? LSM6DSV16X_2000dps
           :                       LSM6DSV16X_4000dps;

  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3320      	adds	r3, #32
 8008d5e:	7bfa      	ldrb	r2, [r7, #15]
 8008d60:	4611      	mov	r1, r2
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 fcfe 	bl	8009764 <lsm6dsv16x_gy_full_scale_set>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <LSM6DSV16X_GYRO_SetFullScale+0x60>
  {
    return LSM6DSV16X_ERROR;
 8008d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d72:	e000      	b.n	8008d76 <LSM6DSV16X_GYRO_SetFullScale+0x62>
  }

  return LSM6DSV16X_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <LSM6DSV16X_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_GYRO_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	3320      	adds	r3, #32
 8008d8c:	f107 0208 	add.w	r2, r7, #8
 8008d90:	4611      	mov	r1, r2
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 fdae 	bl	80098f4 <lsm6dsv16x_angular_rate_raw_get>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <LSM6DSV16X_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 8008d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008da2:	e00c      	b.n	8008dbe <LSM6DSV16X_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8008da4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008dac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008db4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <LSM6DSV16X_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_GYRO_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *AngularRate)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b086      	sub	sp, #24
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	3320      	adds	r3, #32
 8008dd4:	f107 0210 	add.w	r2, r7, #16
 8008dd8:	4611      	mov	r1, r2
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 fd8a 	bl	80098f4 <lsm6dsv16x_angular_rate_raw_get>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <LSM6DSV16X_GYRO_GetAxes+0x26>
  {
    return LSM6DSV16X_ERROR;
 8008de6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dea:	e03c      	b.n	8008e66 <LSM6DSV16X_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSV16X actual sensitivity. */
  if (LSM6DSV16X_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8008dec:	f107 030c 	add.w	r3, r7, #12
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff fe48 	bl	8008a88 <LSM6DSV16X_GYRO_GetSensitivity>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d002      	beq.n	8008e04 <LSM6DSV16X_GYRO_GetAxes+0x3e>
  {
    return LSM6DSV16X_ERROR;
 8008dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8008e02:	e030      	b.n	8008e66 <LSM6DSV16X_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8008e04:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008e08:	ee07 3a90 	vmov	s15, r3
 8008e0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008e10:	edd7 7a03 	vldr	s15, [r7, #12]
 8008e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e1c:	ee17 2a90 	vmov	r2, s15
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8008e24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e28:	ee07 3a90 	vmov	s15, r3
 8008e2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008e30:	edd7 7a03 	vldr	s15, [r7, #12]
 8008e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e3c:	ee17 2a90 	vmov	r2, s15
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8008e44:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008e48:	ee07 3a90 	vmov	s15, r3
 8008e4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008e50:	edd7 7a03 	vldr	s15, [r7, #12]
 8008e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e5c:	ee17 2a90 	vmov	r2, s15
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3718      	adds	r7, #24
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <LSM6DSV16X_Read_Reg>:
 * @param  Reg address to be read
 * @param  Data pointer where the value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_Read_Reg(LSM6DSV16X_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	460b      	mov	r3, r1
 8008e78:	607a      	str	r2, [r7, #4]
 8008e7a:	72fb      	strb	r3, [r7, #11]
  if (lsm6dsv16x_read_reg(&(pObj->Ctx), Reg, Data, 1) != LSM6DSV16X_OK)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f103 0020 	add.w	r0, r3, #32
 8008e82:	7af9      	ldrb	r1, [r7, #11]
 8008e84:	2301      	movs	r3, #1
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	f000 faba 	bl	8009400 <lsm6dsv16x_read_reg>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d002      	beq.n	8008e98 <LSM6DSV16X_Read_Reg+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008e92:	f04f 33ff 	mov.w	r3, #4294967295
 8008e96:	e000      	b.n	8008e9a <LSM6DSV16X_Read_Reg+0x2c>
  }

  return LSM6DSV16X_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <LSM6DSV16X_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSV16X_Write_Reg(LSM6DSV16X_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b082      	sub	sp, #8
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	460b      	mov	r3, r1
 8008eac:	70fb      	strb	r3, [r7, #3]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsv16x_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSV16X_OK)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f103 0020 	add.w	r0, r3, #32
 8008eb8:	1cba      	adds	r2, r7, #2
 8008eba:	78f9      	ldrb	r1, [r7, #3]
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f000 fab7 	bl	8009430 <lsm6dsv16x_write_reg>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d002      	beq.n	8008ece <LSM6DSV16X_Write_Reg+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8008ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ecc:	e000      	b.n	8008ed0 <LSM6DSV16X_Write_Reg+0x2e>
  }

  return LSM6DSV16X_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_xl_data_rate_t new_odr;

  new_odr = (Odr <=    1.875f) ? LSM6DSV16X_XL_ODR_AT_1Hz875
            : (Odr <=    7.5f) ? LSM6DSV16X_XL_ODR_AT_7Hz5
 8008ee4:	edd7 7a00 	vldr	s15, [r7]
 8008ee8:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8008eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef4:	d801      	bhi.n	8008efa <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x22>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e06e      	b.n	8008fd8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008efa:	edd7 7a00 	vldr	s15, [r7]
 8008efe:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f0a:	d801      	bhi.n	8008f10 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x38>
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	e063      	b.n	8008fd8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008f10:	edd7 7a00 	vldr	s15, [r7]
 8008f14:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8008f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f20:	d801      	bhi.n	8008f26 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8008f22:	2303      	movs	r3, #3
 8008f24:	e058      	b.n	8008fd8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008f26:	edd7 7a00 	vldr	s15, [r7]
 8008f2a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f36:	d801      	bhi.n	8008f3c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x64>
 8008f38:	2304      	movs	r3, #4
 8008f3a:	e04d      	b.n	8008fd8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008f3c:	edd7 7a00 	vldr	s15, [r7]
 8008f40:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8009000 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x128>
 8008f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f4c:	d801      	bhi.n	8008f52 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8008f4e:	2305      	movs	r3, #5
 8008f50:	e042      	b.n	8008fd8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008f52:	edd7 7a00 	vldr	s15, [r7]
 8008f56:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8009004 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8008f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f62:	d801      	bhi.n	8008f68 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x90>
 8008f64:	2306      	movs	r3, #6
 8008f66:	e037      	b.n	8008fd8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008f68:	edd7 7a00 	vldr	s15, [r7]
 8008f6c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009008 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x130>
 8008f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f78:	d801      	bhi.n	8008f7e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8008f7a:	2307      	movs	r3, #7
 8008f7c:	e02c      	b.n	8008fd8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008f7e:	edd7 7a00 	vldr	s15, [r7]
 8008f82:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800900c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x134>
 8008f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8e:	d801      	bhi.n	8008f94 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8008f90:	2308      	movs	r3, #8
 8008f92:	e021      	b.n	8008fd8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008f94:	edd7 7a00 	vldr	s15, [r7]
 8008f98:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009010 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x138>
 8008f9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa4:	d801      	bhi.n	8008faa <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8008fa6:	2309      	movs	r3, #9
 8008fa8:	e016      	b.n	8008fd8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008faa:	edd7 7a00 	vldr	s15, [r7]
 8008fae:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009014 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8008fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fba:	d801      	bhi.n	8008fc0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8008fbc:	230a      	movs	r3, #10
 8008fbe:	e00b      	b.n	8008fd8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008fc0:	edd7 7a00 	vldr	s15, [r7]
 8008fc4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009018 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x140>
 8008fc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd0:	d801      	bhi.n	8008fd6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xfe>
 8008fd2:	230b      	movs	r3, #11
 8008fd4:	e000      	b.n	8008fd8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008fd6:	230c      	movs	r3, #12
  new_odr = (Odr <=    1.875f) ? LSM6DSV16X_XL_ODR_AT_1Hz875
 8008fd8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_XL_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_XL_ODR_AT_3840Hz
            :                      LSM6DSV16X_XL_ODR_AT_7680Hz;

  /* Output data rate selection. */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	3320      	adds	r3, #32
 8008fde:	7bfa      	ldrb	r2, [r7, #15]
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 fa4d 	bl	8009482 <lsm6dsv16x_xl_data_rate_set>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d002      	beq.n	8008ff4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11c>
  {
    return LSM6DSV16X_ERROR;
 8008fee:	f04f 33ff 	mov.w	r3, #4294967295
 8008ff2:	e000      	b.n	8008ff6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11e>
  }

  return LSM6DSV16X_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	42700000 	.word	0x42700000
 8009004:	42f00000 	.word	0x42f00000
 8009008:	43700000 	.word	0x43700000
 800900c:	43f00000 	.word	0x43f00000
 8009010:	44700000 	.word	0x44700000
 8009014:	44f00000 	.word	0x44f00000
 8009018:	45700000 	.word	0x45700000

0800901c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.875f) ? LSM6DSV16X_XL_ODR_AT_1Hz875
                  : (Odr <=    7.5f) ? LSM6DSV16X_XL_ODR_AT_7Hz5
 8009028:	edd7 7a00 	vldr	s15, [r7]
 800902c:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8009030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009038:	d801      	bhi.n	800903e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x22>
 800903a:	2301      	movs	r3, #1
 800903c:	e06e      	b.n	800911c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800903e:	edd7 7a00 	vldr	s15, [r7]
 8009042:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8009046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800904a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800904e:	d801      	bhi.n	8009054 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x38>
 8009050:	2302      	movs	r3, #2
 8009052:	e063      	b.n	800911c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009054:	edd7 7a00 	vldr	s15, [r7]
 8009058:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800905c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009064:	d801      	bhi.n	800906a <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8009066:	2303      	movs	r3, #3
 8009068:	e058      	b.n	800911c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800906a:	edd7 7a00 	vldr	s15, [r7]
 800906e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8009072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800907a:	d801      	bhi.n	8009080 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x64>
 800907c:	2304      	movs	r3, #4
 800907e:	e04d      	b.n	800911c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009080:	edd7 7a00 	vldr	s15, [r7]
 8009084:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8009130 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x114>
 8009088:	eef4 7ac7 	vcmpe.f32	s15, s14
 800908c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009090:	d801      	bhi.n	8009096 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8009092:	2305      	movs	r3, #5
 8009094:	e042      	b.n	800911c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009096:	edd7 7a00 	vldr	s15, [r7]
 800909a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009134 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x118>
 800909e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a6:	d801      	bhi.n	80090ac <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x90>
 80090a8:	2306      	movs	r3, #6
 80090aa:	e037      	b.n	800911c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80090ac:	edd7 7a00 	vldr	s15, [r7]
 80090b0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8009138 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x11c>
 80090b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090bc:	d801      	bhi.n	80090c2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80090be:	2307      	movs	r3, #7
 80090c0:	e02c      	b.n	800911c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80090c2:	edd7 7a00 	vldr	s15, [r7]
 80090c6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800913c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x120>
 80090ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090d2:	d801      	bhi.n	80090d8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80090d4:	2308      	movs	r3, #8
 80090d6:	e021      	b.n	800911c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80090d8:	edd7 7a00 	vldr	s15, [r7]
 80090dc:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009140 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x124>
 80090e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e8:	d801      	bhi.n	80090ee <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80090ea:	2309      	movs	r3, #9
 80090ec:	e016      	b.n	800911c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80090ee:	edd7 7a00 	vldr	s15, [r7]
 80090f2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009144 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x128>
 80090f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fe:	d801      	bhi.n	8009104 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8009100:	230a      	movs	r3, #10
 8009102:	e00b      	b.n	800911c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009104:	edd7 7a00 	vldr	s15, [r7]
 8009108:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8009148 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x12c>
 800910c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009114:	d801      	bhi.n	800911a <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xfe>
 8009116:	230b      	movs	r3, #11
 8009118:	e000      	b.n	800911c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800911a:	230c      	movs	r3, #12
  pObj->acc_odr = (Odr <=    1.875f) ? LSM6DSV16X_XL_ODR_AT_1Hz875
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  960.0f) ? LSM6DSV16X_XL_ODR_AT_960Hz
                  : (Odr <= 1920.0f) ? LSM6DSV16X_XL_ODR_AT_1920Hz
                  : (Odr <= 3840.0f) ? LSM6DSV16X_XL_ODR_AT_3840Hz
                  :                      LSM6DSV16X_XL_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	42700000 	.word	0x42700000
 8009134:	42f00000 	.word	0x42f00000
 8009138:	43700000 	.word	0x43700000
 800913c:	43f00000 	.word	0x43f00000
 8009140:	44700000 	.word	0x44700000
 8009144:	44f00000 	.word	0x44f00000
 8009148:	45700000 	.word	0x45700000

0800914c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_gy_data_rate_t new_odr;

  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_GY_ODR_AT_7Hz5
            : (Odr <=   15.0f) ? LSM6DSV16X_GY_ODR_AT_15Hz
 8009158:	edd7 7a00 	vldr	s15, [r7]
 800915c:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8009160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009168:	d801      	bhi.n	800916e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800916a:	2302      	movs	r3, #2
 800916c:	e063      	b.n	8009236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800916e:	edd7 7a00 	vldr	s15, [r7]
 8009172:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8009176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800917a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800917e:	d801      	bhi.n	8009184 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8009180:	2303      	movs	r3, #3
 8009182:	e058      	b.n	8009236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009184:	edd7 7a00 	vldr	s15, [r7]
 8009188:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800918c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009194:	d801      	bhi.n	800919a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8009196:	2304      	movs	r3, #4
 8009198:	e04d      	b.n	8009236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800919a:	edd7 7a00 	vldr	s15, [r7]
 800919e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800925c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80091a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091aa:	d801      	bhi.n	80091b0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80091ac:	2305      	movs	r3, #5
 80091ae:	e042      	b.n	8009236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80091b0:	edd7 7a00 	vldr	s15, [r7]
 80091b4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8009260 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80091b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091c0:	d801      	bhi.n	80091c6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80091c2:	2306      	movs	r3, #6
 80091c4:	e037      	b.n	8009236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80091c6:	edd7 7a00 	vldr	s15, [r7]
 80091ca:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009264 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x118>
 80091ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d6:	d801      	bhi.n	80091dc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80091d8:	2307      	movs	r3, #7
 80091da:	e02c      	b.n	8009236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80091dc:	edd7 7a00 	vldr	s15, [r7]
 80091e0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8009268 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x11c>
 80091e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ec:	d801      	bhi.n	80091f2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80091ee:	2308      	movs	r3, #8
 80091f0:	e021      	b.n	8009236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80091f2:	edd7 7a00 	vldr	s15, [r7]
 80091f6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800926c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x120>
 80091fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009202:	d801      	bhi.n	8009208 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8009204:	2309      	movs	r3, #9
 8009206:	e016      	b.n	8009236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009208:	edd7 7a00 	vldr	s15, [r7]
 800920c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009270 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x124>
 8009210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009218:	d801      	bhi.n	800921e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800921a:	230a      	movs	r3, #10
 800921c:	e00b      	b.n	8009236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800921e:	edd7 7a00 	vldr	s15, [r7]
 8009222:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009274 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x128>
 8009226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800922a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800922e:	d801      	bhi.n	8009234 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xe8>
 8009230:	230b      	movs	r3, #11
 8009232:	e000      	b.n	8009236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009234:	230c      	movs	r3, #12
  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_GY_ODR_AT_7Hz5
 8009236:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_GY_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_GY_ODR_AT_3840Hz
            :                    LSM6DSV16X_GY_ODR_AT_7680Hz;

  /* Output data rate selection. */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3320      	adds	r3, #32
 800923c:	7bfa      	ldrb	r2, [r7, #15]
 800923e:	4611      	mov	r1, r2
 8009240:	4618      	mov	r0, r3
 8009242:	f000 f9b3 	bl	80095ac <lsm6dsv16x_gy_data_rate_set>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSV16X_ERROR;
 800924c:	f04f 33ff 	mov.w	r3, #4294967295
 8009250:	e000      	b.n	8009254 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSV16X_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	42700000 	.word	0x42700000
 8009260:	42f00000 	.word	0x42f00000
 8009264:	43700000 	.word	0x43700000
 8009268:	43f00000 	.word	0x43f00000
 800926c:	44700000 	.word	0x44700000
 8009270:	44f00000 	.word	0x44f00000
 8009274:	45700000 	.word	0x45700000

08009278 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_GY_ODR_AT_7Hz5
                   : (Odr <=   15.0f) ? LSM6DSV16X_GY_ODR_AT_15Hz
 8009284:	edd7 7a00 	vldr	s15, [r7]
 8009288:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 800928c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009294:	d801      	bhi.n	800929a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8009296:	2302      	movs	r3, #2
 8009298:	e063      	b.n	8009362 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800929a:	edd7 7a00 	vldr	s15, [r7]
 800929e:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80092a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092aa:	d801      	bhi.n	80092b0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80092ac:	2303      	movs	r3, #3
 80092ae:	e058      	b.n	8009362 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80092b0:	edd7 7a00 	vldr	s15, [r7]
 80092b4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80092b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c0:	d801      	bhi.n	80092c6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80092c2:	2304      	movs	r3, #4
 80092c4:	e04d      	b.n	8009362 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80092c6:	edd7 7a00 	vldr	s15, [r7]
 80092ca:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8009378 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80092ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092d6:	d801      	bhi.n	80092dc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80092d8:	2305      	movs	r3, #5
 80092da:	e042      	b.n	8009362 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80092dc:	edd7 7a00 	vldr	s15, [r7]
 80092e0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800937c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x104>
 80092e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ec:	d801      	bhi.n	80092f2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80092ee:	2306      	movs	r3, #6
 80092f0:	e037      	b.n	8009362 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80092f2:	edd7 7a00 	vldr	s15, [r7]
 80092f6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8009380 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x108>
 80092fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009302:	d801      	bhi.n	8009308 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8009304:	2307      	movs	r3, #7
 8009306:	e02c      	b.n	8009362 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009308:	edd7 7a00 	vldr	s15, [r7]
 800930c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009384 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x10c>
 8009310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009318:	d801      	bhi.n	800931e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800931a:	2308      	movs	r3, #8
 800931c:	e021      	b.n	8009362 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800931e:	edd7 7a00 	vldr	s15, [r7]
 8009322:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009388 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x110>
 8009326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800932a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800932e:	d801      	bhi.n	8009334 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8009330:	2309      	movs	r3, #9
 8009332:	e016      	b.n	8009362 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009334:	edd7 7a00 	vldr	s15, [r7]
 8009338:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800938c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x114>
 800933c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009344:	d801      	bhi.n	800934a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8009346:	230a      	movs	r3, #10
 8009348:	e00b      	b.n	8009362 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800934a:	edd7 7a00 	vldr	s15, [r7]
 800934e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8009390 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x118>
 8009352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800935a:	d801      	bhi.n	8009360 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800935c:	230b      	movs	r3, #11
 800935e:	e000      	b.n	8009362 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009360:	230c      	movs	r3, #12
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_GY_ODR_AT_7Hz5
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  960.0f) ? LSM6DSV16X_GY_ODR_AT_960Hz
                   : (Odr <= 1920.0f) ? LSM6DSV16X_GY_ODR_AT_1920Hz
                   : (Odr <= 3840.0f) ? LSM6DSV16X_GY_ODR_AT_3840Hz
                   :                    LSM6DSV16X_GY_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	42700000 	.word	0x42700000
 800937c:	42f00000 	.word	0x42f00000
 8009380:	43700000 	.word	0x43700000
 8009384:	43f00000 	.word	0x43f00000
 8009388:	44700000 	.word	0x44700000
 800938c:	44f00000 	.word	0x44f00000
 8009390:	45700000 	.word	0x45700000

08009394 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009394:	b590      	push	{r4, r7, lr}
 8009396:	b087      	sub	sp, #28
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	607a      	str	r2, [r7, #4]
 800939e:	461a      	mov	r2, r3
 80093a0:	460b      	mov	r3, r1
 80093a2:	72fb      	strb	r3, [r7, #11]
 80093a4:	4613      	mov	r3, r2
 80093a6:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	695c      	ldr	r4, [r3, #20]
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	7b1b      	ldrb	r3, [r3, #12]
 80093b4:	4618      	mov	r0, r3
 80093b6:	7afb      	ldrb	r3, [r7, #11]
 80093b8:	b299      	uxth	r1, r3
 80093ba:	893b      	ldrh	r3, [r7, #8]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	47a0      	blx	r4
 80093c0:	4603      	mov	r3, r0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	371c      	adds	r7, #28
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd90      	pop	{r4, r7, pc}

080093ca <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80093ca:	b590      	push	{r4, r7, lr}
 80093cc:	b087      	sub	sp, #28
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	60f8      	str	r0, [r7, #12]
 80093d2:	607a      	str	r2, [r7, #4]
 80093d4:	461a      	mov	r2, r3
 80093d6:	460b      	mov	r3, r1
 80093d8:	72fb      	strb	r3, [r7, #11]
 80093da:	4613      	mov	r3, r2
 80093dc:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	691c      	ldr	r4, [r3, #16]
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	7b1b      	ldrb	r3, [r3, #12]
 80093ea:	4618      	mov	r0, r3
 80093ec:	7afb      	ldrb	r3, [r7, #11]
 80093ee:	b299      	uxth	r1, r3
 80093f0:	893b      	ldrh	r3, [r7, #8]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	47a0      	blx	r4
 80093f6:	4603      	mov	r3, r0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	371c      	adds	r7, #28
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd90      	pop	{r4, r7, pc}

08009400 <lsm6dsv16x_read_reg>:
  *
  */
int32_t lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8009400:	b590      	push	{r4, r7, lr}
 8009402:	b087      	sub	sp, #28
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	607a      	str	r2, [r7, #4]
 800940a:	461a      	mov	r2, r3
 800940c:	460b      	mov	r3, r1
 800940e:	72fb      	strb	r3, [r7, #11]
 8009410:	4613      	mov	r3, r2
 8009412:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	685c      	ldr	r4, [r3, #4]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	68d8      	ldr	r0, [r3, #12]
 800941c:	893b      	ldrh	r3, [r7, #8]
 800941e:	7af9      	ldrb	r1, [r7, #11]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	47a0      	blx	r4
 8009424:	6178      	str	r0, [r7, #20]

  return ret;
 8009426:	697b      	ldr	r3, [r7, #20]
}
 8009428:	4618      	mov	r0, r3
 800942a:	371c      	adds	r7, #28
 800942c:	46bd      	mov	sp, r7
 800942e:	bd90      	pop	{r4, r7, pc}

08009430 <lsm6dsv16x_write_reg>:
  *
  */
int32_t lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 8009430:	b590      	push	{r4, r7, lr}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	607a      	str	r2, [r7, #4]
 800943a:	461a      	mov	r2, r3
 800943c:	460b      	mov	r3, r1
 800943e:	72fb      	strb	r3, [r7, #11]
 8009440:	4613      	mov	r3, r2
 8009442:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681c      	ldr	r4, [r3, #0]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	68d8      	ldr	r0, [r3, #12]
 800944c:	893b      	ldrh	r3, [r7, #8]
 800944e:	7af9      	ldrb	r1, [r7, #11]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	47a0      	blx	r4
 8009454:	6178      	str	r0, [r7, #20]

  return ret;
 8009456:	697b      	ldr	r3, [r7, #20]
}
 8009458:	4618      	mov	r0, r3
 800945a:	371c      	adds	r7, #28
 800945c:	46bd      	mov	sp, r7
 800945e:	bd90      	pop	{r4, r7, pc}

08009460 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 800946a:	2301      	movs	r3, #1
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	210f      	movs	r1, #15
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7ff ffc5 	bl	8009400 <lsm6dsv16x_read_reg>
 8009476:	60f8      	str	r0, [r7, #12]

  return ret;
 8009478:	68fb      	ldr	r3, [r7, #12]
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_xl_data_rate_t val)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b084      	sub	sp, #16
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	460b      	mov	r3, r1
 800948c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800948e:	f107 0208 	add.w	r2, r7, #8
 8009492:	2301      	movs	r3, #1
 8009494:	2110      	movs	r1, #16
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7ff ffb2 	bl	8009400 <lsm6dsv16x_read_reg>
 800949c:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10f      	bne.n	80094c4 <lsm6dsv16x_xl_data_rate_set+0x42>
  {
    ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 80094a4:	78fb      	ldrb	r3, [r7, #3]
 80094a6:	f003 030f 	and.w	r3, r3, #15
 80094aa:	b2da      	uxtb	r2, r3
 80094ac:	7a3b      	ldrb	r3, [r7, #8]
 80094ae:	f362 0303 	bfi	r3, r2, #0, #4
 80094b2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80094b4:	f107 0208 	add.w	r2, r7, #8
 80094b8:	2301      	movs	r3, #1
 80094ba:	2110      	movs	r1, #16
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f7ff ffb7 	bl	8009430 <lsm6dsv16x_write_reg>
 80094c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80094c4:	68fb      	ldr	r3, [r7, #12]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
	...

080094d0 <lsm6dsv16x_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_xl_data_rate_t *val)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80094da:	f107 0208 	add.w	r2, r7, #8
 80094de:	2301      	movs	r3, #1
 80094e0:	2110      	movs	r1, #16
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7ff ff8c 	bl	8009400 <lsm6dsv16x_read_reg>
 80094e8:	60f8      	str	r0, [r7, #12]

  switch (ctrl1.odr_xl)
 80094ea:	7a3b      	ldrb	r3, [r7, #8]
 80094ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b0c      	cmp	r3, #12
 80094f4:	d850      	bhi.n	8009598 <lsm6dsv16x_xl_data_rate_get+0xc8>
 80094f6:	a201      	add	r2, pc, #4	@ (adr r2, 80094fc <lsm6dsv16x_xl_data_rate_get+0x2c>)
 80094f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fc:	08009531 	.word	0x08009531
 8009500:	08009539 	.word	0x08009539
 8009504:	08009541 	.word	0x08009541
 8009508:	08009549 	.word	0x08009549
 800950c:	08009551 	.word	0x08009551
 8009510:	08009559 	.word	0x08009559
 8009514:	08009561 	.word	0x08009561
 8009518:	08009569 	.word	0x08009569
 800951c:	08009571 	.word	0x08009571
 8009520:	08009579 	.word	0x08009579
 8009524:	08009581 	.word	0x08009581
 8009528:	08009589 	.word	0x08009589
 800952c:	08009591 	.word	0x08009591
  {
    case LSM6DSV16X_XL_ODR_OFF:
      *val = LSM6DSV16X_XL_ODR_OFF;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	2200      	movs	r2, #0
 8009534:	701a      	strb	r2, [r3, #0]
      break;
 8009536:	e033      	b.n	80095a0 <lsm6dsv16x_xl_data_rate_get+0xd0>

    case LSM6DSV16X_XL_ODR_AT_1Hz875:
      *val = LSM6DSV16X_XL_ODR_AT_1Hz875;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	2201      	movs	r2, #1
 800953c:	701a      	strb	r2, [r3, #0]
      break;
 800953e:	e02f      	b.n	80095a0 <lsm6dsv16x_xl_data_rate_get+0xd0>

    case LSM6DSV16X_XL_ODR_AT_7Hz5:
      *val = LSM6DSV16X_XL_ODR_AT_7Hz5;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	2202      	movs	r2, #2
 8009544:	701a      	strb	r2, [r3, #0]
      break;
 8009546:	e02b      	b.n	80095a0 <lsm6dsv16x_xl_data_rate_get+0xd0>

    case LSM6DSV16X_XL_ODR_AT_15Hz:
      *val = LSM6DSV16X_XL_ODR_AT_15Hz;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	2203      	movs	r2, #3
 800954c:	701a      	strb	r2, [r3, #0]
      break;
 800954e:	e027      	b.n	80095a0 <lsm6dsv16x_xl_data_rate_get+0xd0>

    case LSM6DSV16X_XL_ODR_AT_30Hz:
      *val = LSM6DSV16X_XL_ODR_AT_30Hz;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	2204      	movs	r2, #4
 8009554:	701a      	strb	r2, [r3, #0]
      break;
 8009556:	e023      	b.n	80095a0 <lsm6dsv16x_xl_data_rate_get+0xd0>

    case LSM6DSV16X_XL_ODR_AT_60Hz:
      *val = LSM6DSV16X_XL_ODR_AT_60Hz;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	2205      	movs	r2, #5
 800955c:	701a      	strb	r2, [r3, #0]
      break;
 800955e:	e01f      	b.n	80095a0 <lsm6dsv16x_xl_data_rate_get+0xd0>

    case LSM6DSV16X_XL_ODR_AT_120Hz:
      *val = LSM6DSV16X_XL_ODR_AT_120Hz;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2206      	movs	r2, #6
 8009564:	701a      	strb	r2, [r3, #0]
      break;
 8009566:	e01b      	b.n	80095a0 <lsm6dsv16x_xl_data_rate_get+0xd0>

    case LSM6DSV16X_XL_ODR_AT_240Hz:
      *val = LSM6DSV16X_XL_ODR_AT_240Hz;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	2207      	movs	r2, #7
 800956c:	701a      	strb	r2, [r3, #0]
      break;
 800956e:	e017      	b.n	80095a0 <lsm6dsv16x_xl_data_rate_get+0xd0>

    case LSM6DSV16X_XL_ODR_AT_480Hz:
      *val = LSM6DSV16X_XL_ODR_AT_480Hz;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	2208      	movs	r2, #8
 8009574:	701a      	strb	r2, [r3, #0]
      break;
 8009576:	e013      	b.n	80095a0 <lsm6dsv16x_xl_data_rate_get+0xd0>

    case LSM6DSV16X_XL_ODR_AT_960Hz:
      *val = LSM6DSV16X_XL_ODR_AT_960Hz;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	2209      	movs	r2, #9
 800957c:	701a      	strb	r2, [r3, #0]
      break;
 800957e:	e00f      	b.n	80095a0 <lsm6dsv16x_xl_data_rate_get+0xd0>

    case LSM6DSV16X_XL_ODR_AT_1920Hz:
      *val = LSM6DSV16X_XL_ODR_AT_1920Hz;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	220a      	movs	r2, #10
 8009584:	701a      	strb	r2, [r3, #0]
      break;
 8009586:	e00b      	b.n	80095a0 <lsm6dsv16x_xl_data_rate_get+0xd0>

    case LSM6DSV16X_XL_ODR_AT_3840Hz:
      *val = LSM6DSV16X_XL_ODR_AT_3840Hz;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	220b      	movs	r2, #11
 800958c:	701a      	strb	r2, [r3, #0]
      break;
 800958e:	e007      	b.n	80095a0 <lsm6dsv16x_xl_data_rate_get+0xd0>

    case LSM6DSV16X_XL_ODR_AT_7680Hz:
      *val = LSM6DSV16X_XL_ODR_AT_7680Hz;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	220c      	movs	r2, #12
 8009594:	701a      	strb	r2, [r3, #0]
      break;
 8009596:	e003      	b.n	80095a0 <lsm6dsv16x_xl_data_rate_get+0xd0>

    default:
      *val = LSM6DSV16X_XL_ODR_OFF;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	2200      	movs	r2, #0
 800959c:	701a      	strb	r2, [r3, #0]
      break;
 800959e:	bf00      	nop
  }
  return ret;
 80095a0:	68fb      	ldr	r3, [r7, #12]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop

080095ac <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_gy_data_rate_t val)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80095b8:	f107 0208 	add.w	r2, r7, #8
 80095bc:	2301      	movs	r3, #1
 80095be:	2111      	movs	r1, #17
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7ff ff1d 	bl	8009400 <lsm6dsv16x_read_reg>
 80095c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10f      	bne.n	80095ee <lsm6dsv16x_gy_data_rate_set+0x42>
  {
    ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 80095ce:	78fb      	ldrb	r3, [r7, #3]
 80095d0:	f003 030f 	and.w	r3, r3, #15
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	7a3b      	ldrb	r3, [r7, #8]
 80095d8:	f362 0303 	bfi	r3, r2, #0, #4
 80095dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80095de:	f107 0208 	add.w	r2, r7, #8
 80095e2:	2301      	movs	r3, #1
 80095e4:	2111      	movs	r1, #17
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7ff ff22 	bl	8009430 <lsm6dsv16x_write_reg>
 80095ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80095ee:	68fb      	ldr	r3, [r7, #12]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <lsm6dsv16x_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_gy_data_rate_t *val)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8009602:	f107 0208 	add.w	r2, r7, #8
 8009606:	2301      	movs	r3, #1
 8009608:	2111      	movs	r1, #17
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7ff fef8 	bl	8009400 <lsm6dsv16x_read_reg>
 8009610:	60f8      	str	r0, [r7, #12]

  switch (ctrl2.odr_g)
 8009612:	7a3b      	ldrb	r3, [r7, #8]
 8009614:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b0c      	cmp	r3, #12
 800961c:	d84c      	bhi.n	80096b8 <lsm6dsv16x_gy_data_rate_get+0xc0>
 800961e:	a201      	add	r2, pc, #4	@ (adr r2, 8009624 <lsm6dsv16x_gy_data_rate_get+0x2c>)
 8009620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009624:	08009659 	.word	0x08009659
 8009628:	080096b9 	.word	0x080096b9
 800962c:	08009661 	.word	0x08009661
 8009630:	08009669 	.word	0x08009669
 8009634:	08009671 	.word	0x08009671
 8009638:	08009679 	.word	0x08009679
 800963c:	08009681 	.word	0x08009681
 8009640:	08009689 	.word	0x08009689
 8009644:	08009691 	.word	0x08009691
 8009648:	08009699 	.word	0x08009699
 800964c:	080096a1 	.word	0x080096a1
 8009650:	080096a9 	.word	0x080096a9
 8009654:	080096b1 	.word	0x080096b1
  {
    case LSM6DSV16X_GY_ODR_OFF:
      *val = LSM6DSV16X_GY_ODR_OFF;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	2200      	movs	r2, #0
 800965c:	701a      	strb	r2, [r3, #0]
      break;
 800965e:	e02f      	b.n	80096c0 <lsm6dsv16x_gy_data_rate_get+0xc8>

    case LSM6DSV16X_GY_ODR_AT_7Hz5:
      *val = LSM6DSV16X_GY_ODR_AT_7Hz5;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	2202      	movs	r2, #2
 8009664:	701a      	strb	r2, [r3, #0]
      break;
 8009666:	e02b      	b.n	80096c0 <lsm6dsv16x_gy_data_rate_get+0xc8>

    case LSM6DSV16X_GY_ODR_AT_15Hz:
      *val = LSM6DSV16X_GY_ODR_AT_15Hz;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	2203      	movs	r2, #3
 800966c:	701a      	strb	r2, [r3, #0]
      break;
 800966e:	e027      	b.n	80096c0 <lsm6dsv16x_gy_data_rate_get+0xc8>

    case LSM6DSV16X_GY_ODR_AT_30Hz:
      *val = LSM6DSV16X_GY_ODR_AT_30Hz;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	2204      	movs	r2, #4
 8009674:	701a      	strb	r2, [r3, #0]
      break;
 8009676:	e023      	b.n	80096c0 <lsm6dsv16x_gy_data_rate_get+0xc8>

    case LSM6DSV16X_GY_ODR_AT_60Hz:
      *val = LSM6DSV16X_GY_ODR_AT_60Hz;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	2205      	movs	r2, #5
 800967c:	701a      	strb	r2, [r3, #0]
      break;
 800967e:	e01f      	b.n	80096c0 <lsm6dsv16x_gy_data_rate_get+0xc8>

    case LSM6DSV16X_GY_ODR_AT_120Hz:
      *val = LSM6DSV16X_GY_ODR_AT_120Hz;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2206      	movs	r2, #6
 8009684:	701a      	strb	r2, [r3, #0]
      break;
 8009686:	e01b      	b.n	80096c0 <lsm6dsv16x_gy_data_rate_get+0xc8>

    case LSM6DSV16X_GY_ODR_AT_240Hz:
      *val = LSM6DSV16X_GY_ODR_AT_240Hz;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	2207      	movs	r2, #7
 800968c:	701a      	strb	r2, [r3, #0]
      break;
 800968e:	e017      	b.n	80096c0 <lsm6dsv16x_gy_data_rate_get+0xc8>

    case LSM6DSV16X_GY_ODR_AT_480Hz:
      *val = LSM6DSV16X_GY_ODR_AT_480Hz;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	2208      	movs	r2, #8
 8009694:	701a      	strb	r2, [r3, #0]
      break;
 8009696:	e013      	b.n	80096c0 <lsm6dsv16x_gy_data_rate_get+0xc8>

    case LSM6DSV16X_GY_ODR_AT_960Hz:
      *val = LSM6DSV16X_GY_ODR_AT_960Hz;
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	2209      	movs	r2, #9
 800969c:	701a      	strb	r2, [r3, #0]
      break;
 800969e:	e00f      	b.n	80096c0 <lsm6dsv16x_gy_data_rate_get+0xc8>

    case LSM6DSV16X_GY_ODR_AT_1920Hz:
      *val = LSM6DSV16X_GY_ODR_AT_1920Hz;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	220a      	movs	r2, #10
 80096a4:	701a      	strb	r2, [r3, #0]
      break;
 80096a6:	e00b      	b.n	80096c0 <lsm6dsv16x_gy_data_rate_get+0xc8>

    case LSM6DSV16X_GY_ODR_AT_3840Hz:
      *val = LSM6DSV16X_GY_ODR_AT_3840Hz;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	220b      	movs	r2, #11
 80096ac:	701a      	strb	r2, [r3, #0]
      break;
 80096ae:	e007      	b.n	80096c0 <lsm6dsv16x_gy_data_rate_get+0xc8>

    case LSM6DSV16X_GY_ODR_AT_7680Hz:
      *val = LSM6DSV16X_GY_ODR_AT_7680Hz;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	220c      	movs	r2, #12
 80096b4:	701a      	strb	r2, [r3, #0]
      break;
 80096b6:	e003      	b.n	80096c0 <lsm6dsv16x_gy_data_rate_get+0xc8>

    default:
      *val = LSM6DSV16X_GY_ODR_OFF;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	2200      	movs	r2, #0
 80096bc:	701a      	strb	r2, [r3, #0]
      break;
 80096be:	bf00      	nop
  }
  return ret;
 80096c0:	68fb      	ldr	r3, [r7, #12]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop

080096cc <lsm6dsv16x_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80096d8:	f107 0208 	add.w	r2, r7, #8
 80096dc:	2301      	movs	r3, #1
 80096de:	2112      	movs	r1, #18
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7ff fe8d 	bl	8009400 <lsm6dsv16x_read_reg>
 80096e6:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10f      	bne.n	800970e <lsm6dsv16x_auto_increment_set+0x42>
  {
    ctrl3.if_inc = val;
 80096ee:	78fb      	ldrb	r3, [r7, #3]
 80096f0:	f003 0301 	and.w	r3, r3, #1
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	7a3b      	ldrb	r3, [r7, #8]
 80096f8:	f362 0382 	bfi	r3, r2, #2, #1
 80096fc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80096fe:	f107 0208 	add.w	r2, r7, #8
 8009702:	2301      	movs	r3, #1
 8009704:	2112      	movs	r1, #18
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7ff fe92 	bl	8009430 <lsm6dsv16x_write_reg>
 800970c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800970e:	68fb      	ldr	r3, [r7, #12]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8009724:	f107 0208 	add.w	r2, r7, #8
 8009728:	2301      	movs	r3, #1
 800972a:	2112      	movs	r1, #18
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7ff fe67 	bl	8009400 <lsm6dsv16x_read_reg>
 8009732:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d10f      	bne.n	800975a <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 800973a:	78fb      	ldrb	r3, [r7, #3]
 800973c:	f003 0301 	and.w	r3, r3, #1
 8009740:	b2da      	uxtb	r2, r3
 8009742:	7a3b      	ldrb	r3, [r7, #8]
 8009744:	f362 1386 	bfi	r3, r2, #6, #1
 8009748:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800974a:	f107 0208 	add.w	r2, r7, #8
 800974e:	2301      	movs	r3, #1
 8009750:	2112      	movs	r1, #18
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f7ff fe6c 	bl	8009430 <lsm6dsv16x_write_reg>
 8009758:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800975a:	68fb      	ldr	r3, [r7, #12]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	460b      	mov	r3, r1
 800976e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8009770:	f107 0208 	add.w	r2, r7, #8
 8009774:	2301      	movs	r3, #1
 8009776:	2115      	movs	r1, #21
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7ff fe41 	bl	8009400 <lsm6dsv16x_read_reg>
 800977e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10f      	bne.n	80097a6 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8009786:	78fb      	ldrb	r3, [r7, #3]
 8009788:	f003 030f 	and.w	r3, r3, #15
 800978c:	b2da      	uxtb	r2, r3
 800978e:	7a3b      	ldrb	r3, [r7, #8]
 8009790:	f362 0303 	bfi	r3, r2, #0, #4
 8009794:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8009796:	f107 0208 	add.w	r2, r7, #8
 800979a:	2301      	movs	r3, #1
 800979c:	2115      	movs	r1, #21
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7ff fe46 	bl	8009430 <lsm6dsv16x_write_reg>
 80097a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80097a6:	68fb      	ldr	r3, [r7, #12]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <lsm6dsv16x_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t *val)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 80097ba:	f107 0208 	add.w	r2, r7, #8
 80097be:	2301      	movs	r3, #1
 80097c0:	2115      	movs	r1, #21
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7ff fe1c 	bl	8009400 <lsm6dsv16x_read_reg>
 80097c8:	60f8      	str	r0, [r7, #12]

  switch (ctrl6.fs_g)
 80097ca:	7a3b      	ldrb	r3, [r7, #8]
 80097cc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b05      	cmp	r3, #5
 80097d4:	d826      	bhi.n	8009824 <lsm6dsv16x_gy_full_scale_get+0x74>
 80097d6:	a201      	add	r2, pc, #4	@ (adr r2, 80097dc <lsm6dsv16x_gy_full_scale_get+0x2c>)
 80097d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097dc:	080097f5 	.word	0x080097f5
 80097e0:	080097fd 	.word	0x080097fd
 80097e4:	08009805 	.word	0x08009805
 80097e8:	0800980d 	.word	0x0800980d
 80097ec:	08009815 	.word	0x08009815
 80097f0:	0800981d 	.word	0x0800981d
  {
    case LSM6DSV16X_125dps:
      *val = LSM6DSV16X_125dps;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	2200      	movs	r2, #0
 80097f8:	701a      	strb	r2, [r3, #0]
      break;
 80097fa:	e017      	b.n	800982c <lsm6dsv16x_gy_full_scale_get+0x7c>

    case LSM6DSV16X_250dps:
      *val = LSM6DSV16X_250dps;
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	2201      	movs	r2, #1
 8009800:	701a      	strb	r2, [r3, #0]
      break;
 8009802:	e013      	b.n	800982c <lsm6dsv16x_gy_full_scale_get+0x7c>

    case LSM6DSV16X_500dps:
      *val = LSM6DSV16X_500dps;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	2202      	movs	r2, #2
 8009808:	701a      	strb	r2, [r3, #0]
      break;
 800980a:	e00f      	b.n	800982c <lsm6dsv16x_gy_full_scale_get+0x7c>

    case LSM6DSV16X_1000dps:
      *val = LSM6DSV16X_1000dps;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2203      	movs	r2, #3
 8009810:	701a      	strb	r2, [r3, #0]
      break;
 8009812:	e00b      	b.n	800982c <lsm6dsv16x_gy_full_scale_get+0x7c>

    case LSM6DSV16X_2000dps:
      *val = LSM6DSV16X_2000dps;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	2204      	movs	r2, #4
 8009818:	701a      	strb	r2, [r3, #0]
      break;
 800981a:	e007      	b.n	800982c <lsm6dsv16x_gy_full_scale_get+0x7c>

    case LSM6DSV16X_4000dps:
      *val = LSM6DSV16X_4000dps;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	2205      	movs	r2, #5
 8009820:	701a      	strb	r2, [r3, #0]
      break;
 8009822:	e003      	b.n	800982c <lsm6dsv16x_gy_full_scale_get+0x7c>

    default:
      *val = LSM6DSV16X_125dps;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	2200      	movs	r2, #0
 8009828:	701a      	strb	r2, [r3, #0]
      break;
 800982a:	bf00      	nop
  }
  return ret;
 800982c:	68fb      	ldr	r3, [r7, #12]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop

08009838 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009844:	f107 0208 	add.w	r2, r7, #8
 8009848:	2301      	movs	r3, #1
 800984a:	2117      	movs	r1, #23
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7ff fdd7 	bl	8009400 <lsm6dsv16x_read_reg>
 8009852:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d10f      	bne.n	800987a <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 800985a:	78fb      	ldrb	r3, [r7, #3]
 800985c:	f003 0303 	and.w	r3, r3, #3
 8009860:	b2da      	uxtb	r2, r3
 8009862:	7a3b      	ldrb	r3, [r7, #8]
 8009864:	f362 0301 	bfi	r3, r2, #0, #2
 8009868:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 800986a:	f107 0208 	add.w	r2, r7, #8
 800986e:	2301      	movs	r3, #1
 8009870:	2117      	movs	r1, #23
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7ff fddc 	bl	8009430 <lsm6dsv16x_write_reg>
 8009878:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800987a:	68fb      	ldr	r3, [r7, #12]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <lsm6dsv16x_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t *val)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 800988e:	f107 0208 	add.w	r2, r7, #8
 8009892:	2301      	movs	r3, #1
 8009894:	2117      	movs	r1, #23
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7ff fdb2 	bl	8009400 <lsm6dsv16x_read_reg>
 800989c:	60f8      	str	r0, [r7, #12]

  switch (ctrl8.fs_xl)
 800989e:	7a3b      	ldrb	r3, [r7, #8]
 80098a0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	2b03      	cmp	r3, #3
 80098a8:	d81a      	bhi.n	80098e0 <lsm6dsv16x_xl_full_scale_get+0x5c>
 80098aa:	a201      	add	r2, pc, #4	@ (adr r2, 80098b0 <lsm6dsv16x_xl_full_scale_get+0x2c>)
 80098ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b0:	080098c1 	.word	0x080098c1
 80098b4:	080098c9 	.word	0x080098c9
 80098b8:	080098d1 	.word	0x080098d1
 80098bc:	080098d9 	.word	0x080098d9
  {
    case LSM6DSV16X_2g:
      *val = LSM6DSV16X_2g;
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	2200      	movs	r2, #0
 80098c4:	701a      	strb	r2, [r3, #0]
      break;
 80098c6:	e00f      	b.n	80098e8 <lsm6dsv16x_xl_full_scale_get+0x64>

    case LSM6DSV16X_4g:
      *val = LSM6DSV16X_4g;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2201      	movs	r2, #1
 80098cc:	701a      	strb	r2, [r3, #0]
      break;
 80098ce:	e00b      	b.n	80098e8 <lsm6dsv16x_xl_full_scale_get+0x64>

    case LSM6DSV16X_8g:
      *val = LSM6DSV16X_8g;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	2202      	movs	r2, #2
 80098d4:	701a      	strb	r2, [r3, #0]
      break;
 80098d6:	e007      	b.n	80098e8 <lsm6dsv16x_xl_full_scale_get+0x64>

    case LSM6DSV16X_16g:
      *val = LSM6DSV16X_16g;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	2203      	movs	r2, #3
 80098dc:	701a      	strb	r2, [r3, #0]
      break;
 80098de:	e003      	b.n	80098e8 <lsm6dsv16x_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSV16X_2g;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	2200      	movs	r2, #0
 80098e4:	701a      	strb	r2, [r3, #0]
      break;
 80098e6:	bf00      	nop
  }
  return ret;
 80098e8:	68fb      	ldr	r3, [r7, #12]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop

080098f4 <lsm6dsv16x_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_G, &buff[0], 6);
 80098fe:	f107 020c 	add.w	r2, r7, #12
 8009902:	2306      	movs	r3, #6
 8009904:	2122      	movs	r1, #34	@ 0x22
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7ff fd7a 	bl	8009400 <lsm6dsv16x_read_reg>
 800990c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800990e:	7b7b      	ldrb	r3, [r7, #13]
 8009910:	b21a      	sxth	r2, r3
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800991c:	b29b      	uxth	r3, r3
 800991e:	021b      	lsls	r3, r3, #8
 8009920:	b29b      	uxth	r3, r3
 8009922:	7b3a      	ldrb	r2, [r7, #12]
 8009924:	4413      	add	r3, r2
 8009926:	b29b      	uxth	r3, r3
 8009928:	b21a      	sxth	r2, r3
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800992e:	7bfa      	ldrb	r2, [r7, #15]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	3302      	adds	r3, #2
 8009934:	b212      	sxth	r2, r2
 8009936:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	3302      	adds	r3, #2
 800993c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009940:	b29b      	uxth	r3, r3
 8009942:	021b      	lsls	r3, r3, #8
 8009944:	b29b      	uxth	r3, r3
 8009946:	7bba      	ldrb	r2, [r7, #14]
 8009948:	4413      	add	r3, r2
 800994a:	b29a      	uxth	r2, r3
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	3302      	adds	r3, #2
 8009950:	b212      	sxth	r2, r2
 8009952:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8009954:	7c7a      	ldrb	r2, [r7, #17]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	3304      	adds	r3, #4
 800995a:	b212      	sxth	r2, r2
 800995c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	3304      	adds	r3, #4
 8009962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009966:	b29b      	uxth	r3, r3
 8009968:	021b      	lsls	r3, r3, #8
 800996a:	b29b      	uxth	r3, r3
 800996c:	7c3a      	ldrb	r2, [r7, #16]
 800996e:	4413      	add	r3, r2
 8009970:	b29a      	uxth	r2, r3
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	3304      	adds	r3, #4
 8009976:	b212      	sxth	r2, r2
 8009978:	801a      	strh	r2, [r3, #0]

  return ret;
 800997a:	697b      	ldr	r3, [r7, #20]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3718      	adds	r7, #24
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <lsm6dsv16x_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_A, &buff[0], 6);
 800998e:	f107 020c 	add.w	r2, r7, #12
 8009992:	2306      	movs	r3, #6
 8009994:	2128      	movs	r1, #40	@ 0x28
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7ff fd32 	bl	8009400 <lsm6dsv16x_read_reg>
 800999c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800999e:	7b7b      	ldrb	r3, [r7, #13]
 80099a0:	b21a      	sxth	r2, r3
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	021b      	lsls	r3, r3, #8
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	7b3a      	ldrb	r2, [r7, #12]
 80099b4:	4413      	add	r3, r2
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	b21a      	sxth	r2, r3
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80099be:	7bfa      	ldrb	r2, [r7, #15]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	3302      	adds	r3, #2
 80099c4:	b212      	sxth	r2, r2
 80099c6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	3302      	adds	r3, #2
 80099cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	021b      	lsls	r3, r3, #8
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	7bba      	ldrb	r2, [r7, #14]
 80099d8:	4413      	add	r3, r2
 80099da:	b29a      	uxth	r2, r3
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	3302      	adds	r3, #2
 80099e0:	b212      	sxth	r2, r2
 80099e2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80099e4:	7c7a      	ldrb	r2, [r7, #17]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	3304      	adds	r3, #4
 80099ea:	b212      	sxth	r2, r2
 80099ec:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	3304      	adds	r3, #4
 80099f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	021b      	lsls	r3, r3, #8
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	7c3a      	ldrb	r2, [r7, #16]
 80099fe:	4413      	add	r3, r2
 8009a00:	b29a      	uxth	r2, r3
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	3304      	adds	r3, #4
 8009a06:	b212      	sxth	r2, r2
 8009a08:	801a      	strh	r2, [r3, #0]

  return ret;
 8009a0a:	697b      	ldr	r3, [r7, #20]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3718      	adds	r7, #24
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <lsm6dsv16x_fifo_xl_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_xl_batch_t val)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8009a20:	f107 0208 	add.w	r2, r7, #8
 8009a24:	2301      	movs	r3, #1
 8009a26:	2109      	movs	r1, #9
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7ff fce9 	bl	8009400 <lsm6dsv16x_read_reg>
 8009a2e:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10f      	bne.n	8009a56 <lsm6dsv16x_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val & 0xFu;
 8009a36:	78fb      	ldrb	r3, [r7, #3]
 8009a38:	f003 030f 	and.w	r3, r3, #15
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	7a3b      	ldrb	r3, [r7, #8]
 8009a40:	f362 0303 	bfi	r3, r2, #0, #4
 8009a44:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8009a46:	f107 0208 	add.w	r2, r7, #8
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	2109      	movs	r1, #9
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7ff fcee 	bl	8009430 <lsm6dsv16x_write_reg>
 8009a54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009a56:	68fb      	ldr	r3, [r7, #12]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <lsm6dsv16x_fifo_gy_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_gy_batch_t val)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8009a6c:	f107 0208 	add.w	r2, r7, #8
 8009a70:	2301      	movs	r3, #1
 8009a72:	2109      	movs	r1, #9
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7ff fcc3 	bl	8009400 <lsm6dsv16x_read_reg>
 8009a7a:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10f      	bne.n	8009aa2 <lsm6dsv16x_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val & 0x0Fu;
 8009a82:	78fb      	ldrb	r3, [r7, #3]
 8009a84:	f003 030f 	and.w	r3, r3, #15
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	7a3b      	ldrb	r3, [r7, #8]
 8009a8c:	f362 1307 	bfi	r3, r2, #4, #4
 8009a90:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8009a92:	f107 0208 	add.w	r2, r7, #8
 8009a96:	2301      	movs	r3, #1
 8009a98:	2109      	movs	r1, #9
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f7ff fcc8 	bl	8009430 <lsm6dsv16x_write_reg>
 8009aa0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8009ab8:	f107 0208 	add.w	r2, r7, #8
 8009abc:	2301      	movs	r3, #1
 8009abe:	210a      	movs	r1, #10
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7ff fc9d 	bl	8009400 <lsm6dsv16x_read_reg>
 8009ac6:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10f      	bne.n	8009aee <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8009ace:	78fb      	ldrb	r3, [r7, #3]
 8009ad0:	f003 0307 	and.w	r3, r3, #7
 8009ad4:	b2da      	uxtb	r2, r3
 8009ad6:	7a3b      	ldrb	r3, [r7, #8]
 8009ad8:	f362 0302 	bfi	r3, r2, #0, #3
 8009adc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8009ade:	f107 0208 	add.w	r2, r7, #8
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	210a      	movs	r1, #10
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7ff fca2 	bl	8009430 <lsm6dsv16x_write_reg>
 8009aec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009aee:	68fb      	ldr	r3, [r7, #12]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <lsm6dsv16x_ah_qvar_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ah_qvar_mode_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_ah_qvar_mode_t val)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	7039      	strb	r1, [r7, #0]
  lsm6dsv16x_ctrl7_t ctrl7;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8009b02:	f107 0208 	add.w	r2, r7, #8
 8009b06:	2301      	movs	r3, #1
 8009b08:	2116      	movs	r1, #22
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff fc78 	bl	8009400 <lsm6dsv16x_read_reg>
 8009b10:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10f      	bne.n	8009b38 <lsm6dsv16x_ah_qvar_mode_set+0x40>
  {
    ctrl7.ah_qvar_en = val.ah_qvar_en;
 8009b18:	783b      	ldrb	r3, [r7, #0]
 8009b1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009b1e:	b2da      	uxtb	r2, r3
 8009b20:	7a3b      	ldrb	r3, [r7, #8]
 8009b22:	f362 13c7 	bfi	r3, r2, #7, #1
 8009b26:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8009b28:	f107 0208 	add.w	r2, r7, #8
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	2116      	movs	r1, #22
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f7ff fc7d 	bl	8009430 <lsm6dsv16x_write_reg>
 8009b36:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009b38:	68fb      	ldr	r3, [r7, #12]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
	...

08009b44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009b44:	b480      	push	{r7}
 8009b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8009b48:	4b18      	ldr	r3, [pc, #96]	@ (8009bac <SystemInit+0x68>)
 8009b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b4e:	4a17      	ldr	r2, [pc, #92]	@ (8009bac <SystemInit+0x68>)
 8009b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8009b58:	4b15      	ldr	r3, [pc, #84]	@ (8009bb0 <SystemInit+0x6c>)
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8009b5e:	4b14      	ldr	r3, [pc, #80]	@ (8009bb0 <SystemInit+0x6c>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8009b64:	4b12      	ldr	r3, [pc, #72]	@ (8009bb0 <SystemInit+0x6c>)
 8009b66:	2200      	movs	r2, #0
 8009b68:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8009b6a:	4b11      	ldr	r3, [pc, #68]	@ (8009bb0 <SystemInit+0x6c>)
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8009b70:	4b0f      	ldr	r3, [pc, #60]	@ (8009bb0 <SystemInit+0x6c>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a0e      	ldr	r2, [pc, #56]	@ (8009bb0 <SystemInit+0x6c>)
 8009b76:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8009b7a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8009b7e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8009b80:	4b0b      	ldr	r3, [pc, #44]	@ (8009bb0 <SystemInit+0x6c>)
 8009b82:	2200      	movs	r2, #0
 8009b84:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8009b86:	4b0a      	ldr	r3, [pc, #40]	@ (8009bb0 <SystemInit+0x6c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a09      	ldr	r2, [pc, #36]	@ (8009bb0 <SystemInit+0x6c>)
 8009b8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009b90:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8009b92:	4b07      	ldr	r3, [pc, #28]	@ (8009bb0 <SystemInit+0x6c>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009b98:	4b04      	ldr	r3, [pc, #16]	@ (8009bac <SystemInit+0x68>)
 8009b9a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009b9e:	609a      	str	r2, [r3, #8]
  #endif
}
 8009ba0:	bf00      	nop
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	e000ed00 	.word	0xe000ed00
 8009bb0:	46020c00 	.word	0x46020c00

08009bb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009bb8:	4b11      	ldr	r3, [pc, #68]	@ (8009c00 <HAL_Init+0x4c>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a10      	ldr	r2, [pc, #64]	@ (8009c00 <HAL_Init+0x4c>)
 8009bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009bc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009bc4:	2003      	movs	r0, #3
 8009bc6:	f000 f96d 	bl	8009ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009bca:	f003 fef3 	bl	800d9b4 <HAL_RCC_GetSysClockFreq>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8009c04 <HAL_Init+0x50>)
 8009bd2:	6a1b      	ldr	r3, [r3, #32]
 8009bd4:	f003 030f 	and.w	r3, r3, #15
 8009bd8:	490b      	ldr	r1, [pc, #44]	@ (8009c08 <HAL_Init+0x54>)
 8009bda:	5ccb      	ldrb	r3, [r1, r3]
 8009bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8009be0:	4a0a      	ldr	r2, [pc, #40]	@ (8009c0c <HAL_Init+0x58>)
 8009be2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009be4:	200f      	movs	r0, #15
 8009be6:	f000 f813 	bl	8009c10 <HAL_InitTick>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d001      	beq.n	8009bf4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e002      	b.n	8009bfa <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8009bf4:	f7f7 fe10 	bl	8001818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	40022000 	.word	0x40022000
 8009c04:	46020c00 	.word	0x46020c00
 8009c08:	0803648c 	.word	0x0803648c
 8009c0c:	2000086c 	.word	0x2000086c

08009c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8009c18:	4b15      	ldr	r3, [pc, #84]	@ (8009c70 <HAL_InitTick+0x60>)
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d101      	bne.n	8009c24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	e021      	b.n	8009c68 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8009c24:	4b13      	ldr	r3, [pc, #76]	@ (8009c74 <HAL_InitTick+0x64>)
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	4b11      	ldr	r3, [pc, #68]	@ (8009c70 <HAL_InitTick+0x60>)
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 f973 	bl	8009f26 <HAL_SYSTICK_Config>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e00e      	b.n	8009c68 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b0f      	cmp	r3, #15
 8009c4e:	d80a      	bhi.n	8009c66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009c50:	2200      	movs	r2, #0
 8009c52:	6879      	ldr	r1, [r7, #4]
 8009c54:	f04f 30ff 	mov.w	r0, #4294967295
 8009c58:	f000 f92f 	bl	8009eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009c5c:	4a06      	ldr	r2, [pc, #24]	@ (8009c78 <HAL_InitTick+0x68>)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	e000      	b.n	8009c68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	20000874 	.word	0x20000874
 8009c74:	2000086c 	.word	0x2000086c
 8009c78:	20000870 	.word	0x20000870

08009c7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009c80:	4b06      	ldr	r3, [pc, #24]	@ (8009c9c <HAL_IncTick+0x20>)
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	461a      	mov	r2, r3
 8009c86:	4b06      	ldr	r3, [pc, #24]	@ (8009ca0 <HAL_IncTick+0x24>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	4a04      	ldr	r2, [pc, #16]	@ (8009ca0 <HAL_IncTick+0x24>)
 8009c8e:	6013      	str	r3, [r2, #0]
}
 8009c90:	bf00      	nop
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	20000874 	.word	0x20000874
 8009ca0:	2004578c 	.word	0x2004578c

08009ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8009ca8:	4b03      	ldr	r3, [pc, #12]	@ (8009cb8 <HAL_GetTick+0x14>)
 8009caa:	681b      	ldr	r3, [r3, #0]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	2004578c 	.word	0x2004578c

08009cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f003 0307 	and.w	r3, r3, #7
 8009cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8009d00 <__NVIC_SetPriorityGrouping+0x44>)
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009cd8:	4013      	ands	r3, r2
 8009cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009ce4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009cee:	4a04      	ldr	r2, [pc, #16]	@ (8009d00 <__NVIC_SetPriorityGrouping+0x44>)
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	60d3      	str	r3, [r2, #12]
}
 8009cf4:	bf00      	nop
 8009cf6:	3714      	adds	r7, #20
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	e000ed00 	.word	0xe000ed00

08009d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009d04:	b480      	push	{r7}
 8009d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009d08:	4b04      	ldr	r3, [pc, #16]	@ (8009d1c <__NVIC_GetPriorityGrouping+0x18>)
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	0a1b      	lsrs	r3, r3, #8
 8009d0e:	f003 0307 	and.w	r3, r3, #7
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	e000ed00 	.word	0xe000ed00

08009d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	db0b      	blt.n	8009d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009d32:	79fb      	ldrb	r3, [r7, #7]
 8009d34:	f003 021f 	and.w	r2, r3, #31
 8009d38:	4907      	ldr	r1, [pc, #28]	@ (8009d58 <__NVIC_EnableIRQ+0x38>)
 8009d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d3e:	095b      	lsrs	r3, r3, #5
 8009d40:	2001      	movs	r0, #1
 8009d42:	fa00 f202 	lsl.w	r2, r0, r2
 8009d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009d4a:	bf00      	nop
 8009d4c:	370c      	adds	r7, #12
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	e000e100 	.word	0xe000e100

08009d5c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	4603      	mov	r3, r0
 8009d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	db12      	blt.n	8009d94 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009d6e:	79fb      	ldrb	r3, [r7, #7]
 8009d70:	f003 021f 	and.w	r2, r3, #31
 8009d74:	490a      	ldr	r1, [pc, #40]	@ (8009da0 <__NVIC_DisableIRQ+0x44>)
 8009d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d7a:	095b      	lsrs	r3, r3, #5
 8009d7c:	2001      	movs	r0, #1
 8009d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8009d82:	3320      	adds	r3, #32
 8009d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009d88:	f3bf 8f4f 	dsb	sy
}
 8009d8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009d8e:	f3bf 8f6f 	isb	sy
}
 8009d92:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009d94:	bf00      	nop
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	e000e100 	.word	0xe000e100

08009da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	4603      	mov	r3, r0
 8009dac:	6039      	str	r1, [r7, #0]
 8009dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	db0a      	blt.n	8009dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	b2da      	uxtb	r2, r3
 8009dbc:	490c      	ldr	r1, [pc, #48]	@ (8009df0 <__NVIC_SetPriority+0x4c>)
 8009dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dc2:	0112      	lsls	r2, r2, #4
 8009dc4:	b2d2      	uxtb	r2, r2
 8009dc6:	440b      	add	r3, r1
 8009dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009dcc:	e00a      	b.n	8009de4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	4908      	ldr	r1, [pc, #32]	@ (8009df4 <__NVIC_SetPriority+0x50>)
 8009dd4:	79fb      	ldrb	r3, [r7, #7]
 8009dd6:	f003 030f 	and.w	r3, r3, #15
 8009dda:	3b04      	subs	r3, #4
 8009ddc:	0112      	lsls	r2, r2, #4
 8009dde:	b2d2      	uxtb	r2, r2
 8009de0:	440b      	add	r3, r1
 8009de2:	761a      	strb	r2, [r3, #24]
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	e000e100 	.word	0xe000e100
 8009df4:	e000ed00 	.word	0xe000ed00

08009df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b089      	sub	sp, #36	@ 0x24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f003 0307 	and.w	r3, r3, #7
 8009e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	f1c3 0307 	rsb	r3, r3, #7
 8009e12:	2b04      	cmp	r3, #4
 8009e14:	bf28      	it	cs
 8009e16:	2304      	movcs	r3, #4
 8009e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	3304      	adds	r3, #4
 8009e1e:	2b06      	cmp	r3, #6
 8009e20:	d902      	bls.n	8009e28 <NVIC_EncodePriority+0x30>
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	3b03      	subs	r3, #3
 8009e26:	e000      	b.n	8009e2a <NVIC_EncodePriority+0x32>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	fa02 f303 	lsl.w	r3, r2, r3
 8009e36:	43da      	mvns	r2, r3
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	401a      	ands	r2, r3
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009e40:	f04f 31ff 	mov.w	r1, #4294967295
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	fa01 f303 	lsl.w	r3, r1, r3
 8009e4a:	43d9      	mvns	r1, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e50:	4313      	orrs	r3, r2
         );
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3724      	adds	r7, #36	@ 0x24
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
	...

08009e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e70:	d301      	bcc.n	8009e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009e72:	2301      	movs	r3, #1
 8009e74:	e00f      	b.n	8009e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009e76:	4a0a      	ldr	r2, [pc, #40]	@ (8009ea0 <SysTick_Config+0x40>)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009e7e:	210f      	movs	r1, #15
 8009e80:	f04f 30ff 	mov.w	r0, #4294967295
 8009e84:	f7ff ff8e 	bl	8009da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009e88:	4b05      	ldr	r3, [pc, #20]	@ (8009ea0 <SysTick_Config+0x40>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009e8e:	4b04      	ldr	r3, [pc, #16]	@ (8009ea0 <SysTick_Config+0x40>)
 8009e90:	2207      	movs	r2, #7
 8009e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	e000e010 	.word	0xe000e010

08009ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7ff ff05 	bl	8009cbc <__NVIC_SetPriorityGrouping>
}
 8009eb2:	bf00      	nop
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b086      	sub	sp, #24
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	60b9      	str	r1, [r7, #8]
 8009ec4:	607a      	str	r2, [r7, #4]
 8009ec6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009ec8:	f7ff ff1c 	bl	8009d04 <__NVIC_GetPriorityGrouping>
 8009ecc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	68b9      	ldr	r1, [r7, #8]
 8009ed2:	6978      	ldr	r0, [r7, #20]
 8009ed4:	f7ff ff90 	bl	8009df8 <NVIC_EncodePriority>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ede:	4611      	mov	r1, r2
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7ff ff5f 	bl	8009da4 <__NVIC_SetPriority>
}
 8009ee6:	bf00      	nop
 8009ee8:	3718      	adds	r7, #24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7ff ff0f 	bl	8009d20 <__NVIC_EnableIRQ>
}
 8009f02:	bf00      	nop
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b082      	sub	sp, #8
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	4603      	mov	r3, r0
 8009f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7ff ff1f 	bl	8009d5c <__NVIC_DisableIRQ>
}
 8009f1e:	bf00      	nop
 8009f20:	3708      	adds	r7, #8
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b082      	sub	sp, #8
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7ff ff96 	bl	8009e60 <SysTick_Config>
 8009f34:	4603      	mov	r3, r0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
	...

08009f40 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e054      	b.n	8009ffc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	7f5b      	ldrb	r3, [r3, #29]
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d105      	bne.n	8009f68 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f7f7 fc72 	bl	800184c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	791b      	ldrb	r3, [r3, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10c      	bne.n	8009f90 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a22      	ldr	r2, [pc, #136]	@ (800a004 <HAL_CRC_Init+0xc4>)
 8009f7c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	689a      	ldr	r2, [r3, #8]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f022 0218 	bic.w	r2, r2, #24
 8009f8c:	609a      	str	r2, [r3, #8]
 8009f8e:	e00c      	b.n	8009faa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6899      	ldr	r1, [r3, #8]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	461a      	mov	r2, r3
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f834 	bl	800a008 <HAL_CRCEx_Polynomial_Set>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e028      	b.n	8009ffc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	795b      	ldrb	r3, [r3, #5]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d105      	bne.n	8009fbe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fba:	611a      	str	r2, [r3, #16]
 8009fbc:	e004      	b.n	8009fc8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	6912      	ldr	r2, [r2, #16]
 8009fc6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	695a      	ldr	r2, [r3, #20]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	430a      	orrs	r2, r1
 8009fdc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	699a      	ldr	r2, [r3, #24]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	430a      	orrs	r2, r1
 8009ff2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	04c11db7 	.word	0x04c11db7

0800a008 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800a008:	b480      	push	{r7}
 800a00a:	b087      	sub	sp, #28
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a014:	2300      	movs	r3, #0
 800a016:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a018:	231f      	movs	r3, #31
 800a01a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	f003 0301 	and.w	r3, r3, #1
 800a022:	2b00      	cmp	r3, #0
 800a024:	d102      	bne.n	800a02c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800a026:	2301      	movs	r3, #1
 800a028:	75fb      	strb	r3, [r7, #23]
 800a02a:	e063      	b.n	800a0f4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a02c:	bf00      	nop
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	1e5a      	subs	r2, r3, #1
 800a032:	613a      	str	r2, [r7, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d009      	beq.n	800a04c <HAL_CRCEx_Polynomial_Set+0x44>
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	f003 031f 	and.w	r3, r3, #31
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	fa22 f303 	lsr.w	r3, r2, r3
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d0f0      	beq.n	800a02e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b18      	cmp	r3, #24
 800a050:	d846      	bhi.n	800a0e0 <HAL_CRCEx_Polynomial_Set+0xd8>
 800a052:	a201      	add	r2, pc, #4	@ (adr r2, 800a058 <HAL_CRCEx_Polynomial_Set+0x50>)
 800a054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a058:	0800a0e7 	.word	0x0800a0e7
 800a05c:	0800a0e1 	.word	0x0800a0e1
 800a060:	0800a0e1 	.word	0x0800a0e1
 800a064:	0800a0e1 	.word	0x0800a0e1
 800a068:	0800a0e1 	.word	0x0800a0e1
 800a06c:	0800a0e1 	.word	0x0800a0e1
 800a070:	0800a0e1 	.word	0x0800a0e1
 800a074:	0800a0e1 	.word	0x0800a0e1
 800a078:	0800a0d5 	.word	0x0800a0d5
 800a07c:	0800a0e1 	.word	0x0800a0e1
 800a080:	0800a0e1 	.word	0x0800a0e1
 800a084:	0800a0e1 	.word	0x0800a0e1
 800a088:	0800a0e1 	.word	0x0800a0e1
 800a08c:	0800a0e1 	.word	0x0800a0e1
 800a090:	0800a0e1 	.word	0x0800a0e1
 800a094:	0800a0e1 	.word	0x0800a0e1
 800a098:	0800a0c9 	.word	0x0800a0c9
 800a09c:	0800a0e1 	.word	0x0800a0e1
 800a0a0:	0800a0e1 	.word	0x0800a0e1
 800a0a4:	0800a0e1 	.word	0x0800a0e1
 800a0a8:	0800a0e1 	.word	0x0800a0e1
 800a0ac:	0800a0e1 	.word	0x0800a0e1
 800a0b0:	0800a0e1 	.word	0x0800a0e1
 800a0b4:	0800a0e1 	.word	0x0800a0e1
 800a0b8:	0800a0bd 	.word	0x0800a0bd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	2b06      	cmp	r3, #6
 800a0c0:	d913      	bls.n	800a0ea <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800a0c6:	e010      	b.n	800a0ea <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	2b07      	cmp	r3, #7
 800a0cc:	d90f      	bls.n	800a0ee <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800a0d2:	e00c      	b.n	800a0ee <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	2b0f      	cmp	r3, #15
 800a0d8:	d90b      	bls.n	800a0f2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800a0de:	e008      	b.n	800a0f2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	75fb      	strb	r3, [r7, #23]
        break;
 800a0e4:	e006      	b.n	800a0f4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800a0e6:	bf00      	nop
 800a0e8:	e004      	b.n	800a0f4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800a0ea:	bf00      	nop
 800a0ec:	e002      	b.n	800a0f4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800a0ee:	bf00      	nop
 800a0f0:	e000      	b.n	800a0f4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800a0f2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800a0f4:	7dfb      	ldrb	r3, [r7, #23]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10d      	bne.n	800a116 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	f023 0118 	bic.w	r1, r3, #24
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	430a      	orrs	r2, r1
 800a114:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800a116:	7dfb      	ldrb	r3, [r7, #23]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	371c      	adds	r7, #28
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a12a:	2300      	movs	r3, #0
 800a12c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 800a12e:	4b0b      	ldr	r3, [pc, #44]	@ (800a15c <HAL_FLASH_Unlock+0x38>)
 800a130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a132:	2b00      	cmp	r3, #0
 800a134:	da0b      	bge.n	800a14e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 800a136:	4b09      	ldr	r3, [pc, #36]	@ (800a15c <HAL_FLASH_Unlock+0x38>)
 800a138:	4a09      	ldr	r2, [pc, #36]	@ (800a160 <HAL_FLASH_Unlock+0x3c>)
 800a13a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 800a13c:	4b07      	ldr	r3, [pc, #28]	@ (800a15c <HAL_FLASH_Unlock+0x38>)
 800a13e:	4a09      	ldr	r2, [pc, #36]	@ (800a164 <HAL_FLASH_Unlock+0x40>)
 800a140:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 800a142:	4b06      	ldr	r3, [pc, #24]	@ (800a15c <HAL_FLASH_Unlock+0x38>)
 800a144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a146:	2b00      	cmp	r3, #0
 800a148:	da01      	bge.n	800a14e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800a14e:	79fb      	ldrb	r3, [r7, #7]
}
 800a150:	4618      	mov	r0, r3
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr
 800a15c:	40022000 	.word	0x40022000
 800a160:	45670123 	.word	0x45670123
 800a164:	cdef89ab 	.word	0xcdef89ab

0800a168 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_LOCK);
 800a172:	4b09      	ldr	r3, [pc, #36]	@ (800a198 <HAL_FLASH_Lock+0x30>)
 800a174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a176:	4a08      	ldr	r2, [pc, #32]	@ (800a198 <HAL_FLASH_Lock+0x30>)
 800a178:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a17c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 800a17e:	4b06      	ldr	r3, [pc, #24]	@ (800a198 <HAL_FLASH_Lock+0x30>)
 800a180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a182:	2b00      	cmp	r3, #0
 800a184:	da01      	bge.n	800a18a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800a186:	2300      	movs	r3, #0
 800a188:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800a18a:	79fb      	ldrb	r3, [r7, #7]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	40022000 	.word	0x40022000

0800a19c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800a19c:	b480      	push	{r7}
 800a19e:	af00      	add	r7, sp, #0
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_OPTLOCK) != 0U)
 800a1a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d4 <HAL_FLASH_OB_Unlock+0x38>)
 800a1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00d      	beq.n	800a1c8 <HAL_FLASH_OB_Unlock+0x2c>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800a1ac:	4b09      	ldr	r3, [pc, #36]	@ (800a1d4 <HAL_FLASH_OB_Unlock+0x38>)
 800a1ae:	4a0a      	ldr	r2, [pc, #40]	@ (800a1d8 <HAL_FLASH_OB_Unlock+0x3c>)
 800a1b0:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800a1b2:	4b08      	ldr	r3, [pc, #32]	@ (800a1d4 <HAL_FLASH_OB_Unlock+0x38>)
 800a1b4:	4a09      	ldr	r2, [pc, #36]	@ (800a1dc <HAL_FLASH_OB_Unlock+0x40>)
 800a1b6:	611a      	str	r2, [r3, #16]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_OPTLOCK) != 0U)
 800a1b8:	4b06      	ldr	r3, [pc, #24]	@ (800a1d4 <HAL_FLASH_OB_Unlock+0x38>)
 800a1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <HAL_FLASH_OB_Unlock+0x2c>
    {
      return HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e000      	b.n	800a1ca <HAL_FLASH_OB_Unlock+0x2e>
    }
  }

  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	40022000 	.word	0x40022000
 800a1d8:	08192a3b 	.word	0x08192a3b
 800a1dc:	4c5d6e7f 	.word	0x4c5d6e7f

0800a1e0 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_OPTLOCK);
 800a1e4:	4b09      	ldr	r3, [pc, #36]	@ (800a20c <HAL_FLASH_OB_Lock+0x2c>)
 800a1e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e8:	4a08      	ldr	r2, [pc, #32]	@ (800a20c <HAL_FLASH_OB_Lock+0x2c>)
 800a1ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a1ee:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Verify that the Option Bytes are locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_OPTLOCK) != 0U)
 800a1f0:	4b06      	ldr	r3, [pc, #24]	@ (800a20c <HAL_FLASH_OB_Lock+0x2c>)
 800a1f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d001      	beq.n	800a200 <HAL_FLASH_OB_Lock+0x20>
  {
    return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	e000      	b.n	800a202 <HAL_FLASH_OB_Lock+0x22>
  }

  return HAL_ERROR;
 800a200:	2301      	movs	r3, #1
}
 800a202:	4618      	mov	r0, r3
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	40022000 	.word	0x40022000

0800a210 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800a210:	b480      	push	{r7}
 800a212:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_OBL_LAUNCH);
 800a214:	4b05      	ldr	r3, [pc, #20]	@ (800a22c <HAL_FLASH_OB_Launch+0x1c>)
 800a216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a218:	4a04      	ldr	r2, [pc, #16]	@ (800a22c <HAL_FLASH_OB_Launch+0x1c>)
 800a21a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a21e:	6293      	str	r3, [r2, #40]	@ 0x28

  /* We should not reach here : Option byte launch generates Option byte reset
     so return error */
  return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
}
 800a222:	4618      	mov	r0, r3
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr
 800a22c:	40022000 	.word	0x40022000

0800a230 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY and WDW flags to be reset.
     Even if the FLASH operation fails, the BUSY & WDW flags will be reset, and an error flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 800a238:	f7ff fd34 	bl	8009ca4 <HAL_GetTick>
 800a23c:	4602      	mov	r2, r0
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4413      	add	r3, r2
 800a242:	617b      	str	r3, [r7, #20]
  uint32_t error;
  __IO uint32_t *reg_sr;

  /* Access to SECSR or NSSR registers depends on operation type */
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 800a244:	4b1b      	ldr	r3, [pc, #108]	@ (800a2b4 <FLASH_WaitForLastOperation+0x84>)
 800a246:	613b      	str	r3, [r7, #16]

  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 800a248:	e00b      	b.n	800a262 <FLASH_WaitForLastOperation+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a250:	d007      	beq.n	800a262 <FLASH_WaitForLastOperation+0x32>
    {
      if (HAL_GetTick() >= timeout)
 800a252:	f7ff fd27 	bl	8009ca4 <HAL_GetTick>
 800a256:	4602      	mov	r2, r0
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d801      	bhi.n	800a262 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800a25e:	2303      	movs	r3, #3
 800a260:	e023      	b.n	800a2aa <FLASH_WaitForLastOperation+0x7a>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d1ed      	bne.n	800a24a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH operation error flags */
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	f242 03fa 	movw	r3, #8442	@ 0x20fa
 800a276:	4013      	ands	r3, r2
 800a278:	60fb      	str	r3, [r7, #12]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */

  if (error != 0U)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00a      	beq.n	800a296 <FLASH_WaitForLastOperation+0x66>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800a280:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b8 <FLASH_WaitForLastOperation+0x88>)
 800a282:	685a      	ldr	r2, [r3, #4]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	4313      	orrs	r3, r2
 800a288:	4a0b      	ldr	r2, [pc, #44]	@ (800a2b8 <FLASH_WaitForLastOperation+0x88>)
 800a28a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    (*reg_sr) = error;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e009      	b.n	800a2aa <FLASH_WaitForLastOperation+0x7a>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 0301 	and.w	r3, r3, #1
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d002      	beq.n	800a2a8 <FLASH_WaitForLastOperation+0x78>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_sr) = FLASH_FLAG_EOP;
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3718      	adds	r7, #24
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	40022020 	.word	0x40022020
 800a2b8:	20000878 	.word	0x20000878

0800a2bc <HAL_FLASHEx_OBProgram>:
  *         - after a power reset (BOR reset or exit from Standby/Shutdown modes)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a2c4:	4b37      	ldr	r3, [pc, #220]	@ (800a3a4 <HAL_FLASHEx_OBProgram+0xe8>)
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d101      	bne.n	800a2d0 <HAL_FLASHEx_OBProgram+0x14>
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	e064      	b.n	800a39a <HAL_FLASHEx_OBProgram+0xde>
 800a2d0:	4b34      	ldr	r3, [pc, #208]	@ (800a3a4 <HAL_FLASHEx_OBProgram+0xe8>)
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a2d6:	4b33      	ldr	r3, [pc, #204]	@ (800a3a4 <HAL_FLASHEx_OBProgram+0xe8>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a2dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a2e0:	f7ff ffa6 	bl	800a230 <FLASH_WaitForLastOperation>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a2e8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d151      	bne.n	800a392 <HAL_FLASHEx_OBProgram+0xd6>
  {
    /* Write protection configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f003 0301 	and.w	r3, r3, #1
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d009      	beq.n	800a30e <HAL_FLASHEx_OBProgram+0x52>
    {
      /* Configure of Write protection on the selected area */
      FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset, pOBInit->WRPLock);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6858      	ldr	r0, [r3, #4]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6899      	ldr	r1, [r3, #8]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68da      	ldr	r2, [r3, #12]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	7c1b      	ldrb	r3, [r3, #16]
 800a30a:	f000 f89d 	bl	800a448 <FLASH_OB_WRPConfig>
    }

    /* Read protection configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f003 0302 	and.w	r3, r3, #2
 800a316:	2b00      	cmp	r3, #0
 800a318:	d004      	beq.n	800a324 <HAL_FLASHEx_OBProgram+0x68>
    {
      /* Configure the Read protection level */
      FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	695b      	ldr	r3, [r3, #20]
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 f8d8 	bl	800a4d4 <FLASH_OB_RDPConfig>
    }

    /* Read protection key configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_RDPKEY) != 0U)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d008      	beq.n	800a342 <HAL_FLASHEx_OBProgram+0x86>
    {
      /* Configure the Read protection key */
      FLASH_OB_RDPKeyConfig(pOBInit->RDPKeyType, pOBInit->RDPKey1, pOBInit->RDPKey2);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a33c:	461a      	mov	r2, r3
 800a33e:	f000 f8dd 	bl	800a4fc <FLASH_OB_RDPKeyConfig>
    }

    /* User Configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 0304 	and.w	r3, r3, #4
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d007      	beq.n	800a35e <HAL_FLASHEx_OBProgram+0xa2>
    {
      /* Configure the user option bytes */
      FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	699a      	ldr	r2, [r3, #24]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	69db      	ldr	r3, [r3, #28]
 800a356:	4619      	mov	r1, r3
 800a358:	4610      	mov	r0, r2
 800a35a:	f000 f8ed 	bl	800a538 <FLASH_OB_UserConfig>
      FLASH_OB_BootLockConfig(pOBInit->BootLock);
    }
#endif /* __ARM_FEATURE_CMSE */

    /* Boot address configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_BOOTADDR) != 0U)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 0308 	and.w	r3, r3, #8
 800a366:	2b00      	cmp	r3, #0
 800a368:	d007      	beq.n	800a37a <HAL_FLASHEx_OBProgram+0xbe>
    {
      /* Configure the boot address */
      FLASH_OB_BootAddrConfig(pOBInit->BootAddrConfig, pOBInit->BootAddr);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1a      	ldr	r2, [r3, #32]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a372:	4619      	mov	r1, r3
 800a374:	4610      	mov	r0, r2
 800a376:	f000 fa35 	bl	800a7e4 <FLASH_OB_BootAddrConfig>
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->NSCR, FLASH_NSCR_OPTSTRT);
 800a37a:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a8 <HAL_FLASHEx_OBProgram+0xec>)
 800a37c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a37e:	4a0a      	ldr	r2, [pc, #40]	@ (800a3a8 <HAL_FLASHEx_OBProgram+0xec>)
 800a380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a384:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a386:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a38a:	f7ff ff51 	bl	800a230 <FLASH_WaitForLastOperation>
 800a38e:	4603      	mov	r3, r0
 800a390:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a392:	4b04      	ldr	r3, [pc, #16]	@ (800a3a4 <HAL_FLASHEx_OBProgram+0xe8>)
 800a394:	2200      	movs	r2, #0
 800a396:	701a      	strb	r2, [r3, #0]

  return status;
 800a398:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	20000878 	.word	0x20000878
 800a3a8:	40022000 	.word	0x40022000

0800a3ac <HAL_FLASHEx_OBGetConfig>:
  *         Boot Address, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2206      	movs	r2, #6
 800a3b8:	601a      	str	r2, [r3, #0]

  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d00b      	beq.n	800a3da <HAL_FLASHEx_OBGetConfig+0x2e>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	d007      	beq.n	800a3da <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800a3ce:	2b04      	cmp	r3, #4
 800a3d0:	d003      	beq.n	800a3da <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	2b08      	cmp	r3, #8
 800a3d8:	d111      	bne.n	800a3fe <HAL_FLASHEx_OBGetConfig+0x52>
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f043 0201 	orr.w	r2, r3, #1
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset), &(pOBInit->WRPLock));
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6858      	ldr	r0, [r3, #4]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f103 0108 	add.w	r1, r3, #8
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f103 020c 	add.w	r2, r3, #12
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	3310      	adds	r3, #16
 800a3fa:	f000 fa0d 	bl	800a818 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800a3fe:	f000 fa7d 	bl	800a8fc <FLASH_OB_GetRDP>
 800a402:	4602      	mov	r2, r0
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	615a      	str	r2, [r3, #20]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800a408:	f000 fa94 	bl	800a934 <FLASH_OB_GetUser>
 800a40c:	4602      	mov	r2, r0
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	61da      	str	r2, [r3, #28]
  /* Get the value of the selected boot address */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((pOBInit->BootAddrConfig == OB_BOOTADDR_NS0) || (pOBInit->BootAddrConfig == OB_BOOTADDR_NS1) ||
      (pOBInit->BootAddrConfig == OB_BOOTADDR_SEC0))
#else
  if ((pOBInit->BootAddrConfig == OB_BOOTADDR_NS0) || (pOBInit->BootAddrConfig == OB_BOOTADDR_NS1))
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	2b01      	cmp	r3, #1
 800a418:	d003      	beq.n	800a422 <HAL_FLASHEx_OBGetConfig+0x76>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a1b      	ldr	r3, [r3, #32]
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d10d      	bne.n	800a43e <HAL_FLASHEx_OBGetConfig+0x92>
#endif /* __ARM_FEATURE_CMSE */
  {
    pOBInit->OptionType |= OPTIONBYTE_BOOTADDR;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f043 0208 	orr.w	r2, r3, #8
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	601a      	str	r2, [r3, #0]
    FLASH_OB_GetBootAddr(pOBInit->BootAddrConfig, &(pOBInit->BootAddr));
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a1a      	ldr	r2, [r3, #32]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	3324      	adds	r3, #36	@ 0x24
 800a436:	4619      	mov	r1, r3
 800a438:	4610      	mov	r0, r2
 800a43a:	f000 fa8f 	bl	800a95c <FLASH_OB_GetBootAddr>
  }
}
 800a43e:	bf00      	nop
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
	...

0800a448 <FLASH_OB_WRPConfig>:
  *
  * @retval None
  */
static void FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRPEndOffset,
                               FunctionalState WRPLock)
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	607a      	str	r2, [r7, #4]
 800a454:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRPEndOffset));
  assert_param(IS_FUNCTIONAL_STATE(WRPLock));

  /* Configure the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d10a      	bne.n	800a472 <FLASH_OB_WRPConfig+0x2a>
  {
    FLASH->WRP1AR = (((uint32_t)(~WRPLock) << FLASH_WRP1AR_UNLOCK_Pos)       | \
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	43db      	mvns	r3, r3
 800a460:	07da      	lsls	r2, r3, #31
                     (WRPEndOffset << FLASH_WRP1AR_WRP1A_PEND_Pos) | \
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	041b      	lsls	r3, r3, #16
    FLASH->WRP1AR = (((uint32_t)(~WRPLock) << FLASH_WRP1AR_UNLOCK_Pos)       | \
 800a466:	431a      	orrs	r2, r3
 800a468:	4919      	ldr	r1, [pc, #100]	@ (800a4d0 <FLASH_OB_WRPConfig+0x88>)
                     (WRPEndOffset << FLASH_WRP1AR_WRP1A_PEND_Pos) | \
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	4313      	orrs	r3, r2
    FLASH->WRP1AR = (((uint32_t)(~WRPLock) << FLASH_WRP1AR_UNLOCK_Pos)       | \
 800a46e:	658b      	str	r3, [r1, #88]	@ 0x58
  }
  else
  {
    /* Empty statement (to be compliant MISRA 15.7) */
  }
}
 800a470:	e028      	b.n	800a4c4 <FLASH_OB_WRPConfig+0x7c>
  else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2b02      	cmp	r3, #2
 800a476:	d10a      	bne.n	800a48e <FLASH_OB_WRPConfig+0x46>
    FLASH->WRP1BR = (((uint32_t)(~WRPLock) << FLASH_WRP1BR_UNLOCK_Pos)       | \
 800a478:	78fb      	ldrb	r3, [r7, #3]
 800a47a:	43db      	mvns	r3, r3
 800a47c:	07da      	lsls	r2, r3, #31
                     (WRPEndOffset << FLASH_WRP1BR_WRP1B_PEND_Pos) | \
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	041b      	lsls	r3, r3, #16
    FLASH->WRP1BR = (((uint32_t)(~WRPLock) << FLASH_WRP1BR_UNLOCK_Pos)       | \
 800a482:	431a      	orrs	r2, r3
 800a484:	4912      	ldr	r1, [pc, #72]	@ (800a4d0 <FLASH_OB_WRPConfig+0x88>)
                     (WRPEndOffset << FLASH_WRP1BR_WRP1B_PEND_Pos) | \
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	4313      	orrs	r3, r2
    FLASH->WRP1BR = (((uint32_t)(~WRPLock) << FLASH_WRP1BR_UNLOCK_Pos)       | \
 800a48a:	65cb      	str	r3, [r1, #92]	@ 0x5c
}
 800a48c:	e01a      	b.n	800a4c4 <FLASH_OB_WRPConfig+0x7c>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2b04      	cmp	r3, #4
 800a492:	d10a      	bne.n	800a4aa <FLASH_OB_WRPConfig+0x62>
    FLASH->WRP2AR = (((uint32_t)(~WRPLock) << FLASH_WRP2AR_UNLOCK_Pos)       | \
 800a494:	78fb      	ldrb	r3, [r7, #3]
 800a496:	43db      	mvns	r3, r3
 800a498:	07da      	lsls	r2, r3, #31
                     (WRPEndOffset << FLASH_WRP2AR_WRP2A_PEND_Pos) | \
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	041b      	lsls	r3, r3, #16
    FLASH->WRP2AR = (((uint32_t)(~WRPLock) << FLASH_WRP2AR_UNLOCK_Pos)       | \
 800a49e:	431a      	orrs	r2, r3
 800a4a0:	490b      	ldr	r1, [pc, #44]	@ (800a4d0 <FLASH_OB_WRPConfig+0x88>)
                     (WRPEndOffset << FLASH_WRP2AR_WRP2A_PEND_Pos) | \
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	4313      	orrs	r3, r2
    FLASH->WRP2AR = (((uint32_t)(~WRPLock) << FLASH_WRP2AR_UNLOCK_Pos)       | \
 800a4a6:	668b      	str	r3, [r1, #104]	@ 0x68
}
 800a4a8:	e00c      	b.n	800a4c4 <FLASH_OB_WRPConfig+0x7c>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2b08      	cmp	r3, #8
 800a4ae:	d109      	bne.n	800a4c4 <FLASH_OB_WRPConfig+0x7c>
    FLASH->WRP2BR = (((uint32_t)(~WRPLock) << FLASH_WRP2BR_UNLOCK_Pos)       | \
 800a4b0:	78fb      	ldrb	r3, [r7, #3]
 800a4b2:	43db      	mvns	r3, r3
 800a4b4:	07da      	lsls	r2, r3, #31
                     (WRPEndOffset << FLASH_WRP2BR_WRP2B_PEND_Pos) | \
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	041b      	lsls	r3, r3, #16
    FLASH->WRP2BR = (((uint32_t)(~WRPLock) << FLASH_WRP2BR_UNLOCK_Pos)       | \
 800a4ba:	431a      	orrs	r2, r3
 800a4bc:	4904      	ldr	r1, [pc, #16]	@ (800a4d0 <FLASH_OB_WRPConfig+0x88>)
                     (WRPEndOffset << FLASH_WRP2BR_WRP2B_PEND_Pos) | \
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	4313      	orrs	r3, r2
    FLASH->WRP2BR = (((uint32_t)(~WRPLock) << FLASH_WRP2BR_UNLOCK_Pos)       | \
 800a4c2:	66cb      	str	r3, [r1, #108]	@ 0x6c
}
 800a4c4:	bf00      	nop
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	40022000 	.word	0x40022000

0800a4d4 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval None
  */
static void FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 800a4dc:	4b06      	ldr	r3, [pc, #24]	@ (800a4f8 <FLASH_OB_RDPConfig+0x24>)
 800a4de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4e0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a4e4:	4904      	ldr	r1, [pc, #16]	@ (800a4f8 <FLASH_OB_RDPConfig+0x24>)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	640b      	str	r3, [r1, #64]	@ 0x40
}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr
 800a4f8:	40022000 	.word	0x40022000

0800a4fc <FLASH_OB_RDPKeyConfig>:
  * @param  RDPKey1 specifies the RDP key 1.
  * @param  RDPKey2 specifies the RDP key 2.
  * @retval None
  */
static void FLASH_OB_RDPKeyConfig(uint32_t RDPKeyType, uint32_t RDPKey1, uint32_t RDPKey2)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_KEY_TYPE(RDPKeyType));

  /* Configure the RDP OEM key */
  if (RDPKeyType == OB_RDP_KEY_OEM1)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d106      	bne.n	800a51c <FLASH_OB_RDPKeyConfig+0x20>
  {
    WRITE_REG(FLASH->OEM1KEYR1, RDPKey1);
 800a50e:	4a09      	ldr	r2, [pc, #36]	@ (800a534 <FLASH_OB_RDPKeyConfig+0x38>)
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	6713      	str	r3, [r2, #112]	@ 0x70
    WRITE_REG(FLASH->OEM1KEYR2, RDPKey2);
 800a514:	4a07      	ldr	r2, [pc, #28]	@ (800a534 <FLASH_OB_RDPKeyConfig+0x38>)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6753      	str	r3, [r2, #116]	@ 0x74
  else
  {
    WRITE_REG(FLASH->OEM2KEYR1, RDPKey1);
    WRITE_REG(FLASH->OEM2KEYR2, RDPKey2);
  }
}
 800a51a:	e005      	b.n	800a528 <FLASH_OB_RDPKeyConfig+0x2c>
    WRITE_REG(FLASH->OEM2KEYR1, RDPKey1);
 800a51c:	4a05      	ldr	r2, [pc, #20]	@ (800a534 <FLASH_OB_RDPKeyConfig+0x38>)
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	6793      	str	r3, [r2, #120]	@ 0x78
    WRITE_REG(FLASH->OEM2KEYR2, RDPKey2);
 800a522:	4a04      	ldr	r2, [pc, #16]	@ (800a534 <FLASH_OB_RDPKeyConfig+0x38>)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	67d3      	str	r3, [r2, #124]	@ 0x7c
}
 800a528:	bf00      	nop
 800a52a:	3714      	adds	r7, #20
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	40022000 	.word	0x40022000

0800a538 <FLASH_OB_UserConfig>:
  *         @ref FLASH_OB_USER_PA15_PUPEN, @ref FLASH_OB_USER_IO_VDD_HSLV,
  *         @ref FLASH_OB_USER_IO_VDDIO2_HSLV and @ref OB_USER_TZEN
  * @retval None
  */
static void FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 800a542:	2300      	movs	r3, #0
 800a544:	60fb      	str	r3, [r7, #12]
  uint32_t optr_reg_mask = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  if ((UserType & OB_USER_BOR_LEV) != 0U)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	2b00      	cmp	r3, #0
 800a552:	d009      	beq.n	800a568 <FLASH_OB_UserConfig+0x30>
  {
    /* BOR level option byte should be modified */
    assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

    /* Set value and mask for BOR level option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a566:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_NRST_STOP) != 0U)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f003 0302 	and.w	r3, r3, #2
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d009      	beq.n	800a586 <FLASH_OB_UserConfig+0x4e>
  {
    /* nRST_STOP option byte should be modified */
    assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

    /* Set value and mask for nRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a584:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_NRST_STDBY) != 0U)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f003 0304 	and.w	r3, r3, #4
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d009      	beq.n	800a5a4 <FLASH_OB_UserConfig+0x6c>
  {
    /* nRST_STDBY option byte should be modified */
    assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

    /* Set value and mask for nRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	4313      	orrs	r3, r2
 800a59a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a5a2:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_NRST_SHDW) != 0U)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f003 0308 	and.w	r3, r3, #8
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d009      	beq.n	800a5c2 <FLASH_OB_UserConfig+0x8a>
  {
    /* nRST_SHDW option byte should be modified */
    assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

    /* Set value and mask for nRST_SHDW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a5c0:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_SRAM_RST) != 0U)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f003 0310 	and.w	r3, r3, #16
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d009      	beq.n	800a5e0 <FLASH_OB_UserConfig+0xa8>
  {
    /* SRAM_RST option byte should be modified */
    assert_param(IS_OB_USER_SRAM_RST(UserConfig & FLASH_OPTR_SRAM_RST));

    /* Set value and mask for SRAM_RST option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM_RST);
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_SRAM_RST;
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5de:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_IWDG_SW) != 0U)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f003 0320 	and.w	r3, r3, #32
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d009      	beq.n	800a5fe <FLASH_OB_UserConfig+0xc6>
  {
    /* IWDG_SW option byte should be modified */
    assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

    /* Set value and mask for IWDG_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5fc:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_IWDG_STOP) != 0U)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a604:	2b00      	cmp	r3, #0
 800a606:	d009      	beq.n	800a61c <FLASH_OB_UserConfig+0xe4>
  {
    /* IWDG_STOP option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

    /* Set value and mask for IWDG_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	4313      	orrs	r3, r2
 800a612:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a61a:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_IWDG_STDBY) != 0U)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a622:	2b00      	cmp	r3, #0
 800a624:	d009      	beq.n	800a63a <FLASH_OB_UserConfig+0x102>
  {
    /* IWDG_STDBY option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

    /* Set value and mask for IWDG_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a62c:	68fa      	ldr	r2, [r7, #12]
 800a62e:	4313      	orrs	r3, r2
 800a630:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a638:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_WWDG_SW) != 0U)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a640:	2b00      	cmp	r3, #0
 800a642:	d009      	beq.n	800a658 <FLASH_OB_UserConfig+0x120>
  {
    /* WWDG_SW option byte should be modified */
    assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

    /* Set value and mask for WWDG_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a656:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_SWAP_BANK) != 0U)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d009      	beq.n	800a676 <FLASH_OB_UserConfig+0x13e>
  {
    /* SWAP_BANK option byte should be modified */
    assert_param(IS_OB_USER_SWAP_BANK(UserConfig & FLASH_OPTR_SWAP_BANK));

    /* Set value and mask for SWAP_BANK option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_SWAP_BANK);
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_SWAP_BANK;
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a674:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_DUALBANK) != 0U)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d009      	beq.n	800a694 <FLASH_OB_UserConfig+0x15c>
  {
    /* DUALBANK option byte should be modified */
    assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

    /* Set value and mask for DUALBANK option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	4313      	orrs	r3, r2
 800a68a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_DUALBANK;
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a692:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_BKPRAM_ECC) != 0U)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d009      	beq.n	800a6b2 <FLASH_OB_UserConfig+0x17a>
  {
    /* BKPRAM_ECC option byte should be modified */
    assert_param(IS_OB_USER_BKPRAM_ECC(UserConfig & FLASH_OPTR_BKPRAM_ECC));

    /* Set value and mask for BKPRAM_ECC option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_BKPRAM_ECC);
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_BKPRAM_ECC;
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a6b0:	60bb      	str	r3, [r7, #8]
  }
#if defined(SRAM3_BASE)
  if ((UserType & OB_USER_SRAM3_ECC) != 0U)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d009      	beq.n	800a6d0 <FLASH_OB_UserConfig+0x198>
  {
    /* SRAM3_ECC option byte should be modified */
    assert_param(IS_OB_USER_SRAM3_ECC(UserConfig & FLASH_OPTR_SRAM3_ECC));

    /* Set value and mask for SRAM3_ECC option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM3_ECC);
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6c2:	68fa      	ldr	r2, [r7, #12]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_SRAM3_ECC;
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a6ce:	60bb      	str	r3, [r7, #8]
  }
#endif /* SRAM3_BASE */
  if ((UserType & OB_USER_SRAM2_ECC) != 0U)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d009      	beq.n	800a6ee <FLASH_OB_UserConfig+0x1b6>
  {
    /* SRAM2_ECC option byte should be modified */
    assert_param(IS_OB_USER_SRAM2_ECC(UserConfig & FLASH_OPTR_SRAM2_ECC));

    /* Set value and mask for SRAM2_ECC option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_ECC);
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_SRAM2_ECC;
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a6ec:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_SRAM2_RST) != 0U)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d009      	beq.n	800a70c <FLASH_OB_UserConfig+0x1d4>
  {
    /* SRAM2_RST option byte should be modified */
    assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

    /* Set value and mask for SRAM2_RST option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	4313      	orrs	r3, r2
 800a702:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a70a:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_NSWBOOT0) != 0U)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a712:	2b00      	cmp	r3, #0
 800a714:	d009      	beq.n	800a72a <FLASH_OB_UserConfig+0x1f2>
  {
    /* nSWBOOT0 option byte should be modified */
    assert_param(IS_OB_USER_SWBOOT0(UserConfig & FLASH_OPTR_nSWBOOT0));

    /* Set value and mask for nSWBOOT0 option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_nSWBOOT0);
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	4313      	orrs	r3, r2
 800a720:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_nSWBOOT0;
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a728:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_NBOOT0) != 0U)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a730:	2b00      	cmp	r3, #0
 800a732:	d009      	beq.n	800a748 <FLASH_OB_UserConfig+0x210>
  {
    /* nBOOT0 option byte should be modified */
    assert_param(IS_OB_USER_BOOT0(UserConfig & FLASH_OPTR_nBOOT0));

    /* Set value and mask for nBOOT0 option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT0);
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_nBOOT0;
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a746:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_PA15_PUPEN) != 0U)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d009      	beq.n	800a766 <FLASH_OB_UserConfig+0x22e>
  {
    /* PA15_PUPEN option byte should be modified */
    assert_param(IS_OB_USER_PA15_PUPEN(UserConfig & FLASH_OPTR_PA15_PUPEN));

    /* Set value and mask for nBOOT0 option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_PA15_PUPEN);
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	4313      	orrs	r3, r2
 800a75c:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_PA15_PUPEN;
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a764:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_IO_VDD_HSLV) != 0U)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d009      	beq.n	800a784 <FLASH_OB_UserConfig+0x24c>
  {
    /* IO_VDD_HSLV option byte should be modified */
    assert_param(IS_OB_USER_IO_VDD_HSLV(UserConfig & FLASH_OPTR_IO_VDD_HSLV));

    /* Set value and mask for IO_VDD_HSLV option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_IO_VDD_HSLV);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	4313      	orrs	r3, r2
 800a77a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_IO_VDD_HSLV;
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a782:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_IO_VDDIO2_HSLV) != 0U)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d009      	beq.n	800a7a2 <FLASH_OB_UserConfig+0x26a>
  {
    /* IO_VDDIO2_HSLV option byte should be modified */
    assert_param(IS_OB_USER_IO_VDDIO2_HSLV(UserConfig & FLASH_OPTR_IO_VDDIO2_HSLV));

    /* Set value and mask for IO_VDDIO2_HSLV option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_IO_VDDIO2_HSLV);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	4313      	orrs	r3, r2
 800a798:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_IO_VDDIO2_HSLV;
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a7a0:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_TZEN) != 0U)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d009      	beq.n	800a7c0 <FLASH_OB_UserConfig+0x288>
  {
    /* TZEN option byte should be modified */
    assert_param(IS_OB_USER_TZEN(UserConfig & FLASH_OPTR_TZEN));

    /* Set value and mask for TZEN option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_TZEN);
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_TZEN;
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a7be:	60bb      	str	r3, [r7, #8]
  }

  /* Configure the option bytes register */
  MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 800a7c0:	4b07      	ldr	r3, [pc, #28]	@ (800a7e0 <FLASH_OB_UserConfig+0x2a8>)
 800a7c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	43db      	mvns	r3, r3
 800a7c8:	401a      	ands	r2, r3
 800a7ca:	4905      	ldr	r1, [pc, #20]	@ (800a7e0 <FLASH_OB_UserConfig+0x2a8>)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	640b      	str	r3, [r1, #64]	@ 0x40
}
 800a7d2:	bf00      	nop
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	40022000 	.word	0x40022000

0800a7e4 <FLASH_OB_BootAddrConfig>:
  *          This parameter can be page number between 0 and 0xFFFFFF00
  *
  * @retval None
  */
static void FLASH_OB_BootAddrConfig(uint32_t BootAddrConfig, uint32_t BootAddr)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_BOOTADDR_CONFIG(BootAddrConfig));

  if (BootAddrConfig == OB_BOOTADDR_NS0)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d103      	bne.n	800a7fc <FLASH_OB_BootAddrConfig+0x18>
  {
    FLASH->NSBOOTADD0R = BootAddr;
 800a7f4:	4a07      	ldr	r2, [pc, #28]	@ (800a814 <FLASH_OB_BootAddrConfig+0x30>)
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	6453      	str	r3, [r2, #68]	@ 0x44
#endif /* __ARM_FEATURE_CMSE */
  else
  {
    /* Empty statement (to be compliant MISRA 15.7) */
  }
}
 800a7fa:	e005      	b.n	800a808 <FLASH_OB_BootAddrConfig+0x24>
  else if (BootAddrConfig == OB_BOOTADDR_NS1)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d102      	bne.n	800a808 <FLASH_OB_BootAddrConfig+0x24>
    FLASH->NSBOOTADD1R = BootAddr;
 800a802:	4a04      	ldr	r2, [pc, #16]	@ (800a814 <FLASH_OB_BootAddrConfig+0x30>)
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800a808:	bf00      	nop
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr
 800a814:	40022000 	.word	0x40022000

0800a818 <FLASH_OB_GetWRP>:
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRPEndOffset,
                            FunctionalState *WRPLock)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
 800a824:	603b      	str	r3, [r7, #0]
  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d115      	bne.n	800a858 <FLASH_OB_GetWRP+0x40>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_PSTRT);
 800a82c:	4b32      	ldr	r3, [pc, #200]	@ (800a8f8 <FLASH_OB_GetWRP+0xe0>)
 800a82e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a830:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	601a      	str	r2, [r3, #0]
    *WRPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_PEND) >> FLASH_WRP1AR_WRP1A_PEND_Pos);
 800a838:	4b2f      	ldr	r3, [pc, #188]	@ (800a8f8 <FLASH_OB_GetWRP+0xe0>)
 800a83a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a83c:	0c1b      	lsrs	r3, r3, #16
 800a83e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	601a      	str	r2, [r3, #0]
    *WRPLock = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_UNLOCK) != 0U) ? DISABLE : ENABLE;
 800a846:	4b2c      	ldr	r3, [pc, #176]	@ (800a8f8 <FLASH_OB_GetWRP+0xe0>)
 800a848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a84a:	43db      	mvns	r3, r3
 800a84c:	0fdb      	lsrs	r3, r3, #31
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	461a      	mov	r2, r3
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* Empty statement (to be compliant MISRA 15.7) */
  }
}
 800a856:	e049      	b.n	800a8ec <FLASH_OB_GetWRP+0xd4>
  else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d115      	bne.n	800a88a <FLASH_OB_GetWRP+0x72>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_PSTRT);
 800a85e:	4b26      	ldr	r3, [pc, #152]	@ (800a8f8 <FLASH_OB_GetWRP+0xe0>)
 800a860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a862:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	601a      	str	r2, [r3, #0]
    *WRPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_PEND) >> FLASH_WRP1BR_WRP1B_PEND_Pos);
 800a86a:	4b23      	ldr	r3, [pc, #140]	@ (800a8f8 <FLASH_OB_GetWRP+0xe0>)
 800a86c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a86e:	0c1b      	lsrs	r3, r3, #16
 800a870:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	601a      	str	r2, [r3, #0]
    *WRPLock = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_UNLOCK) != 0U) ? DISABLE : ENABLE;
 800a878:	4b1f      	ldr	r3, [pc, #124]	@ (800a8f8 <FLASH_OB_GetWRP+0xe0>)
 800a87a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a87c:	43db      	mvns	r3, r3
 800a87e:	0fdb      	lsrs	r3, r3, #31
 800a880:	b2db      	uxtb	r3, r3
 800a882:	461a      	mov	r2, r3
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	701a      	strb	r2, [r3, #0]
}
 800a888:	e030      	b.n	800a8ec <FLASH_OB_GetWRP+0xd4>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2b04      	cmp	r3, #4
 800a88e:	d115      	bne.n	800a8bc <FLASH_OB_GetWRP+0xa4>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_PSTRT);
 800a890:	4b19      	ldr	r3, [pc, #100]	@ (800a8f8 <FLASH_OB_GetWRP+0xe0>)
 800a892:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a894:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	601a      	str	r2, [r3, #0]
    *WRPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_PEND) >> FLASH_WRP2AR_WRP2A_PEND_Pos);
 800a89c:	4b16      	ldr	r3, [pc, #88]	@ (800a8f8 <FLASH_OB_GetWRP+0xe0>)
 800a89e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8a0:	0c1b      	lsrs	r3, r3, #16
 800a8a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	601a      	str	r2, [r3, #0]
    *WRPLock = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_UNLOCK) != 0U) ? DISABLE : ENABLE;
 800a8aa:	4b13      	ldr	r3, [pc, #76]	@ (800a8f8 <FLASH_OB_GetWRP+0xe0>)
 800a8ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8ae:	43db      	mvns	r3, r3
 800a8b0:	0fdb      	lsrs	r3, r3, #31
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	701a      	strb	r2, [r3, #0]
}
 800a8ba:	e017      	b.n	800a8ec <FLASH_OB_GetWRP+0xd4>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2b08      	cmp	r3, #8
 800a8c0:	d114      	bne.n	800a8ec <FLASH_OB_GetWRP+0xd4>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_PSTRT);
 800a8c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a8f8 <FLASH_OB_GetWRP+0xe0>)
 800a8c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	601a      	str	r2, [r3, #0]
    *WRPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_PEND) >> FLASH_WRP2BR_WRP2B_PEND_Pos);
 800a8ce:	4b0a      	ldr	r3, [pc, #40]	@ (800a8f8 <FLASH_OB_GetWRP+0xe0>)
 800a8d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8d2:	0c1b      	lsrs	r3, r3, #16
 800a8d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	601a      	str	r2, [r3, #0]
    *WRPLock = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_UNLOCK) != 0U) ? DISABLE : ENABLE;
 800a8dc:	4b06      	ldr	r3, [pc, #24]	@ (800a8f8 <FLASH_OB_GetWRP+0xe0>)
 800a8de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8e0:	43db      	mvns	r3, r3
 800a8e2:	0fdb      	lsrs	r3, r3, #31
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	701a      	strb	r2, [r3, #0]
}
 800a8ec:	bf00      	nop
 800a8ee:	3714      	adds	r7, #20
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	40022000 	.word	0x40022000

0800a8fc <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0_5: No debug access to secure area
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800a902:	4b0b      	ldr	r3, [pc, #44]	@ (800a930 <FLASH_OB_GetRDP+0x34>)
 800a904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a906:	b2db      	uxtb	r3, r3
 800a908:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_0_5) && (rdp_level != OB_RDP_LEVEL_2))
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2baa      	cmp	r3, #170	@ 0xaa
 800a90e:	d007      	beq.n	800a920 <FLASH_OB_GetRDP+0x24>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b55      	cmp	r3, #85	@ 0x55
 800a914:	d004      	beq.n	800a920 <FLASH_OB_GetRDP+0x24>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2bcc      	cmp	r3, #204	@ 0xcc
 800a91a:	d001      	beq.n	800a920 <FLASH_OB_GetRDP+0x24>
  {
    return (OB_RDP_LEVEL_1);
 800a91c:	23bb      	movs	r3, #187	@ 0xbb
 800a91e:	e000      	b.n	800a922 <FLASH_OB_GetRDP+0x26>
  }
  else
  {
    return rdp_level;
 800a920:	687b      	ldr	r3, [r7, #4]
  }
}
 800a922:	4618      	mov	r0, r3
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	40022000 	.word	0x40022000

0800a934 <FLASH_OB_GetUser>:
  *         @ref FLASH_OB_USER_nSWBOOT0, @ref FLASH_OB_USER_nBOOT0,
  *         @ref FLASH_OB_USER_PA15_PUPEN, @ref FLASH_OB_USER_IO_VDD_HSLV,
  *         @ref FLASH_OB_USER_IO_VDDIO2_HSLV and @ref OB_USER_TZEN
  */
static uint32_t FLASH_OB_GetUser(void)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 800a93a:	4b07      	ldr	r3, [pc, #28]	@ (800a958 <FLASH_OB_GetUser+0x24>)
 800a93c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a93e:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a946:	607b      	str	r3, [r7, #4]

  return user_config;
 800a948:	687b      	ldr	r3, [r7, #4]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	40022000 	.word	0x40022000

0800a95c <FLASH_OB_GetBootAddr>:
  * @param[out]  BootAddr specifies the boot address value
  *
  * @retval None
  */
static void FLASH_OB_GetBootAddr(uint32_t BootAddrConfig, uint32_t *BootAddr)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  if (BootAddrConfig == OB_BOOTADDR_NS0)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d106      	bne.n	800a97a <FLASH_OB_GetBootAddr+0x1e>
  {
    *BootAddr = (FLASH->NSBOOTADD0R & FLASH_NSBOOTADD0R_NSBOOTADD0);
 800a96c:	4b0a      	ldr	r3, [pc, #40]	@ (800a998 <FLASH_OB_GetBootAddr+0x3c>)
 800a96e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a970:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	601a      	str	r2, [r3, #0]
#endif /* __ARM_FEATURE_CMSE */
  else
  {
    /* Empty statement (to be compliant MISRA 15.7) */
  }
}
 800a978:	e008      	b.n	800a98c <FLASH_OB_GetBootAddr+0x30>
  else if (BootAddrConfig == OB_BOOTADDR_NS1)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	d105      	bne.n	800a98c <FLASH_OB_GetBootAddr+0x30>
    *BootAddr = (FLASH->NSBOOTADD1R & FLASH_NSBOOTADD1R_NSBOOTADD1);
 800a980:	4b05      	ldr	r3, [pc, #20]	@ (800a998 <FLASH_OB_GetBootAddr+0x3c>)
 800a982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a984:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	601a      	str	r2, [r3, #0]
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr
 800a998:	40022000 	.word	0x40022000

0800a99c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b089      	sub	sp, #36	@ 0x24
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800a9ae:	e1ba      	b.n	800ad26 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	2101      	movs	r1, #1
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a9bc:	4013      	ands	r3, r2
 800a9be:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	f000 81aa 	beq.w	800ad20 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	4a55      	ldr	r2, [pc, #340]	@ (800ab24 <HAL_GPIO_Init+0x188>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d15d      	bne.n	800aa90 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800a9da:	2201      	movs	r2, #1
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e2:	43db      	mvns	r3, r3
 800a9e4:	69fa      	ldr	r2, [r7, #28]
 800a9e6:	4013      	ands	r3, r2
 800a9e8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	f003 0201 	and.w	r2, r3, #1
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f8:	69fa      	ldr	r2, [r7, #28]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	69fa      	ldr	r2, [r7, #28]
 800aa02:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800aa04:	4a48      	ldr	r2, [pc, #288]	@ (800ab28 <HAL_GPIO_Init+0x18c>)
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa0c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800aa0e:	4a46      	ldr	r2, [pc, #280]	@ (800ab28 <HAL_GPIO_Init+0x18c>)
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	00db      	lsls	r3, r3, #3
 800aa14:	4413      	add	r3, r2
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	08da      	lsrs	r2, r3, #3
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	3208      	adds	r2, #8
 800aa22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa26:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	f003 0307 	and.w	r3, r3, #7
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	220f      	movs	r2, #15
 800aa32:	fa02 f303 	lsl.w	r3, r2, r3
 800aa36:	43db      	mvns	r3, r3
 800aa38:	69fa      	ldr	r2, [r7, #28]
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	f003 0307 	and.w	r3, r3, #7
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	220b      	movs	r2, #11
 800aa48:	fa02 f303 	lsl.w	r3, r2, r3
 800aa4c:	69fa      	ldr	r2, [r7, #28]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	08da      	lsrs	r2, r3, #3
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	3208      	adds	r2, #8
 800aa5a:	69f9      	ldr	r1, [r7, #28]
 800aa5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	005b      	lsls	r3, r3, #1
 800aa6a:	2203      	movs	r2, #3
 800aa6c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa70:	43db      	mvns	r3, r3
 800aa72:	69fa      	ldr	r2, [r7, #28]
 800aa74:	4013      	ands	r3, r2
 800aa76:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	005b      	lsls	r3, r3, #1
 800aa7c:	2202      	movs	r2, #2
 800aa7e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa82:	69fa      	ldr	r2, [r7, #28]
 800aa84:	4313      	orrs	r3, r2
 800aa86:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	69fa      	ldr	r2, [r7, #28]
 800aa8c:	601a      	str	r2, [r3, #0]
 800aa8e:	e067      	b.n	800ab60 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d003      	beq.n	800aaa0 <HAL_GPIO_Init+0x104>
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	2b12      	cmp	r3, #18
 800aa9e:	d145      	bne.n	800ab2c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	08da      	lsrs	r2, r3, #3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	3208      	adds	r2, #8
 800aaa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	f003 0307 	and.w	r3, r3, #7
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	220f      	movs	r2, #15
 800aab8:	fa02 f303 	lsl.w	r3, r2, r3
 800aabc:	43db      	mvns	r3, r3
 800aabe:	69fa      	ldr	r2, [r7, #28]
 800aac0:	4013      	ands	r3, r2
 800aac2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	f003 020f 	and.w	r2, r3, #15
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	f003 0307 	and.w	r3, r3, #7
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	fa02 f303 	lsl.w	r3, r2, r3
 800aad8:	69fa      	ldr	r2, [r7, #28]
 800aada:	4313      	orrs	r3, r2
 800aadc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	08da      	lsrs	r2, r3, #3
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	3208      	adds	r2, #8
 800aae6:	69f9      	ldr	r1, [r7, #28]
 800aae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	005b      	lsls	r3, r3, #1
 800aaf6:	2203      	movs	r2, #3
 800aaf8:	fa02 f303 	lsl.w	r3, r2, r3
 800aafc:	43db      	mvns	r3, r3
 800aafe:	69fa      	ldr	r2, [r7, #28]
 800ab00:	4013      	ands	r3, r2
 800ab02:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	f003 0203 	and.w	r2, r3, #3
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	005b      	lsls	r3, r3, #1
 800ab10:	fa02 f303 	lsl.w	r3, r2, r3
 800ab14:	69fa      	ldr	r2, [r7, #28]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	69fa      	ldr	r2, [r7, #28]
 800ab1e:	601a      	str	r2, [r3, #0]
 800ab20:	e01e      	b.n	800ab60 <HAL_GPIO_Init+0x1c4>
 800ab22:	bf00      	nop
 800ab24:	46020000 	.word	0x46020000
 800ab28:	080364dc 	.word	0x080364dc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	005b      	lsls	r3, r3, #1
 800ab36:	2203      	movs	r2, #3
 800ab38:	fa02 f303 	lsl.w	r3, r2, r3
 800ab3c:	43db      	mvns	r3, r3
 800ab3e:	69fa      	ldr	r2, [r7, #28]
 800ab40:	4013      	ands	r3, r2
 800ab42:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	f003 0203 	and.w	r2, r3, #3
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	005b      	lsls	r3, r3, #1
 800ab50:	fa02 f303 	lsl.w	r3, r2, r3
 800ab54:	69fa      	ldr	r2, [r7, #28]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	69fa      	ldr	r2, [r7, #28]
 800ab5e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d00b      	beq.n	800ab80 <HAL_GPIO_Init+0x1e4>
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	2b02      	cmp	r3, #2
 800ab6e:	d007      	beq.n	800ab80 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab74:	2b11      	cmp	r3, #17
 800ab76:	d003      	beq.n	800ab80 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	2b12      	cmp	r3, #18
 800ab7e:	d130      	bne.n	800abe2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	005b      	lsls	r3, r3, #1
 800ab8a:	2203      	movs	r2, #3
 800ab8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab90:	43db      	mvns	r3, r3
 800ab92:	69fa      	ldr	r2, [r7, #28]
 800ab94:	4013      	ands	r3, r2
 800ab96:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	68da      	ldr	r2, [r3, #12]
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	005b      	lsls	r3, r3, #1
 800aba0:	fa02 f303 	lsl.w	r3, r2, r3
 800aba4:	69fa      	ldr	r2, [r7, #28]
 800aba6:	4313      	orrs	r3, r2
 800aba8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	69fa      	ldr	r2, [r7, #28]
 800abae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800abb6:	2201      	movs	r2, #1
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	fa02 f303 	lsl.w	r3, r2, r3
 800abbe:	43db      	mvns	r3, r3
 800abc0:	69fa      	ldr	r2, [r7, #28]
 800abc2:	4013      	ands	r3, r2
 800abc4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	091b      	lsrs	r3, r3, #4
 800abcc:	f003 0201 	and.w	r2, r3, #1
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	fa02 f303 	lsl.w	r3, r2, r3
 800abd6:	69fa      	ldr	r2, [r7, #28]
 800abd8:	4313      	orrs	r3, r2
 800abda:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	69fa      	ldr	r2, [r7, #28]
 800abe0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	2b03      	cmp	r3, #3
 800abe8:	d017      	beq.n	800ac1a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	005b      	lsls	r3, r3, #1
 800abf4:	2203      	movs	r2, #3
 800abf6:	fa02 f303 	lsl.w	r3, r2, r3
 800abfa:	43db      	mvns	r3, r3
 800abfc:	69fa      	ldr	r2, [r7, #28]
 800abfe:	4013      	ands	r3, r2
 800ac00:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	689a      	ldr	r2, [r3, #8]
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	005b      	lsls	r3, r3, #1
 800ac0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac0e:	69fa      	ldr	r2, [r7, #28]
 800ac10:	4313      	orrs	r3, r2
 800ac12:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	69fa      	ldr	r2, [r7, #28]
 800ac18:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d07c      	beq.n	800ad20 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800ac26:	4a47      	ldr	r2, [pc, #284]	@ (800ad44 <HAL_GPIO_Init+0x3a8>)
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	089b      	lsrs	r3, r3, #2
 800ac2c:	3318      	adds	r3, #24
 800ac2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac32:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	f003 0303 	and.w	r3, r3, #3
 800ac3a:	00db      	lsls	r3, r3, #3
 800ac3c:	220f      	movs	r2, #15
 800ac3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac42:	43db      	mvns	r3, r3
 800ac44:	69fa      	ldr	r2, [r7, #28]
 800ac46:	4013      	ands	r3, r2
 800ac48:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	0a9a      	lsrs	r2, r3, #10
 800ac4e:	4b3e      	ldr	r3, [pc, #248]	@ (800ad48 <HAL_GPIO_Init+0x3ac>)
 800ac50:	4013      	ands	r3, r2
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	f002 0203 	and.w	r2, r2, #3
 800ac58:	00d2      	lsls	r2, r2, #3
 800ac5a:	4093      	lsls	r3, r2
 800ac5c:	69fa      	ldr	r2, [r7, #28]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800ac62:	4938      	ldr	r1, [pc, #224]	@ (800ad44 <HAL_GPIO_Init+0x3a8>)
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	089b      	lsrs	r3, r3, #2
 800ac68:	3318      	adds	r3, #24
 800ac6a:	69fa      	ldr	r2, [r7, #28]
 800ac6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800ac70:	4b34      	ldr	r3, [pc, #208]	@ (800ad44 <HAL_GPIO_Init+0x3a8>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	43db      	mvns	r3, r3
 800ac7a:	69fa      	ldr	r2, [r7, #28]
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d003      	beq.n	800ac94 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800ac8c:	69fa      	ldr	r2, [r7, #28]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	4313      	orrs	r3, r2
 800ac92:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800ac94:	4a2b      	ldr	r2, [pc, #172]	@ (800ad44 <HAL_GPIO_Init+0x3a8>)
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800ac9a:	4b2a      	ldr	r3, [pc, #168]	@ (800ad44 <HAL_GPIO_Init+0x3a8>)
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	43db      	mvns	r3, r3
 800aca4:	69fa      	ldr	r2, [r7, #28]
 800aca6:	4013      	ands	r3, r2
 800aca8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d003      	beq.n	800acbe <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800acb6:	69fa      	ldr	r2, [r7, #28]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	4313      	orrs	r3, r2
 800acbc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800acbe:	4a21      	ldr	r2, [pc, #132]	@ (800ad44 <HAL_GPIO_Init+0x3a8>)
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800acc4:	4b1f      	ldr	r3, [pc, #124]	@ (800ad44 <HAL_GPIO_Init+0x3a8>)
 800acc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	43db      	mvns	r3, r3
 800acd0:	69fa      	ldr	r2, [r7, #28]
 800acd2:	4013      	ands	r3, r2
 800acd4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d003      	beq.n	800acea <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800ace2:	69fa      	ldr	r2, [r7, #28]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800acea:	4a16      	ldr	r2, [pc, #88]	@ (800ad44 <HAL_GPIO_Init+0x3a8>)
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800acf2:	4b14      	ldr	r3, [pc, #80]	@ (800ad44 <HAL_GPIO_Init+0x3a8>)
 800acf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acf8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	43db      	mvns	r3, r3
 800acfe:	69fa      	ldr	r2, [r7, #28]
 800ad00:	4013      	ands	r3, r2
 800ad02:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d003      	beq.n	800ad18 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800ad10:	69fa      	ldr	r2, [r7, #28]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	4313      	orrs	r3, r2
 800ad16:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800ad18:	4a0a      	ldr	r2, [pc, #40]	@ (800ad44 <HAL_GPIO_Init+0x3a8>)
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	3301      	adds	r3, #1
 800ad24:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f47f ae3d 	bne.w	800a9b0 <HAL_GPIO_Init+0x14>
  }
}
 800ad36:	bf00      	nop
 800ad38:	bf00      	nop
 800ad3a:	3724      	adds	r7, #36	@ 0x24
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr
 800ad44:	46022000 	.word	0x46022000
 800ad48:	002f7f7f 	.word	0x002f7f7f

0800ad4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b089      	sub	sp, #36	@ 0x24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800ad56:	2300      	movs	r3, #0
 800ad58:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800ad5e:	e0bc      	b.n	800aeda <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800ad60:	2201      	movs	r2, #1
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	fa02 f303 	lsl.w	r3, r2, r3
 800ad68:	683a      	ldr	r2, [r7, #0]
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f000 80ad 	beq.w	800aed4 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a5e      	ldr	r2, [pc, #376]	@ (800aef8 <HAL_GPIO_DeInit+0x1ac>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d115      	bne.n	800adae <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 800ad82:	4a5e      	ldr	r2, [pc, #376]	@ (800aefc <HAL_GPIO_DeInit+0x1b0>)
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad8a:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800ad8c:	4a5b      	ldr	r2, [pc, #364]	@ (800aefc <HAL_GPIO_DeInit+0x1b0>)
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	00db      	lsls	r3, r3, #3
 800ad92:	4413      	add	r3, r2
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 800ad98:	4b57      	ldr	r3, [pc, #348]	@ (800aef8 <HAL_GPIO_DeInit+0x1ac>)
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	2101      	movs	r1, #1
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	fa01 f303 	lsl.w	r3, r1, r3
 800ada4:	43db      	mvns	r3, r3
 800ada6:	4954      	ldr	r1, [pc, #336]	@ (800aef8 <HAL_GPIO_DeInit+0x1ac>)
 800ada8:	4013      	ands	r3, r2
 800adaa:	600b      	str	r3, [r1, #0]
 800adac:	e053      	b.n	800ae56 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 800adae:	4a54      	ldr	r2, [pc, #336]	@ (800af00 <HAL_GPIO_DeInit+0x1b4>)
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	089b      	lsrs	r3, r3, #2
 800adb4:	3318      	adds	r3, #24
 800adb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adba:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	f003 0303 	and.w	r3, r3, #3
 800adc2:	00db      	lsls	r3, r3, #3
 800adc4:	220f      	movs	r2, #15
 800adc6:	fa02 f303 	lsl.w	r3, r2, r3
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	4013      	ands	r3, r2
 800adce:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	0a9a      	lsrs	r2, r3, #10
 800add4:	4b4b      	ldr	r3, [pc, #300]	@ (800af04 <HAL_GPIO_DeInit+0x1b8>)
 800add6:	4013      	ands	r3, r2
 800add8:	69ba      	ldr	r2, [r7, #24]
 800adda:	f002 0203 	and.w	r2, r2, #3
 800adde:	00d2      	lsls	r2, r2, #3
 800ade0:	4093      	lsls	r3, r2
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d136      	bne.n	800ae56 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 800ade8:	4b45      	ldr	r3, [pc, #276]	@ (800af00 <HAL_GPIO_DeInit+0x1b4>)
 800adea:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	43db      	mvns	r3, r3
 800adf2:	4943      	ldr	r1, [pc, #268]	@ (800af00 <HAL_GPIO_DeInit+0x1b4>)
 800adf4:	4013      	ands	r3, r2
 800adf6:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800adfa:	4b41      	ldr	r3, [pc, #260]	@ (800af00 <HAL_GPIO_DeInit+0x1b4>)
 800adfc:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	43db      	mvns	r3, r3
 800ae04:	493e      	ldr	r1, [pc, #248]	@ (800af00 <HAL_GPIO_DeInit+0x1b4>)
 800ae06:	4013      	ands	r3, r2
 800ae08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 800ae0c:	4b3c      	ldr	r3, [pc, #240]	@ (800af00 <HAL_GPIO_DeInit+0x1b4>)
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	43db      	mvns	r3, r3
 800ae14:	493a      	ldr	r1, [pc, #232]	@ (800af00 <HAL_GPIO_DeInit+0x1b4>)
 800ae16:	4013      	ands	r3, r2
 800ae18:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 800ae1a:	4b39      	ldr	r3, [pc, #228]	@ (800af00 <HAL_GPIO_DeInit+0x1b4>)
 800ae1c:	685a      	ldr	r2, [r3, #4]
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	43db      	mvns	r3, r3
 800ae22:	4937      	ldr	r1, [pc, #220]	@ (800af00 <HAL_GPIO_DeInit+0x1b4>)
 800ae24:	4013      	ands	r3, r2
 800ae26:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 800ae28:	69bb      	ldr	r3, [r7, #24]
 800ae2a:	f003 0303 	and.w	r3, r3, #3
 800ae2e:	00db      	lsls	r3, r3, #3
 800ae30:	220f      	movs	r2, #15
 800ae32:	fa02 f303 	lsl.w	r3, r2, r3
 800ae36:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 800ae38:	4a31      	ldr	r2, [pc, #196]	@ (800af00 <HAL_GPIO_DeInit+0x1b4>)
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	089b      	lsrs	r3, r3, #2
 800ae3e:	3318      	adds	r3, #24
 800ae40:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	43da      	mvns	r2, r3
 800ae48:	482d      	ldr	r0, [pc, #180]	@ (800af00 <HAL_GPIO_DeInit+0x1b4>)
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	089b      	lsrs	r3, r3, #2
 800ae4e:	400a      	ands	r2, r1
 800ae50:	3318      	adds	r3, #24
 800ae52:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	005b      	lsls	r3, r3, #1
 800ae5e:	2103      	movs	r1, #3
 800ae60:	fa01 f303 	lsl.w	r3, r1, r3
 800ae64:	431a      	orrs	r2, r3
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	08da      	lsrs	r2, r3, #3
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	3208      	adds	r2, #8
 800ae72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	f003 0307 	and.w	r3, r3, #7
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	220f      	movs	r2, #15
 800ae80:	fa02 f303 	lsl.w	r3, r2, r3
 800ae84:	43db      	mvns	r3, r3
 800ae86:	69fa      	ldr	r2, [r7, #28]
 800ae88:	08d2      	lsrs	r2, r2, #3
 800ae8a:	4019      	ands	r1, r3
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	3208      	adds	r2, #8
 800ae90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	689a      	ldr	r2, [r3, #8]
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	005b      	lsls	r3, r3, #1
 800ae9c:	2103      	movs	r1, #3
 800ae9e:	fa01 f303 	lsl.w	r3, r1, r3
 800aea2:	43db      	mvns	r3, r3
 800aea4:	401a      	ands	r2, r3
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	685a      	ldr	r2, [r3, #4]
 800aeae:	2101      	movs	r1, #1
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	fa01 f303 	lsl.w	r3, r1, r3
 800aeb6:	43db      	mvns	r3, r3
 800aeb8:	401a      	ands	r2, r3
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	68da      	ldr	r2, [r3, #12]
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	005b      	lsls	r3, r3, #1
 800aec6:	2103      	movs	r1, #3
 800aec8:	fa01 f303 	lsl.w	r3, r1, r3
 800aecc:	43db      	mvns	r3, r3
 800aece:	401a      	ands	r2, r3
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	60da      	str	r2, [r3, #12]
    }

    position++;
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	3301      	adds	r3, #1
 800aed8:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800aeda:	683a      	ldr	r2, [r7, #0]
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	fa22 f303 	lsr.w	r3, r2, r3
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	f47f af3c 	bne.w	800ad60 <HAL_GPIO_DeInit+0x14>
  }
}
 800aee8:	bf00      	nop
 800aeea:	bf00      	nop
 800aeec:	3724      	adds	r7, #36	@ 0x24
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	46020000 	.word	0x46020000
 800aefc:	080364dc 	.word	0x080364dc
 800af00:	46022000 	.word	0x46022000
 800af04:	002f7f7f 	.word	0x002f7f7f

0800af08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	460b      	mov	r3, r1
 800af12:	807b      	strh	r3, [r7, #2]
 800af14:	4613      	mov	r3, r2
 800af16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800af18:	787b      	ldrb	r3, [r7, #1]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d003      	beq.n	800af26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800af1e:	887a      	ldrh	r2, [r7, #2]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800af24:	e002      	b.n	800af2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800af26:	887a      	ldrh	r2, [r7, #2]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800af2c:	bf00      	nop
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	4603      	mov	r3, r0
 800af40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800af42:	4b0f      	ldr	r3, [pc, #60]	@ (800af80 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800af44:	68da      	ldr	r2, [r3, #12]
 800af46:	88fb      	ldrh	r3, [r7, #6]
 800af48:	4013      	ands	r3, r2
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d006      	beq.n	800af5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800af4e:	4a0c      	ldr	r2, [pc, #48]	@ (800af80 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800af50:	88fb      	ldrh	r3, [r7, #6]
 800af52:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800af54:	88fb      	ldrh	r3, [r7, #6]
 800af56:	4618      	mov	r0, r3
 800af58:	f7f8 ff1a 	bl	8003d90 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800af5c:	4b08      	ldr	r3, [pc, #32]	@ (800af80 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800af5e:	691a      	ldr	r2, [r3, #16]
 800af60:	88fb      	ldrh	r3, [r7, #6]
 800af62:	4013      	ands	r3, r2
 800af64:	2b00      	cmp	r3, #0
 800af66:	d006      	beq.n	800af76 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800af68:	4a05      	ldr	r2, [pc, #20]	@ (800af80 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800af6a:	88fb      	ldrh	r3, [r7, #6]
 800af6c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800af6e:	88fb      	ldrh	r3, [r7, #6]
 800af70:	4618      	mov	r0, r3
 800af72:	f000 f807 	bl	800af84 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800af76:	bf00      	nop
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	46022000 	.word	0x46022000

0800af84 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	4603      	mov	r3, r0
 800af8c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800af8e:	bf00      	nop
 800af90:	370c      	adds	r7, #12
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr
	...

0800af9c <HAL_ICACHE_DeInit>:
/**
  * @brief  DeInitialize the Instruction Cache.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_DeInit(void)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;

  /* Disable cache with reset value for 2-ways set associative mode */
  WRITE_REG(ICACHE->CR, ICACHE_CR_WAYSEL);
 800afa2:	4b11      	ldr	r3, [pc, #68]	@ (800afe8 <HAL_ICACHE_DeInit+0x4c>)
 800afa4:	2204      	movs	r2, #4
 800afa6:	601a      	str	r2, [r3, #0]

  /* Stop monitor and reset monitor values */
  (void)HAL_ICACHE_Monitor_Stop(ICACHE_MONITOR_HIT_MISS);
 800afa8:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800afac:	f000 f85e 	bl	800b06c <HAL_ICACHE_Monitor_Stop>
  (void)HAL_ICACHE_Monitor_Reset(ICACHE_MONITOR_HIT_MISS);
 800afb0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800afb4:	f000 f86e 	bl	800b094 <HAL_ICACHE_Monitor_Reset>

  /* No remapped regions */
  (void)HAL_ICACHE_DisableRemapRegion(ICACHE_REGION_0);
 800afb8:	2000      	movs	r0, #0
 800afba:	f000 f887 	bl	800b0cc <HAL_ICACHE_DisableRemapRegion>
  (void)HAL_ICACHE_DisableRemapRegion(ICACHE_REGION_1);
 800afbe:	2001      	movs	r0, #1
 800afc0:	f000 f884 	bl	800b0cc <HAL_ICACHE_DisableRemapRegion>
  (void)HAL_ICACHE_DisableRemapRegion(ICACHE_REGION_2);
 800afc4:	2002      	movs	r0, #2
 800afc6:	f000 f881 	bl	800b0cc <HAL_ICACHE_DisableRemapRegion>
  (void)HAL_ICACHE_DisableRemapRegion(ICACHE_REGION_3);
 800afca:	2003      	movs	r0, #3
 800afcc:	f000 f87e 	bl	800b0cc <HAL_ICACHE_DisableRemapRegion>

  /* Wait for end of invalidate cache procedure */
  status = HAL_ICACHE_WaitForInvalidateComplete();
 800afd0:	f000 f81c 	bl	800b00c <HAL_ICACHE_WaitForInvalidateComplete>
 800afd4:	4603      	mov	r3, r0
 800afd6:	71fb      	strb	r3, [r7, #7]

  /* Clear any pending flags */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF | ICACHE_FCR_CERRF);
 800afd8:	4b03      	ldr	r3, [pc, #12]	@ (800afe8 <HAL_ICACHE_DeInit+0x4c>)
 800afda:	2206      	movs	r2, #6
 800afdc:	60da      	str	r2, [r3, #12]

  return status;
 800afde:	79fb      	ldrb	r3, [r7, #7]
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	40030400 	.word	0x40030400

0800afec <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800afec:	b480      	push	{r7}
 800afee:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800aff0:	4b05      	ldr	r3, [pc, #20]	@ (800b008 <HAL_ICACHE_Enable+0x1c>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a04      	ldr	r2, [pc, #16]	@ (800b008 <HAL_ICACHE_Enable+0x1c>)
 800aff6:	f043 0301 	orr.w	r3, r3, #1
 800affa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr
 800b008:	40030400 	.word	0x40030400

0800b00c <HAL_ICACHE_WaitForInvalidateComplete>:
  * @brief Wait for the end of the Instruction Cache invalidate procedure.
  * @note This function checks and clears the BSYENDF flag when set.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_WaitForInvalidateComplete(void)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b012:	2300      	movs	r3, #0
 800b014:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Check if ongoing invalidation operation */
  if (READ_BIT(ICACHE->SR, ICACHE_SR_BUSYF) != 0U)
 800b016:	4b14      	ldr	r3, [pc, #80]	@ (800b068 <HAL_ICACHE_WaitForInvalidateComplete+0x5c>)
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	f003 0301 	and.w	r3, r3, #1
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d019      	beq.n	800b056 <HAL_ICACHE_WaitForInvalidateComplete+0x4a>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800b022:	f7fe fe3f 	bl	8009ca4 <HAL_GetTick>
 800b026:	6038      	str	r0, [r7, #0]

    /* Wait for end of cache invalidation */
    while (READ_BIT(ICACHE->SR, ICACHE_SR_BSYENDF) == 0U)
 800b028:	e00f      	b.n	800b04a <HAL_ICACHE_WaitForInvalidateComplete+0x3e>
    {
      if ((HAL_GetTick() - tickstart) > ICACHE_INVALIDATE_TIMEOUT_VALUE)
 800b02a:	f7fe fe3b 	bl	8009ca4 <HAL_GetTick>
 800b02e:	4602      	mov	r2, r0
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	1ad3      	subs	r3, r2, r3
 800b034:	2b01      	cmp	r3, #1
 800b036:	d908      	bls.n	800b04a <HAL_ICACHE_WaitForInvalidateComplete+0x3e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(ICACHE->SR, ICACHE_SR_BSYENDF) == 0U)
 800b038:	4b0b      	ldr	r3, [pc, #44]	@ (800b068 <HAL_ICACHE_WaitForInvalidateComplete+0x5c>)
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	f003 0302 	and.w	r3, r3, #2
 800b040:	2b00      	cmp	r3, #0
 800b042:	d102      	bne.n	800b04a <HAL_ICACHE_WaitForInvalidateComplete+0x3e>
        {
          status = HAL_TIMEOUT;
 800b044:	2303      	movs	r3, #3
 800b046:	71fb      	strb	r3, [r7, #7]
          break;
 800b048:	e005      	b.n	800b056 <HAL_ICACHE_WaitForInvalidateComplete+0x4a>
    while (READ_BIT(ICACHE->SR, ICACHE_SR_BSYENDF) == 0U)
 800b04a:	4b07      	ldr	r3, [pc, #28]	@ (800b068 <HAL_ICACHE_WaitForInvalidateComplete+0x5c>)
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	f003 0302 	and.w	r3, r3, #2
 800b052:	2b00      	cmp	r3, #0
 800b054:	d0e9      	beq.n	800b02a <HAL_ICACHE_WaitForInvalidateComplete+0x1e>
      }
    }
  }

  /* Clear BSYENDF */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 800b056:	4b04      	ldr	r3, [pc, #16]	@ (800b068 <HAL_ICACHE_WaitForInvalidateComplete+0x5c>)
 800b058:	2202      	movs	r2, #2
 800b05a:	60da      	str	r2, [r3, #12]

  return status;
 800b05c:	79fb      	ldrb	r3, [r7, #7]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	40030400 	.word	0x40030400

0800b06c <HAL_ICACHE_Monitor_Stop>:
  *            @arg ICACHE_MONITOR_HIT        Hit monitoring
  *            @arg ICACHE_MONITOR_MISS       Miss monitoring
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Monitor_Stop(uint32_t MonitorType)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ICACHE_MONITOR_TYPE(MonitorType));

  CLEAR_BIT(ICACHE->CR, MonitorType);
 800b074:	4b06      	ldr	r3, [pc, #24]	@ (800b090 <HAL_ICACHE_Monitor_Stop+0x24>)
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	43db      	mvns	r3, r3
 800b07c:	4904      	ldr	r1, [pc, #16]	@ (800b090 <HAL_ICACHE_Monitor_Stop+0x24>)
 800b07e:	4013      	ands	r3, r2
 800b080:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr
 800b090:	40030400 	.word	0x40030400

0800b094 <HAL_ICACHE_Monitor_Reset>:
  *            @arg ICACHE_MONITOR_HIT        Hit monitoring
  *            @arg ICACHE_MONITOR_MISS       Miss monitoring
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Monitor_Reset(uint32_t MonitorType)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ICACHE_MONITOR_TYPE(MonitorType));

  /* Force/Release reset */
  SET_BIT(ICACHE->CR, (MonitorType << 2U));
 800b09c:	4b0a      	ldr	r3, [pc, #40]	@ (800b0c8 <HAL_ICACHE_Monitor_Reset+0x34>)
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	4908      	ldr	r1, [pc, #32]	@ (800b0c8 <HAL_ICACHE_Monitor_Reset+0x34>)
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	600b      	str	r3, [r1, #0]
  CLEAR_BIT(ICACHE->CR, (MonitorType << 2U));
 800b0aa:	4b07      	ldr	r3, [pc, #28]	@ (800b0c8 <HAL_ICACHE_Monitor_Reset+0x34>)
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	43db      	mvns	r3, r3
 800b0b4:	4904      	ldr	r1, [pc, #16]	@ (800b0c8 <HAL_ICACHE_Monitor_Reset+0x34>)
 800b0b6:	4013      	ands	r3, r2
 800b0b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	40030400 	.word	0x40030400

0800b0cc <HAL_ICACHE_DisableRemapRegion>:
  * @param  Region   Region number
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_DisableRemapRegion(uint32_t Region)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_REGION_NUMBER(Region));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800b0d8:	4b0d      	ldr	r3, [pc, #52]	@ (800b110 <HAL_ICACHE_DisableRemapRegion+0x44>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f003 0301 	and.w	r3, r3, #1
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d002      	beq.n	800b0ea <HAL_ICACHE_DisableRemapRegion+0x1e>
  {
    status = HAL_ERROR;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	73fb      	strb	r3, [r7, #15]
 800b0e8:	e00a      	b.n	800b100 <HAL_ICACHE_DisableRemapRegion+0x34>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	009a      	lsls	r2, r3, #2
 800b0ee:	4b09      	ldr	r3, [pc, #36]	@ (800b114 <HAL_ICACHE_DisableRemapRegion+0x48>)
 800b0f0:	4413      	add	r3, r2
 800b0f2:	60bb      	str	r3, [r7, #8]

    *p_reg &= ~ICACHE_CRRx_REN;
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	601a      	str	r2, [r3, #0]
  }

  return status;
 800b100:	7bfb      	ldrb	r3, [r7, #15]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3714      	adds	r7, #20
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	40030400 	.word	0x40030400
 800b114:	40030420 	.word	0x40030420

0800b118 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b11a:	b08f      	sub	sp, #60	@ 0x3c
 800b11c:	af0a      	add	r7, sp, #40	@ 0x28
 800b11e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d101      	bne.n	800b12a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b126:	2301      	movs	r3, #1
 800b128:	e116      	b.n	800b358 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800b136:	b2db      	uxtb	r3, r3
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d106      	bne.n	800b14a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f7f6 fbcb 	bl	80018e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2203      	movs	r2, #3
 800b14e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 14)) == 0U)
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d102      	bne.n	800b164 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4618      	mov	r0, r3
 800b16a:	f005 fa40 	bl	80105ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	603b      	str	r3, [r7, #0]
 800b174:	687e      	ldr	r6, [r7, #4]
 800b176:	466d      	mov	r5, sp
 800b178:	f106 0410 	add.w	r4, r6, #16
 800b17c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b17e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b184:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b188:	e885 0003 	stmia.w	r5, {r0, r1}
 800b18c:	1d33      	adds	r3, r6, #4
 800b18e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b190:	6838      	ldr	r0, [r7, #0]
 800b192:	f005 f94d 	bl	8010430 <USB_CoreInit>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d005      	beq.n	800b1a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2202      	movs	r2, #2
 800b1a0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e0d7      	b.n	800b358 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f005 fa2e 	bl	8010610 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	73fb      	strb	r3, [r7, #15]
 800b1b8:	e04a      	b.n	800b250 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b1ba:	7bfa      	ldrb	r2, [r7, #15]
 800b1bc:	6879      	ldr	r1, [r7, #4]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	00db      	lsls	r3, r3, #3
 800b1c2:	4413      	add	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	440b      	add	r3, r1
 800b1c8:	333d      	adds	r3, #61	@ 0x3d
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b1ce:	7bfa      	ldrb	r2, [r7, #15]
 800b1d0:	6879      	ldr	r1, [r7, #4]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	00db      	lsls	r3, r3, #3
 800b1d6:	4413      	add	r3, r2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	440b      	add	r3, r1
 800b1dc:	333c      	adds	r3, #60	@ 0x3c
 800b1de:	7bfa      	ldrb	r2, [r7, #15]
 800b1e0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b1e2:	7bfa      	ldrb	r2, [r7, #15]
 800b1e4:	7bfb      	ldrb	r3, [r7, #15]
 800b1e6:	b298      	uxth	r0, r3
 800b1e8:	6879      	ldr	r1, [r7, #4]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	00db      	lsls	r3, r3, #3
 800b1ee:	4413      	add	r3, r2
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	440b      	add	r3, r1
 800b1f4:	3356      	adds	r3, #86	@ 0x56
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b1fa:	7bfa      	ldrb	r2, [r7, #15]
 800b1fc:	6879      	ldr	r1, [r7, #4]
 800b1fe:	4613      	mov	r3, r2
 800b200:	00db      	lsls	r3, r3, #3
 800b202:	4413      	add	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	440b      	add	r3, r1
 800b208:	3340      	adds	r3, #64	@ 0x40
 800b20a:	2200      	movs	r2, #0
 800b20c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b20e:	7bfa      	ldrb	r2, [r7, #15]
 800b210:	6879      	ldr	r1, [r7, #4]
 800b212:	4613      	mov	r3, r2
 800b214:	00db      	lsls	r3, r3, #3
 800b216:	4413      	add	r3, r2
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	440b      	add	r3, r1
 800b21c:	3344      	adds	r3, #68	@ 0x44
 800b21e:	2200      	movs	r2, #0
 800b220:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b222:	7bfa      	ldrb	r2, [r7, #15]
 800b224:	6879      	ldr	r1, [r7, #4]
 800b226:	4613      	mov	r3, r2
 800b228:	00db      	lsls	r3, r3, #3
 800b22a:	4413      	add	r3, r2
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	440b      	add	r3, r1
 800b230:	3348      	adds	r3, #72	@ 0x48
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b236:	7bfa      	ldrb	r2, [r7, #15]
 800b238:	6879      	ldr	r1, [r7, #4]
 800b23a:	4613      	mov	r3, r2
 800b23c:	00db      	lsls	r3, r3, #3
 800b23e:	4413      	add	r3, r2
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	440b      	add	r3, r1
 800b244:	334c      	adds	r3, #76	@ 0x4c
 800b246:	2200      	movs	r2, #0
 800b248:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b24a:	7bfb      	ldrb	r3, [r7, #15]
 800b24c:	3301      	adds	r3, #1
 800b24e:	73fb      	strb	r3, [r7, #15]
 800b250:	7bfa      	ldrb	r2, [r7, #15]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	429a      	cmp	r2, r3
 800b258:	d3af      	bcc.n	800b1ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b25a:	2300      	movs	r3, #0
 800b25c:	73fb      	strb	r3, [r7, #15]
 800b25e:	e044      	b.n	800b2ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b260:	7bfa      	ldrb	r2, [r7, #15]
 800b262:	6879      	ldr	r1, [r7, #4]
 800b264:	4613      	mov	r3, r2
 800b266:	00db      	lsls	r3, r3, #3
 800b268:	4413      	add	r3, r2
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	440b      	add	r3, r1
 800b26e:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800b272:	2200      	movs	r2, #0
 800b274:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b276:	7bfa      	ldrb	r2, [r7, #15]
 800b278:	6879      	ldr	r1, [r7, #4]
 800b27a:	4613      	mov	r3, r2
 800b27c:	00db      	lsls	r3, r3, #3
 800b27e:	4413      	add	r3, r2
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	440b      	add	r3, r1
 800b284:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800b288:	7bfa      	ldrb	r2, [r7, #15]
 800b28a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b28c:	7bfa      	ldrb	r2, [r7, #15]
 800b28e:	6879      	ldr	r1, [r7, #4]
 800b290:	4613      	mov	r3, r2
 800b292:	00db      	lsls	r3, r3, #3
 800b294:	4413      	add	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	440b      	add	r3, r1
 800b29a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800b29e:	2200      	movs	r2, #0
 800b2a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b2a2:	7bfa      	ldrb	r2, [r7, #15]
 800b2a4:	6879      	ldr	r1, [r7, #4]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	00db      	lsls	r3, r3, #3
 800b2aa:	4413      	add	r3, r2
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	440b      	add	r3, r1
 800b2b0:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b2b8:	7bfa      	ldrb	r2, [r7, #15]
 800b2ba:	6879      	ldr	r1, [r7, #4]
 800b2bc:	4613      	mov	r3, r2
 800b2be:	00db      	lsls	r3, r3, #3
 800b2c0:	4413      	add	r3, r2
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	440b      	add	r3, r1
 800b2c6:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b2ce:	7bfa      	ldrb	r2, [r7, #15]
 800b2d0:	6879      	ldr	r1, [r7, #4]
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	00db      	lsls	r3, r3, #3
 800b2d6:	4413      	add	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	440b      	add	r3, r1
 800b2dc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b2e4:	7bfb      	ldrb	r3, [r7, #15]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	73fb      	strb	r3, [r7, #15]
 800b2ea:	7bfa      	ldrb	r2, [r7, #15]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d3b5      	bcc.n	800b260 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	603b      	str	r3, [r7, #0]
 800b2fa:	687e      	ldr	r6, [r7, #4]
 800b2fc:	466d      	mov	r5, sp
 800b2fe:	f106 0410 	add.w	r4, r6, #16
 800b302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b30a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b30e:	e885 0003 	stmia.w	r5, {r0, r1}
 800b312:	1d33      	adds	r3, r6, #4
 800b314:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b316:	6838      	ldr	r0, [r7, #0]
 800b318:	f005 f9c6 	bl	80106a8 <USB_DevInit>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d005      	beq.n	800b32e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2202      	movs	r2, #2
 800b326:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800b32a:	2301      	movs	r3, #1
 800b32c:	e014      	b.n	800b358 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2201      	movs	r2, #1
 800b33a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b342:	2b01      	cmp	r3, #1
 800b344:	d102      	bne.n	800b34c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f001 f96a 	bl	800c620 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4618      	mov	r0, r3
 800b352:	f006 f9e6 	bl	8011722 <USB_DevDisconnect>

  return HAL_OK;
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3714      	adds	r7, #20
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b360 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	60fb      	str	r3, [r7, #12]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800b374:	2b01      	cmp	r3, #1
 800b376:	d101      	bne.n	800b37c <HAL_PCD_Start+0x1c>
 800b378:	2302      	movs	r3, #2
 800b37a:	e01c      	b.n	800b3b6 <HAL_PCD_Start+0x56>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (STM32U575xx) || defined (STM32U585xx)
  if (hpcd->Init.battery_charging_enable == 1U)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d105      	bne.n	800b398 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b390:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4618      	mov	r0, r3
 800b39e:	f005 f915 	bl	80105cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f006 f99a 	bl	80116e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800b3b4:	2300      	movs	r3, #0
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}

0800b3be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b3be:	b590      	push	{r4, r7, lr}
 800b3c0:	b08d      	sub	sp, #52	@ 0x34
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3cc:	6a3b      	ldr	r3, [r7, #32]
 800b3ce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f006 fa58 	bl	801188a <USB_GetMode>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f040 84b7 	bne.w	800bd50 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f006 f9bc 	bl	8011764 <USB_ReadInterrupts>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f000 84ad 	beq.w	800bd4e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	0a1b      	lsrs	r3, r3, #8
 800b3fe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f006 f9a9 	bl	8011764 <USB_ReadInterrupts>
 800b412:	4603      	mov	r3, r0
 800b414:	f003 0302 	and.w	r3, r3, #2
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d107      	bne.n	800b42c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	695a      	ldr	r2, [r3, #20]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f002 0202 	and.w	r2, r2, #2
 800b42a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4618      	mov	r0, r3
 800b432:	f006 f997 	bl	8011764 <USB_ReadInterrupts>
 800b436:	4603      	mov	r3, r0
 800b438:	f003 0310 	and.w	r3, r3, #16
 800b43c:	2b10      	cmp	r3, #16
 800b43e:	d161      	bne.n	800b504 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	699a      	ldr	r2, [r3, #24]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f022 0210 	bic.w	r2, r2, #16
 800b44e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b450:	6a3b      	ldr	r3, [r7, #32]
 800b452:	6a1b      	ldr	r3, [r3, #32]
 800b454:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	f003 020f 	and.w	r2, r3, #15
 800b45c:	4613      	mov	r3, r2
 800b45e:	00db      	lsls	r3, r3, #3
 800b460:	4413      	add	r3, r2
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	4413      	add	r3, r2
 800b46c:	3304      	adds	r3, #4
 800b46e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	0c5b      	lsrs	r3, r3, #17
 800b474:	f003 030f 	and.w	r3, r3, #15
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d124      	bne.n	800b4c6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b47c:	69ba      	ldr	r2, [r7, #24]
 800b47e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800b482:	4013      	ands	r3, r2
 800b484:	2b00      	cmp	r3, #0
 800b486:	d035      	beq.n	800b4f4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	091b      	lsrs	r3, r3, #4
 800b490:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b496:	b29b      	uxth	r3, r3
 800b498:	461a      	mov	r2, r3
 800b49a:	6a38      	ldr	r0, [r7, #32]
 800b49c:	f005 ffce 	bl	801143c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	68da      	ldr	r2, [r3, #12]
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	091b      	lsrs	r3, r3, #4
 800b4a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4ac:	441a      	add	r2, r3
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	695a      	ldr	r2, [r3, #20]
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	091b      	lsrs	r3, r3, #4
 800b4ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4be:	441a      	add	r2, r3
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	615a      	str	r2, [r3, #20]
 800b4c4:	e016      	b.n	800b4f4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	0c5b      	lsrs	r3, r3, #17
 800b4ca:	f003 030f 	and.w	r3, r3, #15
 800b4ce:	2b06      	cmp	r3, #6
 800b4d0:	d110      	bne.n	800b4f4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800b4d8:	2208      	movs	r2, #8
 800b4da:	4619      	mov	r1, r3
 800b4dc:	6a38      	ldr	r0, [r7, #32]
 800b4de:	f005 ffad 	bl	801143c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	695a      	ldr	r2, [r3, #20]
 800b4e6:	69bb      	ldr	r3, [r7, #24]
 800b4e8:	091b      	lsrs	r3, r3, #4
 800b4ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4ee:	441a      	add	r2, r3
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	699a      	ldr	r2, [r3, #24]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f042 0210 	orr.w	r2, r2, #16
 800b502:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4618      	mov	r0, r3
 800b50a:	f006 f92b 	bl	8011764 <USB_ReadInterrupts>
 800b50e:	4603      	mov	r3, r0
 800b510:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b514:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b518:	f040 80a7 	bne.w	800b66a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b51c:	2300      	movs	r3, #0
 800b51e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4618      	mov	r0, r3
 800b526:	f006 f930 	bl	801178a <USB_ReadDevAllOutEpInterrupt>
 800b52a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800b52c:	e099      	b.n	800b662 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b530:	f003 0301 	and.w	r3, r3, #1
 800b534:	2b00      	cmp	r3, #0
 800b536:	f000 808e 	beq.w	800b656 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b540:	b2d2      	uxtb	r2, r2
 800b542:	4611      	mov	r1, r2
 800b544:	4618      	mov	r0, r3
 800b546:	f006 f954 	bl	80117f2 <USB_ReadDevOutEPInterrupt>
 800b54a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	f003 0301 	and.w	r3, r3, #1
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00c      	beq.n	800b570 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b558:	015a      	lsls	r2, r3, #5
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	4413      	add	r3, r2
 800b55e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b562:	461a      	mov	r2, r3
 800b564:	2301      	movs	r3, #1
 800b566:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b568:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 fed2 	bl	800c314 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	f003 0308 	and.w	r3, r3, #8
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00c      	beq.n	800b594 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b57c:	015a      	lsls	r2, r3, #5
 800b57e:	69fb      	ldr	r3, [r7, #28]
 800b580:	4413      	add	r3, r2
 800b582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b586:	461a      	mov	r2, r3
 800b588:	2308      	movs	r3, #8
 800b58a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b58c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 ffa8 	bl	800c4e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	f003 0310 	and.w	r3, r3, #16
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d008      	beq.n	800b5b0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a0:	015a      	lsls	r2, r3, #5
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	2310      	movs	r3, #16
 800b5ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	f003 0302 	and.w	r3, r3, #2
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d030      	beq.n	800b61c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b5ba:	6a3b      	ldr	r3, [r7, #32]
 800b5bc:	695b      	ldr	r3, [r3, #20]
 800b5be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5c2:	2b80      	cmp	r3, #128	@ 0x80
 800b5c4:	d109      	bne.n	800b5da <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	69fa      	ldr	r2, [r7, #28]
 800b5d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b5d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b5d8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b5da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5dc:	4613      	mov	r3, r2
 800b5de:	00db      	lsls	r3, r3, #3
 800b5e0:	4413      	add	r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	3304      	adds	r3, #4
 800b5ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	78db      	ldrb	r3, [r3, #3]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d108      	bne.n	800b60a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b600:	b2db      	uxtb	r3, r3
 800b602:	4619      	mov	r1, r3
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f7f6 fecd 	bl	80023a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60c:	015a      	lsls	r2, r3, #5
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	4413      	add	r3, r2
 800b612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b616:	461a      	mov	r2, r3
 800b618:	2302      	movs	r3, #2
 800b61a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	f003 0320 	and.w	r3, r3, #32
 800b622:	2b00      	cmp	r3, #0
 800b624:	d008      	beq.n	800b638 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b628:	015a      	lsls	r2, r3, #5
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	4413      	add	r3, r2
 800b62e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b632:	461a      	mov	r2, r3
 800b634:	2320      	movs	r3, #32
 800b636:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d009      	beq.n	800b656 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b644:	015a      	lsls	r2, r3, #5
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	4413      	add	r3, r2
 800b64a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b64e:	461a      	mov	r2, r3
 800b650:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b654:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b658:	3301      	adds	r3, #1
 800b65a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b65e:	085b      	lsrs	r3, r3, #1
 800b660:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b664:	2b00      	cmp	r3, #0
 800b666:	f47f af62 	bne.w	800b52e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4618      	mov	r0, r3
 800b670:	f006 f878 	bl	8011764 <USB_ReadInterrupts>
 800b674:	4603      	mov	r3, r0
 800b676:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b67a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b67e:	f040 80db 	bne.w	800b838 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4618      	mov	r0, r3
 800b688:	f006 f899 	bl	80117be <USB_ReadDevAllInEpInterrupt>
 800b68c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800b68e:	2300      	movs	r3, #0
 800b690:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800b692:	e0cd      	b.n	800b830 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b696:	f003 0301 	and.w	r3, r3, #1
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f000 80c2 	beq.w	800b824 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6a6:	b2d2      	uxtb	r2, r2
 800b6a8:	4611      	mov	r1, r2
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f006 f8bf 	bl	801182e <USB_ReadDevInEPInterrupt>
 800b6b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	f003 0301 	and.w	r3, r3, #1
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d057      	beq.n	800b76c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6be:	f003 030f 	and.w	r3, r3, #15
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b6c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	43db      	mvns	r3, r3
 800b6d6:	69f9      	ldr	r1, [r7, #28]
 800b6d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b6dc:	4013      	ands	r3, r2
 800b6de:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e2:	015a      	lsls	r2, r3, #5
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d132      	bne.n	800b760 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b6fa:	6879      	ldr	r1, [r7, #4]
 800b6fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6fe:	4613      	mov	r3, r2
 800b700:	00db      	lsls	r3, r3, #3
 800b702:	4413      	add	r3, r2
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	440b      	add	r3, r1
 800b708:	3348      	adds	r3, #72	@ 0x48
 800b70a:	6819      	ldr	r1, [r3, #0]
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b710:	4613      	mov	r3, r2
 800b712:	00db      	lsls	r3, r3, #3
 800b714:	4413      	add	r3, r2
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	4403      	add	r3, r0
 800b71a:	3344      	adds	r3, #68	@ 0x44
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4419      	add	r1, r3
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b724:	4613      	mov	r3, r2
 800b726:	00db      	lsls	r3, r3, #3
 800b728:	4413      	add	r3, r2
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	4403      	add	r3, r0
 800b72e:	3348      	adds	r3, #72	@ 0x48
 800b730:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b734:	2b00      	cmp	r3, #0
 800b736:	d113      	bne.n	800b760 <HAL_PCD_IRQHandler+0x3a2>
 800b738:	6879      	ldr	r1, [r7, #4]
 800b73a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b73c:	4613      	mov	r3, r2
 800b73e:	00db      	lsls	r3, r3, #3
 800b740:	4413      	add	r3, r2
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	440b      	add	r3, r1
 800b746:	334c      	adds	r3, #76	@ 0x4c
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d108      	bne.n	800b760 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6818      	ldr	r0, [r3, #0]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800b758:	461a      	mov	r2, r3
 800b75a:	2101      	movs	r1, #1
 800b75c:	f006 f8c6 	bl	80118ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b762:	b2db      	uxtb	r3, r3
 800b764:	4619      	mov	r1, r3
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7f6 fd69 	bl	800223e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	f003 0308 	and.w	r3, r3, #8
 800b772:	2b00      	cmp	r3, #0
 800b774:	d008      	beq.n	800b788 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b778:	015a      	lsls	r2, r3, #5
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	4413      	add	r3, r2
 800b77e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b782:	461a      	mov	r2, r3
 800b784:	2308      	movs	r3, #8
 800b786:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	f003 0310 	and.w	r3, r3, #16
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d008      	beq.n	800b7a4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b794:	015a      	lsls	r2, r3, #5
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	4413      	add	r3, r2
 800b79a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b79e:	461a      	mov	r2, r3
 800b7a0:	2310      	movs	r3, #16
 800b7a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d008      	beq.n	800b7c0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b0:	015a      	lsls	r2, r3, #5
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	2340      	movs	r3, #64	@ 0x40
 800b7be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	f003 0302 	and.w	r3, r3, #2
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d023      	beq.n	800b812 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b7ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b7cc:	6a38      	ldr	r0, [r7, #32]
 800b7ce:	f005 f8af 	bl	8010930 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b7d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	00db      	lsls	r3, r3, #3
 800b7d8:	4413      	add	r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	3338      	adds	r3, #56	@ 0x38
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	3304      	adds	r3, #4
 800b7e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	78db      	ldrb	r3, [r3, #3]
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d108      	bne.n	800b800 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7f6 fde4 	bl	80023c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b802:	015a      	lsls	r2, r3, #5
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	4413      	add	r3, r2
 800b808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b80c:	461a      	mov	r2, r3
 800b80e:	2302      	movs	r3, #2
 800b810:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d003      	beq.n	800b824 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b81c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 fcea 	bl	800c1f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b826:	3301      	adds	r3, #1
 800b828:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82c:	085b      	lsrs	r3, r3, #1
 800b82e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b832:	2b00      	cmp	r3, #0
 800b834:	f47f af2e 	bne.w	800b694 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4618      	mov	r0, r3
 800b83e:	f005 ff91 	bl	8011764 <USB_ReadInterrupts>
 800b842:	4603      	mov	r3, r0
 800b844:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b848:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b84c:	d122      	bne.n	800b894 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b84e:	69fb      	ldr	r3, [r7, #28]
 800b850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	69fa      	ldr	r2, [r7, #28]
 800b858:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b85c:	f023 0301 	bic.w	r3, r3, #1
 800b860:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d108      	bne.n	800b87e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b874:	2100      	movs	r1, #0
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 fef6 	bl	800c668 <HAL_PCDEx_LPM_Callback>
 800b87c:	e002      	b.n	800b884 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f7f6 fd68 	bl	8002354 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	695a      	ldr	r2, [r3, #20]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800b892:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4618      	mov	r0, r3
 800b89a:	f005 ff63 	bl	8011764 <USB_ReadInterrupts>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b8a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b8a8:	d112      	bne.n	800b8d0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	f003 0301 	and.w	r3, r3, #1
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d102      	bne.n	800b8c0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f7f6 fd06 	bl	80022cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	695a      	ldr	r2, [r3, #20]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800b8ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f005 ff45 	bl	8011764 <USB_ReadInterrupts>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b8e4:	d121      	bne.n	800b92a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	695a      	ldr	r2, [r3, #20]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800b8f4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d111      	bne.n	800b924 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b90e:	089b      	lsrs	r3, r3, #2
 800b910:	f003 020f 	and.w	r2, r3, #15
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b91a:	2101      	movs	r1, #1
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fea3 	bl	800c668 <HAL_PCDEx_LPM_Callback>
 800b922:	e002      	b.n	800b92a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f7f6 fcd1 	bl	80022cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4618      	mov	r0, r3
 800b930:	f005 ff18 	bl	8011764 <USB_ReadInterrupts>
 800b934:	4603      	mov	r3, r0
 800b936:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b93a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b93e:	f040 80b7 	bne.w	800bab0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	69fa      	ldr	r2, [r7, #28]
 800b94c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b950:	f023 0301 	bic.w	r3, r3, #1
 800b954:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2110      	movs	r1, #16
 800b95c:	4618      	mov	r0, r3
 800b95e:	f004 ffe7 	bl	8010930 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b962:	2300      	movs	r3, #0
 800b964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b966:	e046      	b.n	800b9f6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b96a:	015a      	lsls	r2, r3, #5
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	4413      	add	r3, r2
 800b970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b974:	461a      	mov	r2, r3
 800b976:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b97a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b97c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b97e:	015a      	lsls	r2, r3, #5
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	4413      	add	r3, r2
 800b984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b98c:	0151      	lsls	r1, r2, #5
 800b98e:	69fa      	ldr	r2, [r7, #28]
 800b990:	440a      	add	r2, r1
 800b992:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b996:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b99a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b99e:	015a      	lsls	r2, r3, #5
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b9ae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b9b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9b2:	015a      	lsls	r2, r3, #5
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9c0:	0151      	lsls	r1, r2, #5
 800b9c2:	69fa      	ldr	r2, [r7, #28]
 800b9c4:	440a      	add	r2, r1
 800b9c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b9ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b9ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9d2:	015a      	lsls	r2, r3, #5
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9e0:	0151      	lsls	r1, r2, #5
 800b9e2:	69fa      	ldr	r2, [r7, #28]
 800b9e4:	440a      	add	r2, r1
 800b9e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b9ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b9ee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d3b3      	bcc.n	800b968 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba06:	69db      	ldr	r3, [r3, #28]
 800ba08:	69fa      	ldr	r2, [r7, #28]
 800ba0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba0e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800ba12:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d016      	beq.n	800ba4a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800ba1c:	69fb      	ldr	r3, [r7, #28]
 800ba1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba26:	69fa      	ldr	r2, [r7, #28]
 800ba28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba2c:	f043 030b 	orr.w	r3, r3, #11
 800ba30:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800ba34:	69fb      	ldr	r3, [r7, #28]
 800ba36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba3c:	69fa      	ldr	r2, [r7, #28]
 800ba3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba42:	f043 030b 	orr.w	r3, r3, #11
 800ba46:	6453      	str	r3, [r2, #68]	@ 0x44
 800ba48:	e015      	b.n	800ba76 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba50:	695b      	ldr	r3, [r3, #20]
 800ba52:	69fa      	ldr	r2, [r7, #28]
 800ba54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ba5c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800ba60:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba68:	691b      	ldr	r3, [r3, #16]
 800ba6a:	69fa      	ldr	r2, [r7, #28]
 800ba6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba70:	f043 030b 	orr.w	r3, r3, #11
 800ba74:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	69fa      	ldr	r2, [r7, #28]
 800ba80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba84:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ba88:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6818      	ldr	r0, [r3, #0]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	f005 ff26 	bl	80118ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	695a      	ldr	r2, [r3, #20]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800baae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f005 fe55 	bl	8011764 <USB_ReadInterrupts>
 800baba:	4603      	mov	r3, r0
 800babc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bac4:	d124      	bne.n	800bb10 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4618      	mov	r0, r3
 800bacc:	f005 feeb 	bl	80118a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4618      	mov	r0, r3
 800bad6:	f004 ffa8 	bl	8010a2a <USB_GetDevSpeed>
 800bada:	4603      	mov	r3, r0
 800badc:	461a      	mov	r2, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681c      	ldr	r4, [r3, #0]
 800bae6:	f002 f867 	bl	800dbb8 <HAL_RCC_GetHCLKFreq>
 800baea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	461a      	mov	r2, r3
 800baf4:	4620      	mov	r0, r4
 800baf6:	f004 fcc7 	bl	8010488 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f7f6 fbc7 	bl	800228e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	695a      	ldr	r2, [r3, #20]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800bb0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4618      	mov	r0, r3
 800bb16:	f005 fe25 	bl	8011764 <USB_ReadInterrupts>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	f003 0308 	and.w	r3, r3, #8
 800bb20:	2b08      	cmp	r3, #8
 800bb22:	d10a      	bne.n	800bb3a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f7f6 fba4 	bl	8002272 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	695a      	ldr	r2, [r3, #20]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f002 0208 	and.w	r2, r2, #8
 800bb38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f005 fe10 	bl	8011764 <USB_ReadInterrupts>
 800bb44:	4603      	mov	r3, r0
 800bb46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb4a:	2b80      	cmp	r3, #128	@ 0x80
 800bb4c:	d122      	bne.n	800bb94 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800bb4e:	6a3b      	ldr	r3, [r7, #32]
 800bb50:	699b      	ldr	r3, [r3, #24]
 800bb52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bb56:	6a3b      	ldr	r3, [r7, #32]
 800bb58:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb5e:	e014      	b.n	800bb8a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800bb60:	6879      	ldr	r1, [r7, #4]
 800bb62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb64:	4613      	mov	r3, r2
 800bb66:	00db      	lsls	r3, r3, #3
 800bb68:	4413      	add	r3, r2
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	440b      	add	r3, r1
 800bb6e:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d105      	bne.n	800bb84 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800bb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 fb09 	bl	800c196 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb86:	3301      	adds	r3, #1
 800bb88:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d3e5      	bcc.n	800bb60 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f005 fde3 	bl	8011764 <USB_ReadInterrupts>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bba4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bba8:	d13b      	bne.n	800bc22 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bbaa:	2301      	movs	r3, #1
 800bbac:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbae:	e02b      	b.n	800bc08 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800bbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb2:	015a      	lsls	r2, r3, #5
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bbc0:	6879      	ldr	r1, [r7, #4]
 800bbc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	00db      	lsls	r3, r3, #3
 800bbc8:	4413      	add	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	440b      	add	r3, r1
 800bbce:	3340      	adds	r3, #64	@ 0x40
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d115      	bne.n	800bc02 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800bbd6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	da12      	bge.n	800bc02 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800bbdc:	6879      	ldr	r1, [r7, #4]
 800bbde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	00db      	lsls	r3, r3, #3
 800bbe4:	4413      	add	r3, r2
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	440b      	add	r3, r1
 800bbea:	333f      	adds	r3, #63	@ 0x3f
 800bbec:	2201      	movs	r2, #1
 800bbee:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 faca 	bl	800c196 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bc02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc04:	3301      	adds	r3, #1
 800bc06:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d3ce      	bcc.n	800bbb0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	695a      	ldr	r2, [r3, #20]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800bc20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f005 fd9c 	bl	8011764 <USB_ReadInterrupts>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bc32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc36:	d155      	bne.n	800bce4 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bc38:	2301      	movs	r3, #1
 800bc3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc3c:	e045      	b.n	800bcca <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc40:	015a      	lsls	r2, r3, #5
 800bc42:	69fb      	ldr	r3, [r7, #28]
 800bc44:	4413      	add	r3, r2
 800bc46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bc4e:	6879      	ldr	r1, [r7, #4]
 800bc50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc52:	4613      	mov	r3, r2
 800bc54:	00db      	lsls	r3, r3, #3
 800bc56:	4413      	add	r3, r2
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	440b      	add	r3, r1
 800bc5c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d12e      	bne.n	800bcc4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bc66:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	da2b      	bge.n	800bcc4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 800bc78:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d121      	bne.n	800bcc4 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800bc80:	6879      	ldr	r1, [r7, #4]
 800bc82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc84:	4613      	mov	r3, r2
 800bc86:	00db      	lsls	r3, r3, #3
 800bc88:	4413      	add	r3, r2
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	440b      	add	r3, r1
 800bc8e:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800bc92:	2201      	movs	r2, #1
 800bc94:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800bc96:	6a3b      	ldr	r3, [r7, #32]
 800bc98:	699b      	ldr	r3, [r3, #24]
 800bc9a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bc9e:	6a3b      	ldr	r3, [r7, #32]
 800bca0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800bca2:	6a3b      	ldr	r3, [r7, #32]
 800bca4:	695b      	ldr	r3, [r3, #20]
 800bca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10a      	bne.n	800bcc4 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	69fa      	ldr	r2, [r7, #28]
 800bcb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bcbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bcc0:	6053      	str	r3, [r2, #4]
            break;
 800bcc2:	e007      	b.n	800bcd4 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d3b4      	bcc.n	800bc3e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	695a      	ldr	r2, [r3, #20]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800bce2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4618      	mov	r0, r3
 800bcea:	f005 fd3b 	bl	8011764 <USB_ReadInterrupts>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bcf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcf8:	d10a      	bne.n	800bd10 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f7f6 fb76 	bl	80023ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	695a      	ldr	r2, [r3, #20]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800bd0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4618      	mov	r0, r3
 800bd16:	f005 fd25 	bl	8011764 <USB_ReadInterrupts>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	f003 0304 	and.w	r3, r3, #4
 800bd20:	2b04      	cmp	r3, #4
 800bd22:	d115      	bne.n	800bd50 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800bd2c:	69bb      	ldr	r3, [r7, #24]
 800bd2e:	f003 0304 	and.w	r3, r3, #4
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d002      	beq.n	800bd3c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7f6 fb66 	bl	8002408 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	6859      	ldr	r1, [r3, #4]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	69ba      	ldr	r2, [r7, #24]
 800bd48:	430a      	orrs	r2, r1
 800bd4a:	605a      	str	r2, [r3, #4]
 800bd4c:	e000      	b.n	800bd50 <HAL_PCD_IRQHandler+0x992>
      return;
 800bd4e:	bf00      	nop
    }
  }
}
 800bd50:	3734      	adds	r7, #52	@ 0x34
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd90      	pop	{r4, r7, pc}

0800bd56 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b082      	sub	sp, #8
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	460b      	mov	r3, r1
 800bd60:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d101      	bne.n	800bd70 <HAL_PCD_SetAddress+0x1a>
 800bd6c:	2302      	movs	r3, #2
 800bd6e:	e013      	b.n	800bd98 <HAL_PCD_SetAddress+0x42>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2201      	movs	r2, #1
 800bd74:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	78fa      	ldrb	r2, [r7, #3]
 800bd7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	78fa      	ldrb	r2, [r7, #3]
 800bd86:	4611      	mov	r1, r2
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f005 fc83 	bl	8011694 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800bd96:	2300      	movs	r3, #0
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	4608      	mov	r0, r1
 800bdaa:	4611      	mov	r1, r2
 800bdac:	461a      	mov	r2, r3
 800bdae:	4603      	mov	r3, r0
 800bdb0:	70fb      	strb	r3, [r7, #3]
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	803b      	strh	r3, [r7, #0]
 800bdb6:	4613      	mov	r3, r2
 800bdb8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bdbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	da0f      	bge.n	800bde6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bdc6:	78fb      	ldrb	r3, [r7, #3]
 800bdc8:	f003 020f 	and.w	r2, r3, #15
 800bdcc:	4613      	mov	r3, r2
 800bdce:	00db      	lsls	r3, r3, #3
 800bdd0:	4413      	add	r3, r2
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	3338      	adds	r3, #56	@ 0x38
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	4413      	add	r3, r2
 800bdda:	3304      	adds	r3, #4
 800bddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2201      	movs	r2, #1
 800bde2:	705a      	strb	r2, [r3, #1]
 800bde4:	e00f      	b.n	800be06 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bde6:	78fb      	ldrb	r3, [r7, #3]
 800bde8:	f003 020f 	and.w	r2, r3, #15
 800bdec:	4613      	mov	r3, r2
 800bdee:	00db      	lsls	r3, r3, #3
 800bdf0:	4413      	add	r3, r2
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	3304      	adds	r3, #4
 800bdfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2200      	movs	r2, #0
 800be04:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800be06:	78fb      	ldrb	r3, [r7, #3]
 800be08:	f003 030f 	and.w	r3, r3, #15
 800be0c:	b2da      	uxtb	r2, r3
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800be12:	883a      	ldrh	r2, [r7, #0]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	78ba      	ldrb	r2, [r7, #2]
 800be1c:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	785b      	ldrb	r3, [r3, #1]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d004      	beq.n	800be30 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	461a      	mov	r2, r3
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800be30:	78bb      	ldrb	r3, [r7, #2]
 800be32:	2b02      	cmp	r3, #2
 800be34:	d102      	bne.n	800be3c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2200      	movs	r2, #0
 800be3a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800be42:	2b01      	cmp	r3, #1
 800be44:	d101      	bne.n	800be4a <HAL_PCD_EP_Open+0xaa>
 800be46:	2302      	movs	r3, #2
 800be48:	e00e      	b.n	800be68 <HAL_PCD_EP_Open+0xc8>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2201      	movs	r2, #1
 800be4e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	68f9      	ldr	r1, [r7, #12]
 800be58:	4618      	mov	r0, r3
 800be5a:	f004 fe0b 	bl	8010a74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 800be66:	7afb      	ldrb	r3, [r7, #11]
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3710      	adds	r7, #16
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800be7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be80:	2b00      	cmp	r3, #0
 800be82:	da0f      	bge.n	800bea4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800be84:	78fb      	ldrb	r3, [r7, #3]
 800be86:	f003 020f 	and.w	r2, r3, #15
 800be8a:	4613      	mov	r3, r2
 800be8c:	00db      	lsls	r3, r3, #3
 800be8e:	4413      	add	r3, r2
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	3338      	adds	r3, #56	@ 0x38
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	4413      	add	r3, r2
 800be98:	3304      	adds	r3, #4
 800be9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2201      	movs	r2, #1
 800bea0:	705a      	strb	r2, [r3, #1]
 800bea2:	e00f      	b.n	800bec4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bea4:	78fb      	ldrb	r3, [r7, #3]
 800bea6:	f003 020f 	and.w	r2, r3, #15
 800beaa:	4613      	mov	r3, r2
 800beac:	00db      	lsls	r3, r3, #3
 800beae:	4413      	add	r3, r2
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	4413      	add	r3, r2
 800beba:	3304      	adds	r3, #4
 800bebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2200      	movs	r2, #0
 800bec2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800bec4:	78fb      	ldrb	r3, [r7, #3]
 800bec6:	f003 030f 	and.w	r3, r3, #15
 800beca:	b2da      	uxtb	r2, r3
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d101      	bne.n	800bede <HAL_PCD_EP_Close+0x6e>
 800beda:	2302      	movs	r3, #2
 800bedc:	e00e      	b.n	800befc <HAL_PCD_EP_Close+0x8c>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2201      	movs	r2, #1
 800bee2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	68f9      	ldr	r1, [r7, #12]
 800beec:	4618      	mov	r0, r3
 800beee:	f004 fe49 	bl	8010b84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b086      	sub	sp, #24
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	607a      	str	r2, [r7, #4]
 800bf0e:	603b      	str	r3, [r7, #0]
 800bf10:	460b      	mov	r3, r1
 800bf12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bf14:	7afb      	ldrb	r3, [r7, #11]
 800bf16:	f003 020f 	and.w	r2, r3, #15
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	00db      	lsls	r3, r3, #3
 800bf1e:	4413      	add	r3, r2
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	4413      	add	r3, r2
 800bf2a:	3304      	adds	r3, #4
 800bf2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	683a      	ldr	r2, [r7, #0]
 800bf38:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	2200      	movs	r2, #0
 800bf44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bf46:	7afb      	ldrb	r3, [r7, #11]
 800bf48:	f003 030f 	and.w	r3, r3, #15
 800bf4c:	b2da      	uxtb	r2, r3
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d102      	bne.n	800bf60 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	6818      	ldr	r0, [r3, #0]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	6979      	ldr	r1, [r7, #20]
 800bf6e:	f004 fee5 	bl	8010d3c <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800bf72:	2300      	movs	r3, #0
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3718      	adds	r7, #24
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	460b      	mov	r3, r1
 800bf86:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800bf88:	78fb      	ldrb	r3, [r7, #3]
 800bf8a:	f003 020f 	and.w	r2, r3, #15
 800bf8e:	6879      	ldr	r1, [r7, #4]
 800bf90:	4613      	mov	r3, r2
 800bf92:	00db      	lsls	r3, r3, #3
 800bf94:	4413      	add	r3, r2
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	440b      	add	r3, r1
 800bf9a:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 800bf9e:	681b      	ldr	r3, [r3, #0]
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	607a      	str	r2, [r7, #4]
 800bfb6:	603b      	str	r3, [r7, #0]
 800bfb8:	460b      	mov	r3, r1
 800bfba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bfbc:	7afb      	ldrb	r3, [r7, #11]
 800bfbe:	f003 020f 	and.w	r2, r3, #15
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	00db      	lsls	r3, r3, #3
 800bfc6:	4413      	add	r3, r2
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	3338      	adds	r3, #56	@ 0x38
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	4413      	add	r3, r2
 800bfd0:	3304      	adds	r3, #4
 800bfd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	2201      	movs	r2, #1
 800bfea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bfec:	7afb      	ldrb	r3, [r7, #11]
 800bfee:	f003 030f 	and.w	r3, r3, #15
 800bff2:	b2da      	uxtb	r2, r3
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d102      	bne.n	800c006 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6818      	ldr	r0, [r3, #0]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	68db      	ldr	r3, [r3, #12]
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	461a      	mov	r2, r3
 800c012:	6979      	ldr	r1, [r7, #20]
 800c014:	f004 fe92 	bl	8010d3c <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3718      	adds	r7, #24
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}

0800c022 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c022:	b580      	push	{r7, lr}
 800c024:	b084      	sub	sp, #16
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
 800c02a:	460b      	mov	r3, r1
 800c02c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c02e:	78fb      	ldrb	r3, [r7, #3]
 800c030:	f003 020f 	and.w	r2, r3, #15
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d901      	bls.n	800c040 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	e050      	b.n	800c0e2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c044:	2b00      	cmp	r3, #0
 800c046:	da0f      	bge.n	800c068 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c048:	78fb      	ldrb	r3, [r7, #3]
 800c04a:	f003 020f 	and.w	r2, r3, #15
 800c04e:	4613      	mov	r3, r2
 800c050:	00db      	lsls	r3, r3, #3
 800c052:	4413      	add	r3, r2
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	3338      	adds	r3, #56	@ 0x38
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	4413      	add	r3, r2
 800c05c:	3304      	adds	r3, #4
 800c05e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2201      	movs	r2, #1
 800c064:	705a      	strb	r2, [r3, #1]
 800c066:	e00d      	b.n	800c084 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c068:	78fa      	ldrb	r2, [r7, #3]
 800c06a:	4613      	mov	r3, r2
 800c06c:	00db      	lsls	r3, r3, #3
 800c06e:	4413      	add	r3, r2
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	4413      	add	r3, r2
 800c07a:	3304      	adds	r3, #4
 800c07c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2200      	movs	r2, #0
 800c082:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2201      	movs	r2, #1
 800c088:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c08a:	78fb      	ldrb	r3, [r7, #3]
 800c08c:	f003 030f 	and.w	r3, r3, #15
 800c090:	b2da      	uxtb	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d101      	bne.n	800c0a4 <HAL_PCD_EP_SetStall+0x82>
 800c0a0:	2302      	movs	r3, #2
 800c0a2:	e01e      	b.n	800c0e2 <HAL_PCD_EP_SetStall+0xc0>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	68f9      	ldr	r1, [r7, #12]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f005 fa1a 	bl	80114ec <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c0b8:	78fb      	ldrb	r3, [r7, #3]
 800c0ba:	f003 030f 	and.w	r3, r3, #15
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d10a      	bne.n	800c0d8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6818      	ldr	r0, [r3, #0]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	b2d9      	uxtb	r1, r3
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	f005 fc0a 	bl	80118ec <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800c0e0:	2300      	movs	r3, #0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b084      	sub	sp, #16
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c0f6:	78fb      	ldrb	r3, [r7, #3]
 800c0f8:	f003 020f 	and.w	r2, r3, #15
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	429a      	cmp	r2, r3
 800c102:	d901      	bls.n	800c108 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c104:	2301      	movs	r3, #1
 800c106:	e042      	b.n	800c18e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	da0f      	bge.n	800c130 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c110:	78fb      	ldrb	r3, [r7, #3]
 800c112:	f003 020f 	and.w	r2, r3, #15
 800c116:	4613      	mov	r3, r2
 800c118:	00db      	lsls	r3, r3, #3
 800c11a:	4413      	add	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	3338      	adds	r3, #56	@ 0x38
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	4413      	add	r3, r2
 800c124:	3304      	adds	r3, #4
 800c126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2201      	movs	r2, #1
 800c12c:	705a      	strb	r2, [r3, #1]
 800c12e:	e00f      	b.n	800c150 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c130:	78fb      	ldrb	r3, [r7, #3]
 800c132:	f003 020f 	and.w	r2, r3, #15
 800c136:	4613      	mov	r3, r2
 800c138:	00db      	lsls	r3, r3, #3
 800c13a:	4413      	add	r3, r2
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	4413      	add	r3, r2
 800c146:	3304      	adds	r3, #4
 800c148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2200      	movs	r2, #0
 800c14e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2200      	movs	r2, #0
 800c154:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c156:	78fb      	ldrb	r3, [r7, #3]
 800c158:	f003 030f 	and.w	r3, r3, #15
 800c15c:	b2da      	uxtb	r2, r3
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d101      	bne.n	800c170 <HAL_PCD_EP_ClrStall+0x86>
 800c16c:	2302      	movs	r3, #2
 800c16e:	e00e      	b.n	800c18e <HAL_PCD_EP_ClrStall+0xa4>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	68f9      	ldr	r1, [r7, #12]
 800c17e:	4618      	mov	r0, r3
 800c180:	f005 fa22 	bl	80115c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b084      	sub	sp, #16
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	460b      	mov	r3, r1
 800c1a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c1a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	da0c      	bge.n	800c1c4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c1aa:	78fb      	ldrb	r3, [r7, #3]
 800c1ac:	f003 020f 	and.w	r2, r3, #15
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	00db      	lsls	r3, r3, #3
 800c1b4:	4413      	add	r3, r2
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	3338      	adds	r3, #56	@ 0x38
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	4413      	add	r3, r2
 800c1be:	3304      	adds	r3, #4
 800c1c0:	60fb      	str	r3, [r7, #12]
 800c1c2:	e00c      	b.n	800c1de <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c1c4:	78fb      	ldrb	r3, [r7, #3]
 800c1c6:	f003 020f 	and.w	r2, r3, #15
 800c1ca:	4613      	mov	r3, r2
 800c1cc:	00db      	lsls	r3, r3, #3
 800c1ce:	4413      	add	r3, r2
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	4413      	add	r3, r2
 800c1da:	3304      	adds	r3, #4
 800c1dc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	68f9      	ldr	r1, [r7, #12]
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f005 f841 	bl	801126c <USB_EPStopXfer>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c1ee:	7afb      	ldrb	r3, [r7, #11]
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3710      	adds	r7, #16
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b08a      	sub	sp, #40	@ 0x28
 800c1fc:	af02      	add	r7, sp, #8
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c20c:	683a      	ldr	r2, [r7, #0]
 800c20e:	4613      	mov	r3, r2
 800c210:	00db      	lsls	r3, r3, #3
 800c212:	4413      	add	r3, r2
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	3338      	adds	r3, #56	@ 0x38
 800c218:	687a      	ldr	r2, [r7, #4]
 800c21a:	4413      	add	r3, r2
 800c21c:	3304      	adds	r3, #4
 800c21e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	695a      	ldr	r2, [r3, #20]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	691b      	ldr	r3, [r3, #16]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d901      	bls.n	800c230 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c22c:	2301      	movs	r3, #1
 800c22e:	e06c      	b.n	800c30a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	691a      	ldr	r2, [r3, #16]
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	695b      	ldr	r3, [r3, #20]
 800c238:	1ad3      	subs	r3, r2, r3
 800c23a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	69fa      	ldr	r2, [r7, #28]
 800c242:	429a      	cmp	r2, r3
 800c244:	d902      	bls.n	800c24c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	3303      	adds	r3, #3
 800c250:	089b      	lsrs	r3, r3, #2
 800c252:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c254:	e02b      	b.n	800c2ae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	691a      	ldr	r2, [r3, #16]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	695b      	ldr	r3, [r3, #20]
 800c25e:	1ad3      	subs	r3, r2, r3
 800c260:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	69fa      	ldr	r2, [r7, #28]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d902      	bls.n	800c272 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	3303      	adds	r3, #3
 800c276:	089b      	lsrs	r3, r3, #2
 800c278:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	68d9      	ldr	r1, [r3, #12]
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	b2da      	uxtb	r2, r3
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	9300      	str	r3, [sp, #0]
 800c28e:	4603      	mov	r3, r0
 800c290:	6978      	ldr	r0, [r7, #20]
 800c292:	f005 f895 	bl	80113c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	68da      	ldr	r2, [r3, #12]
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	441a      	add	r2, r3
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	695a      	ldr	r2, [r3, #20]
 800c2a6:	69fb      	ldr	r3, [r7, #28]
 800c2a8:	441a      	add	r2, r3
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	015a      	lsls	r2, r3, #5
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2ba:	699b      	ldr	r3, [r3, #24]
 800c2bc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c2be:	69ba      	ldr	r2, [r7, #24]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d809      	bhi.n	800c2d8 <PCD_WriteEmptyTxFifo+0xe0>
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	695a      	ldr	r2, [r3, #20]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d203      	bcs.n	800c2d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	691b      	ldr	r3, [r3, #16]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d1be      	bne.n	800c256 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	691a      	ldr	r2, [r3, #16]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	695b      	ldr	r3, [r3, #20]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d811      	bhi.n	800c308 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	f003 030f 	and.w	r3, r3, #15
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c2f0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	43db      	mvns	r3, r3
 800c2fe:	6939      	ldr	r1, [r7, #16]
 800c300:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c304:	4013      	ands	r3, r2
 800c306:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3720      	adds	r7, #32
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
	...

0800c314 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b088      	sub	sp, #32
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	333c      	adds	r3, #60	@ 0x3c
 800c32c:	3304      	adds	r3, #4
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	015a      	lsls	r2, r3, #5
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	4413      	add	r3, r2
 800c33a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	2b01      	cmp	r3, #1
 800c348:	d17b      	bne.n	800c442 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	f003 0308 	and.w	r3, r3, #8
 800c350:	2b00      	cmp	r3, #0
 800c352:	d015      	beq.n	800c380 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	4a61      	ldr	r2, [pc, #388]	@ (800c4dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	f240 80b9 	bls.w	800c4d0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c364:	2b00      	cmp	r3, #0
 800c366:	f000 80b3 	beq.w	800c4d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	015a      	lsls	r2, r3, #5
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	4413      	add	r3, r2
 800c372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c376:	461a      	mov	r2, r3
 800c378:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c37c:	6093      	str	r3, [r2, #8]
 800c37e:	e0a7      	b.n	800c4d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	f003 0320 	and.w	r3, r3, #32
 800c386:	2b00      	cmp	r3, #0
 800c388:	d009      	beq.n	800c39e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	015a      	lsls	r2, r3, #5
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	4413      	add	r3, r2
 800c392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c396:	461a      	mov	r2, r3
 800c398:	2320      	movs	r3, #32
 800c39a:	6093      	str	r3, [r2, #8]
 800c39c:	e098      	b.n	800c4d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	f040 8093 	bne.w	800c4d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	4a4b      	ldr	r2, [pc, #300]	@ (800c4dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d90f      	bls.n	800c3d2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00a      	beq.n	800c3d2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	015a      	lsls	r2, r3, #5
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c3ce:	6093      	str	r3, [r2, #8]
 800c3d0:	e07e      	b.n	800c4d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c3d2:	683a      	ldr	r2, [r7, #0]
 800c3d4:	4613      	mov	r3, r2
 800c3d6:	00db      	lsls	r3, r3, #3
 800c3d8:	4413      	add	r3, r2
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	4413      	add	r3, r2
 800c3e4:	3304      	adds	r3, #4
 800c3e6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	6a1a      	ldr	r2, [r3, #32]
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	0159      	lsls	r1, r3, #5
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	440b      	add	r3, r1
 800c3f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3f8:	691b      	ldr	r3, [r3, #16]
 800c3fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3fe:	1ad2      	subs	r2, r2, r3
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d114      	bne.n	800c434 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d109      	bne.n	800c426 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6818      	ldr	r0, [r3, #0]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800c41c:	461a      	mov	r2, r3
 800c41e:	2101      	movs	r1, #1
 800c420:	f005 fa64 	bl	80118ec <USB_EP0_OutStart>
 800c424:	e006      	b.n	800c434 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	68da      	ldr	r2, [r3, #12]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	695b      	ldr	r3, [r3, #20]
 800c42e:	441a      	add	r2, r3
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	b2db      	uxtb	r3, r3
 800c438:	4619      	mov	r1, r3
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f7f5 fee4 	bl	8002208 <HAL_PCD_DataOutStageCallback>
 800c440:	e046      	b.n	800c4d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	4a26      	ldr	r2, [pc, #152]	@ (800c4e0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d124      	bne.n	800c494 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00a      	beq.n	800c46a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	015a      	lsls	r2, r3, #5
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	4413      	add	r3, r2
 800c45c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c460:	461a      	mov	r2, r3
 800c462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c466:	6093      	str	r3, [r2, #8]
 800c468:	e032      	b.n	800c4d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	f003 0320 	and.w	r3, r3, #32
 800c470:	2b00      	cmp	r3, #0
 800c472:	d008      	beq.n	800c486 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	015a      	lsls	r2, r3, #5
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	4413      	add	r3, r2
 800c47c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c480:	461a      	mov	r2, r3
 800c482:	2320      	movs	r3, #32
 800c484:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	4619      	mov	r1, r3
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f7f5 febb 	bl	8002208 <HAL_PCD_DataOutStageCallback>
 800c492:	e01d      	b.n	800c4d0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d114      	bne.n	800c4c4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800c49a:	6879      	ldr	r1, [r7, #4]
 800c49c:	683a      	ldr	r2, [r7, #0]
 800c49e:	4613      	mov	r3, r2
 800c4a0:	00db      	lsls	r3, r3, #3
 800c4a2:	4413      	add	r3, r2
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	440b      	add	r3, r1
 800c4a8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d108      	bne.n	800c4c4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6818      	ldr	r0, [r3, #0]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800c4bc:	461a      	mov	r2, r3
 800c4be:	2100      	movs	r1, #0
 800c4c0:	f005 fa14 	bl	80118ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f7f5 fe9c 	bl	8002208 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c4d0:	2300      	movs	r3, #0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3720      	adds	r7, #32
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop
 800c4dc:	4f54300a 	.word	0x4f54300a
 800c4e0:	4f54310a 	.word	0x4f54310a

0800c4e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b086      	sub	sp, #24
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	333c      	adds	r3, #60	@ 0x3c
 800c4fc:	3304      	adds	r3, #4
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	015a      	lsls	r2, r3, #5
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	4413      	add	r3, r2
 800c50a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	4a15      	ldr	r2, [pc, #84]	@ (800c56c <PCD_EP_OutSetupPacket_int+0x88>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d90e      	bls.n	800c538 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c520:	2b00      	cmp	r3, #0
 800c522:	d009      	beq.n	800c538 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	015a      	lsls	r2, r3, #5
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	4413      	add	r3, r2
 800c52c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c530:	461a      	mov	r2, r3
 800c532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c536:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f7f5 fe53 	bl	80021e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	4a0a      	ldr	r2, [pc, #40]	@ (800c56c <PCD_EP_OutSetupPacket_int+0x88>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d90c      	bls.n	800c560 <PCD_EP_OutSetupPacket_int+0x7c>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d108      	bne.n	800c560 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6818      	ldr	r0, [r3, #0]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800c558:	461a      	mov	r2, r3
 800c55a:	2101      	movs	r1, #1
 800c55c:	f005 f9c6 	bl	80118ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	3718      	adds	r7, #24
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	4f54300a 	.word	0x4f54300a

0800c570 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c570:	b480      	push	{r7}
 800c572:	b085      	sub	sp, #20
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	460b      	mov	r3, r1
 800c57a:	70fb      	strb	r3, [r7, #3]
 800c57c:	4613      	mov	r3, r2
 800c57e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c586:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c588:	78fb      	ldrb	r3, [r7, #3]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d107      	bne.n	800c59e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c58e:	883b      	ldrh	r3, [r7, #0]
 800c590:	0419      	lsls	r1, r3, #16
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	68ba      	ldr	r2, [r7, #8]
 800c598:	430a      	orrs	r2, r1
 800c59a:	629a      	str	r2, [r3, #40]	@ 0x28
 800c59c:	e028      	b.n	800c5f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5a4:	0c1b      	lsrs	r3, r3, #16
 800c5a6:	68ba      	ldr	r2, [r7, #8]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	73fb      	strb	r3, [r7, #15]
 800c5b0:	e00d      	b.n	800c5ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	7bfb      	ldrb	r3, [r7, #15]
 800c5b8:	3340      	adds	r3, #64	@ 0x40
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	4413      	add	r3, r2
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	0c1b      	lsrs	r3, r3, #16
 800c5c2:	68ba      	ldr	r2, [r7, #8]
 800c5c4:	4413      	add	r3, r2
 800c5c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c5c8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	73fb      	strb	r3, [r7, #15]
 800c5ce:	7bfa      	ldrb	r2, [r7, #15]
 800c5d0:	78fb      	ldrb	r3, [r7, #3]
 800c5d2:	3b01      	subs	r3, #1
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d3ec      	bcc.n	800c5b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c5d8:	883b      	ldrh	r3, [r7, #0]
 800c5da:	0418      	lsls	r0, r3, #16
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6819      	ldr	r1, [r3, #0]
 800c5e0:	78fb      	ldrb	r3, [r7, #3]
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	68ba      	ldr	r2, [r7, #8]
 800c5e6:	4302      	orrs	r2, r0
 800c5e8:	3340      	adds	r3, #64	@ 0x40
 800c5ea:	009b      	lsls	r3, r3, #2
 800c5ec:	440b      	add	r3, r1
 800c5ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3714      	adds	r7, #20
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c5fe:	b480      	push	{r7}
 800c600:	b083      	sub	sp, #12
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
 800c606:	460b      	mov	r3, r1
 800c608:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	887a      	ldrh	r2, [r7, #2]
 800c610:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c612:	2300      	movs	r3, #0
}
 800c614:	4618      	mov	r0, r3
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c620:	b480      	push	{r7}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2201      	movs	r2, #1
 800c632:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2200      	movs	r2, #0
 800c63a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c64e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c652:	f043 0303 	orr.w	r3, r3, #3
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3714      	adds	r7, #20
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c668:	b480      	push	{r7}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	460b      	mov	r3, r1
 800c672:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c674:	bf00      	nop
 800c676:	370c      	adds	r7, #12
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <HAL_PWR_EnableSleepOnExit>:
  *         Setting this bit is useful when the processor is expected to run
  *         only on interruptions handling.
  * @retval None.
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 800c680:	b480      	push	{r7}
 800c682:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex-M33 System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
 800c684:	4b05      	ldr	r3, [pc, #20]	@ (800c69c <HAL_PWR_EnableSleepOnExit+0x1c>)
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	4a04      	ldr	r2, [pc, #16]	@ (800c69c <HAL_PWR_EnableSleepOnExit+0x1c>)
 800c68a:	f043 0302 	orr.w	r3, r3, #2
 800c68e:	6113      	str	r3, [r2, #16]
}
 800c690:	bf00      	nop
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr
 800c69a:	bf00      	nop
 800c69c:	e000ed00 	.word	0xe000ed00

0800c6a0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800c6a8:	4b39      	ldr	r3, [pc, #228]	@ (800c790 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c6aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c6b0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800c6b2:	68ba      	ldr	r2, [r7, #8]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d10b      	bne.n	800c6d2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c6c0:	d905      	bls.n	800c6ce <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800c6c2:	4b33      	ldr	r3, [pc, #204]	@ (800c790 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c6c4:	68db      	ldr	r3, [r3, #12]
 800c6c6:	4a32      	ldr	r2, [pc, #200]	@ (800c790 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c6c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c6cc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	e057      	b.n	800c782 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c6d8:	d90a      	bls.n	800c6f0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800c6da:	4b2d      	ldr	r3, [pc, #180]	@ (800c790 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	4a2a      	ldr	r2, [pc, #168]	@ (800c790 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c6e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c6ec:	60d3      	str	r3, [r2, #12]
 800c6ee:	e007      	b.n	800c700 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800c6f0:	4b27      	ldr	r3, [pc, #156]	@ (800c790 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800c6f8:	4925      	ldr	r1, [pc, #148]	@ (800c790 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800c700:	4b24      	ldr	r3, [pc, #144]	@ (800c794 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4a24      	ldr	r2, [pc, #144]	@ (800c798 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c706:	fba2 2303 	umull	r2, r3, r2, r3
 800c70a:	099b      	lsrs	r3, r3, #6
 800c70c:	2232      	movs	r2, #50	@ 0x32
 800c70e:	fb02 f303 	mul.w	r3, r2, r3
 800c712:	4a21      	ldr	r2, [pc, #132]	@ (800c798 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c714:	fba2 2303 	umull	r2, r3, r2, r3
 800c718:	099b      	lsrs	r3, r3, #6
 800c71a:	3301      	adds	r3, #1
 800c71c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800c71e:	e002      	b.n	800c726 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	3b01      	subs	r3, #1
 800c724:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800c726:	4b1a      	ldr	r3, [pc, #104]	@ (800c790 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d102      	bne.n	800c738 <HAL_PWREx_ControlVoltageScaling+0x98>
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d1f3      	bne.n	800c720 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d01b      	beq.n	800c776 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800c73e:	4b15      	ldr	r3, [pc, #84]	@ (800c794 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4a15      	ldr	r2, [pc, #84]	@ (800c798 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c744:	fba2 2303 	umull	r2, r3, r2, r3
 800c748:	099b      	lsrs	r3, r3, #6
 800c74a:	2232      	movs	r2, #50	@ 0x32
 800c74c:	fb02 f303 	mul.w	r3, r2, r3
 800c750:	4a11      	ldr	r2, [pc, #68]	@ (800c798 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c752:	fba2 2303 	umull	r2, r3, r2, r3
 800c756:	099b      	lsrs	r3, r3, #6
 800c758:	3301      	adds	r3, #1
 800c75a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800c75c:	e002      	b.n	800c764 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	3b01      	subs	r3, #1
 800c762:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800c764:	4b0a      	ldr	r3, [pc, #40]	@ (800c790 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d102      	bne.n	800c776 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d1f3      	bne.n	800c75e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d101      	bne.n	800c780 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800c77c:	2303      	movs	r3, #3
 800c77e:	e000      	b.n	800c782 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800c780:	2300      	movs	r3, #0
}
 800c782:	4618      	mov	r0, r3
 800c784:	3714      	adds	r7, #20
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	46020800 	.word	0x46020800
 800c794:	2000086c 	.word	0x2000086c
 800c798:	10624dd3 	.word	0x10624dd3

0800c79c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c79c:	b480      	push	{r7}
 800c79e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800c7a0:	4b04      	ldr	r3, [pc, #16]	@ (800c7b4 <HAL_PWREx_GetVoltageRange+0x18>)
 800c7a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	46020800 	.word	0x46020800

0800c7b8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800c7bc:	4b05      	ldr	r3, [pc, #20]	@ (800c7d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800c7be:	691b      	ldr	r3, [r3, #16]
 800c7c0:	4a04      	ldr	r2, [pc, #16]	@ (800c7d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800c7c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c7c6:	6113      	str	r3, [r2, #16]
}
 800c7c8:	bf00      	nop
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	46020800 	.word	0x46020800

0800c7d8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800c7dc:	4b05      	ldr	r3, [pc, #20]	@ (800c7f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800c7de:	691b      	ldr	r3, [r3, #16]
 800c7e0:	4a04      	ldr	r2, [pc, #16]	@ (800c7f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800c7e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c7e6:	6113      	str	r3, [r2, #16]
}
 800c7e8:	bf00      	nop
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	46020800 	.word	0x46020800

0800c7f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800c7fc:	4b05      	ldr	r3, [pc, #20]	@ (800c814 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c7fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c800:	4a04      	ldr	r2, [pc, #16]	@ (800c814 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c802:	f043 0301 	orr.w	r3, r3, #1
 800c806:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800c808:	bf00      	nop
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop
 800c814:	46020800 	.word	0x46020800

0800c818 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b08e      	sub	sp, #56	@ 0x38
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800c820:	2300      	movs	r3, #0
 800c822:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d102      	bne.n	800c832 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800c82c:	2301      	movs	r3, #1
 800c82e:	f000 bec8 	b.w	800d5c2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c832:	4b99      	ldr	r3, [pc, #612]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c834:	69db      	ldr	r3, [r3, #28]
 800c836:	f003 030c 	and.w	r3, r3, #12
 800c83a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c83c:	4b96      	ldr	r3, [pc, #600]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c83e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c840:	f003 0303 	and.w	r3, r3, #3
 800c844:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f003 0310 	and.w	r3, r3, #16
 800c84e:	2b00      	cmp	r3, #0
 800c850:	f000 816c 	beq.w	800cb2c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c856:	2b00      	cmp	r3, #0
 800c858:	d007      	beq.n	800c86a <HAL_RCC_OscConfig+0x52>
 800c85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c85c:	2b0c      	cmp	r3, #12
 800c85e:	f040 80de 	bne.w	800ca1e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c864:	2b01      	cmp	r3, #1
 800c866:	f040 80da 	bne.w	800ca1e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	69db      	ldr	r3, [r3, #28]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d102      	bne.n	800c878 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	f000 bea5 	b.w	800d5c2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c87c:	4b86      	ldr	r3, [pc, #536]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c884:	2b00      	cmp	r3, #0
 800c886:	d004      	beq.n	800c892 <HAL_RCC_OscConfig+0x7a>
 800c888:	4b83      	ldr	r3, [pc, #524]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c890:	e005      	b.n	800c89e <HAL_RCC_OscConfig+0x86>
 800c892:	4b81      	ldr	r3, [pc, #516]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c894:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c898:	041b      	lsls	r3, r3, #16
 800c89a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d255      	bcs.n	800c94e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d10a      	bne.n	800c8be <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f001 f99d 	bl	800dbec <RCC_SetFlashLatencyFromMSIRange>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d002      	beq.n	800c8be <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	f000 be82 	b.w	800d5c2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c8be:	4b76      	ldr	r3, [pc, #472]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	4a75      	ldr	r2, [pc, #468]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c8c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c8c8:	6093      	str	r3, [r2, #8]
 800c8ca:	4b73      	ldr	r3, [pc, #460]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8d6:	4970      	ldr	r1, [pc, #448]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8e0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c8e4:	d309      	bcc.n	800c8fa <HAL_RCC_OscConfig+0xe2>
 800c8e6:	4b6c      	ldr	r3, [pc, #432]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	f023 021f 	bic.w	r2, r3, #31
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6a1b      	ldr	r3, [r3, #32]
 800c8f2:	4969      	ldr	r1, [pc, #420]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	60cb      	str	r3, [r1, #12]
 800c8f8:	e07e      	b.n	800c9f8 <HAL_RCC_OscConfig+0x1e0>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	da0a      	bge.n	800c918 <HAL_RCC_OscConfig+0x100>
 800c902:	4b65      	ldr	r3, [pc, #404]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c904:	68db      	ldr	r3, [r3, #12]
 800c906:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6a1b      	ldr	r3, [r3, #32]
 800c90e:	015b      	lsls	r3, r3, #5
 800c910:	4961      	ldr	r1, [pc, #388]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c912:	4313      	orrs	r3, r2
 800c914:	60cb      	str	r3, [r1, #12]
 800c916:	e06f      	b.n	800c9f8 <HAL_RCC_OscConfig+0x1e0>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c91c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c920:	d30a      	bcc.n	800c938 <HAL_RCC_OscConfig+0x120>
 800c922:	4b5d      	ldr	r3, [pc, #372]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6a1b      	ldr	r3, [r3, #32]
 800c92e:	029b      	lsls	r3, r3, #10
 800c930:	4959      	ldr	r1, [pc, #356]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c932:	4313      	orrs	r3, r2
 800c934:	60cb      	str	r3, [r1, #12]
 800c936:	e05f      	b.n	800c9f8 <HAL_RCC_OscConfig+0x1e0>
 800c938:	4b57      	ldr	r3, [pc, #348]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6a1b      	ldr	r3, [r3, #32]
 800c944:	03db      	lsls	r3, r3, #15
 800c946:	4954      	ldr	r1, [pc, #336]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c948:	4313      	orrs	r3, r2
 800c94a:	60cb      	str	r3, [r1, #12]
 800c94c:	e054      	b.n	800c9f8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c94e:	4b52      	ldr	r3, [pc, #328]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	4a51      	ldr	r2, [pc, #324]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c954:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c958:	6093      	str	r3, [r2, #8]
 800c95a:	4b4f      	ldr	r3, [pc, #316]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c95c:	689b      	ldr	r3, [r3, #8]
 800c95e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c966:	494c      	ldr	r1, [pc, #304]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c968:	4313      	orrs	r3, r2
 800c96a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c970:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c974:	d309      	bcc.n	800c98a <HAL_RCC_OscConfig+0x172>
 800c976:	4b48      	ldr	r3, [pc, #288]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c978:	68db      	ldr	r3, [r3, #12]
 800c97a:	f023 021f 	bic.w	r2, r3, #31
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6a1b      	ldr	r3, [r3, #32]
 800c982:	4945      	ldr	r1, [pc, #276]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c984:	4313      	orrs	r3, r2
 800c986:	60cb      	str	r3, [r1, #12]
 800c988:	e028      	b.n	800c9dc <HAL_RCC_OscConfig+0x1c4>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c98e:	2b00      	cmp	r3, #0
 800c990:	da0a      	bge.n	800c9a8 <HAL_RCC_OscConfig+0x190>
 800c992:	4b41      	ldr	r3, [pc, #260]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c994:	68db      	ldr	r3, [r3, #12]
 800c996:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6a1b      	ldr	r3, [r3, #32]
 800c99e:	015b      	lsls	r3, r3, #5
 800c9a0:	493d      	ldr	r1, [pc, #244]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	60cb      	str	r3, [r1, #12]
 800c9a6:	e019      	b.n	800c9dc <HAL_RCC_OscConfig+0x1c4>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9b0:	d30a      	bcc.n	800c9c8 <HAL_RCC_OscConfig+0x1b0>
 800c9b2:	4b39      	ldr	r3, [pc, #228]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6a1b      	ldr	r3, [r3, #32]
 800c9be:	029b      	lsls	r3, r3, #10
 800c9c0:	4935      	ldr	r1, [pc, #212]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	60cb      	str	r3, [r1, #12]
 800c9c6:	e009      	b.n	800c9dc <HAL_RCC_OscConfig+0x1c4>
 800c9c8:	4b33      	ldr	r3, [pc, #204]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6a1b      	ldr	r3, [r3, #32]
 800c9d4:	03db      	lsls	r3, r3, #15
 800c9d6:	4930      	ldr	r1, [pc, #192]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c9dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d10a      	bne.n	800c9f8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f001 f900 	bl	800dbec <RCC_SetFlashLatencyFromMSIRange>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d002      	beq.n	800c9f8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	f000 bde5 	b.w	800d5c2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800c9f8:	f001 f8de 	bl	800dbb8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c9fc:	4b27      	ldr	r3, [pc, #156]	@ (800ca9c <HAL_RCC_OscConfig+0x284>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4618      	mov	r0, r3
 800ca02:	f7fd f905 	bl	8009c10 <HAL_InitTick>
 800ca06:	4603      	mov	r3, r0
 800ca08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800ca0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	f000 808a 	beq.w	800cb2a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800ca16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca1a:	f000 bdd2 	b.w	800d5c2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	69db      	ldr	r3, [r3, #28]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d066      	beq.n	800caf4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800ca26:	4b1c      	ldr	r3, [pc, #112]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a1b      	ldr	r2, [pc, #108]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800ca2c:	f043 0301 	orr.w	r3, r3, #1
 800ca30:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ca32:	f7fd f937 	bl	8009ca4 <HAL_GetTick>
 800ca36:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ca38:	e009      	b.n	800ca4e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ca3a:	f7fd f933 	bl	8009ca4 <HAL_GetTick>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca42:	1ad3      	subs	r3, r2, r3
 800ca44:	2b02      	cmp	r3, #2
 800ca46:	d902      	bls.n	800ca4e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800ca48:	2303      	movs	r3, #3
 800ca4a:	f000 bdba 	b.w	800d5c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ca4e:	4b12      	ldr	r3, [pc, #72]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f003 0304 	and.w	r3, r3, #4
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d0ef      	beq.n	800ca3a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800ca5a:	4b0f      	ldr	r3, [pc, #60]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	4a0e      	ldr	r2, [pc, #56]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800ca60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ca64:	6093      	str	r3, [r2, #8]
 800ca66:	4b0c      	ldr	r3, [pc, #48]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca72:	4909      	ldr	r1, [pc, #36]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800ca74:	4313      	orrs	r3, r2
 800ca76:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca7c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800ca80:	d30e      	bcc.n	800caa0 <HAL_RCC_OscConfig+0x288>
 800ca82:	4b05      	ldr	r3, [pc, #20]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	f023 021f 	bic.w	r2, r3, #31
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6a1b      	ldr	r3, [r3, #32]
 800ca8e:	4902      	ldr	r1, [pc, #8]	@ (800ca98 <HAL_RCC_OscConfig+0x280>)
 800ca90:	4313      	orrs	r3, r2
 800ca92:	60cb      	str	r3, [r1, #12]
 800ca94:	e04a      	b.n	800cb2c <HAL_RCC_OscConfig+0x314>
 800ca96:	bf00      	nop
 800ca98:	46020c00 	.word	0x46020c00
 800ca9c:	20000870 	.word	0x20000870
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	da0a      	bge.n	800cabe <HAL_RCC_OscConfig+0x2a6>
 800caa8:	4b98      	ldr	r3, [pc, #608]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6a1b      	ldr	r3, [r3, #32]
 800cab4:	015b      	lsls	r3, r3, #5
 800cab6:	4995      	ldr	r1, [pc, #596]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cab8:	4313      	orrs	r3, r2
 800caba:	60cb      	str	r3, [r1, #12]
 800cabc:	e036      	b.n	800cb2c <HAL_RCC_OscConfig+0x314>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cac6:	d30a      	bcc.n	800cade <HAL_RCC_OscConfig+0x2c6>
 800cac8:	4b90      	ldr	r3, [pc, #576]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6a1b      	ldr	r3, [r3, #32]
 800cad4:	029b      	lsls	r3, r3, #10
 800cad6:	498d      	ldr	r1, [pc, #564]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cad8:	4313      	orrs	r3, r2
 800cada:	60cb      	str	r3, [r1, #12]
 800cadc:	e026      	b.n	800cb2c <HAL_RCC_OscConfig+0x314>
 800cade:	4b8b      	ldr	r3, [pc, #556]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cae0:	68db      	ldr	r3, [r3, #12]
 800cae2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6a1b      	ldr	r3, [r3, #32]
 800caea:	03db      	lsls	r3, r3, #15
 800caec:	4987      	ldr	r1, [pc, #540]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800caee:	4313      	orrs	r3, r2
 800caf0:	60cb      	str	r3, [r1, #12]
 800caf2:	e01b      	b.n	800cb2c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800caf4:	4b85      	ldr	r3, [pc, #532]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a84      	ldr	r2, [pc, #528]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cafa:	f023 0301 	bic.w	r3, r3, #1
 800cafe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cb00:	f7fd f8d0 	bl	8009ca4 <HAL_GetTick>
 800cb04:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800cb06:	e009      	b.n	800cb1c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cb08:	f7fd f8cc 	bl	8009ca4 <HAL_GetTick>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb10:	1ad3      	subs	r3, r2, r3
 800cb12:	2b02      	cmp	r3, #2
 800cb14:	d902      	bls.n	800cb1c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800cb16:	2303      	movs	r3, #3
 800cb18:	f000 bd53 	b.w	800d5c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800cb1c:	4b7b      	ldr	r3, [pc, #492]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f003 0304 	and.w	r3, r3, #4
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d1ef      	bne.n	800cb08 <HAL_RCC_OscConfig+0x2f0>
 800cb28:	e000      	b.n	800cb2c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800cb2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f003 0301 	and.w	r3, r3, #1
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f000 808b 	beq.w	800cc50 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb3c:	2b08      	cmp	r3, #8
 800cb3e:	d005      	beq.n	800cb4c <HAL_RCC_OscConfig+0x334>
 800cb40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb42:	2b0c      	cmp	r3, #12
 800cb44:	d109      	bne.n	800cb5a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800cb46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb48:	2b03      	cmp	r3, #3
 800cb4a:	d106      	bne.n	800cb5a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d17d      	bne.n	800cc50 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800cb54:	2301      	movs	r3, #1
 800cb56:	f000 bd34 	b.w	800d5c2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb62:	d106      	bne.n	800cb72 <HAL_RCC_OscConfig+0x35a>
 800cb64:	4b69      	ldr	r3, [pc, #420]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a68      	ldr	r2, [pc, #416]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cb6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cb6e:	6013      	str	r3, [r2, #0]
 800cb70:	e041      	b.n	800cbf6 <HAL_RCC_OscConfig+0x3de>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cb7a:	d112      	bne.n	800cba2 <HAL_RCC_OscConfig+0x38a>
 800cb7c:	4b63      	ldr	r3, [pc, #396]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a62      	ldr	r2, [pc, #392]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cb82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cb86:	6013      	str	r3, [r2, #0]
 800cb88:	4b60      	ldr	r3, [pc, #384]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4a5f      	ldr	r2, [pc, #380]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cb8e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cb92:	6013      	str	r3, [r2, #0]
 800cb94:	4b5d      	ldr	r3, [pc, #372]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a5c      	ldr	r2, [pc, #368]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cb9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cb9e:	6013      	str	r3, [r2, #0]
 800cba0:	e029      	b.n	800cbf6 <HAL_RCC_OscConfig+0x3de>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800cbaa:	d112      	bne.n	800cbd2 <HAL_RCC_OscConfig+0x3ba>
 800cbac:	4b57      	ldr	r3, [pc, #348]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a56      	ldr	r2, [pc, #344]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cbb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cbb6:	6013      	str	r3, [r2, #0]
 800cbb8:	4b54      	ldr	r3, [pc, #336]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a53      	ldr	r2, [pc, #332]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cbbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cbc2:	6013      	str	r3, [r2, #0]
 800cbc4:	4b51      	ldr	r3, [pc, #324]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a50      	ldr	r2, [pc, #320]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cbca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cbce:	6013      	str	r3, [r2, #0]
 800cbd0:	e011      	b.n	800cbf6 <HAL_RCC_OscConfig+0x3de>
 800cbd2:	4b4e      	ldr	r3, [pc, #312]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a4d      	ldr	r2, [pc, #308]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cbd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cbdc:	6013      	str	r3, [r2, #0]
 800cbde:	4b4b      	ldr	r3, [pc, #300]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a4a      	ldr	r2, [pc, #296]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cbe4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cbe8:	6013      	str	r3, [r2, #0]
 800cbea:	4b48      	ldr	r3, [pc, #288]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a47      	ldr	r2, [pc, #284]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cbf0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cbf4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d014      	beq.n	800cc28 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800cbfe:	f7fd f851 	bl	8009ca4 <HAL_GetTick>
 800cc02:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cc04:	e009      	b.n	800cc1a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc06:	f7fd f84d 	bl	8009ca4 <HAL_GetTick>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc0e:	1ad3      	subs	r3, r2, r3
 800cc10:	2b64      	cmp	r3, #100	@ 0x64
 800cc12:	d902      	bls.n	800cc1a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800cc14:	2303      	movs	r3, #3
 800cc16:	f000 bcd4 	b.w	800d5c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cc1a:	4b3c      	ldr	r3, [pc, #240]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d0ef      	beq.n	800cc06 <HAL_RCC_OscConfig+0x3ee>
 800cc26:	e013      	b.n	800cc50 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800cc28:	f7fd f83c 	bl	8009ca4 <HAL_GetTick>
 800cc2c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cc2e:	e009      	b.n	800cc44 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc30:	f7fd f838 	bl	8009ca4 <HAL_GetTick>
 800cc34:	4602      	mov	r2, r0
 800cc36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc38:	1ad3      	subs	r3, r2, r3
 800cc3a:	2b64      	cmp	r3, #100	@ 0x64
 800cc3c:	d902      	bls.n	800cc44 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800cc3e:	2303      	movs	r3, #3
 800cc40:	f000 bcbf 	b.w	800d5c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cc44:	4b31      	ldr	r3, [pc, #196]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1ef      	bne.n	800cc30 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f003 0302 	and.w	r3, r3, #2
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d05f      	beq.n	800cd1c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800cc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc5e:	2b04      	cmp	r3, #4
 800cc60:	d005      	beq.n	800cc6e <HAL_RCC_OscConfig+0x456>
 800cc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc64:	2b0c      	cmp	r3, #12
 800cc66:	d114      	bne.n	800cc92 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800cc68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc6a:	2b02      	cmp	r3, #2
 800cc6c:	d111      	bne.n	800cc92 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	68db      	ldr	r3, [r3, #12]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d102      	bne.n	800cc7c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800cc76:	2301      	movs	r3, #1
 800cc78:	f000 bca3 	b.w	800d5c2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800cc7c:	4b23      	ldr	r3, [pc, #140]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cc7e:	691b      	ldr	r3, [r3, #16]
 800cc80:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	691b      	ldr	r3, [r3, #16]
 800cc88:	041b      	lsls	r3, r3, #16
 800cc8a:	4920      	ldr	r1, [pc, #128]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800cc90:	e044      	b.n	800cd1c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	68db      	ldr	r3, [r3, #12]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d024      	beq.n	800cce4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800cc9a:	4b1c      	ldr	r3, [pc, #112]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4a1b      	ldr	r2, [pc, #108]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cca4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cca6:	f7fc fffd 	bl	8009ca4 <HAL_GetTick>
 800ccaa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ccac:	e009      	b.n	800ccc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ccae:	f7fc fff9 	bl	8009ca4 <HAL_GetTick>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb6:	1ad3      	subs	r3, r2, r3
 800ccb8:	2b02      	cmp	r3, #2
 800ccba:	d902      	bls.n	800ccc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ccbc:	2303      	movs	r3, #3
 800ccbe:	f000 bc80 	b.w	800d5c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ccc2:	4b12      	ldr	r3, [pc, #72]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d0ef      	beq.n	800ccae <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800ccce:	4b0f      	ldr	r3, [pc, #60]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800ccd0:	691b      	ldr	r3, [r3, #16]
 800ccd2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	041b      	lsls	r3, r3, #16
 800ccdc:	490b      	ldr	r1, [pc, #44]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800ccde:	4313      	orrs	r3, r2
 800cce0:	610b      	str	r3, [r1, #16]
 800cce2:	e01b      	b.n	800cd1c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800cce4:	4b09      	ldr	r3, [pc, #36]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4a08      	ldr	r2, [pc, #32]	@ (800cd0c <HAL_RCC_OscConfig+0x4f4>)
 800ccea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ccee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ccf0:	f7fc ffd8 	bl	8009ca4 <HAL_GetTick>
 800ccf4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ccf6:	e00b      	b.n	800cd10 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ccf8:	f7fc ffd4 	bl	8009ca4 <HAL_GetTick>
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	2b02      	cmp	r3, #2
 800cd04:	d904      	bls.n	800cd10 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800cd06:	2303      	movs	r3, #3
 800cd08:	f000 bc5b 	b.w	800d5c2 <HAL_RCC_OscConfig+0xdaa>
 800cd0c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cd10:	4baf      	ldr	r3, [pc, #700]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d1ed      	bne.n	800ccf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f003 0308 	and.w	r3, r3, #8
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f000 80c8 	beq.w	800ceba <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cd30:	4ba7      	ldr	r3, [pc, #668]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cd32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cd36:	f003 0304 	and.w	r3, r3, #4
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d111      	bne.n	800cd62 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd3e:	4ba4      	ldr	r3, [pc, #656]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cd40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cd44:	4aa2      	ldr	r2, [pc, #648]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cd46:	f043 0304 	orr.w	r3, r3, #4
 800cd4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800cd4e:	4ba0      	ldr	r3, [pc, #640]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cd50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cd54:	f003 0304 	and.w	r3, r3, #4
 800cd58:	617b      	str	r3, [r7, #20]
 800cd5a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cd62:	4b9c      	ldr	r3, [pc, #624]	@ (800cfd4 <HAL_RCC_OscConfig+0x7bc>)
 800cd64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd66:	f003 0301 	and.w	r3, r3, #1
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d119      	bne.n	800cda2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800cd6e:	4b99      	ldr	r3, [pc, #612]	@ (800cfd4 <HAL_RCC_OscConfig+0x7bc>)
 800cd70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd72:	4a98      	ldr	r2, [pc, #608]	@ (800cfd4 <HAL_RCC_OscConfig+0x7bc>)
 800cd74:	f043 0301 	orr.w	r3, r3, #1
 800cd78:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cd7a:	f7fc ff93 	bl	8009ca4 <HAL_GetTick>
 800cd7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cd80:	e009      	b.n	800cd96 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd82:	f7fc ff8f 	bl	8009ca4 <HAL_GetTick>
 800cd86:	4602      	mov	r2, r0
 800cd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd8a:	1ad3      	subs	r3, r2, r3
 800cd8c:	2b02      	cmp	r3, #2
 800cd8e:	d902      	bls.n	800cd96 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800cd90:	2303      	movs	r3, #3
 800cd92:	f000 bc16 	b.w	800d5c2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cd96:	4b8f      	ldr	r3, [pc, #572]	@ (800cfd4 <HAL_RCC_OscConfig+0x7bc>)
 800cd98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd9a:	f003 0301 	and.w	r3, r3, #1
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d0ef      	beq.n	800cd82 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	695b      	ldr	r3, [r3, #20]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d05f      	beq.n	800ce6a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800cdaa:	4b89      	ldr	r3, [pc, #548]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cdac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cdb0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	699a      	ldr	r2, [r3, #24]
 800cdb6:	6a3b      	ldr	r3, [r7, #32]
 800cdb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d037      	beq.n	800ce30 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800cdc0:	6a3b      	ldr	r3, [r7, #32]
 800cdc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d006      	beq.n	800cdd8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800cdca:	6a3b      	ldr	r3, [r7, #32]
 800cdcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d101      	bne.n	800cdd8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	e3f4      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800cdd8:	6a3b      	ldr	r3, [r7, #32]
 800cdda:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d01b      	beq.n	800ce1a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800cde2:	4b7b      	ldr	r3, [pc, #492]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cde4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cde8:	4a79      	ldr	r2, [pc, #484]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cdea:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800cdee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800cdf2:	f7fc ff57 	bl	8009ca4 <HAL_GetTick>
 800cdf6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800cdf8:	e008      	b.n	800ce0c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cdfa:	f7fc ff53 	bl	8009ca4 <HAL_GetTick>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce02:	1ad3      	subs	r3, r2, r3
 800ce04:	2b05      	cmp	r3, #5
 800ce06:	d901      	bls.n	800ce0c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800ce08:	2303      	movs	r3, #3
 800ce0a:	e3da      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800ce0c:	4b70      	ldr	r3, [pc, #448]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800ce0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d1ef      	bne.n	800cdfa <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800ce1a:	4b6d      	ldr	r3, [pc, #436]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800ce1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce20:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	699b      	ldr	r3, [r3, #24]
 800ce28:	4969      	ldr	r1, [pc, #420]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800ce30:	4b67      	ldr	r3, [pc, #412]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800ce32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce36:	4a66      	ldr	r2, [pc, #408]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800ce38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ce3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800ce40:	f7fc ff30 	bl	8009ca4 <HAL_GetTick>
 800ce44:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800ce46:	e008      	b.n	800ce5a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ce48:	f7fc ff2c 	bl	8009ca4 <HAL_GetTick>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce50:	1ad3      	subs	r3, r2, r3
 800ce52:	2b05      	cmp	r3, #5
 800ce54:	d901      	bls.n	800ce5a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800ce56:	2303      	movs	r3, #3
 800ce58:	e3b3      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800ce5a:	4b5d      	ldr	r3, [pc, #372]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800ce5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d0ef      	beq.n	800ce48 <HAL_RCC_OscConfig+0x630>
 800ce68:	e01b      	b.n	800cea2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800ce6a:	4b59      	ldr	r3, [pc, #356]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800ce6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce70:	4a57      	ldr	r2, [pc, #348]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800ce72:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800ce76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800ce7a:	f7fc ff13 	bl	8009ca4 <HAL_GetTick>
 800ce7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800ce80:	e008      	b.n	800ce94 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ce82:	f7fc ff0f 	bl	8009ca4 <HAL_GetTick>
 800ce86:	4602      	mov	r2, r0
 800ce88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce8a:	1ad3      	subs	r3, r2, r3
 800ce8c:	2b05      	cmp	r3, #5
 800ce8e:	d901      	bls.n	800ce94 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800ce90:	2303      	movs	r3, #3
 800ce92:	e396      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800ce94:	4b4e      	ldr	r3, [pc, #312]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800ce96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d1ef      	bne.n	800ce82 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cea2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	d107      	bne.n	800ceba <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ceaa:	4b49      	ldr	r3, [pc, #292]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800ceac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ceb0:	4a47      	ldr	r2, [pc, #284]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800ceb2:	f023 0304 	bic.w	r3, r3, #4
 800ceb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f003 0304 	and.w	r3, r3, #4
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f000 8111 	beq.w	800d0ea <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800cec8:	2300      	movs	r3, #0
 800ceca:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cece:	4b40      	ldr	r3, [pc, #256]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800ced0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ced4:	f003 0304 	and.w	r3, r3, #4
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d111      	bne.n	800cf00 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cedc:	4b3c      	ldr	r3, [pc, #240]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cede:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cee2:	4a3b      	ldr	r2, [pc, #236]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cee4:	f043 0304 	orr.w	r3, r3, #4
 800cee8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800ceec:	4b38      	ldr	r3, [pc, #224]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800ceee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cef2:	f003 0304 	and.w	r3, r3, #4
 800cef6:	613b      	str	r3, [r7, #16]
 800cef8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800cefa:	2301      	movs	r3, #1
 800cefc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cf00:	4b34      	ldr	r3, [pc, #208]	@ (800cfd4 <HAL_RCC_OscConfig+0x7bc>)
 800cf02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf04:	f003 0301 	and.w	r3, r3, #1
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d118      	bne.n	800cf3e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800cf0c:	4b31      	ldr	r3, [pc, #196]	@ (800cfd4 <HAL_RCC_OscConfig+0x7bc>)
 800cf0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf10:	4a30      	ldr	r2, [pc, #192]	@ (800cfd4 <HAL_RCC_OscConfig+0x7bc>)
 800cf12:	f043 0301 	orr.w	r3, r3, #1
 800cf16:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cf18:	f7fc fec4 	bl	8009ca4 <HAL_GetTick>
 800cf1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cf1e:	e008      	b.n	800cf32 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf20:	f7fc fec0 	bl	8009ca4 <HAL_GetTick>
 800cf24:	4602      	mov	r2, r0
 800cf26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf28:	1ad3      	subs	r3, r2, r3
 800cf2a:	2b02      	cmp	r3, #2
 800cf2c:	d901      	bls.n	800cf32 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800cf2e:	2303      	movs	r3, #3
 800cf30:	e347      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cf32:	4b28      	ldr	r3, [pc, #160]	@ (800cfd4 <HAL_RCC_OscConfig+0x7bc>)
 800cf34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf36:	f003 0301 	and.w	r3, r3, #1
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d0f0      	beq.n	800cf20 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	689b      	ldr	r3, [r3, #8]
 800cf42:	f003 0301 	and.w	r3, r3, #1
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d01f      	beq.n	800cf8a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	689b      	ldr	r3, [r3, #8]
 800cf4e:	f003 0304 	and.w	r3, r3, #4
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d010      	beq.n	800cf78 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800cf56:	4b1e      	ldr	r3, [pc, #120]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cf58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf5c:	4a1c      	ldr	r2, [pc, #112]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cf5e:	f043 0304 	orr.w	r3, r3, #4
 800cf62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cf66:	4b1a      	ldr	r3, [pc, #104]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cf68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf6c:	4a18      	ldr	r2, [pc, #96]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cf6e:	f043 0301 	orr.w	r3, r3, #1
 800cf72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800cf76:	e018      	b.n	800cfaa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cf78:	4b15      	ldr	r3, [pc, #84]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cf7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf7e:	4a14      	ldr	r2, [pc, #80]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cf80:	f043 0301 	orr.w	r3, r3, #1
 800cf84:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800cf88:	e00f      	b.n	800cfaa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cf8a:	4b11      	ldr	r3, [pc, #68]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cf8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf90:	4a0f      	ldr	r2, [pc, #60]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cf92:	f023 0301 	bic.w	r3, r3, #1
 800cf96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800cf9a:	4b0d      	ldr	r3, [pc, #52]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cf9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cfa0:	4a0b      	ldr	r2, [pc, #44]	@ (800cfd0 <HAL_RCC_OscConfig+0x7b8>)
 800cfa2:	f023 0304 	bic.w	r3, r3, #4
 800cfa6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d057      	beq.n	800d062 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800cfb2:	f7fc fe77 	bl	8009ca4 <HAL_GetTick>
 800cfb6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cfb8:	e00e      	b.n	800cfd8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cfba:	f7fc fe73 	bl	8009ca4 <HAL_GetTick>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d905      	bls.n	800cfd8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800cfcc:	2303      	movs	r3, #3
 800cfce:	e2f8      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
 800cfd0:	46020c00 	.word	0x46020c00
 800cfd4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cfd8:	4b9c      	ldr	r3, [pc, #624]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800cfda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cfde:	f003 0302 	and.w	r3, r3, #2
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d0e9      	beq.n	800cfba <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d01b      	beq.n	800d02a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800cff2:	4b96      	ldr	r3, [pc, #600]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800cff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cff8:	4a94      	ldr	r2, [pc, #592]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800cffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cffe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800d002:	e00a      	b.n	800d01a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d004:	f7fc fe4e 	bl	8009ca4 <HAL_GetTick>
 800d008:	4602      	mov	r2, r0
 800d00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d00c:	1ad3      	subs	r3, r2, r3
 800d00e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d012:	4293      	cmp	r3, r2
 800d014:	d901      	bls.n	800d01a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800d016:	2303      	movs	r3, #3
 800d018:	e2d3      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800d01a:	4b8c      	ldr	r3, [pc, #560]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d01c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d024:	2b00      	cmp	r3, #0
 800d026:	d0ed      	beq.n	800d004 <HAL_RCC_OscConfig+0x7ec>
 800d028:	e053      	b.n	800d0d2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800d02a:	4b88      	ldr	r3, [pc, #544]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d02c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d030:	4a86      	ldr	r2, [pc, #536]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d032:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d036:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d03a:	e00a      	b.n	800d052 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d03c:	f7fc fe32 	bl	8009ca4 <HAL_GetTick>
 800d040:	4602      	mov	r2, r0
 800d042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d901      	bls.n	800d052 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800d04e:	2303      	movs	r3, #3
 800d050:	e2b7      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d052:	4b7e      	ldr	r3, [pc, #504]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d1ed      	bne.n	800d03c <HAL_RCC_OscConfig+0x824>
 800d060:	e037      	b.n	800d0d2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800d062:	f7fc fe1f 	bl	8009ca4 <HAL_GetTick>
 800d066:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d068:	e00a      	b.n	800d080 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d06a:	f7fc fe1b 	bl	8009ca4 <HAL_GetTick>
 800d06e:	4602      	mov	r2, r0
 800d070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d072:	1ad3      	subs	r3, r2, r3
 800d074:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d078:	4293      	cmp	r3, r2
 800d07a:	d901      	bls.n	800d080 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800d07c:	2303      	movs	r3, #3
 800d07e:	e2a0      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d080:	4b72      	ldr	r3, [pc, #456]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d086:	f003 0302 	and.w	r3, r3, #2
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d1ed      	bne.n	800d06a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800d08e:	4b6f      	ldr	r3, [pc, #444]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d01a      	beq.n	800d0d2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800d09c:	4b6b      	ldr	r3, [pc, #428]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d09e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d0a2:	4a6a      	ldr	r2, [pc, #424]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d0a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d0ac:	e00a      	b.n	800d0c4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d0ae:	f7fc fdf9 	bl	8009ca4 <HAL_GetTick>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0b6:	1ad3      	subs	r3, r2, r3
 800d0b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d901      	bls.n	800d0c4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800d0c0:	2303      	movs	r3, #3
 800d0c2:	e27e      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d0c4:	4b61      	ldr	r3, [pc, #388]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d0c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d0ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d1ed      	bne.n	800d0ae <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d0d2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800d0d6:	2b01      	cmp	r3, #1
 800d0d8:	d107      	bne.n	800d0ea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d0da:	4b5c      	ldr	r3, [pc, #368]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d0dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d0e0:	4a5a      	ldr	r2, [pc, #360]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d0e2:	f023 0304 	bic.w	r3, r3, #4
 800d0e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f003 0320 	and.w	r3, r3, #32
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d036      	beq.n	800d164 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d019      	beq.n	800d132 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800d0fe:	4b53      	ldr	r3, [pc, #332]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	4a52      	ldr	r2, [pc, #328]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d104:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d108:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d10a:	f7fc fdcb 	bl	8009ca4 <HAL_GetTick>
 800d10e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800d110:	e008      	b.n	800d124 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d112:	f7fc fdc7 	bl	8009ca4 <HAL_GetTick>
 800d116:	4602      	mov	r2, r0
 800d118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d11a:	1ad3      	subs	r3, r2, r3
 800d11c:	2b02      	cmp	r3, #2
 800d11e:	d901      	bls.n	800d124 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800d120:	2303      	movs	r3, #3
 800d122:	e24e      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800d124:	4b49      	ldr	r3, [pc, #292]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d0f0      	beq.n	800d112 <HAL_RCC_OscConfig+0x8fa>
 800d130:	e018      	b.n	800d164 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800d132:	4b46      	ldr	r3, [pc, #280]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	4a45      	ldr	r2, [pc, #276]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d138:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d13c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d13e:	f7fc fdb1 	bl	8009ca4 <HAL_GetTick>
 800d142:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800d144:	e008      	b.n	800d158 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d146:	f7fc fdad 	bl	8009ca4 <HAL_GetTick>
 800d14a:	4602      	mov	r2, r0
 800d14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d14e:	1ad3      	subs	r3, r2, r3
 800d150:	2b02      	cmp	r3, #2
 800d152:	d901      	bls.n	800d158 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800d154:	2303      	movs	r3, #3
 800d156:	e234      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800d158:	4b3c      	ldr	r3, [pc, #240]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d160:	2b00      	cmp	r3, #0
 800d162:	d1f0      	bne.n	800d146 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d036      	beq.n	800d1de <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d174:	2b00      	cmp	r3, #0
 800d176:	d019      	beq.n	800d1ac <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800d178:	4b34      	ldr	r3, [pc, #208]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a33      	ldr	r2, [pc, #204]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d17e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d182:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d184:	f7fc fd8e 	bl	8009ca4 <HAL_GetTick>
 800d188:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800d18a:	e008      	b.n	800d19e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800d18c:	f7fc fd8a 	bl	8009ca4 <HAL_GetTick>
 800d190:	4602      	mov	r2, r0
 800d192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d194:	1ad3      	subs	r3, r2, r3
 800d196:	2b02      	cmp	r3, #2
 800d198:	d901      	bls.n	800d19e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800d19a:	2303      	movs	r3, #3
 800d19c:	e211      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800d19e:	4b2b      	ldr	r3, [pc, #172]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d0f0      	beq.n	800d18c <HAL_RCC_OscConfig+0x974>
 800d1aa:	e018      	b.n	800d1de <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800d1ac:	4b27      	ldr	r3, [pc, #156]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a26      	ldr	r2, [pc, #152]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d1b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d1b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d1b8:	f7fc fd74 	bl	8009ca4 <HAL_GetTick>
 800d1bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800d1be:	e008      	b.n	800d1d2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800d1c0:	f7fc fd70 	bl	8009ca4 <HAL_GetTick>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1c8:	1ad3      	subs	r3, r2, r3
 800d1ca:	2b02      	cmp	r3, #2
 800d1cc:	d901      	bls.n	800d1d2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800d1ce:	2303      	movs	r3, #3
 800d1d0:	e1f7      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800d1d2:	4b1e      	ldr	r3, [pc, #120]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d1f0      	bne.n	800d1c0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d07f      	beq.n	800d2ea <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d062      	beq.n	800d2b8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800d1f2:	4b16      	ldr	r3, [pc, #88]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	4a15      	ldr	r2, [pc, #84]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d1f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d1fc:	6093      	str	r3, [r2, #8]
 800d1fe:	4b13      	ldr	r3, [pc, #76]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d200:	689b      	ldr	r3, [r3, #8]
 800d202:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d20a:	4910      	ldr	r1, [pc, #64]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d20c:	4313      	orrs	r3, r2
 800d20e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d214:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800d218:	d309      	bcc.n	800d22e <HAL_RCC_OscConfig+0xa16>
 800d21a:	4b0c      	ldr	r3, [pc, #48]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d21c:	68db      	ldr	r3, [r3, #12]
 800d21e:	f023 021f 	bic.w	r2, r3, #31
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6a1b      	ldr	r3, [r3, #32]
 800d226:	4909      	ldr	r1, [pc, #36]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d228:	4313      	orrs	r3, r2
 800d22a:	60cb      	str	r3, [r1, #12]
 800d22c:	e02a      	b.n	800d284 <HAL_RCC_OscConfig+0xa6c>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d232:	2b00      	cmp	r3, #0
 800d234:	da0c      	bge.n	800d250 <HAL_RCC_OscConfig+0xa38>
 800d236:	4b05      	ldr	r3, [pc, #20]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6a1b      	ldr	r3, [r3, #32]
 800d242:	015b      	lsls	r3, r3, #5
 800d244:	4901      	ldr	r1, [pc, #4]	@ (800d24c <HAL_RCC_OscConfig+0xa34>)
 800d246:	4313      	orrs	r3, r2
 800d248:	60cb      	str	r3, [r1, #12]
 800d24a:	e01b      	b.n	800d284 <HAL_RCC_OscConfig+0xa6c>
 800d24c:	46020c00 	.word	0x46020c00
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d258:	d30a      	bcc.n	800d270 <HAL_RCC_OscConfig+0xa58>
 800d25a:	4ba1      	ldr	r3, [pc, #644]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d25c:	68db      	ldr	r3, [r3, #12]
 800d25e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6a1b      	ldr	r3, [r3, #32]
 800d266:	029b      	lsls	r3, r3, #10
 800d268:	499d      	ldr	r1, [pc, #628]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d26a:	4313      	orrs	r3, r2
 800d26c:	60cb      	str	r3, [r1, #12]
 800d26e:	e009      	b.n	800d284 <HAL_RCC_OscConfig+0xa6c>
 800d270:	4b9b      	ldr	r3, [pc, #620]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6a1b      	ldr	r3, [r3, #32]
 800d27c:	03db      	lsls	r3, r3, #15
 800d27e:	4998      	ldr	r1, [pc, #608]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d280:	4313      	orrs	r3, r2
 800d282:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800d284:	4b96      	ldr	r3, [pc, #600]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a95      	ldr	r2, [pc, #596]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d28a:	f043 0310 	orr.w	r3, r3, #16
 800d28e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d290:	f7fc fd08 	bl	8009ca4 <HAL_GetTick>
 800d294:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800d296:	e008      	b.n	800d2aa <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800d298:	f7fc fd04 	bl	8009ca4 <HAL_GetTick>
 800d29c:	4602      	mov	r2, r0
 800d29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2a0:	1ad3      	subs	r3, r2, r3
 800d2a2:	2b02      	cmp	r3, #2
 800d2a4:	d901      	bls.n	800d2aa <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800d2a6:	2303      	movs	r3, #3
 800d2a8:	e18b      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800d2aa:	4b8d      	ldr	r3, [pc, #564]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f003 0320 	and.w	r3, r3, #32
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d0f0      	beq.n	800d298 <HAL_RCC_OscConfig+0xa80>
 800d2b6:	e018      	b.n	800d2ea <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800d2b8:	4b89      	ldr	r3, [pc, #548]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a88      	ldr	r2, [pc, #544]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d2be:	f023 0310 	bic.w	r3, r3, #16
 800d2c2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d2c4:	f7fc fcee 	bl	8009ca4 <HAL_GetTick>
 800d2c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800d2ca:	e008      	b.n	800d2de <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800d2cc:	f7fc fcea 	bl	8009ca4 <HAL_GetTick>
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d4:	1ad3      	subs	r3, r2, r3
 800d2d6:	2b02      	cmp	r3, #2
 800d2d8:	d901      	bls.n	800d2de <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800d2da:	2303      	movs	r3, #3
 800d2dc:	e171      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800d2de:	4b80      	ldr	r3, [pc, #512]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f003 0320 	and.w	r3, r3, #32
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d1f0      	bne.n	800d2cc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	f000 8166 	beq.w	800d5c0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d2fa:	4b79      	ldr	r3, [pc, #484]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d2fc:	69db      	ldr	r3, [r3, #28]
 800d2fe:	f003 030c 	and.w	r3, r3, #12
 800d302:	2b0c      	cmp	r3, #12
 800d304:	f000 80f2 	beq.w	800d4ec <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d30c:	2b02      	cmp	r3, #2
 800d30e:	f040 80c5 	bne.w	800d49c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800d312:	4b73      	ldr	r3, [pc, #460]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4a72      	ldr	r2, [pc, #456]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d318:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d31c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d31e:	f7fc fcc1 	bl	8009ca4 <HAL_GetTick>
 800d322:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d324:	e008      	b.n	800d338 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d326:	f7fc fcbd 	bl	8009ca4 <HAL_GetTick>
 800d32a:	4602      	mov	r2, r0
 800d32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d32e:	1ad3      	subs	r3, r2, r3
 800d330:	2b02      	cmp	r3, #2
 800d332:	d901      	bls.n	800d338 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800d334:	2303      	movs	r3, #3
 800d336:	e144      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d338:	4b69      	ldr	r3, [pc, #420]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d340:	2b00      	cmp	r3, #0
 800d342:	d1f0      	bne.n	800d326 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d344:	4b66      	ldr	r3, [pc, #408]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d346:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d34a:	f003 0304 	and.w	r3, r3, #4
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d111      	bne.n	800d376 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800d352:	4b63      	ldr	r3, [pc, #396]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d358:	4a61      	ldr	r2, [pc, #388]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d35a:	f043 0304 	orr.w	r3, r3, #4
 800d35e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800d362:	4b5f      	ldr	r3, [pc, #380]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d368:	f003 0304 	and.w	r3, r3, #4
 800d36c:	60fb      	str	r3, [r7, #12]
 800d36e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800d370:	2301      	movs	r3, #1
 800d372:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800d376:	4b5b      	ldr	r3, [pc, #364]	@ (800d4e4 <HAL_RCC_OscConfig+0xccc>)
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d37e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d382:	d102      	bne.n	800d38a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800d384:	2301      	movs	r3, #1
 800d386:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800d38a:	4b56      	ldr	r3, [pc, #344]	@ (800d4e4 <HAL_RCC_OscConfig+0xccc>)
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	4a55      	ldr	r2, [pc, #340]	@ (800d4e4 <HAL_RCC_OscConfig+0xccc>)
 800d390:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d394:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800d396:	4b52      	ldr	r3, [pc, #328]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d39a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d39e:	f023 0303 	bic.w	r3, r3, #3
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800d3aa:	3a01      	subs	r2, #1
 800d3ac:	0212      	lsls	r2, r2, #8
 800d3ae:	4311      	orrs	r1, r2
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800d3b4:	430a      	orrs	r2, r1
 800d3b6:	494a      	ldr	r1, [pc, #296]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	628b      	str	r3, [r1, #40]	@ 0x28
 800d3bc:	4b48      	ldr	r3, [pc, #288]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d3be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d3c0:	4b49      	ldr	r3, [pc, #292]	@ (800d4e8 <HAL_RCC_OscConfig+0xcd0>)
 800d3c2:	4013      	ands	r3, r2
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d3c8:	3a01      	subs	r2, #1
 800d3ca:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800d3d2:	3a01      	subs	r2, #1
 800d3d4:	0252      	lsls	r2, r2, #9
 800d3d6:	b292      	uxth	r2, r2
 800d3d8:	4311      	orrs	r1, r2
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800d3de:	3a01      	subs	r2, #1
 800d3e0:	0412      	lsls	r2, r2, #16
 800d3e2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800d3e6:	4311      	orrs	r1, r2
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800d3ec:	3a01      	subs	r2, #1
 800d3ee:	0612      	lsls	r2, r2, #24
 800d3f0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800d3f4:	430a      	orrs	r2, r1
 800d3f6:	493a      	ldr	r1, [pc, #232]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800d3fc:	4b38      	ldr	r3, [pc, #224]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d400:	4a37      	ldr	r2, [pc, #220]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d402:	f023 0310 	bic.w	r3, r3, #16
 800d406:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d40c:	4a34      	ldr	r2, [pc, #208]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d40e:	00db      	lsls	r3, r3, #3
 800d410:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800d412:	4b33      	ldr	r3, [pc, #204]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d416:	4a32      	ldr	r2, [pc, #200]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d418:	f043 0310 	orr.w	r3, r3, #16
 800d41c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800d41e:	4b30      	ldr	r3, [pc, #192]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d422:	f023 020c 	bic.w	r2, r3, #12
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d42a:	492d      	ldr	r1, [pc, #180]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d42c:	4313      	orrs	r3, r2
 800d42e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800d430:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d434:	2b01      	cmp	r3, #1
 800d436:	d105      	bne.n	800d444 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800d438:	4b2a      	ldr	r3, [pc, #168]	@ (800d4e4 <HAL_RCC_OscConfig+0xccc>)
 800d43a:	68db      	ldr	r3, [r3, #12]
 800d43c:	4a29      	ldr	r2, [pc, #164]	@ (800d4e4 <HAL_RCC_OscConfig+0xccc>)
 800d43e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d442:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800d444:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d107      	bne.n	800d45c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800d44c:	4b24      	ldr	r3, [pc, #144]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d44e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d452:	4a23      	ldr	r2, [pc, #140]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d454:	f023 0304 	bic.w	r3, r3, #4
 800d458:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d45c:	4b20      	ldr	r3, [pc, #128]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d460:	4a1f      	ldr	r2, [pc, #124]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d462:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d466:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800d468:	4b1d      	ldr	r3, [pc, #116]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a1c      	ldr	r2, [pc, #112]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d46e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d472:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d474:	f7fc fc16 	bl	8009ca4 <HAL_GetTick>
 800d478:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d47a:	e008      	b.n	800d48e <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d47c:	f7fc fc12 	bl	8009ca4 <HAL_GetTick>
 800d480:	4602      	mov	r2, r0
 800d482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d484:	1ad3      	subs	r3, r2, r3
 800d486:	2b02      	cmp	r3, #2
 800d488:	d901      	bls.n	800d48e <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800d48a:	2303      	movs	r3, #3
 800d48c:	e099      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d48e:	4b14      	ldr	r3, [pc, #80]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d496:	2b00      	cmp	r3, #0
 800d498:	d0f0      	beq.n	800d47c <HAL_RCC_OscConfig+0xc64>
 800d49a:	e091      	b.n	800d5c0 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800d49c:	4b10      	ldr	r3, [pc, #64]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a0f      	ldr	r2, [pc, #60]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d4a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d4a6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d4a8:	f7fc fbfc 	bl	8009ca4 <HAL_GetTick>
 800d4ac:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d4ae:	e008      	b.n	800d4c2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d4b0:	f7fc fbf8 	bl	8009ca4 <HAL_GetTick>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4b8:	1ad3      	subs	r3, r2, r3
 800d4ba:	2b02      	cmp	r3, #2
 800d4bc:	d901      	bls.n	800d4c2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800d4be:	2303      	movs	r3, #3
 800d4c0:	e07f      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d4c2:	4b07      	ldr	r3, [pc, #28]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d1f0      	bne.n	800d4b0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800d4ce:	4b04      	ldr	r3, [pc, #16]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d4d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4d2:	4a03      	ldr	r2, [pc, #12]	@ (800d4e0 <HAL_RCC_OscConfig+0xcc8>)
 800d4d4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800d4d8:	f023 0303 	bic.w	r3, r3, #3
 800d4dc:	6293      	str	r3, [r2, #40]	@ 0x28
 800d4de:	e06f      	b.n	800d5c0 <HAL_RCC_OscConfig+0xda8>
 800d4e0:	46020c00 	.word	0x46020c00
 800d4e4:	46020800 	.word	0x46020800
 800d4e8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800d4ec:	4b37      	ldr	r3, [pc, #220]	@ (800d5cc <HAL_RCC_OscConfig+0xdb4>)
 800d4ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4f0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d4f2:	4b36      	ldr	r3, [pc, #216]	@ (800d5cc <HAL_RCC_OscConfig+0xdb4>)
 800d4f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4f6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d039      	beq.n	800d574 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	f003 0203 	and.w	r2, r3, #3
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d132      	bne.n	800d574 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	0a1b      	lsrs	r3, r3, #8
 800d512:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d51a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d129      	bne.n	800d574 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d122      	bne.n	800d574 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d52e:	69bb      	ldr	r3, [r7, #24]
 800d530:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d538:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d11a      	bne.n	800d574 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800d53e:	69bb      	ldr	r3, [r7, #24]
 800d540:	0a5b      	lsrs	r3, r3, #9
 800d542:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d54a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d111      	bne.n	800d574 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800d550:	69bb      	ldr	r3, [r7, #24]
 800d552:	0c1b      	lsrs	r3, r3, #16
 800d554:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d55c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d55e:	429a      	cmp	r2, r3
 800d560:	d108      	bne.n	800d574 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800d562:	69bb      	ldr	r3, [r7, #24]
 800d564:	0e1b      	lsrs	r3, r3, #24
 800d566:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d56e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d570:	429a      	cmp	r2, r3
 800d572:	d001      	beq.n	800d578 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800d574:	2301      	movs	r3, #1
 800d576:	e024      	b.n	800d5c2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800d578:	4b14      	ldr	r3, [pc, #80]	@ (800d5cc <HAL_RCC_OscConfig+0xdb4>)
 800d57a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d57c:	08db      	lsrs	r3, r3, #3
 800d57e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800d586:	429a      	cmp	r2, r3
 800d588:	d01a      	beq.n	800d5c0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800d58a:	4b10      	ldr	r3, [pc, #64]	@ (800d5cc <HAL_RCC_OscConfig+0xdb4>)
 800d58c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d58e:	4a0f      	ldr	r2, [pc, #60]	@ (800d5cc <HAL_RCC_OscConfig+0xdb4>)
 800d590:	f023 0310 	bic.w	r3, r3, #16
 800d594:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d596:	f7fc fb85 	bl	8009ca4 <HAL_GetTick>
 800d59a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800d59c:	bf00      	nop
 800d59e:	f7fc fb81 	bl	8009ca4 <HAL_GetTick>
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d0f9      	beq.n	800d59e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5ae:	4a07      	ldr	r2, [pc, #28]	@ (800d5cc <HAL_RCC_OscConfig+0xdb4>)
 800d5b0:	00db      	lsls	r3, r3, #3
 800d5b2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800d5b4:	4b05      	ldr	r3, [pc, #20]	@ (800d5cc <HAL_RCC_OscConfig+0xdb4>)
 800d5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5b8:	4a04      	ldr	r2, [pc, #16]	@ (800d5cc <HAL_RCC_OscConfig+0xdb4>)
 800d5ba:	f043 0310 	orr.w	r3, r3, #16
 800d5be:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800d5c0:	2300      	movs	r3, #0
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3738      	adds	r7, #56	@ 0x38
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	46020c00 	.word	0x46020c00

0800d5d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b086      	sub	sp, #24
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d101      	bne.n	800d5e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e1d9      	b.n	800d998 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d5e4:	4b9b      	ldr	r3, [pc, #620]	@ (800d854 <HAL_RCC_ClockConfig+0x284>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f003 030f 	and.w	r3, r3, #15
 800d5ec:	683a      	ldr	r2, [r7, #0]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d910      	bls.n	800d614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d5f2:	4b98      	ldr	r3, [pc, #608]	@ (800d854 <HAL_RCC_ClockConfig+0x284>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f023 020f 	bic.w	r2, r3, #15
 800d5fa:	4996      	ldr	r1, [pc, #600]	@ (800d854 <HAL_RCC_ClockConfig+0x284>)
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	4313      	orrs	r3, r2
 800d600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d602:	4b94      	ldr	r3, [pc, #592]	@ (800d854 <HAL_RCC_ClockConfig+0x284>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f003 030f 	and.w	r3, r3, #15
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d001      	beq.n	800d614 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d610:	2301      	movs	r3, #1
 800d612:	e1c1      	b.n	800d998 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f003 0310 	and.w	r3, r3, #16
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d010      	beq.n	800d642 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	695a      	ldr	r2, [r3, #20]
 800d624:	4b8c      	ldr	r3, [pc, #560]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d628:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d908      	bls.n	800d642 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800d630:	4b89      	ldr	r3, [pc, #548]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d634:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	695b      	ldr	r3, [r3, #20]
 800d63c:	4986      	ldr	r1, [pc, #536]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d63e:	4313      	orrs	r3, r2
 800d640:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f003 0308 	and.w	r3, r3, #8
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d012      	beq.n	800d674 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	691a      	ldr	r2, [r3, #16]
 800d652:	4b81      	ldr	r3, [pc, #516]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d654:	6a1b      	ldr	r3, [r3, #32]
 800d656:	091b      	lsrs	r3, r3, #4
 800d658:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d909      	bls.n	800d674 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800d660:	4b7d      	ldr	r3, [pc, #500]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d662:	6a1b      	ldr	r3, [r3, #32]
 800d664:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	691b      	ldr	r3, [r3, #16]
 800d66c:	011b      	lsls	r3, r3, #4
 800d66e:	497a      	ldr	r1, [pc, #488]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d670:	4313      	orrs	r3, r2
 800d672:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f003 0304 	and.w	r3, r3, #4
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d010      	beq.n	800d6a2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	68da      	ldr	r2, [r3, #12]
 800d684:	4b74      	ldr	r3, [pc, #464]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d686:	6a1b      	ldr	r3, [r3, #32]
 800d688:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d908      	bls.n	800d6a2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800d690:	4b71      	ldr	r3, [pc, #452]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d692:	6a1b      	ldr	r3, [r3, #32]
 800d694:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	496e      	ldr	r1, [pc, #440]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f003 0302 	and.w	r3, r3, #2
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d010      	beq.n	800d6d0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	689a      	ldr	r2, [r3, #8]
 800d6b2:	4b69      	ldr	r3, [pc, #420]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d6b4:	6a1b      	ldr	r3, [r3, #32]
 800d6b6:	f003 030f 	and.w	r3, r3, #15
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d908      	bls.n	800d6d0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800d6be:	4b66      	ldr	r3, [pc, #408]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d6c0:	6a1b      	ldr	r3, [r3, #32]
 800d6c2:	f023 020f 	bic.w	r2, r3, #15
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	4963      	ldr	r1, [pc, #396]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f003 0301 	and.w	r3, r3, #1
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	f000 80d2 	beq.w	800d882 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	685b      	ldr	r3, [r3, #4]
 800d6e6:	2b03      	cmp	r3, #3
 800d6e8:	d143      	bne.n	800d772 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d6ea:	4b5b      	ldr	r3, [pc, #364]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d6ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d6f0:	f003 0304 	and.w	r3, r3, #4
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d110      	bne.n	800d71a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800d6f8:	4b57      	ldr	r3, [pc, #348]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d6fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d6fe:	4a56      	ldr	r2, [pc, #344]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d700:	f043 0304 	orr.w	r3, r3, #4
 800d704:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800d708:	4b53      	ldr	r3, [pc, #332]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d70a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d70e:	f003 0304 	and.w	r3, r3, #4
 800d712:	60bb      	str	r3, [r7, #8]
 800d714:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800d716:	2301      	movs	r3, #1
 800d718:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800d71a:	f7fc fac3 	bl	8009ca4 <HAL_GetTick>
 800d71e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800d720:	4b4e      	ldr	r3, [pc, #312]	@ (800d85c <HAL_RCC_ClockConfig+0x28c>)
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d00f      	beq.n	800d74c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800d72c:	e008      	b.n	800d740 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800d72e:	f7fc fab9 	bl	8009ca4 <HAL_GetTick>
 800d732:	4602      	mov	r2, r0
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	1ad3      	subs	r3, r2, r3
 800d738:	2b02      	cmp	r3, #2
 800d73a:	d901      	bls.n	800d740 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800d73c:	2303      	movs	r3, #3
 800d73e:	e12b      	b.n	800d998 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800d740:	4b46      	ldr	r3, [pc, #280]	@ (800d85c <HAL_RCC_ClockConfig+0x28c>)
 800d742:	68db      	ldr	r3, [r3, #12]
 800d744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d0f0      	beq.n	800d72e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800d74c:	7dfb      	ldrb	r3, [r7, #23]
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d107      	bne.n	800d762 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800d752:	4b41      	ldr	r3, [pc, #260]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d758:	4a3f      	ldr	r2, [pc, #252]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d75a:	f023 0304 	bic.w	r3, r3, #4
 800d75e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d762:	4b3d      	ldr	r3, [pc, #244]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d121      	bne.n	800d7b2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800d76e:	2301      	movs	r3, #1
 800d770:	e112      	b.n	800d998 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	2b02      	cmp	r3, #2
 800d778:	d107      	bne.n	800d78a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d77a:	4b37      	ldr	r3, [pc, #220]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d782:	2b00      	cmp	r3, #0
 800d784:	d115      	bne.n	800d7b2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d786:	2301      	movs	r3, #1
 800d788:	e106      	b.n	800d998 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d107      	bne.n	800d7a2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800d792:	4b31      	ldr	r3, [pc, #196]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f003 0304 	and.w	r3, r3, #4
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d109      	bne.n	800d7b2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e0fa      	b.n	800d998 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d7a2:	4b2d      	ldr	r3, [pc, #180]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d101      	bne.n	800d7b2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	e0f2      	b.n	800d998 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800d7b2:	4b29      	ldr	r3, [pc, #164]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d7b4:	69db      	ldr	r3, [r3, #28]
 800d7b6:	f023 0203 	bic.w	r2, r3, #3
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	4926      	ldr	r1, [pc, #152]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800d7c4:	f7fc fa6e 	bl	8009ca4 <HAL_GetTick>
 800d7c8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	685b      	ldr	r3, [r3, #4]
 800d7ce:	2b03      	cmp	r3, #3
 800d7d0:	d112      	bne.n	800d7f8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d7d2:	e00a      	b.n	800d7ea <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d7d4:	f7fc fa66 	bl	8009ca4 <HAL_GetTick>
 800d7d8:	4602      	mov	r2, r0
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	1ad3      	subs	r3, r2, r3
 800d7de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d901      	bls.n	800d7ea <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800d7e6:	2303      	movs	r3, #3
 800d7e8:	e0d6      	b.n	800d998 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d7ea:	4b1b      	ldr	r3, [pc, #108]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d7ec:	69db      	ldr	r3, [r3, #28]
 800d7ee:	f003 030c 	and.w	r3, r3, #12
 800d7f2:	2b0c      	cmp	r3, #12
 800d7f4:	d1ee      	bne.n	800d7d4 <HAL_RCC_ClockConfig+0x204>
 800d7f6:	e044      	b.n	800d882 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	2b02      	cmp	r3, #2
 800d7fe:	d112      	bne.n	800d826 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d800:	e00a      	b.n	800d818 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d802:	f7fc fa4f 	bl	8009ca4 <HAL_GetTick>
 800d806:	4602      	mov	r2, r0
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	1ad3      	subs	r3, r2, r3
 800d80c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d810:	4293      	cmp	r3, r2
 800d812:	d901      	bls.n	800d818 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d814:	2303      	movs	r3, #3
 800d816:	e0bf      	b.n	800d998 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d818:	4b0f      	ldr	r3, [pc, #60]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d81a:	69db      	ldr	r3, [r3, #28]
 800d81c:	f003 030c 	and.w	r3, r3, #12
 800d820:	2b08      	cmp	r3, #8
 800d822:	d1ee      	bne.n	800d802 <HAL_RCC_ClockConfig+0x232>
 800d824:	e02d      	b.n	800d882 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d123      	bne.n	800d876 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d82e:	e00a      	b.n	800d846 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d830:	f7fc fa38 	bl	8009ca4 <HAL_GetTick>
 800d834:	4602      	mov	r2, r0
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	1ad3      	subs	r3, r2, r3
 800d83a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d83e:	4293      	cmp	r3, r2
 800d840:	d901      	bls.n	800d846 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800d842:	2303      	movs	r3, #3
 800d844:	e0a8      	b.n	800d998 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d846:	4b04      	ldr	r3, [pc, #16]	@ (800d858 <HAL_RCC_ClockConfig+0x288>)
 800d848:	69db      	ldr	r3, [r3, #28]
 800d84a:	f003 030c 	and.w	r3, r3, #12
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d1ee      	bne.n	800d830 <HAL_RCC_ClockConfig+0x260>
 800d852:	e016      	b.n	800d882 <HAL_RCC_ClockConfig+0x2b2>
 800d854:	40022000 	.word	0x40022000
 800d858:	46020c00 	.word	0x46020c00
 800d85c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d860:	f7fc fa20 	bl	8009ca4 <HAL_GetTick>
 800d864:	4602      	mov	r2, r0
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	1ad3      	subs	r3, r2, r3
 800d86a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d86e:	4293      	cmp	r3, r2
 800d870:	d901      	bls.n	800d876 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800d872:	2303      	movs	r3, #3
 800d874:	e090      	b.n	800d998 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d876:	4b4a      	ldr	r3, [pc, #296]	@ (800d9a0 <HAL_RCC_ClockConfig+0x3d0>)
 800d878:	69db      	ldr	r3, [r3, #28]
 800d87a:	f003 030c 	and.w	r3, r3, #12
 800d87e:	2b04      	cmp	r3, #4
 800d880:	d1ee      	bne.n	800d860 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f003 0302 	and.w	r3, r3, #2
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d010      	beq.n	800d8b0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	689a      	ldr	r2, [r3, #8]
 800d892:	4b43      	ldr	r3, [pc, #268]	@ (800d9a0 <HAL_RCC_ClockConfig+0x3d0>)
 800d894:	6a1b      	ldr	r3, [r3, #32]
 800d896:	f003 030f 	and.w	r3, r3, #15
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d208      	bcs.n	800d8b0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800d89e:	4b40      	ldr	r3, [pc, #256]	@ (800d9a0 <HAL_RCC_ClockConfig+0x3d0>)
 800d8a0:	6a1b      	ldr	r3, [r3, #32]
 800d8a2:	f023 020f 	bic.w	r2, r3, #15
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	689b      	ldr	r3, [r3, #8]
 800d8aa:	493d      	ldr	r1, [pc, #244]	@ (800d9a0 <HAL_RCC_ClockConfig+0x3d0>)
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d8b0:	4b3c      	ldr	r3, [pc, #240]	@ (800d9a4 <HAL_RCC_ClockConfig+0x3d4>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f003 030f 	and.w	r3, r3, #15
 800d8b8:	683a      	ldr	r2, [r7, #0]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d210      	bcs.n	800d8e0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d8be:	4b39      	ldr	r3, [pc, #228]	@ (800d9a4 <HAL_RCC_ClockConfig+0x3d4>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f023 020f 	bic.w	r2, r3, #15
 800d8c6:	4937      	ldr	r1, [pc, #220]	@ (800d9a4 <HAL_RCC_ClockConfig+0x3d4>)
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d8ce:	4b35      	ldr	r3, [pc, #212]	@ (800d9a4 <HAL_RCC_ClockConfig+0x3d4>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f003 030f 	and.w	r3, r3, #15
 800d8d6:	683a      	ldr	r2, [r7, #0]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d001      	beq.n	800d8e0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	e05b      	b.n	800d998 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f003 0304 	and.w	r3, r3, #4
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d010      	beq.n	800d90e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	68da      	ldr	r2, [r3, #12]
 800d8f0:	4b2b      	ldr	r3, [pc, #172]	@ (800d9a0 <HAL_RCC_ClockConfig+0x3d0>)
 800d8f2:	6a1b      	ldr	r3, [r3, #32]
 800d8f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d208      	bcs.n	800d90e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800d8fc:	4b28      	ldr	r3, [pc, #160]	@ (800d9a0 <HAL_RCC_ClockConfig+0x3d0>)
 800d8fe:	6a1b      	ldr	r3, [r3, #32]
 800d900:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	68db      	ldr	r3, [r3, #12]
 800d908:	4925      	ldr	r1, [pc, #148]	@ (800d9a0 <HAL_RCC_ClockConfig+0x3d0>)
 800d90a:	4313      	orrs	r3, r2
 800d90c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f003 0308 	and.w	r3, r3, #8
 800d916:	2b00      	cmp	r3, #0
 800d918:	d012      	beq.n	800d940 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	691a      	ldr	r2, [r3, #16]
 800d91e:	4b20      	ldr	r3, [pc, #128]	@ (800d9a0 <HAL_RCC_ClockConfig+0x3d0>)
 800d920:	6a1b      	ldr	r3, [r3, #32]
 800d922:	091b      	lsrs	r3, r3, #4
 800d924:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d928:	429a      	cmp	r2, r3
 800d92a:	d209      	bcs.n	800d940 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800d92c:	4b1c      	ldr	r3, [pc, #112]	@ (800d9a0 <HAL_RCC_ClockConfig+0x3d0>)
 800d92e:	6a1b      	ldr	r3, [r3, #32]
 800d930:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	691b      	ldr	r3, [r3, #16]
 800d938:	011b      	lsls	r3, r3, #4
 800d93a:	4919      	ldr	r1, [pc, #100]	@ (800d9a0 <HAL_RCC_ClockConfig+0x3d0>)
 800d93c:	4313      	orrs	r3, r2
 800d93e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f003 0310 	and.w	r3, r3, #16
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d010      	beq.n	800d96e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	695a      	ldr	r2, [r3, #20]
 800d950:	4b13      	ldr	r3, [pc, #76]	@ (800d9a0 <HAL_RCC_ClockConfig+0x3d0>)
 800d952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d954:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d958:	429a      	cmp	r2, r3
 800d95a:	d208      	bcs.n	800d96e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800d95c:	4b10      	ldr	r3, [pc, #64]	@ (800d9a0 <HAL_RCC_ClockConfig+0x3d0>)
 800d95e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d960:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	695b      	ldr	r3, [r3, #20]
 800d968:	490d      	ldr	r1, [pc, #52]	@ (800d9a0 <HAL_RCC_ClockConfig+0x3d0>)
 800d96a:	4313      	orrs	r3, r2
 800d96c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800d96e:	f000 f821 	bl	800d9b4 <HAL_RCC_GetSysClockFreq>
 800d972:	4602      	mov	r2, r0
 800d974:	4b0a      	ldr	r3, [pc, #40]	@ (800d9a0 <HAL_RCC_ClockConfig+0x3d0>)
 800d976:	6a1b      	ldr	r3, [r3, #32]
 800d978:	f003 030f 	and.w	r3, r3, #15
 800d97c:	490a      	ldr	r1, [pc, #40]	@ (800d9a8 <HAL_RCC_ClockConfig+0x3d8>)
 800d97e:	5ccb      	ldrb	r3, [r1, r3]
 800d980:	fa22 f303 	lsr.w	r3, r2, r3
 800d984:	4a09      	ldr	r2, [pc, #36]	@ (800d9ac <HAL_RCC_ClockConfig+0x3dc>)
 800d986:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d988:	4b09      	ldr	r3, [pc, #36]	@ (800d9b0 <HAL_RCC_ClockConfig+0x3e0>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7fc f93f 	bl	8009c10 <HAL_InitTick>
 800d992:	4603      	mov	r3, r0
 800d994:	73fb      	strb	r3, [r7, #15]

  return status;
 800d996:	7bfb      	ldrb	r3, [r7, #15]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3718      	adds	r7, #24
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	46020c00 	.word	0x46020c00
 800d9a4:	40022000 	.word	0x40022000
 800d9a8:	0803648c 	.word	0x0803648c
 800d9ac:	2000086c 	.word	0x2000086c
 800d9b0:	20000870 	.word	0x20000870

0800d9b4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b08b      	sub	sp, #44	@ 0x2c
 800d9b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d9c2:	4b78      	ldr	r3, [pc, #480]	@ (800dba4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d9c4:	69db      	ldr	r3, [r3, #28]
 800d9c6:	f003 030c 	and.w	r3, r3, #12
 800d9ca:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d9cc:	4b75      	ldr	r3, [pc, #468]	@ (800dba4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d9ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9d0:	f003 0303 	and.w	r3, r3, #3
 800d9d4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d9d6:	69bb      	ldr	r3, [r7, #24]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d005      	beq.n	800d9e8 <HAL_RCC_GetSysClockFreq+0x34>
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	2b0c      	cmp	r3, #12
 800d9e0:	d121      	bne.n	800da26 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d11e      	bne.n	800da26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800d9e8:	4b6e      	ldr	r3, [pc, #440]	@ (800dba4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d107      	bne.n	800da04 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800d9f4:	4b6b      	ldr	r3, [pc, #428]	@ (800dba4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d9f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d9fa:	0b1b      	lsrs	r3, r3, #12
 800d9fc:	f003 030f 	and.w	r3, r3, #15
 800da00:	627b      	str	r3, [r7, #36]	@ 0x24
 800da02:	e005      	b.n	800da10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800da04:	4b67      	ldr	r3, [pc, #412]	@ (800dba4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800da06:	689b      	ldr	r3, [r3, #8]
 800da08:	0f1b      	lsrs	r3, r3, #28
 800da0a:	f003 030f 	and.w	r3, r3, #15
 800da0e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800da10:	4a65      	ldr	r2, [pc, #404]	@ (800dba8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800da12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da18:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d110      	bne.n	800da42 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800da20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da22:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800da24:	e00d      	b.n	800da42 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800da26:	4b5f      	ldr	r3, [pc, #380]	@ (800dba4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800da28:	69db      	ldr	r3, [r3, #28]
 800da2a:	f003 030c 	and.w	r3, r3, #12
 800da2e:	2b04      	cmp	r3, #4
 800da30:	d102      	bne.n	800da38 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800da32:	4b5e      	ldr	r3, [pc, #376]	@ (800dbac <HAL_RCC_GetSysClockFreq+0x1f8>)
 800da34:	623b      	str	r3, [r7, #32]
 800da36:	e004      	b.n	800da42 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800da38:	69bb      	ldr	r3, [r7, #24]
 800da3a:	2b08      	cmp	r3, #8
 800da3c:	d101      	bne.n	800da42 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800da3e:	4b5b      	ldr	r3, [pc, #364]	@ (800dbac <HAL_RCC_GetSysClockFreq+0x1f8>)
 800da40:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800da42:	69bb      	ldr	r3, [r7, #24]
 800da44:	2b0c      	cmp	r3, #12
 800da46:	f040 80a5 	bne.w	800db94 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800da4a:	4b56      	ldr	r3, [pc, #344]	@ (800dba4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800da4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da4e:	f003 0303 	and.w	r3, r3, #3
 800da52:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800da54:	4b53      	ldr	r3, [pc, #332]	@ (800dba4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800da56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da58:	0a1b      	lsrs	r3, r3, #8
 800da5a:	f003 030f 	and.w	r3, r3, #15
 800da5e:	3301      	adds	r3, #1
 800da60:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800da62:	4b50      	ldr	r3, [pc, #320]	@ (800dba4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800da64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da66:	091b      	lsrs	r3, r3, #4
 800da68:	f003 0301 	and.w	r3, r3, #1
 800da6c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800da6e:	4b4d      	ldr	r3, [pc, #308]	@ (800dba4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800da70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da72:	08db      	lsrs	r3, r3, #3
 800da74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da78:	68ba      	ldr	r2, [r7, #8]
 800da7a:	fb02 f303 	mul.w	r3, r2, r3
 800da7e:	ee07 3a90 	vmov	s15, r3
 800da82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da86:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	2b02      	cmp	r3, #2
 800da8e:	d003      	beq.n	800da98 <HAL_RCC_GetSysClockFreq+0xe4>
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	2b03      	cmp	r3, #3
 800da94:	d022      	beq.n	800dadc <HAL_RCC_GetSysClockFreq+0x128>
 800da96:	e043      	b.n	800db20 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	ee07 3a90 	vmov	s15, r3
 800da9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daa2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800dbb0 <HAL_RCC_GetSysClockFreq+0x1fc>
 800daa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daaa:	4b3e      	ldr	r3, [pc, #248]	@ (800dba4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800daac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dab2:	ee07 3a90 	vmov	s15, r3
 800dab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800daba:	ed97 6a01 	vldr	s12, [r7, #4]
 800dabe:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800dbb4 <HAL_RCC_GetSysClockFreq+0x200>
 800dac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800daca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dace:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dada:	e046      	b.n	800db6a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	ee07 3a90 	vmov	s15, r3
 800dae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dae6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800dbb0 <HAL_RCC_GetSysClockFreq+0x1fc>
 800daea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daee:	4b2d      	ldr	r3, [pc, #180]	@ (800dba4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800daf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daf6:	ee07 3a90 	vmov	s15, r3
 800dafa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800dafe:	ed97 6a01 	vldr	s12, [r7, #4]
 800db02:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800dbb4 <HAL_RCC_GetSysClockFreq+0x200>
 800db06:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800db0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800db0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db12:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800db16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db1e:	e024      	b.n	800db6a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800db20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db22:	ee07 3a90 	vmov	s15, r3
 800db26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	ee07 3a90 	vmov	s15, r3
 800db30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db38:	4b1a      	ldr	r3, [pc, #104]	@ (800dba4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800db3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db40:	ee07 3a90 	vmov	s15, r3
 800db44:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800db48:	ed97 6a01 	vldr	s12, [r7, #4]
 800db4c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800dbb4 <HAL_RCC_GetSysClockFreq+0x200>
 800db50:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800db54:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800db58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800db60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db68:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800db6a:	4b0e      	ldr	r3, [pc, #56]	@ (800dba4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800db6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db6e:	0e1b      	lsrs	r3, r3, #24
 800db70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db74:	3301      	adds	r3, #1
 800db76:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	ee07 3a90 	vmov	s15, r3
 800db7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800db82:	edd7 6a07 	vldr	s13, [r7, #28]
 800db86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db8e:	ee17 3a90 	vmov	r3, s15
 800db92:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800db94:	6a3b      	ldr	r3, [r7, #32]
}
 800db96:	4618      	mov	r0, r3
 800db98:	372c      	adds	r7, #44	@ 0x2c
 800db9a:	46bd      	mov	sp, r7
 800db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba0:	4770      	bx	lr
 800dba2:	bf00      	nop
 800dba4:	46020c00 	.word	0x46020c00
 800dba8:	0803649c 	.word	0x0803649c
 800dbac:	00f42400 	.word	0x00f42400
 800dbb0:	4b742400 	.word	0x4b742400
 800dbb4:	46000000 	.word	0x46000000

0800dbb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800dbbc:	f7ff fefa 	bl	800d9b4 <HAL_RCC_GetSysClockFreq>
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	4b07      	ldr	r3, [pc, #28]	@ (800dbe0 <HAL_RCC_GetHCLKFreq+0x28>)
 800dbc4:	6a1b      	ldr	r3, [r3, #32]
 800dbc6:	f003 030f 	and.w	r3, r3, #15
 800dbca:	4906      	ldr	r1, [pc, #24]	@ (800dbe4 <HAL_RCC_GetHCLKFreq+0x2c>)
 800dbcc:	5ccb      	ldrb	r3, [r1, r3]
 800dbce:	fa22 f303 	lsr.w	r3, r2, r3
 800dbd2:	4a05      	ldr	r2, [pc, #20]	@ (800dbe8 <HAL_RCC_GetHCLKFreq+0x30>)
 800dbd4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800dbd6:	4b04      	ldr	r3, [pc, #16]	@ (800dbe8 <HAL_RCC_GetHCLKFreq+0x30>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	46020c00 	.word	0x46020c00
 800dbe4:	0803648c 	.word	0x0803648c
 800dbe8:	2000086c 	.word	0x2000086c

0800dbec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b086      	sub	sp, #24
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800dbf4:	4b3e      	ldr	r3, [pc, #248]	@ (800dcf0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800dbf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dbfa:	f003 0304 	and.w	r3, r3, #4
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d003      	beq.n	800dc0a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800dc02:	f7fe fdcb 	bl	800c79c <HAL_PWREx_GetVoltageRange>
 800dc06:	6178      	str	r0, [r7, #20]
 800dc08:	e019      	b.n	800dc3e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800dc0a:	4b39      	ldr	r3, [pc, #228]	@ (800dcf0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800dc0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dc10:	4a37      	ldr	r2, [pc, #220]	@ (800dcf0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800dc12:	f043 0304 	orr.w	r3, r3, #4
 800dc16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800dc1a:	4b35      	ldr	r3, [pc, #212]	@ (800dcf0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800dc1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dc20:	f003 0304 	and.w	r3, r3, #4
 800dc24:	60fb      	str	r3, [r7, #12]
 800dc26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800dc28:	f7fe fdb8 	bl	800c79c <HAL_PWREx_GetVoltageRange>
 800dc2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800dc2e:	4b30      	ldr	r3, [pc, #192]	@ (800dcf0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800dc30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dc34:	4a2e      	ldr	r2, [pc, #184]	@ (800dcf0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800dc36:	f023 0304 	bic.w	r3, r3, #4
 800dc3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dc44:	d003      	beq.n	800dc4e <RCC_SetFlashLatencyFromMSIRange+0x62>
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc4c:	d109      	bne.n	800dc62 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc54:	d202      	bcs.n	800dc5c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800dc56:	2301      	movs	r3, #1
 800dc58:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800dc5a:	e033      	b.n	800dcc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800dc60:	e030      	b.n	800dcc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc68:	d208      	bcs.n	800dc7c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc70:	d102      	bne.n	800dc78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800dc72:	2303      	movs	r3, #3
 800dc74:	613b      	str	r3, [r7, #16]
 800dc76:	e025      	b.n	800dcc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	e035      	b.n	800dce8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dc82:	d90f      	bls.n	800dca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d109      	bne.n	800dc9e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dc90:	d902      	bls.n	800dc98 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800dc92:	2300      	movs	r3, #0
 800dc94:	613b      	str	r3, [r7, #16]
 800dc96:	e015      	b.n	800dcc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800dc98:	2301      	movs	r3, #1
 800dc9a:	613b      	str	r3, [r7, #16]
 800dc9c:	e012      	b.n	800dcc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800dc9e:	2300      	movs	r3, #0
 800dca0:	613b      	str	r3, [r7, #16]
 800dca2:	e00f      	b.n	800dcc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dcaa:	d109      	bne.n	800dcc0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dcb2:	d102      	bne.n	800dcba <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	613b      	str	r3, [r7, #16]
 800dcb8:	e004      	b.n	800dcc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800dcba:	2302      	movs	r3, #2
 800dcbc:	613b      	str	r3, [r7, #16]
 800dcbe:	e001      	b.n	800dcc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800dcc4:	4b0b      	ldr	r3, [pc, #44]	@ (800dcf4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f023 020f 	bic.w	r2, r3, #15
 800dccc:	4909      	ldr	r1, [pc, #36]	@ (800dcf4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800dcd4:	4b07      	ldr	r3, [pc, #28]	@ (800dcf4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f003 030f 	and.w	r3, r3, #15
 800dcdc:	693a      	ldr	r2, [r7, #16]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d001      	beq.n	800dce6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800dce2:	2301      	movs	r3, #1
 800dce4:	e000      	b.n	800dce8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800dce6:	2300      	movs	r3, #0
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3718      	adds	r7, #24
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	46020c00 	.word	0x46020c00
 800dcf4:	40022000 	.word	0x40022000

0800dcf8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800dcf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dcfc:	b0ba      	sub	sp, #232	@ 0xe8
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800dd04:	2300      	movs	r3, #0
 800dd06:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dd10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd18:	f002 0401 	and.w	r4, r2, #1
 800dd1c:	2500      	movs	r5, #0
 800dd1e:	ea54 0305 	orrs.w	r3, r4, r5
 800dd22:	d00b      	beq.n	800dd3c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800dd24:	4bcb      	ldr	r3, [pc, #812]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dd26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dd2a:	f023 0103 	bic.w	r1, r3, #3
 800dd2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dd32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd34:	4ac7      	ldr	r2, [pc, #796]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dd36:	430b      	orrs	r3, r1
 800dd38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dd3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd44:	f002 0802 	and.w	r8, r2, #2
 800dd48:	f04f 0900 	mov.w	r9, #0
 800dd4c:	ea58 0309 	orrs.w	r3, r8, r9
 800dd50:	d00b      	beq.n	800dd6a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800dd52:	4bc0      	ldr	r3, [pc, #768]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dd54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dd58:	f023 010c 	bic.w	r1, r3, #12
 800dd5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dd60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd62:	4abc      	ldr	r2, [pc, #752]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dd64:	430b      	orrs	r3, r1
 800dd66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dd6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd72:	f002 0a04 	and.w	sl, r2, #4
 800dd76:	f04f 0b00 	mov.w	fp, #0
 800dd7a:	ea5a 030b 	orrs.w	r3, sl, fp
 800dd7e:	d00b      	beq.n	800dd98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800dd80:	4bb4      	ldr	r3, [pc, #720]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dd82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dd86:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800dd8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dd8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd90:	4ab0      	ldr	r2, [pc, #704]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dd92:	430b      	orrs	r3, r1
 800dd94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dd98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda0:	f002 0308 	and.w	r3, r2, #8
 800dda4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dda8:	2300      	movs	r3, #0
 800ddaa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ddae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800ddb2:	460b      	mov	r3, r1
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	d00b      	beq.n	800ddd0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800ddb8:	4ba6      	ldr	r3, [pc, #664]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ddba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ddbe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ddc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ddc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddc8:	4aa2      	ldr	r2, [pc, #648]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ddca:	430b      	orrs	r3, r1
 800ddcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ddd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ddd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd8:	f002 0310 	and.w	r3, r2, #16
 800dddc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dde0:	2300      	movs	r3, #0
 800dde2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dde6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ddea:	460b      	mov	r3, r1
 800ddec:	4313      	orrs	r3, r2
 800ddee:	d00b      	beq.n	800de08 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800ddf0:	4b98      	ldr	r3, [pc, #608]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ddf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ddf6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ddfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ddfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de00:	4a94      	ldr	r2, [pc, #592]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de02:	430b      	orrs	r3, r1
 800de04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800de08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de10:	f002 0320 	and.w	r3, r2, #32
 800de14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800de18:	2300      	movs	r3, #0
 800de1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800de1e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800de22:	460b      	mov	r3, r1
 800de24:	4313      	orrs	r3, r2
 800de26:	d00b      	beq.n	800de40 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800de28:	4b8a      	ldr	r3, [pc, #552]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800de2e:	f023 0107 	bic.w	r1, r3, #7
 800de32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de38:	4a86      	ldr	r2, [pc, #536]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de3a:	430b      	orrs	r3, r1
 800de3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800de40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de48:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800de4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800de50:	2300      	movs	r3, #0
 800de52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800de56:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800de5a:	460b      	mov	r3, r1
 800de5c:	4313      	orrs	r3, r2
 800de5e:	d00b      	beq.n	800de78 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800de60:	4b7c      	ldr	r3, [pc, #496]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800de66:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800de6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800de70:	4a78      	ldr	r2, [pc, #480]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de72:	430b      	orrs	r3, r1
 800de74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800de78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de80:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800de84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800de88:	2300      	movs	r3, #0
 800de8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800de8e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800de92:	460b      	mov	r3, r1
 800de94:	4313      	orrs	r3, r2
 800de96:	d00b      	beq.n	800deb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800de98:	4b6e      	ldr	r3, [pc, #440]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800de9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800de9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dea8:	4a6a      	ldr	r2, [pc, #424]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800deaa:	430b      	orrs	r3, r1
 800deac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800deb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800deb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800debc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dec0:	2300      	movs	r3, #0
 800dec2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dec6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800deca:	460b      	mov	r3, r1
 800decc:	4313      	orrs	r3, r2
 800dece:	d00b      	beq.n	800dee8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800ded0:	4b60      	ldr	r3, [pc, #384]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ded2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ded6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800deda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dee0:	4a5c      	ldr	r2, [pc, #368]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dee2:	430b      	orrs	r3, r1
 800dee4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dee8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800deec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800def4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800def8:	2300      	movs	r3, #0
 800defa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800defe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800df02:	460b      	mov	r3, r1
 800df04:	4313      	orrs	r3, r2
 800df06:	d00b      	beq.n	800df20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800df08:	4b52      	ldr	r3, [pc, #328]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800df0e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800df12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df18:	4a4e      	ldr	r2, [pc, #312]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df1a:	430b      	orrs	r3, r1
 800df1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800df20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df28:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800df2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800df30:	2300      	movs	r3, #0
 800df32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800df36:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800df3a:	460b      	mov	r3, r1
 800df3c:	4313      	orrs	r3, r2
 800df3e:	d00b      	beq.n	800df58 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800df40:	4b44      	ldr	r3, [pc, #272]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800df46:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800df4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800df50:	4a40      	ldr	r2, [pc, #256]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df52:	430b      	orrs	r3, r1
 800df54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800df58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df60:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800df64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800df68:	2300      	movs	r3, #0
 800df6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800df6e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800df72:	460b      	mov	r3, r1
 800df74:	4313      	orrs	r3, r2
 800df76:	d00b      	beq.n	800df90 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800df78:	4b36      	ldr	r3, [pc, #216]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800df7e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800df82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800df88:	4a32      	ldr	r2, [pc, #200]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800df8a:	430b      	orrs	r3, r1
 800df8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800df90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df98:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800df9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dfa6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800dfaa:	460b      	mov	r3, r1
 800dfac:	4313      	orrs	r3, r2
 800dfae:	d00c      	beq.n	800dfca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800dfb0:	4b28      	ldr	r3, [pc, #160]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dfb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dfb6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800dfba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dfbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfc2:	4a24      	ldr	r2, [pc, #144]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dfc4:	430b      	orrs	r3, r1
 800dfc6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800dfca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800dfd6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dfd8:	2300      	movs	r3, #0
 800dfda:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dfdc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	d04f      	beq.n	800e086 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800dfe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dfea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dfee:	2b80      	cmp	r3, #128	@ 0x80
 800dff0:	d02d      	beq.n	800e04e <HAL_RCCEx_PeriphCLKConfig+0x356>
 800dff2:	2b80      	cmp	r3, #128	@ 0x80
 800dff4:	d827      	bhi.n	800e046 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800dff6:	2b60      	cmp	r3, #96	@ 0x60
 800dff8:	d02e      	beq.n	800e058 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800dffa:	2b60      	cmp	r3, #96	@ 0x60
 800dffc:	d823      	bhi.n	800e046 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800dffe:	2b40      	cmp	r3, #64	@ 0x40
 800e000:	d006      	beq.n	800e010 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800e002:	2b40      	cmp	r3, #64	@ 0x40
 800e004:	d81f      	bhi.n	800e046 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800e006:	2b00      	cmp	r3, #0
 800e008:	d009      	beq.n	800e01e <HAL_RCCEx_PeriphCLKConfig+0x326>
 800e00a:	2b20      	cmp	r3, #32
 800e00c:	d011      	beq.n	800e032 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800e00e:	e01a      	b.n	800e046 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e010:	4b10      	ldr	r3, [pc, #64]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e014:	4a0f      	ldr	r2, [pc, #60]	@ (800e054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e016:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e01a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e01c:	e01d      	b.n	800e05a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e01e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e022:	3308      	adds	r3, #8
 800e024:	4618      	mov	r0, r3
 800e026:	f000 fc69 	bl	800e8fc <RCCEx_PLL2_Config>
 800e02a:	4603      	mov	r3, r0
 800e02c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e030:	e013      	b.n	800e05a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e032:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e036:	332c      	adds	r3, #44	@ 0x2c
 800e038:	4618      	mov	r0, r3
 800e03a:	f000 fcf7 	bl	800ea2c <RCCEx_PLL3_Config>
 800e03e:	4603      	mov	r3, r0
 800e040:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e044:	e009      	b.n	800e05a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e046:	2301      	movs	r3, #1
 800e048:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800e04c:	e005      	b.n	800e05a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800e04e:	bf00      	nop
 800e050:	e003      	b.n	800e05a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800e052:	bf00      	nop
 800e054:	46020c00 	.word	0x46020c00
        break;
 800e058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e05a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d10d      	bne.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800e062:	4bb6      	ldr	r3, [pc, #728]	@ (800e33c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e064:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e068:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800e06c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e074:	4ab1      	ldr	r2, [pc, #708]	@ (800e33c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e076:	430b      	orrs	r3, r1
 800e078:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800e07c:	e003      	b.n	800e086 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e07e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e082:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800e086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800e092:	673b      	str	r3, [r7, #112]	@ 0x70
 800e094:	2300      	movs	r3, #0
 800e096:	677b      	str	r3, [r7, #116]	@ 0x74
 800e098:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e09c:	460b      	mov	r3, r1
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	d053      	beq.n	800e14a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800e0a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e0a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e0aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e0ae:	d033      	beq.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800e0b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e0b4:	d82c      	bhi.n	800e110 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800e0b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e0ba:	d02f      	beq.n	800e11c <HAL_RCCEx_PeriphCLKConfig+0x424>
 800e0bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e0c0:	d826      	bhi.n	800e110 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800e0c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0c6:	d008      	beq.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800e0c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0cc:	d820      	bhi.n	800e110 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d00a      	beq.n	800e0e8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800e0d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0d6:	d011      	beq.n	800e0fc <HAL_RCCEx_PeriphCLKConfig+0x404>
 800e0d8:	e01a      	b.n	800e110 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e0da:	4b98      	ldr	r3, [pc, #608]	@ (800e33c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e0dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0de:	4a97      	ldr	r2, [pc, #604]	@ (800e33c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e0e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e0e4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e0e6:	e01a      	b.n	800e11e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e0e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e0ec:	3308      	adds	r3, #8
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f000 fc04 	bl	800e8fc <RCCEx_PLL2_Config>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e0fa:	e010      	b.n	800e11e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e0fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e100:	332c      	adds	r3, #44	@ 0x2c
 800e102:	4618      	mov	r0, r3
 800e104:	f000 fc92 	bl	800ea2c <RCCEx_PLL3_Config>
 800e108:	4603      	mov	r3, r0
 800e10a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e10e:	e006      	b.n	800e11e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e110:	2301      	movs	r3, #1
 800e112:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800e116:	e002      	b.n	800e11e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800e118:	bf00      	nop
 800e11a:	e000      	b.n	800e11e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800e11c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e11e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e122:	2b00      	cmp	r3, #0
 800e124:	d10d      	bne.n	800e142 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800e126:	4b85      	ldr	r3, [pc, #532]	@ (800e33c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e128:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e12c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800e130:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e134:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e138:	4a80      	ldr	r2, [pc, #512]	@ (800e33c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e13a:	430b      	orrs	r3, r1
 800e13c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800e140:	e003      	b.n	800e14a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e142:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e146:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800e14a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e152:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800e156:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e158:	2300      	movs	r3, #0
 800e15a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e15c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800e160:	460b      	mov	r3, r1
 800e162:	4313      	orrs	r3, r2
 800e164:	d046      	beq.n	800e1f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800e166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e16a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e16e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e172:	d028      	beq.n	800e1c6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800e174:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e178:	d821      	bhi.n	800e1be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800e17a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e17e:	d022      	beq.n	800e1c6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800e180:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e184:	d81b      	bhi.n	800e1be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800e186:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e18a:	d01c      	beq.n	800e1c6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800e18c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e190:	d815      	bhi.n	800e1be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800e192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e196:	d008      	beq.n	800e1aa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800e198:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e19c:	d80f      	bhi.n	800e1be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d011      	beq.n	800e1c6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800e1a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e1a6:	d00e      	beq.n	800e1c6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800e1a8:	e009      	b.n	800e1be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e1aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e1ae:	3308      	adds	r3, #8
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f000 fba3 	bl	800e8fc <RCCEx_PLL2_Config>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800e1bc:	e004      	b.n	800e1c8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e1be:	2301      	movs	r3, #1
 800e1c0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800e1c4:	e000      	b.n	800e1c8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800e1c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e1c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d10d      	bne.n	800e1ec <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800e1d0:	4b5a      	ldr	r3, [pc, #360]	@ (800e33c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e1d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e1d6:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800e1da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e1de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e1e2:	4a56      	ldr	r2, [pc, #344]	@ (800e33c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e1e4:	430b      	orrs	r3, r1
 800e1e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800e1ea:	e003      	b.n	800e1f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e1f0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800e1f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fc:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800e200:	663b      	str	r3, [r7, #96]	@ 0x60
 800e202:	2300      	movs	r3, #0
 800e204:	667b      	str	r3, [r7, #100]	@ 0x64
 800e206:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e20a:	460b      	mov	r3, r1
 800e20c:	4313      	orrs	r3, r2
 800e20e:	d03f      	beq.n	800e290 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800e210:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e218:	2b04      	cmp	r3, #4
 800e21a:	d81e      	bhi.n	800e25a <HAL_RCCEx_PeriphCLKConfig+0x562>
 800e21c:	a201      	add	r2, pc, #4	@ (adr r2, 800e224 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800e21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e222:	bf00      	nop
 800e224:	0800e263 	.word	0x0800e263
 800e228:	0800e239 	.word	0x0800e239
 800e22c:	0800e247 	.word	0x0800e247
 800e230:	0800e263 	.word	0x0800e263
 800e234:	0800e263 	.word	0x0800e263
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e238:	4b40      	ldr	r3, [pc, #256]	@ (800e33c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e23a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e23c:	4a3f      	ldr	r2, [pc, #252]	@ (800e33c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e23e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e242:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800e244:	e00e      	b.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e24a:	332c      	adds	r3, #44	@ 0x2c
 800e24c:	4618      	mov	r0, r3
 800e24e:	f000 fbed 	bl	800ea2c <RCCEx_PLL3_Config>
 800e252:	4603      	mov	r3, r0
 800e254:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800e258:	e004      	b.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e25a:	2301      	movs	r3, #1
 800e25c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800e260:	e000      	b.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800e262:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e264:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d10d      	bne.n	800e288 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800e26c:	4b33      	ldr	r3, [pc, #204]	@ (800e33c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e26e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e272:	f023 0107 	bic.w	r1, r3, #7
 800e276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e27a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e27e:	4a2f      	ldr	r2, [pc, #188]	@ (800e33c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e280:	430b      	orrs	r3, r1
 800e282:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800e286:	e003      	b.n	800e290 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e288:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e28c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800e290:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e298:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800e29c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e29e:	2300      	movs	r3, #0
 800e2a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e2a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	d04d      	beq.n	800e348 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800e2ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e2b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e2b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e2b8:	d028      	beq.n	800e30c <HAL_RCCEx_PeriphCLKConfig+0x614>
 800e2ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e2be:	d821      	bhi.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800e2c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e2c4:	d024      	beq.n	800e310 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800e2c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e2ca:	d81b      	bhi.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800e2cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e2d0:	d00e      	beq.n	800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800e2d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e2d6:	d815      	bhi.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d01b      	beq.n	800e314 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800e2dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e2e0:	d110      	bne.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e2e2:	4b16      	ldr	r3, [pc, #88]	@ (800e33c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e2e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2e6:	4a15      	ldr	r2, [pc, #84]	@ (800e33c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e2e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e2ec:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800e2ee:	e012      	b.n	800e316 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e2f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e2f4:	332c      	adds	r3, #44	@ 0x2c
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f000 fb98 	bl	800ea2c <RCCEx_PLL3_Config>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800e302:	e008      	b.n	800e316 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e304:	2301      	movs	r3, #1
 800e306:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800e30a:	e004      	b.n	800e316 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800e30c:	bf00      	nop
 800e30e:	e002      	b.n	800e316 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800e310:	bf00      	nop
 800e312:	e000      	b.n	800e316 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800e314:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e316:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d110      	bne.n	800e340 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800e31e:	4b07      	ldr	r3, [pc, #28]	@ (800e33c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e320:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e324:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800e328:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e32c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e330:	4a02      	ldr	r2, [pc, #8]	@ (800e33c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e332:	430b      	orrs	r3, r1
 800e334:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800e338:	e006      	b.n	800e348 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800e33a:	bf00      	nop
 800e33c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e340:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e344:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e348:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e350:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800e354:	653b      	str	r3, [r7, #80]	@ 0x50
 800e356:	2300      	movs	r3, #0
 800e358:	657b      	str	r3, [r7, #84]	@ 0x54
 800e35a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e35e:	460b      	mov	r3, r1
 800e360:	4313      	orrs	r3, r2
 800e362:	f000 80b5 	beq.w	800e4d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e366:	2300      	movs	r3, #0
 800e368:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e36c:	4b9d      	ldr	r3, [pc, #628]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e36e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e372:	f003 0304 	and.w	r3, r3, #4
 800e376:	2b00      	cmp	r3, #0
 800e378:	d113      	bne.n	800e3a2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e37a:	4b9a      	ldr	r3, [pc, #616]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e37c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e380:	4a98      	ldr	r2, [pc, #608]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e382:	f043 0304 	orr.w	r3, r3, #4
 800e386:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800e38a:	4b96      	ldr	r3, [pc, #600]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e38c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e390:	f003 0304 	and.w	r3, r3, #4
 800e394:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e398:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 800e39c:	2301      	movs	r3, #1
 800e39e:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800e3a2:	4b91      	ldr	r3, [pc, #580]	@ (800e5e8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800e3a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3a6:	4a90      	ldr	r2, [pc, #576]	@ (800e5e8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800e3a8:	f043 0301 	orr.w	r3, r3, #1
 800e3ac:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e3ae:	f7fb fc79 	bl	8009ca4 <HAL_GetTick>
 800e3b2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800e3b6:	e00b      	b.n	800e3d0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e3b8:	f7fb fc74 	bl	8009ca4 <HAL_GetTick>
 800e3bc:	4602      	mov	r2, r0
 800e3be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e3c2:	1ad3      	subs	r3, r2, r3
 800e3c4:	2b02      	cmp	r3, #2
 800e3c6:	d903      	bls.n	800e3d0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800e3c8:	2303      	movs	r3, #3
 800e3ca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800e3ce:	e005      	b.n	800e3dc <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800e3d0:	4b85      	ldr	r3, [pc, #532]	@ (800e5e8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800e3d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3d4:	f003 0301 	and.w	r3, r3, #1
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d0ed      	beq.n	800e3b8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800e3dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d165      	bne.n	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e3e4:	4b7f      	ldr	r3, [pc, #508]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e3e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e3ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e3ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800e3f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d023      	beq.n	800e442 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800e3fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e3fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800e402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e406:	4293      	cmp	r3, r2
 800e408:	d01b      	beq.n	800e442 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e40a:	4b76      	ldr	r3, [pc, #472]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e40c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e414:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e418:	4b72      	ldr	r3, [pc, #456]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e41a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e41e:	4a71      	ldr	r2, [pc, #452]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e424:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e428:	4b6e      	ldr	r3, [pc, #440]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e42a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e42e:	4a6d      	ldr	r2, [pc, #436]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e434:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e438:	4a6a      	ldr	r2, [pc, #424]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e43a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e43e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e446:	f003 0301 	and.w	r3, r3, #1
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d019      	beq.n	800e482 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e44e:	f7fb fc29 	bl	8009ca4 <HAL_GetTick>
 800e452:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e456:	e00d      	b.n	800e474 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e458:	f7fb fc24 	bl	8009ca4 <HAL_GetTick>
 800e45c:	4602      	mov	r2, r0
 800e45e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e462:	1ad2      	subs	r2, r2, r3
 800e464:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e468:	429a      	cmp	r2, r3
 800e46a:	d903      	bls.n	800e474 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800e46c:	2303      	movs	r3, #3
 800e46e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 800e472:	e006      	b.n	800e482 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e474:	4b5b      	ldr	r3, [pc, #364]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e476:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e47a:	f003 0302 	and.w	r3, r3, #2
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d0ea      	beq.n	800e458 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800e482:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e486:	2b00      	cmp	r3, #0
 800e488:	d10d      	bne.n	800e4a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800e48a:	4b56      	ldr	r3, [pc, #344]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e48c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e490:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e494:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e498:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e49c:	4a51      	ldr	r2, [pc, #324]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e49e:	430b      	orrs	r3, r1
 800e4a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e4a4:	e008      	b.n	800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e4a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e4aa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 800e4ae:	e003      	b.n	800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e4b4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e4b8:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d107      	bne.n	800e4d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e4c0:	4b48      	ldr	r3, [pc, #288]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e4c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e4c6:	4a47      	ldr	r2, [pc, #284]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e4c8:	f023 0304 	bic.w	r3, r3, #4
 800e4cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800e4d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800e4dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e4de:	2300      	movs	r3, #0
 800e4e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e4e2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	d042      	beq.n	800e572 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800e4ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e4f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e4f4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800e4f8:	d022      	beq.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800e4fa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800e4fe:	d81b      	bhi.n	800e538 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800e500:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e504:	d011      	beq.n	800e52a <HAL_RCCEx_PeriphCLKConfig+0x832>
 800e506:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e50a:	d815      	bhi.n	800e538 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d019      	beq.n	800e544 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800e510:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e514:	d110      	bne.n	800e538 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e51a:	3308      	adds	r3, #8
 800e51c:	4618      	mov	r0, r3
 800e51e:	f000 f9ed 	bl	800e8fc <RCCEx_PLL2_Config>
 800e522:	4603      	mov	r3, r0
 800e524:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800e528:	e00d      	b.n	800e546 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e52a:	4b2e      	ldr	r3, [pc, #184]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e52c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e52e:	4a2d      	ldr	r2, [pc, #180]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e534:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800e536:	e006      	b.n	800e546 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e538:	2301      	movs	r3, #1
 800e53a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800e53e:	e002      	b.n	800e546 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800e540:	bf00      	nop
 800e542:	e000      	b.n	800e546 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800e544:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e546:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d10d      	bne.n	800e56a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800e54e:	4b25      	ldr	r3, [pc, #148]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e554:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800e558:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e55c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e560:	4a20      	ldr	r2, [pc, #128]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e562:	430b      	orrs	r3, r1
 800e564:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e568:	e003      	b.n	800e572 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e56a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e56e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800e57e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e580:	2300      	movs	r3, #0
 800e582:	647b      	str	r3, [r7, #68]	@ 0x44
 800e584:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800e588:	460b      	mov	r3, r1
 800e58a:	4313      	orrs	r3, r2
 800e58c:	d032      	beq.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800e58e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e592:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e59a:	d00b      	beq.n	800e5b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800e59c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e5a0:	d804      	bhi.n	800e5ac <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d008      	beq.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800e5a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5aa:	d007      	beq.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800e5b2:	e004      	b.n	800e5be <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800e5b4:	bf00      	nop
 800e5b6:	e002      	b.n	800e5be <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800e5b8:	bf00      	nop
 800e5ba:	e000      	b.n	800e5be <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800e5bc:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e5be:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d112      	bne.n	800e5ec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800e5c6:	4b07      	ldr	r3, [pc, #28]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e5c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e5cc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e5d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e5d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e5d8:	4a02      	ldr	r2, [pc, #8]	@ (800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e5da:	430b      	orrs	r3, r1
 800e5dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800e5e0:	e008      	b.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800e5e2:	bf00      	nop
 800e5e4:	46020c00 	.word	0x46020c00
 800e5e8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e5f0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800e5f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5fc:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800e600:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e602:	2300      	movs	r3, #0
 800e604:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e606:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800e60a:	460b      	mov	r3, r1
 800e60c:	4313      	orrs	r3, r2
 800e60e:	d00c      	beq.n	800e62a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800e610:	4b98      	ldr	r3, [pc, #608]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e612:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e616:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800e61a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e61e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e622:	4a94      	ldr	r2, [pc, #592]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e624:	430b      	orrs	r3, r1
 800e626:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800e62a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e632:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800e636:	633b      	str	r3, [r7, #48]	@ 0x30
 800e638:	2300      	movs	r3, #0
 800e63a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e63c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800e640:	460b      	mov	r3, r1
 800e642:	4313      	orrs	r3, r2
 800e644:	d019      	beq.n	800e67a <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800e646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e64a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e64e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e652:	d105      	bne.n	800e660 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e654:	4b87      	ldr	r3, [pc, #540]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e658:	4a86      	ldr	r2, [pc, #536]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e65a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e65e:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800e660:	4b84      	ldr	r3, [pc, #528]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e662:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e666:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800e66a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e66e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e672:	4a80      	ldr	r2, [pc, #512]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e674:	430b      	orrs	r3, r1
 800e676:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800e67a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e682:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800e686:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e688:	2300      	movs	r3, #0
 800e68a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e68c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800e690:	460b      	mov	r3, r1
 800e692:	4313      	orrs	r3, r2
 800e694:	d00c      	beq.n	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800e696:	4b77      	ldr	r3, [pc, #476]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e69c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e6a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e6a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e6a8:	4972      	ldr	r1, [pc, #456]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e6aa:	4313      	orrs	r3, r2
 800e6ac:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800e6b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e6bc:	623b      	str	r3, [r7, #32]
 800e6be:	2300      	movs	r3, #0
 800e6c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6c2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	4313      	orrs	r3, r2
 800e6ca:	d00c      	beq.n	800e6e6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800e6cc:	4b69      	ldr	r3, [pc, #420]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e6ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e6d2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e6d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e6da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e6de:	4965      	ldr	r1, [pc, #404]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e6e0:	4313      	orrs	r3, r2
 800e6e2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800e6e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ee:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800e6f2:	61bb      	str	r3, [r7, #24]
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	61fb      	str	r3, [r7, #28]
 800e6f8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	4313      	orrs	r3, r2
 800e700:	d00c      	beq.n	800e71c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800e702:	4b5c      	ldr	r3, [pc, #368]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e704:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e708:	f023 0218 	bic.w	r2, r3, #24
 800e70c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e710:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e714:	4957      	ldr	r1, [pc, #348]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e716:	4313      	orrs	r3, r2
 800e718:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e71c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e724:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800e728:	613b      	str	r3, [r7, #16]
 800e72a:	2300      	movs	r3, #0
 800e72c:	617b      	str	r3, [r7, #20]
 800e72e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e732:	460b      	mov	r3, r1
 800e734:	4313      	orrs	r3, r2
 800e736:	d032      	beq.n	800e79e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800e738:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e73c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e740:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e744:	d105      	bne.n	800e752 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e746:	4b4b      	ldr	r3, [pc, #300]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e74a:	4a4a      	ldr	r2, [pc, #296]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e74c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e750:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800e752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e756:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e75a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e75e:	d108      	bne.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e760:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e764:	3308      	adds	r3, #8
 800e766:	4618      	mov	r0, r3
 800e768:	f000 f8c8 	bl	800e8fc <RCCEx_PLL2_Config>
 800e76c:	4603      	mov	r3, r0
 800e76e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 800e772:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e776:	2b00      	cmp	r3, #0
 800e778:	d10d      	bne.n	800e796 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800e77a:	4b3e      	ldr	r3, [pc, #248]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e77c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e780:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e784:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e788:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e78c:	4939      	ldr	r1, [pc, #228]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e78e:	4313      	orrs	r3, r2
 800e790:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800e794:	e003      	b.n	800e79e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e796:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e79a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800e79e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a6:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800e7aa:	60bb      	str	r3, [r7, #8]
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	60fb      	str	r3, [r7, #12]
 800e7b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	4313      	orrs	r3, r2
 800e7b8:	d03a      	beq.n	800e830 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800e7ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e7be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e7c6:	d00e      	beq.n	800e7e6 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800e7c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e7cc:	d815      	bhi.n	800e7fa <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d017      	beq.n	800e802 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800e7d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e7d6:	d110      	bne.n	800e7fa <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e7d8:	4b26      	ldr	r3, [pc, #152]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e7da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7dc:	4a25      	ldr	r2, [pc, #148]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e7de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e7e2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800e7e4:	e00e      	b.n	800e804 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e7e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e7ea:	3308      	adds	r3, #8
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f000 f885 	bl	800e8fc <RCCEx_PLL2_Config>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800e7f8:	e004      	b.n	800e804 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800e800:	e000      	b.n	800e804 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800e802:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e804:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d10d      	bne.n	800e828 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800e80c:	4b19      	ldr	r3, [pc, #100]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e80e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e812:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800e816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e81a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e81e:	4915      	ldr	r1, [pc, #84]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e820:	4313      	orrs	r3, r2
 800e822:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800e826:	e003      	b.n	800e830 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e828:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e82c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800e830:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e838:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800e83c:	603b      	str	r3, [r7, #0]
 800e83e:	2300      	movs	r3, #0
 800e840:	607b      	str	r3, [r7, #4]
 800e842:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e846:	460b      	mov	r3, r1
 800e848:	4313      	orrs	r3, r2
 800e84a:	d00c      	beq.n	800e866 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800e84c:	4b09      	ldr	r3, [pc, #36]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e84e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e852:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800e856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e85a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e85e:	4905      	ldr	r1, [pc, #20]	@ (800e874 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e860:	4313      	orrs	r3, r2
 800e862:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800e866:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	37e8      	adds	r7, #232	@ 0xe8
 800e86e:	46bd      	mov	sp, r7
 800e870:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e874:	46020c00 	.word	0x46020c00

0800e878 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(const RCC_CRSInitTypeDef *const pInit)
{
 800e878:	b480      	push	{r7}
 800e87a:	b085      	sub	sp, #20
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800e880:	4b1c      	ldr	r3, [pc, #112]	@ (800e8f4 <HAL_RCCEx_CRSConfig+0x7c>)
 800e882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e884:	4a1b      	ldr	r2, [pc, #108]	@ (800e8f4 <HAL_RCCEx_CRSConfig+0x7c>)
 800e886:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e88a:	6753      	str	r3, [r2, #116]	@ 0x74
  __HAL_RCC_CRS_RELEASE_RESET();
 800e88c:	4b19      	ldr	r3, [pc, #100]	@ (800e8f4 <HAL_RCCEx_CRSConfig+0x7c>)
 800e88e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e890:	4a18      	ldr	r2, [pc, #96]	@ (800e8f4 <HAL_RCCEx_CRSConfig+0x7c>)
 800e892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e896:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	431a      	orrs	r2, r3
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	689b      	ldr	r3, [r3, #8]
 800e8a6:	4313      	orrs	r3, r2
 800e8a8:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	68db      	ldr	r3, [r3, #12]
 800e8ae:	68fa      	ldr	r2, [r7, #12]
 800e8b0:	4313      	orrs	r3, r2
 800e8b2:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	691b      	ldr	r3, [r3, #16]
 800e8b8:	041b      	lsls	r3, r3, #16
 800e8ba:	68fa      	ldr	r2, [r7, #12]
 800e8bc:	4313      	orrs	r3, r2
 800e8be:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800e8c0:	4a0d      	ldr	r2, [pc, #52]	@ (800e8f8 <HAL_RCCEx_CRSConfig+0x80>)
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800e8c6:	4b0c      	ldr	r3, [pc, #48]	@ (800e8f8 <HAL_RCCEx_CRSConfig+0x80>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	695b      	ldr	r3, [r3, #20]
 800e8d2:	021b      	lsls	r3, r3, #8
 800e8d4:	4908      	ldr	r1, [pc, #32]	@ (800e8f8 <HAL_RCCEx_CRSConfig+0x80>)
 800e8d6:	4313      	orrs	r3, r2
 800e8d8:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800e8da:	4b07      	ldr	r3, [pc, #28]	@ (800e8f8 <HAL_RCCEx_CRSConfig+0x80>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	4a06      	ldr	r2, [pc, #24]	@ (800e8f8 <HAL_RCCEx_CRSConfig+0x80>)
 800e8e0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e8e4:	6013      	str	r3, [r2, #0]
}
 800e8e6:	bf00      	nop
 800e8e8:	3714      	adds	r7, #20
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f0:	4770      	bx	lr
 800e8f2:	bf00      	nop
 800e8f4:	46020c00 	.word	0x46020c00
 800e8f8:	40006000 	.word	0x40006000

0800e8fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800e904:	4b47      	ldr	r3, [pc, #284]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	4a46      	ldr	r2, [pc, #280]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e90a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e90e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e910:	f7fb f9c8 	bl	8009ca4 <HAL_GetTick>
 800e914:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e916:	e008      	b.n	800e92a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e918:	f7fb f9c4 	bl	8009ca4 <HAL_GetTick>
 800e91c:	4602      	mov	r2, r0
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	1ad3      	subs	r3, r2, r3
 800e922:	2b02      	cmp	r3, #2
 800e924:	d901      	bls.n	800e92a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800e926:	2303      	movs	r3, #3
 800e928:	e077      	b.n	800ea1a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e92a:	4b3e      	ldr	r3, [pc, #248]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e932:	2b00      	cmp	r3, #0
 800e934:	d1f0      	bne.n	800e918 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800e936:	4b3b      	ldr	r3, [pc, #236]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e93a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800e93e:	f023 0303 	bic.w	r3, r3, #3
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	6811      	ldr	r1, [r2, #0]
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	6852      	ldr	r2, [r2, #4]
 800e94a:	3a01      	subs	r2, #1
 800e94c:	0212      	lsls	r2, r2, #8
 800e94e:	430a      	orrs	r2, r1
 800e950:	4934      	ldr	r1, [pc, #208]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e952:	4313      	orrs	r3, r2
 800e954:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800e956:	4b33      	ldr	r3, [pc, #204]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e958:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e95a:	4b33      	ldr	r3, [pc, #204]	@ (800ea28 <RCCEx_PLL2_Config+0x12c>)
 800e95c:	4013      	ands	r3, r2
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	6892      	ldr	r2, [r2, #8]
 800e962:	3a01      	subs	r2, #1
 800e964:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800e968:	687a      	ldr	r2, [r7, #4]
 800e96a:	68d2      	ldr	r2, [r2, #12]
 800e96c:	3a01      	subs	r2, #1
 800e96e:	0252      	lsls	r2, r2, #9
 800e970:	b292      	uxth	r2, r2
 800e972:	4311      	orrs	r1, r2
 800e974:	687a      	ldr	r2, [r7, #4]
 800e976:	6912      	ldr	r2, [r2, #16]
 800e978:	3a01      	subs	r2, #1
 800e97a:	0412      	lsls	r2, r2, #16
 800e97c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e980:	4311      	orrs	r1, r2
 800e982:	687a      	ldr	r2, [r7, #4]
 800e984:	6952      	ldr	r2, [r2, #20]
 800e986:	3a01      	subs	r2, #1
 800e988:	0612      	lsls	r2, r2, #24
 800e98a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e98e:	430a      	orrs	r2, r1
 800e990:	4924      	ldr	r1, [pc, #144]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e992:	4313      	orrs	r3, r2
 800e994:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800e996:	4b23      	ldr	r3, [pc, #140]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e99a:	f023 020c 	bic.w	r2, r3, #12
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	699b      	ldr	r3, [r3, #24]
 800e9a2:	4920      	ldr	r1, [pc, #128]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e9a4:	4313      	orrs	r3, r2
 800e9a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800e9a8:	4b1e      	ldr	r3, [pc, #120]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e9aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6a1b      	ldr	r3, [r3, #32]
 800e9b0:	491c      	ldr	r1, [pc, #112]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e9b2:	4313      	orrs	r3, r2
 800e9b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800e9b6:	4b1b      	ldr	r3, [pc, #108]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e9b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9ba:	4a1a      	ldr	r2, [pc, #104]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e9bc:	f023 0310 	bic.w	r3, r3, #16
 800e9c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e9c2:	4b18      	ldr	r3, [pc, #96]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e9c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e9ca:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e9ce:	687a      	ldr	r2, [r7, #4]
 800e9d0:	69d2      	ldr	r2, [r2, #28]
 800e9d2:	00d2      	lsls	r2, r2, #3
 800e9d4:	4913      	ldr	r1, [pc, #76]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e9d6:	4313      	orrs	r3, r2
 800e9d8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800e9da:	4b12      	ldr	r3, [pc, #72]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9de:	4a11      	ldr	r2, [pc, #68]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e9e0:	f043 0310 	orr.w	r3, r3, #16
 800e9e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800e9e6:	4b0f      	ldr	r3, [pc, #60]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	4a0e      	ldr	r2, [pc, #56]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800e9ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e9f0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e9f2:	f7fb f957 	bl	8009ca4 <HAL_GetTick>
 800e9f6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e9f8:	e008      	b.n	800ea0c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e9fa:	f7fb f953 	bl	8009ca4 <HAL_GetTick>
 800e9fe:	4602      	mov	r2, r0
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	1ad3      	subs	r3, r2, r3
 800ea04:	2b02      	cmp	r3, #2
 800ea06:	d901      	bls.n	800ea0c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800ea08:	2303      	movs	r3, #3
 800ea0a:	e006      	b.n	800ea1a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ea0c:	4b05      	ldr	r3, [pc, #20]	@ (800ea24 <RCCEx_PLL2_Config+0x128>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d0f0      	beq.n	800e9fa <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800ea18:	2300      	movs	r3, #0

}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3710      	adds	r7, #16
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	46020c00 	.word	0x46020c00
 800ea28:	80800000 	.word	0x80800000

0800ea2c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800ea34:	4b47      	ldr	r3, [pc, #284]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	4a46      	ldr	r2, [pc, #280]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800ea3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ea3e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ea40:	f7fb f930 	bl	8009ca4 <HAL_GetTick>
 800ea44:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ea46:	e008      	b.n	800ea5a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ea48:	f7fb f92c 	bl	8009ca4 <HAL_GetTick>
 800ea4c:	4602      	mov	r2, r0
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	1ad3      	subs	r3, r2, r3
 800ea52:	2b02      	cmp	r3, #2
 800ea54:	d901      	bls.n	800ea5a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ea56:	2303      	movs	r3, #3
 800ea58:	e077      	b.n	800eb4a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ea5a:	4b3e      	ldr	r3, [pc, #248]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d1f0      	bne.n	800ea48 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ea66:	4b3b      	ldr	r3, [pc, #236]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800ea68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea6a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ea6e:	f023 0303 	bic.w	r3, r3, #3
 800ea72:	687a      	ldr	r2, [r7, #4]
 800ea74:	6811      	ldr	r1, [r2, #0]
 800ea76:	687a      	ldr	r2, [r7, #4]
 800ea78:	6852      	ldr	r2, [r2, #4]
 800ea7a:	3a01      	subs	r2, #1
 800ea7c:	0212      	lsls	r2, r2, #8
 800ea7e:	430a      	orrs	r2, r1
 800ea80:	4934      	ldr	r1, [pc, #208]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800ea82:	4313      	orrs	r3, r2
 800ea84:	630b      	str	r3, [r1, #48]	@ 0x30
 800ea86:	4b33      	ldr	r3, [pc, #204]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800ea88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea8a:	4b33      	ldr	r3, [pc, #204]	@ (800eb58 <RCCEx_PLL3_Config+0x12c>)
 800ea8c:	4013      	ands	r3, r2
 800ea8e:	687a      	ldr	r2, [r7, #4]
 800ea90:	6892      	ldr	r2, [r2, #8]
 800ea92:	3a01      	subs	r2, #1
 800ea94:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800ea98:	687a      	ldr	r2, [r7, #4]
 800ea9a:	68d2      	ldr	r2, [r2, #12]
 800ea9c:	3a01      	subs	r2, #1
 800ea9e:	0252      	lsls	r2, r2, #9
 800eaa0:	b292      	uxth	r2, r2
 800eaa2:	4311      	orrs	r1, r2
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	6912      	ldr	r2, [r2, #16]
 800eaa8:	3a01      	subs	r2, #1
 800eaaa:	0412      	lsls	r2, r2, #16
 800eaac:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800eab0:	4311      	orrs	r1, r2
 800eab2:	687a      	ldr	r2, [r7, #4]
 800eab4:	6952      	ldr	r2, [r2, #20]
 800eab6:	3a01      	subs	r2, #1
 800eab8:	0612      	lsls	r2, r2, #24
 800eaba:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800eabe:	430a      	orrs	r2, r1
 800eac0:	4924      	ldr	r1, [pc, #144]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800eac2:	4313      	orrs	r3, r2
 800eac4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800eac6:	4b23      	ldr	r3, [pc, #140]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800eac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eaca:	f023 020c 	bic.w	r2, r3, #12
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	699b      	ldr	r3, [r3, #24]
 800ead2:	4920      	ldr	r1, [pc, #128]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800ead4:	4313      	orrs	r3, r2
 800ead6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800ead8:	4b1e      	ldr	r3, [pc, #120]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800eada:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6a1b      	ldr	r3, [r3, #32]
 800eae0:	491c      	ldr	r1, [pc, #112]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800eae2:	4313      	orrs	r3, r2
 800eae4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800eae6:	4b1b      	ldr	r3, [pc, #108]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800eae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eaea:	4a1a      	ldr	r2, [pc, #104]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800eaec:	f023 0310 	bic.w	r3, r3, #16
 800eaf0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800eaf2:	4b18      	ldr	r3, [pc, #96]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800eaf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eaf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eafa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800eafe:	687a      	ldr	r2, [r7, #4]
 800eb00:	69d2      	ldr	r2, [r2, #28]
 800eb02:	00d2      	lsls	r2, r2, #3
 800eb04:	4913      	ldr	r1, [pc, #76]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800eb06:	4313      	orrs	r3, r2
 800eb08:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800eb0a:	4b12      	ldr	r3, [pc, #72]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800eb0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb0e:	4a11      	ldr	r2, [pc, #68]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800eb10:	f043 0310 	orr.w	r3, r3, #16
 800eb14:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800eb16:	4b0f      	ldr	r3, [pc, #60]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	4a0e      	ldr	r2, [pc, #56]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800eb1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb20:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800eb22:	f7fb f8bf 	bl	8009ca4 <HAL_GetTick>
 800eb26:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800eb28:	e008      	b.n	800eb3c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800eb2a:	f7fb f8bb 	bl	8009ca4 <HAL_GetTick>
 800eb2e:	4602      	mov	r2, r0
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	1ad3      	subs	r3, r2, r3
 800eb34:	2b02      	cmp	r3, #2
 800eb36:	d901      	bls.n	800eb3c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800eb38:	2303      	movs	r3, #3
 800eb3a:	e006      	b.n	800eb4a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800eb3c:	4b05      	ldr	r3, [pc, #20]	@ (800eb54 <RCCEx_PLL3_Config+0x128>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d0f0      	beq.n	800eb2a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800eb48:	2300      	movs	r3, #0
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	46020c00 	.word	0x46020c00
 800eb58:	80800000 	.word	0x80800000

0800eb5c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d101      	bne.n	800eb6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	e0fb      	b.n	800ed66 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	4a7f      	ldr	r2, [pc, #508]	@ (800ed70 <HAL_SPI_Init+0x214>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d004      	beq.n	800eb82 <HAL_SPI_Init+0x26>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	4a7d      	ldr	r2, [pc, #500]	@ (800ed74 <HAL_SPI_Init+0x218>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	e000      	b.n	800eb84 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800eb82:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2200      	movs	r2, #0
 800eb88:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	4a78      	ldr	r2, [pc, #480]	@ (800ed70 <HAL_SPI_Init+0x214>)
 800eb90:	4293      	cmp	r3, r2
 800eb92:	d004      	beq.n	800eb9e <HAL_SPI_Init+0x42>
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	4a76      	ldr	r2, [pc, #472]	@ (800ed74 <HAL_SPI_Init+0x218>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d105      	bne.n	800ebaa <HAL_SPI_Init+0x4e>
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	68db      	ldr	r3, [r3, #12]
 800eba2:	2b0f      	cmp	r3, #15
 800eba4:	d901      	bls.n	800ebaa <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800eba6:	2301      	movs	r3, #1
 800eba8:	e0dd      	b.n	800ed66 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 fdd4 	bl	800f758 <SPI_GetPacketSize>
 800ebb0:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	4a6e      	ldr	r2, [pc, #440]	@ (800ed70 <HAL_SPI_Init+0x214>)
 800ebb8:	4293      	cmp	r3, r2
 800ebba:	d004      	beq.n	800ebc6 <HAL_SPI_Init+0x6a>
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4a6c      	ldr	r2, [pc, #432]	@ (800ed74 <HAL_SPI_Init+0x218>)
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d102      	bne.n	800ebcc <HAL_SPI_Init+0x70>
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	2b08      	cmp	r3, #8
 800ebca:	d816      	bhi.n	800ebfa <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ebd0:	4a69      	ldr	r2, [pc, #420]	@ (800ed78 <HAL_SPI_Init+0x21c>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d00e      	beq.n	800ebf4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	4a68      	ldr	r2, [pc, #416]	@ (800ed7c <HAL_SPI_Init+0x220>)
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d009      	beq.n	800ebf4 <HAL_SPI_Init+0x98>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4a66      	ldr	r2, [pc, #408]	@ (800ed80 <HAL_SPI_Init+0x224>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d004      	beq.n	800ebf4 <HAL_SPI_Init+0x98>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	4a65      	ldr	r2, [pc, #404]	@ (800ed84 <HAL_SPI_Init+0x228>)
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d104      	bne.n	800ebfe <HAL_SPI_Init+0xa2>
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2b10      	cmp	r3, #16
 800ebf8:	d901      	bls.n	800ebfe <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	e0b3      	b.n	800ed66 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d106      	bne.n	800ec18 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 f8e1 	bl	800edda <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2202      	movs	r2, #2
 800ec1c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f022 0201 	bic.w	r2, r2, #1
 800ec2e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	689b      	ldr	r3, [r3, #8]
 800ec36:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ec3a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	699b      	ldr	r3, [r3, #24]
 800ec40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ec44:	d119      	bne.n	800ec7a <HAL_SPI_Init+0x11e>
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	685b      	ldr	r3, [r3, #4]
 800ec4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ec4e:	d103      	bne.n	800ec58 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d008      	beq.n	800ec6a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d10c      	bne.n	800ec7a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ec64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec68:	d107      	bne.n	800ec7a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	681a      	ldr	r2, [r3, #0]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ec78:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d00f      	beq.n	800eca6 <HAL_SPI_Init+0x14a>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	68db      	ldr	r3, [r3, #12]
 800ec8a:	2b06      	cmp	r3, #6
 800ec8c:	d90b      	bls.n	800eca6 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	430a      	orrs	r2, r1
 800eca2:	601a      	str	r2, [r3, #0]
 800eca4:	e007      	b.n	800ecb6 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ecb4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	69da      	ldr	r2, [r3, #28]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecbe:	431a      	orrs	r2, r3
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	431a      	orrs	r2, r3
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecc8:	ea42 0103 	orr.w	r1, r2, r3
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	68da      	ldr	r2, [r3, #12]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	430a      	orrs	r2, r1
 800ecd6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ece0:	431a      	orrs	r2, r3
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ece6:	431a      	orrs	r2, r3
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	699b      	ldr	r3, [r3, #24]
 800ecec:	431a      	orrs	r2, r3
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	691b      	ldr	r3, [r3, #16]
 800ecf2:	431a      	orrs	r2, r3
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	695b      	ldr	r3, [r3, #20]
 800ecf8:	431a      	orrs	r2, r3
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6a1b      	ldr	r3, [r3, #32]
 800ecfe:	431a      	orrs	r2, r3
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	685b      	ldr	r3, [r3, #4]
 800ed04:	431a      	orrs	r2, r3
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed0a:	431a      	orrs	r2, r3
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	689b      	ldr	r3, [r3, #8]
 800ed10:	431a      	orrs	r2, r3
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ed16:	431a      	orrs	r2, r3
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed1c:	431a      	orrs	r2, r3
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed22:	ea42 0103 	orr.w	r1, r2, r3
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	430a      	orrs	r2, r1
 800ed30:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d00a      	beq.n	800ed54 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	68db      	ldr	r3, [r3, #12]
 800ed44:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	430a      	orrs	r2, r1
 800ed52:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2200      	movs	r2, #0
 800ed58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2201      	movs	r2, #1
 800ed60:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800ed64:	2300      	movs	r3, #0
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3710      	adds	r7, #16
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
 800ed6e:	bf00      	nop
 800ed70:	46002000 	.word	0x46002000
 800ed74:	56002000 	.word	0x56002000
 800ed78:	40013000 	.word	0x40013000
 800ed7c:	50013000 	.word	0x50013000
 800ed80:	40003800 	.word	0x40003800
 800ed84:	50003800 	.word	0x50003800

0800ed88 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d101      	bne.n	800ed9a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800ed96:	2301      	movs	r3, #1
 800ed98:	e01b      	b.n	800edd2 <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2202      	movs	r2, #2
 800ed9e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	681a      	ldr	r2, [r3, #0]
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	f022 0201 	bic.w	r2, r2, #1
 800edb0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f000 f81b 	bl	800edee <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2200      	movs	r2, #0
 800edbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State = HAL_SPI_STATE_RESET;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2200      	movs	r2, #0
 800edc4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2200      	movs	r2, #0
 800edcc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 800edd0:	2300      	movs	r3, #0
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3708      	adds	r7, #8
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}

0800edda <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800edda:	b480      	push	{r7}
 800eddc:	b083      	sub	sp, #12
 800edde:	af00      	add	r7, sp, #0
 800ede0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800ede2:	bf00      	nop
 800ede4:	370c      	adds	r7, #12
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr

0800edee <HAL_SPI_MspDeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800edee:	b480      	push	{r7}
 800edf0:	b083      	sub	sp, #12
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 800edf6:	bf00      	nop
 800edf8:	370c      	adds	r7, #12
 800edfa:	46bd      	mov	sp, r7
 800edfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee00:	4770      	bx	lr
	...

0800ee04 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b08a      	sub	sp, #40	@ 0x28
 800ee08:	af02      	add	r7, sp, #8
 800ee0a:	60f8      	str	r0, [r7, #12]
 800ee0c:	60b9      	str	r1, [r7, #8]
 800ee0e:	603b      	str	r3, [r7, #0]
 800ee10:	4613      	mov	r3, r2
 800ee12:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	3320      	adds	r3, #32
 800ee1a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800ee26:	2b01      	cmp	r3, #1
 800ee28:	d101      	bne.n	800ee2e <HAL_SPI_Transmit+0x2a>
 800ee2a:	2302      	movs	r3, #2
 800ee2c:	e203      	b.n	800f236 <HAL_SPI_Transmit+0x432>
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2201      	movs	r2, #1
 800ee32:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ee36:	f7fa ff35 	bl	8009ca4 <HAL_GetTick>
 800ee3a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d007      	beq.n	800ee58 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ee48:	2302      	movs	r3, #2
 800ee4a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 800ee54:	7efb      	ldrb	r3, [r7, #27]
 800ee56:	e1ee      	b.n	800f236 <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d002      	beq.n	800ee64 <HAL_SPI_Transmit+0x60>
 800ee5e:	88fb      	ldrh	r3, [r7, #6]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d107      	bne.n	800ee74 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800ee64:	2301      	movs	r3, #1
 800ee66:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 800ee70:	7efb      	ldrb	r3, [r7, #27]
 800ee72:	e1e0      	b.n	800f236 <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2203      	movs	r2, #3
 800ee78:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	68ba      	ldr	r2, [r7, #8]
 800ee88:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	88fa      	ldrh	r2, [r7, #6]
 800ee8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	88fa      	ldrh	r2, [r7, #6]
 800ee96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2200      	movs	r2, #0
 800eea4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	689b      	ldr	r3, [r3, #8]
 800eec0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800eec4:	d108      	bne.n	800eed8 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eed4:	601a      	str	r2, [r3, #0]
 800eed6:	e009      	b.n	800eeec <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800eeea:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	0c1b      	lsrs	r3, r3, #16
 800eef4:	041b      	lsls	r3, r3, #16
 800eef6:	88f9      	ldrh	r1, [r7, #6]
 800eef8:	68fa      	ldr	r2, [r7, #12]
 800eefa:	6812      	ldr	r2, [r2, #0]
 800eefc:	430b      	orrs	r3, r1
 800eefe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	681a      	ldr	r2, [r3, #0]
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f042 0201 	orr.w	r2, r2, #1
 800ef0e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	69db      	ldr	r3, [r3, #28]
 800ef16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d10c      	bne.n	800ef38 <HAL_SPI_Transmit+0x134>
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ef26:	d107      	bne.n	800ef38 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	681a      	ldr	r2, [r3, #0]
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ef36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	2b0f      	cmp	r3, #15
 800ef3e:	d95b      	bls.n	800eff8 <HAL_SPI_Transmit+0x1f4>
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4a8f      	ldr	r2, [pc, #572]	@ (800f184 <HAL_SPI_Transmit+0x380>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d04f      	beq.n	800efea <HAL_SPI_Transmit+0x1e6>
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	4a8e      	ldr	r2, [pc, #568]	@ (800f188 <HAL_SPI_Transmit+0x384>)
 800ef50:	4293      	cmp	r3, r2
 800ef52:	d04a      	beq.n	800efea <HAL_SPI_Transmit+0x1e6>
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	4a8c      	ldr	r2, [pc, #560]	@ (800f18c <HAL_SPI_Transmit+0x388>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d045      	beq.n	800efea <HAL_SPI_Transmit+0x1e6>
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	4a8b      	ldr	r2, [pc, #556]	@ (800f190 <HAL_SPI_Transmit+0x38c>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d147      	bne.n	800eff8 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ef68:	e03f      	b.n	800efea <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	695b      	ldr	r3, [r3, #20]
 800ef70:	f003 0302 	and.w	r3, r3, #2
 800ef74:	2b02      	cmp	r3, #2
 800ef76:	d114      	bne.n	800efa2 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	6812      	ldr	r2, [r2, #0]
 800ef82:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ef88:	1d1a      	adds	r2, r3, #4
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ef94:	b29b      	uxth	r3, r3
 800ef96:	3b01      	subs	r3, #1
 800ef98:	b29a      	uxth	r2, r3
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800efa0:	e023      	b.n	800efea <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800efa2:	f7fa fe7f 	bl	8009ca4 <HAL_GetTick>
 800efa6:	4602      	mov	r2, r0
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	1ad3      	subs	r3, r2, r3
 800efac:	683a      	ldr	r2, [r7, #0]
 800efae:	429a      	cmp	r2, r3
 800efb0:	d803      	bhi.n	800efba <HAL_SPI_Transmit+0x1b6>
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efb8:	d102      	bne.n	800efc0 <HAL_SPI_Transmit+0x1bc>
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d114      	bne.n	800efea <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800efc0:	68f8      	ldr	r0, [r7, #12]
 800efc2:	f000 fafb 	bl	800f5bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	2200      	movs	r2, #0
 800efca:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800efd4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	2201      	movs	r2, #1
 800efe2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 800efe6:	2303      	movs	r3, #3
 800efe8:	e125      	b.n	800f236 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800eff0:	b29b      	uxth	r3, r3
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d1b9      	bne.n	800ef6a <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800eff6:	e0f8      	b.n	800f1ea <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	2b07      	cmp	r3, #7
 800effe:	f240 80ed 	bls.w	800f1dc <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f002:	e05d      	b.n	800f0c0 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	695b      	ldr	r3, [r3, #20]
 800f00a:	f003 0302 	and.w	r3, r3, #2
 800f00e:	2b02      	cmp	r3, #2
 800f010:	d132      	bne.n	800f078 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f018:	b29b      	uxth	r3, r3
 800f01a:	2b01      	cmp	r3, #1
 800f01c:	d918      	bls.n	800f050 <HAL_SPI_Transmit+0x24c>
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f022:	2b00      	cmp	r3, #0
 800f024:	d014      	beq.n	800f050 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	6812      	ldr	r2, [r2, #0]
 800f030:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f036:	1d1a      	adds	r2, r3, #4
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f042:	b29b      	uxth	r3, r3
 800f044:	3b02      	subs	r3, #2
 800f046:	b29a      	uxth	r2, r3
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f04e:	e037      	b.n	800f0c0 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f054:	881a      	ldrh	r2, [r3, #0]
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f05e:	1c9a      	adds	r2, r3, #2
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	3b01      	subs	r3, #1
 800f06e:	b29a      	uxth	r2, r3
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f076:	e023      	b.n	800f0c0 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f078:	f7fa fe14 	bl	8009ca4 <HAL_GetTick>
 800f07c:	4602      	mov	r2, r0
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	683a      	ldr	r2, [r7, #0]
 800f084:	429a      	cmp	r2, r3
 800f086:	d803      	bhi.n	800f090 <HAL_SPI_Transmit+0x28c>
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f08e:	d102      	bne.n	800f096 <HAL_SPI_Transmit+0x292>
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d114      	bne.n	800f0c0 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f096:	68f8      	ldr	r0, [r7, #12]
 800f098:	f000 fa90 	bl	800f5bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f0aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 800f0bc:	2303      	movs	r3, #3
 800f0be:	e0ba      	b.n	800f236 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f0c6:	b29b      	uxth	r3, r3
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d19b      	bne.n	800f004 <HAL_SPI_Transmit+0x200>
 800f0cc:	e08d      	b.n	800f1ea <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	695b      	ldr	r3, [r3, #20]
 800f0d4:	f003 0302 	and.w	r3, r3, #2
 800f0d8:	2b02      	cmp	r3, #2
 800f0da:	d15b      	bne.n	800f194 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	2b03      	cmp	r3, #3
 800f0e6:	d918      	bls.n	800f11a <HAL_SPI_Transmit+0x316>
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f0ec:	2b40      	cmp	r3, #64	@ 0x40
 800f0ee:	d914      	bls.n	800f11a <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	6812      	ldr	r2, [r2, #0]
 800f0fa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f100:	1d1a      	adds	r2, r3, #4
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f10c:	b29b      	uxth	r3, r3
 800f10e:	3b04      	subs	r3, #4
 800f110:	b29a      	uxth	r2, r3
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f118:	e060      	b.n	800f1dc <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f120:	b29b      	uxth	r3, r3
 800f122:	2b01      	cmp	r3, #1
 800f124:	d917      	bls.n	800f156 <HAL_SPI_Transmit+0x352>
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d013      	beq.n	800f156 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f132:	881a      	ldrh	r2, [r3, #0]
 800f134:	69fb      	ldr	r3, [r7, #28]
 800f136:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f13c:	1c9a      	adds	r2, r3, #2
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f148:	b29b      	uxth	r3, r3
 800f14a:	3b02      	subs	r3, #2
 800f14c:	b29a      	uxth	r2, r3
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f154:	e042      	b.n	800f1dc <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	3320      	adds	r3, #32
 800f160:	7812      	ldrb	r2, [r2, #0]
 800f162:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f168:	1c5a      	adds	r2, r3, #1
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f174:	b29b      	uxth	r3, r3
 800f176:	3b01      	subs	r3, #1
 800f178:	b29a      	uxth	r2, r3
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f180:	e02c      	b.n	800f1dc <HAL_SPI_Transmit+0x3d8>
 800f182:	bf00      	nop
 800f184:	40013000 	.word	0x40013000
 800f188:	50013000 	.word	0x50013000
 800f18c:	40003800 	.word	0x40003800
 800f190:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f194:	f7fa fd86 	bl	8009ca4 <HAL_GetTick>
 800f198:	4602      	mov	r2, r0
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	1ad3      	subs	r3, r2, r3
 800f19e:	683a      	ldr	r2, [r7, #0]
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d803      	bhi.n	800f1ac <HAL_SPI_Transmit+0x3a8>
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1aa:	d102      	bne.n	800f1b2 <HAL_SPI_Transmit+0x3ae>
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d114      	bne.n	800f1dc <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1b2:	68f8      	ldr	r0, [r7, #12]
 800f1b4:	f000 fa02 	bl	800f5bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f1c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2201      	movs	r2, #1
 800f1d4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 800f1d8:	2303      	movs	r3, #3
 800f1da:	e02c      	b.n	800f236 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	f47f af72 	bne.w	800f0ce <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	9300      	str	r3, [sp, #0]
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	2108      	movs	r1, #8
 800f1f4:	68f8      	ldr	r0, [r7, #12]
 800f1f6:	f000 fa81 	bl	800f6fc <SPI_WaitOnFlagUntilTimeout>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d007      	beq.n	800f210 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f206:	f043 0220 	orr.w	r2, r3, #32
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f210:	68f8      	ldr	r0, [r7, #12]
 800f212:	f000 f9d3 	bl	800f5bc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2200      	movs	r2, #0
 800f21a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	2201      	movs	r2, #1
 800f222:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d001      	beq.n	800f234 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 800f230:	2301      	movs	r3, #1
 800f232:	e000      	b.n	800f236 <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 800f234:	7efb      	ldrb	r3, [r7, #27]
}
 800f236:	4618      	mov	r0, r3
 800f238:	3720      	adds	r7, #32
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	bf00      	nop

0800f240 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b088      	sub	sp, #32
 800f244:	af00      	add	r7, sp, #0
 800f246:	60f8      	str	r0, [r7, #12]
 800f248:	60b9      	str	r1, [r7, #8]
 800f24a:	603b      	str	r3, [r7, #0]
 800f24c:	4613      	mov	r3, r2
 800f24e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f250:	2300      	movs	r3, #0
 800f252:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	3330      	adds	r3, #48	@ 0x30
 800f25a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800f262:	2b01      	cmp	r3, #1
 800f264:	d101      	bne.n	800f26a <HAL_SPI_Receive+0x2a>
 800f266:	2302      	movs	r3, #2
 800f268:	e18e      	b.n	800f588 <HAL_SPI_Receive+0x348>
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2201      	movs	r2, #1
 800f26e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f272:	f7fa fd17 	bl	8009ca4 <HAL_GetTick>
 800f276:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	2b01      	cmp	r3, #1
 800f282:	d007      	beq.n	800f294 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800f284:	2302      	movs	r3, #2
 800f286:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2200      	movs	r2, #0
 800f28c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 800f290:	7ffb      	ldrb	r3, [r7, #31]
 800f292:	e179      	b.n	800f588 <HAL_SPI_Receive+0x348>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d002      	beq.n	800f2a0 <HAL_SPI_Receive+0x60>
 800f29a:	88fb      	ldrh	r3, [r7, #6]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d107      	bne.n	800f2b0 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 800f2ac:	7ffb      	ldrb	r3, [r7, #31]
 800f2ae:	e16b      	b.n	800f588 <HAL_SPI_Receive+0x348>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	2204      	movs	r2, #4
 800f2b4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	68ba      	ldr	r2, [r7, #8]
 800f2c4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	88fa      	ldrh	r2, [r7, #6]
 800f2ca:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	88fa      	ldrh	r2, [r7, #6]
 800f2d2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	689b      	ldr	r3, [r3, #8]
 800f2fc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800f300:	d108      	bne.n	800f314 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	681a      	ldr	r2, [r3, #0]
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f310:	601a      	str	r2, [r3, #0]
 800f312:	e009      	b.n	800f328 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	68db      	ldr	r3, [r3, #12]
 800f31a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800f326:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	685b      	ldr	r3, [r3, #4]
 800f32e:	0c1b      	lsrs	r3, r3, #16
 800f330:	041b      	lsls	r3, r3, #16
 800f332:	88f9      	ldrh	r1, [r7, #6]
 800f334:	68fa      	ldr	r2, [r7, #12]
 800f336:	6812      	ldr	r2, [r2, #0]
 800f338:	430b      	orrs	r3, r1
 800f33a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	681a      	ldr	r2, [r3, #0]
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	f042 0201 	orr.w	r2, r2, #1
 800f34a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	69db      	ldr	r3, [r3, #28]
 800f352:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f356:	2b00      	cmp	r3, #0
 800f358:	d10c      	bne.n	800f374 <HAL_SPI_Receive+0x134>
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f362:	d107      	bne.n	800f374 <HAL_SPI_Receive+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f372:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	68db      	ldr	r3, [r3, #12]
 800f378:	2b0f      	cmp	r3, #15
 800f37a:	d95c      	bls.n	800f436 <HAL_SPI_Receive+0x1f6>
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	4a83      	ldr	r2, [pc, #524]	@ (800f590 <HAL_SPI_Receive+0x350>)
 800f382:	4293      	cmp	r3, r2
 800f384:	d050      	beq.n	800f428 <HAL_SPI_Receive+0x1e8>
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	4a82      	ldr	r2, [pc, #520]	@ (800f594 <HAL_SPI_Receive+0x354>)
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d04b      	beq.n	800f428 <HAL_SPI_Receive+0x1e8>
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	4a80      	ldr	r2, [pc, #512]	@ (800f598 <HAL_SPI_Receive+0x358>)
 800f396:	4293      	cmp	r3, r2
 800f398:	d046      	beq.n	800f428 <HAL_SPI_Receive+0x1e8>
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	4a7f      	ldr	r2, [pc, #508]	@ (800f59c <HAL_SPI_Receive+0x35c>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d148      	bne.n	800f436 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f3a4:	e040      	b.n	800f428 <HAL_SPI_Receive+0x1e8>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	695a      	ldr	r2, [r3, #20]
 800f3ac:	f248 0308 	movw	r3, #32776	@ 0x8008
 800f3b0:	4013      	ands	r3, r2
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d014      	beq.n	800f3e0 <HAL_SPI_Receive+0x1a0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681a      	ldr	r2, [r3, #0]
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f3be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f3c0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f3c6:	1d1a      	adds	r2, r3, #4
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	3b01      	subs	r3, #1
 800f3d6:	b29a      	uxth	r2, r3
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800f3de:	e023      	b.n	800f428 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f3e0:	f7fa fc60 	bl	8009ca4 <HAL_GetTick>
 800f3e4:	4602      	mov	r2, r0
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	1ad3      	subs	r3, r2, r3
 800f3ea:	683a      	ldr	r2, [r7, #0]
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d803      	bhi.n	800f3f8 <HAL_SPI_Receive+0x1b8>
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3f6:	d102      	bne.n	800f3fe <HAL_SPI_Receive+0x1be>
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d114      	bne.n	800f428 <HAL_SPI_Receive+0x1e8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f3fe:	68f8      	ldr	r0, [r7, #12]
 800f400:	f000 f8dc 	bl	800f5bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	2200      	movs	r2, #0
 800f408:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f412:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2201      	movs	r2, #1
 800f420:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 800f424:	2303      	movs	r3, #3
 800f426:	e0af      	b.n	800f588 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800f42e:	b29b      	uxth	r3, r3
 800f430:	2b00      	cmp	r3, #0
 800f432:	d1b8      	bne.n	800f3a6 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800f434:	e095      	b.n	800f562 <HAL_SPI_Receive+0x322>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	68db      	ldr	r3, [r3, #12]
 800f43a:	2b07      	cmp	r3, #7
 800f43c:	f240 808b 	bls.w	800f556 <HAL_SPI_Receive+0x316>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f440:	e03f      	b.n	800f4c2 <HAL_SPI_Receive+0x282>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	695b      	ldr	r3, [r3, #20]
 800f448:	f003 0301 	and.w	r3, r3, #1
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	d114      	bne.n	800f47a <HAL_SPI_Receive+0x23a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f454:	69ba      	ldr	r2, [r7, #24]
 800f456:	8812      	ldrh	r2, [r2, #0]
 800f458:	b292      	uxth	r2, r2
 800f45a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f460:	1c9a      	adds	r2, r3, #2
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800f46c:	b29b      	uxth	r3, r3
 800f46e:	3b01      	subs	r3, #1
 800f470:	b29a      	uxth	r2, r3
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800f478:	e023      	b.n	800f4c2 <HAL_SPI_Receive+0x282>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f47a:	f7fa fc13 	bl	8009ca4 <HAL_GetTick>
 800f47e:	4602      	mov	r2, r0
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	1ad3      	subs	r3, r2, r3
 800f484:	683a      	ldr	r2, [r7, #0]
 800f486:	429a      	cmp	r2, r3
 800f488:	d803      	bhi.n	800f492 <HAL_SPI_Receive+0x252>
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f490:	d102      	bne.n	800f498 <HAL_SPI_Receive+0x258>
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d114      	bne.n	800f4c2 <HAL_SPI_Receive+0x282>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	f000 f88f 	bl	800f5bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f4ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 800f4be:	2303      	movs	r3, #3
 800f4c0:	e062      	b.n	800f588 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d1b9      	bne.n	800f442 <HAL_SPI_Receive+0x202>
 800f4ce:	e048      	b.n	800f562 <HAL_SPI_Receive+0x322>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	695b      	ldr	r3, [r3, #20]
 800f4d6:	f003 0301 	and.w	r3, r3, #1
 800f4da:	2b01      	cmp	r3, #1
 800f4dc:	d117      	bne.n	800f50e <HAL_SPI_Receive+0x2ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f4ea:	7812      	ldrb	r2, [r2, #0]
 800f4ec:	b2d2      	uxtb	r2, r2
 800f4ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f4f4:	1c5a      	adds	r2, r3, #1
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800f500:	b29b      	uxth	r3, r3
 800f502:	3b01      	subs	r3, #1
 800f504:	b29a      	uxth	r2, r3
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800f50c:	e023      	b.n	800f556 <HAL_SPI_Receive+0x316>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f50e:	f7fa fbc9 	bl	8009ca4 <HAL_GetTick>
 800f512:	4602      	mov	r2, r0
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	1ad3      	subs	r3, r2, r3
 800f518:	683a      	ldr	r2, [r7, #0]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d803      	bhi.n	800f526 <HAL_SPI_Receive+0x2e6>
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f524:	d102      	bne.n	800f52c <HAL_SPI_Receive+0x2ec>
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d114      	bne.n	800f556 <HAL_SPI_Receive+0x316>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f52c:	68f8      	ldr	r0, [r7, #12]
 800f52e:	f000 f845 	bl	800f5bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2200      	movs	r2, #0
 800f536:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f540:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2201      	movs	r2, #1
 800f54e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 800f552:	2303      	movs	r3, #3
 800f554:	e018      	b.n	800f588 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d1b6      	bne.n	800f4d0 <HAL_SPI_Receive+0x290>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f562:	68f8      	ldr	r0, [r7, #12]
 800f564:	f000 f82a 	bl	800f5bc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2200      	movs	r2, #0
 800f56c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2201      	movs	r2, #1
 800f574:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d001      	beq.n	800f586 <HAL_SPI_Receive+0x346>
  {
    return HAL_ERROR;
 800f582:	2301      	movs	r3, #1
 800f584:	e000      	b.n	800f588 <HAL_SPI_Receive+0x348>
  }
  return errorcode;
 800f586:	7ffb      	ldrb	r3, [r7, #31]
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3720      	adds	r7, #32
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}
 800f590:	40013000 	.word	0x40013000
 800f594:	50013000 	.word	0x50013000
 800f598:	40003800 	.word	0x40003800
 800f59c:	50003800 	.word	0x50003800

0800f5a0 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	b083      	sub	sp, #12
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800f5ae:	b2db      	uxtb	r3, r3
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	370c      	adds	r7, #12
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr

0800f5bc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b085      	sub	sp, #20
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	695b      	ldr	r3, [r3, #20]
 800f5ca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	699a      	ldr	r2, [r3, #24]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f042 0208 	orr.w	r2, r2, #8
 800f5da:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	699a      	ldr	r2, [r3, #24]
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f042 0210 	orr.w	r2, r2, #16
 800f5ea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	681a      	ldr	r2, [r3, #0]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	f022 0201 	bic.w	r2, r2, #1
 800f5fa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	691b      	ldr	r3, [r3, #16]
 800f602:	687a      	ldr	r2, [r7, #4]
 800f604:	6812      	ldr	r2, [r2, #0]
 800f606:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800f60a:	f023 0303 	bic.w	r3, r3, #3
 800f60e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	689a      	ldr	r2, [r3, #8]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800f61e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800f626:	b2db      	uxtb	r3, r3
 800f628:	2b04      	cmp	r3, #4
 800f62a:	d014      	beq.n	800f656 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	f003 0320 	and.w	r3, r3, #32
 800f632:	2b00      	cmp	r3, #0
 800f634:	d00f      	beq.n	800f656 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f63c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	699a      	ldr	r2, [r3, #24]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	f042 0220 	orr.w	r2, r2, #32
 800f654:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800f65c:	b2db      	uxtb	r3, r3
 800f65e:	2b03      	cmp	r3, #3
 800f660:	d014      	beq.n	800f68c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d00f      	beq.n	800f68c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f672:	f043 0204 	orr.w	r2, r3, #4
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	699a      	ldr	r2, [r3, #24]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f68a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f692:	2b00      	cmp	r3, #0
 800f694:	d00f      	beq.n	800f6b6 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f69c:	f043 0201 	orr.w	r2, r3, #1
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	699a      	ldr	r2, [r3, #24]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f6b4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d00f      	beq.n	800f6e0 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f6c6:	f043 0208 	orr.w	r2, r3, #8
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	699a      	ldr	r2, [r3, #24]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f6de:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800f6f0:	bf00      	nop
 800f6f2:	3714      	adds	r7, #20
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr

0800f6fc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b084      	sub	sp, #16
 800f700:	af00      	add	r7, sp, #0
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	603b      	str	r3, [r7, #0]
 800f708:	4613      	mov	r3, r2
 800f70a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f70c:	e010      	b.n	800f730 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f70e:	f7fa fac9 	bl	8009ca4 <HAL_GetTick>
 800f712:	4602      	mov	r2, r0
 800f714:	69bb      	ldr	r3, [r7, #24]
 800f716:	1ad3      	subs	r3, r2, r3
 800f718:	683a      	ldr	r2, [r7, #0]
 800f71a:	429a      	cmp	r2, r3
 800f71c:	d803      	bhi.n	800f726 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f724:	d102      	bne.n	800f72c <SPI_WaitOnFlagUntilTimeout+0x30>
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d101      	bne.n	800f730 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f72c:	2303      	movs	r3, #3
 800f72e:	e00f      	b.n	800f750 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	695a      	ldr	r2, [r3, #20]
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	4013      	ands	r3, r2
 800f73a:	68ba      	ldr	r2, [r7, #8]
 800f73c:	429a      	cmp	r2, r3
 800f73e:	bf0c      	ite	eq
 800f740:	2301      	moveq	r3, #1
 800f742:	2300      	movne	r3, #0
 800f744:	b2db      	uxtb	r3, r3
 800f746:	461a      	mov	r2, r3
 800f748:	79fb      	ldrb	r3, [r7, #7]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d0df      	beq.n	800f70e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f74e:	2300      	movs	r3, #0
}
 800f750:	4618      	mov	r0, r3
 800f752:	3710      	adds	r7, #16
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800f758:	b480      	push	{r7}
 800f75a:	b085      	sub	sp, #20
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f764:	095b      	lsrs	r3, r3, #5
 800f766:	3301      	adds	r3, #1
 800f768:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	68db      	ldr	r3, [r3, #12]
 800f76e:	3301      	adds	r3, #1
 800f770:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	3307      	adds	r3, #7
 800f776:	08db      	lsrs	r3, r3, #3
 800f778:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	68fa      	ldr	r2, [r7, #12]
 800f77e:	fb02 f303 	mul.w	r3, r2, r3
}
 800f782:	4618      	mov	r0, r3
 800f784:	3714      	adds	r7, #20
 800f786:	46bd      	mov	sp, r7
 800f788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78c:	4770      	bx	lr

0800f78e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800f78e:	b480      	push	{r7}
 800f790:	b083      	sub	sp, #12
 800f792:	af00      	add	r7, sp, #0
 800f794:	6078      	str	r0, [r7, #4]
 800f796:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800f79e:	b2db      	uxtb	r3, r3
 800f7a0:	2b01      	cmp	r3, #1
 800f7a2:	d12e      	bne.n	800f802 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800f7aa:	2b01      	cmp	r3, #1
 800f7ac:	d101      	bne.n	800f7b2 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800f7ae:	2302      	movs	r3, #2
 800f7b0:	e028      	b.n	800f804 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2201      	movs	r2, #1
 800f7b6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2202      	movs	r2, #2
 800f7be:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	681a      	ldr	r2, [r3, #0]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	f022 0201 	bic.w	r2, r2, #1
 800f7d0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	681a      	ldr	r2, [r3, #0]
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	685b      	ldr	r3, [r3, #4]
 800f7da:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800f7de:	ea42 0103 	orr.w	r1, r2, r3
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	689a      	ldr	r2, [r3, #8]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	430a      	orrs	r2, r1
 800f7ec:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f7fe:	2300      	movs	r3, #0
 800f800:	e000      	b.n	800f804 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800f802:	2301      	movs	r3, #1
  }
}
 800f804:	4618      	mov	r0, r3
 800f806:	370c      	adds	r7, #12
 800f808:	46bd      	mov	sp, r7
 800f80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80e:	4770      	bx	lr

0800f810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d101      	bne.n	800f822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f81e:	2301      	movs	r3, #1
 800f820:	e049      	b.n	800f8b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f828:	b2db      	uxtb	r3, r3
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d106      	bne.n	800f83c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2200      	movs	r2, #0
 800f832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f7f2 f82a 	bl	8001890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2202      	movs	r2, #2
 800f840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681a      	ldr	r2, [r3, #0]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	3304      	adds	r3, #4
 800f84c:	4619      	mov	r1, r3
 800f84e:	4610      	mov	r0, r2
 800f850:	f000 fb50 	bl	800fef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2201      	movs	r2, #1
 800f858:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2201      	movs	r2, #1
 800f860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2201      	movs	r2, #1
 800f868:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2201      	movs	r2, #1
 800f870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2201      	movs	r2, #1
 800f878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2201      	movs	r2, #1
 800f880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2201      	movs	r2, #1
 800f888:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2201      	movs	r2, #1
 800f890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2201      	movs	r2, #1
 800f898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2201      	movs	r2, #1
 800f8a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2201      	movs	r2, #1
 800f8a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f8b4:	2300      	movs	r3, #0
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3708      	adds	r7, #8
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
	...

0800f8c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b085      	sub	sp, #20
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f8ce:	b2db      	uxtb	r3, r3
 800f8d0:	2b01      	cmp	r3, #1
 800f8d2:	d001      	beq.n	800f8d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	e072      	b.n	800f9be <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2202      	movs	r2, #2
 800f8dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	68da      	ldr	r2, [r3, #12]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f042 0201 	orr.w	r2, r2, #1
 800f8ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	4a35      	ldr	r2, [pc, #212]	@ (800f9cc <HAL_TIM_Base_Start_IT+0x10c>)
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	d040      	beq.n	800f97c <HAL_TIM_Base_Start_IT+0xbc>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	4a34      	ldr	r2, [pc, #208]	@ (800f9d0 <HAL_TIM_Base_Start_IT+0x110>)
 800f900:	4293      	cmp	r3, r2
 800f902:	d03b      	beq.n	800f97c <HAL_TIM_Base_Start_IT+0xbc>
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f90c:	d036      	beq.n	800f97c <HAL_TIM_Base_Start_IT+0xbc>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f916:	d031      	beq.n	800f97c <HAL_TIM_Base_Start_IT+0xbc>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	4a2d      	ldr	r2, [pc, #180]	@ (800f9d4 <HAL_TIM_Base_Start_IT+0x114>)
 800f91e:	4293      	cmp	r3, r2
 800f920:	d02c      	beq.n	800f97c <HAL_TIM_Base_Start_IT+0xbc>
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	4a2c      	ldr	r2, [pc, #176]	@ (800f9d8 <HAL_TIM_Base_Start_IT+0x118>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	d027      	beq.n	800f97c <HAL_TIM_Base_Start_IT+0xbc>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a2a      	ldr	r2, [pc, #168]	@ (800f9dc <HAL_TIM_Base_Start_IT+0x11c>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d022      	beq.n	800f97c <HAL_TIM_Base_Start_IT+0xbc>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4a29      	ldr	r2, [pc, #164]	@ (800f9e0 <HAL_TIM_Base_Start_IT+0x120>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d01d      	beq.n	800f97c <HAL_TIM_Base_Start_IT+0xbc>
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	4a27      	ldr	r2, [pc, #156]	@ (800f9e4 <HAL_TIM_Base_Start_IT+0x124>)
 800f946:	4293      	cmp	r3, r2
 800f948:	d018      	beq.n	800f97c <HAL_TIM_Base_Start_IT+0xbc>
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	4a26      	ldr	r2, [pc, #152]	@ (800f9e8 <HAL_TIM_Base_Start_IT+0x128>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d013      	beq.n	800f97c <HAL_TIM_Base_Start_IT+0xbc>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	4a24      	ldr	r2, [pc, #144]	@ (800f9ec <HAL_TIM_Base_Start_IT+0x12c>)
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d00e      	beq.n	800f97c <HAL_TIM_Base_Start_IT+0xbc>
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	4a23      	ldr	r2, [pc, #140]	@ (800f9f0 <HAL_TIM_Base_Start_IT+0x130>)
 800f964:	4293      	cmp	r3, r2
 800f966:	d009      	beq.n	800f97c <HAL_TIM_Base_Start_IT+0xbc>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	4a21      	ldr	r2, [pc, #132]	@ (800f9f4 <HAL_TIM_Base_Start_IT+0x134>)
 800f96e:	4293      	cmp	r3, r2
 800f970:	d004      	beq.n	800f97c <HAL_TIM_Base_Start_IT+0xbc>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	4a20      	ldr	r2, [pc, #128]	@ (800f9f8 <HAL_TIM_Base_Start_IT+0x138>)
 800f978:	4293      	cmp	r3, r2
 800f97a:	d115      	bne.n	800f9a8 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	689a      	ldr	r2, [r3, #8]
 800f982:	4b1e      	ldr	r3, [pc, #120]	@ (800f9fc <HAL_TIM_Base_Start_IT+0x13c>)
 800f984:	4013      	ands	r3, r2
 800f986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2b06      	cmp	r3, #6
 800f98c:	d015      	beq.n	800f9ba <HAL_TIM_Base_Start_IT+0xfa>
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f994:	d011      	beq.n	800f9ba <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f042 0201 	orr.w	r2, r2, #1
 800f9a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9a6:	e008      	b.n	800f9ba <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	681a      	ldr	r2, [r3, #0]
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	f042 0201 	orr.w	r2, r2, #1
 800f9b6:	601a      	str	r2, [r3, #0]
 800f9b8:	e000      	b.n	800f9bc <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f9bc:	2300      	movs	r3, #0
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3714      	adds	r7, #20
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c8:	4770      	bx	lr
 800f9ca:	bf00      	nop
 800f9cc:	40012c00 	.word	0x40012c00
 800f9d0:	50012c00 	.word	0x50012c00
 800f9d4:	40000400 	.word	0x40000400
 800f9d8:	50000400 	.word	0x50000400
 800f9dc:	40000800 	.word	0x40000800
 800f9e0:	50000800 	.word	0x50000800
 800f9e4:	40000c00 	.word	0x40000c00
 800f9e8:	50000c00 	.word	0x50000c00
 800f9ec:	40013400 	.word	0x40013400
 800f9f0:	50013400 	.word	0x50013400
 800f9f4:	40014000 	.word	0x40014000
 800f9f8:	50014000 	.word	0x50014000
 800f9fc:	00010007 	.word	0x00010007

0800fa00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b084      	sub	sp, #16
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	68db      	ldr	r3, [r3, #12]
 800fa0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	691b      	ldr	r3, [r3, #16]
 800fa16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	f003 0302 	and.w	r3, r3, #2
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d020      	beq.n	800fa64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	f003 0302 	and.w	r3, r3, #2
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d01b      	beq.n	800fa64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f06f 0202 	mvn.w	r2, #2
 800fa34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2201      	movs	r2, #1
 800fa3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	699b      	ldr	r3, [r3, #24]
 800fa42:	f003 0303 	and.w	r3, r3, #3
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d003      	beq.n	800fa52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 fa34 	bl	800feb8 <HAL_TIM_IC_CaptureCallback>
 800fa50:	e005      	b.n	800fa5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f000 fa26 	bl	800fea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f000 fa37 	bl	800fecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2200      	movs	r2, #0
 800fa62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	f003 0304 	and.w	r3, r3, #4
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d020      	beq.n	800fab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	f003 0304 	and.w	r3, r3, #4
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d01b      	beq.n	800fab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f06f 0204 	mvn.w	r2, #4
 800fa80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2202      	movs	r2, #2
 800fa86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	699b      	ldr	r3, [r3, #24]
 800fa8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d003      	beq.n	800fa9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f000 fa0e 	bl	800feb8 <HAL_TIM_IC_CaptureCallback>
 800fa9c:	e005      	b.n	800faaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f000 fa00 	bl	800fea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f000 fa11 	bl	800fecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2200      	movs	r2, #0
 800faae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	f003 0308 	and.w	r3, r3, #8
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d020      	beq.n	800fafc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	f003 0308 	and.w	r3, r3, #8
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d01b      	beq.n	800fafc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	f06f 0208 	mvn.w	r2, #8
 800facc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2204      	movs	r2, #4
 800fad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	69db      	ldr	r3, [r3, #28]
 800fada:	f003 0303 	and.w	r3, r3, #3
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d003      	beq.n	800faea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 f9e8 	bl	800feb8 <HAL_TIM_IC_CaptureCallback>
 800fae8:	e005      	b.n	800faf6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f000 f9da 	bl	800fea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f000 f9eb 	bl	800fecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2200      	movs	r2, #0
 800fafa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	f003 0310 	and.w	r3, r3, #16
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d020      	beq.n	800fb48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	f003 0310 	and.w	r3, r3, #16
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d01b      	beq.n	800fb48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	f06f 0210 	mvn.w	r2, #16
 800fb18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2208      	movs	r2, #8
 800fb1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	69db      	ldr	r3, [r3, #28]
 800fb26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d003      	beq.n	800fb36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f000 f9c2 	bl	800feb8 <HAL_TIM_IC_CaptureCallback>
 800fb34:	e005      	b.n	800fb42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f000 f9b4 	bl	800fea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f000 f9c5 	bl	800fecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2200      	movs	r2, #0
 800fb46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800fb48:	68bb      	ldr	r3, [r7, #8]
 800fb4a:	f003 0301 	and.w	r3, r3, #1
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d00c      	beq.n	800fb6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	f003 0301 	and.w	r3, r3, #1
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d007      	beq.n	800fb6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	f06f 0201 	mvn.w	r2, #1
 800fb64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f7f4 fe8a 	bl	8004880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d104      	bne.n	800fb80 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d00c      	beq.n	800fb9a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d007      	beq.n	800fb9a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800fb92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f000 fc0f 	bl	80103b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d00c      	beq.n	800fbbe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d007      	beq.n	800fbbe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800fbb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fbb8:	6878      	ldr	r0, [r7, #4]
 800fbba:	f000 fc07 	bl	80103cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d00c      	beq.n	800fbe2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d007      	beq.n	800fbe2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fbda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f000 f97f 	bl	800fee0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	f003 0320 	and.w	r3, r3, #32
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d00c      	beq.n	800fc06 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	f003 0320 	and.w	r3, r3, #32
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d007      	beq.n	800fc06 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	f06f 0220 	mvn.w	r2, #32
 800fbfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f000 fbcf 	bl	80103a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d00c      	beq.n	800fc2a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d007      	beq.n	800fc2a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800fc22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f000 fbdb 	bl	80103e0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d00c      	beq.n	800fc4e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d007      	beq.n	800fc4e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800fc46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f000 fbd3 	bl	80103f4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d00c      	beq.n	800fc72 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d007      	beq.n	800fc72 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800fc6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f000 fbcb 	bl	8010408 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d00c      	beq.n	800fc96 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d007      	beq.n	800fc96 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800fc8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f000 fbc3 	bl	801041c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fc96:	bf00      	nop
 800fc98:	3710      	adds	r7, #16
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}
	...

0800fca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b084      	sub	sp, #16
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fcb4:	2b01      	cmp	r3, #1
 800fcb6:	d101      	bne.n	800fcbc <HAL_TIM_ConfigClockSource+0x1c>
 800fcb8:	2302      	movs	r3, #2
 800fcba:	e0e6      	b.n	800fe8a <HAL_TIM_ConfigClockSource+0x1ea>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2202      	movs	r2, #2
 800fcc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	689b      	ldr	r3, [r3, #8]
 800fcd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800fcda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800fcde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	68ba      	ldr	r2, [r7, #8]
 800fcee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4a67      	ldr	r2, [pc, #412]	@ (800fe94 <HAL_TIM_ConfigClockSource+0x1f4>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	f000 80b1 	beq.w	800fe5e <HAL_TIM_ConfigClockSource+0x1be>
 800fcfc:	4a65      	ldr	r2, [pc, #404]	@ (800fe94 <HAL_TIM_ConfigClockSource+0x1f4>)
 800fcfe:	4293      	cmp	r3, r2
 800fd00:	f200 80b6 	bhi.w	800fe70 <HAL_TIM_ConfigClockSource+0x1d0>
 800fd04:	4a64      	ldr	r2, [pc, #400]	@ (800fe98 <HAL_TIM_ConfigClockSource+0x1f8>)
 800fd06:	4293      	cmp	r3, r2
 800fd08:	f000 80a9 	beq.w	800fe5e <HAL_TIM_ConfigClockSource+0x1be>
 800fd0c:	4a62      	ldr	r2, [pc, #392]	@ (800fe98 <HAL_TIM_ConfigClockSource+0x1f8>)
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	f200 80ae 	bhi.w	800fe70 <HAL_TIM_ConfigClockSource+0x1d0>
 800fd14:	4a61      	ldr	r2, [pc, #388]	@ (800fe9c <HAL_TIM_ConfigClockSource+0x1fc>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	f000 80a1 	beq.w	800fe5e <HAL_TIM_ConfigClockSource+0x1be>
 800fd1c:	4a5f      	ldr	r2, [pc, #380]	@ (800fe9c <HAL_TIM_ConfigClockSource+0x1fc>)
 800fd1e:	4293      	cmp	r3, r2
 800fd20:	f200 80a6 	bhi.w	800fe70 <HAL_TIM_ConfigClockSource+0x1d0>
 800fd24:	4a5e      	ldr	r2, [pc, #376]	@ (800fea0 <HAL_TIM_ConfigClockSource+0x200>)
 800fd26:	4293      	cmp	r3, r2
 800fd28:	f000 8099 	beq.w	800fe5e <HAL_TIM_ConfigClockSource+0x1be>
 800fd2c:	4a5c      	ldr	r2, [pc, #368]	@ (800fea0 <HAL_TIM_ConfigClockSource+0x200>)
 800fd2e:	4293      	cmp	r3, r2
 800fd30:	f200 809e 	bhi.w	800fe70 <HAL_TIM_ConfigClockSource+0x1d0>
 800fd34:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800fd38:	f000 8091 	beq.w	800fe5e <HAL_TIM_ConfigClockSource+0x1be>
 800fd3c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800fd40:	f200 8096 	bhi.w	800fe70 <HAL_TIM_ConfigClockSource+0x1d0>
 800fd44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fd48:	f000 8089 	beq.w	800fe5e <HAL_TIM_ConfigClockSource+0x1be>
 800fd4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fd50:	f200 808e 	bhi.w	800fe70 <HAL_TIM_ConfigClockSource+0x1d0>
 800fd54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fd58:	d03e      	beq.n	800fdd8 <HAL_TIM_ConfigClockSource+0x138>
 800fd5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fd5e:	f200 8087 	bhi.w	800fe70 <HAL_TIM_ConfigClockSource+0x1d0>
 800fd62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fd66:	f000 8086 	beq.w	800fe76 <HAL_TIM_ConfigClockSource+0x1d6>
 800fd6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fd6e:	d87f      	bhi.n	800fe70 <HAL_TIM_ConfigClockSource+0x1d0>
 800fd70:	2b70      	cmp	r3, #112	@ 0x70
 800fd72:	d01a      	beq.n	800fdaa <HAL_TIM_ConfigClockSource+0x10a>
 800fd74:	2b70      	cmp	r3, #112	@ 0x70
 800fd76:	d87b      	bhi.n	800fe70 <HAL_TIM_ConfigClockSource+0x1d0>
 800fd78:	2b60      	cmp	r3, #96	@ 0x60
 800fd7a:	d050      	beq.n	800fe1e <HAL_TIM_ConfigClockSource+0x17e>
 800fd7c:	2b60      	cmp	r3, #96	@ 0x60
 800fd7e:	d877      	bhi.n	800fe70 <HAL_TIM_ConfigClockSource+0x1d0>
 800fd80:	2b50      	cmp	r3, #80	@ 0x50
 800fd82:	d03c      	beq.n	800fdfe <HAL_TIM_ConfigClockSource+0x15e>
 800fd84:	2b50      	cmp	r3, #80	@ 0x50
 800fd86:	d873      	bhi.n	800fe70 <HAL_TIM_ConfigClockSource+0x1d0>
 800fd88:	2b40      	cmp	r3, #64	@ 0x40
 800fd8a:	d058      	beq.n	800fe3e <HAL_TIM_ConfigClockSource+0x19e>
 800fd8c:	2b40      	cmp	r3, #64	@ 0x40
 800fd8e:	d86f      	bhi.n	800fe70 <HAL_TIM_ConfigClockSource+0x1d0>
 800fd90:	2b30      	cmp	r3, #48	@ 0x30
 800fd92:	d064      	beq.n	800fe5e <HAL_TIM_ConfigClockSource+0x1be>
 800fd94:	2b30      	cmp	r3, #48	@ 0x30
 800fd96:	d86b      	bhi.n	800fe70 <HAL_TIM_ConfigClockSource+0x1d0>
 800fd98:	2b20      	cmp	r3, #32
 800fd9a:	d060      	beq.n	800fe5e <HAL_TIM_ConfigClockSource+0x1be>
 800fd9c:	2b20      	cmp	r3, #32
 800fd9e:	d867      	bhi.n	800fe70 <HAL_TIM_ConfigClockSource+0x1d0>
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d05c      	beq.n	800fe5e <HAL_TIM_ConfigClockSource+0x1be>
 800fda4:	2b10      	cmp	r3, #16
 800fda6:	d05a      	beq.n	800fe5e <HAL_TIM_ConfigClockSource+0x1be>
 800fda8:	e062      	b.n	800fe70 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fdba:	f000 fa11 	bl	80101e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	689b      	ldr	r3, [r3, #8]
 800fdc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800fdcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	68ba      	ldr	r2, [r7, #8]
 800fdd4:	609a      	str	r2, [r3, #8]
      break;
 800fdd6:	e04f      	b.n	800fe78 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fde8:	f000 f9fa 	bl	80101e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	689a      	ldr	r2, [r3, #8]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fdfa:	609a      	str	r2, [r3, #8]
      break;
 800fdfc:	e03c      	b.n	800fe78 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fe0a:	461a      	mov	r2, r3
 800fe0c:	f000 f96c 	bl	80100e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	2150      	movs	r1, #80	@ 0x50
 800fe16:	4618      	mov	r0, r3
 800fe18:	f000 f9c5 	bl	80101a6 <TIM_ITRx_SetConfig>
      break;
 800fe1c:	e02c      	b.n	800fe78 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	f000 f98b 	bl	8010146 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	2160      	movs	r1, #96	@ 0x60
 800fe36:	4618      	mov	r0, r3
 800fe38:	f000 f9b5 	bl	80101a6 <TIM_ITRx_SetConfig>
      break;
 800fe3c:	e01c      	b.n	800fe78 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	f000 f94c 	bl	80100e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	2140      	movs	r1, #64	@ 0x40
 800fe56:	4618      	mov	r0, r3
 800fe58:	f000 f9a5 	bl	80101a6 <TIM_ITRx_SetConfig>
      break;
 800fe5c:	e00c      	b.n	800fe78 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681a      	ldr	r2, [r3, #0]
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	4619      	mov	r1, r3
 800fe68:	4610      	mov	r0, r2
 800fe6a:	f000 f99c 	bl	80101a6 <TIM_ITRx_SetConfig>
      break;
 800fe6e:	e003      	b.n	800fe78 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800fe70:	2301      	movs	r3, #1
 800fe72:	73fb      	strb	r3, [r7, #15]
      break;
 800fe74:	e000      	b.n	800fe78 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800fe76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2200      	movs	r2, #0
 800fe84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fe88:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3710      	adds	r7, #16
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}
 800fe92:	bf00      	nop
 800fe94:	00100070 	.word	0x00100070
 800fe98:	00100040 	.word	0x00100040
 800fe9c:	00100030 	.word	0x00100030
 800fea0:	00100020 	.word	0x00100020

0800fea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fea4:	b480      	push	{r7}
 800fea6:	b083      	sub	sp, #12
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800feac:	bf00      	nop
 800feae:	370c      	adds	r7, #12
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr

0800feb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800feb8:	b480      	push	{r7}
 800feba:	b083      	sub	sp, #12
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fec0:	bf00      	nop
 800fec2:	370c      	adds	r7, #12
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr

0800fecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fecc:	b480      	push	{r7}
 800fece:	b083      	sub	sp, #12
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fed4:	bf00      	nop
 800fed6:	370c      	adds	r7, #12
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr

0800fee0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fee0:	b480      	push	{r7}
 800fee2:	b083      	sub	sp, #12
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fee8:	bf00      	nop
 800feea:	370c      	adds	r7, #12
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr

0800fef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b085      	sub	sp, #20
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	4a68      	ldr	r2, [pc, #416]	@ (80100a8 <TIM_Base_SetConfig+0x1b4>)
 800ff08:	4293      	cmp	r3, r2
 800ff0a:	d02b      	beq.n	800ff64 <TIM_Base_SetConfig+0x70>
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	4a67      	ldr	r2, [pc, #412]	@ (80100ac <TIM_Base_SetConfig+0x1b8>)
 800ff10:	4293      	cmp	r3, r2
 800ff12:	d027      	beq.n	800ff64 <TIM_Base_SetConfig+0x70>
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ff1a:	d023      	beq.n	800ff64 <TIM_Base_SetConfig+0x70>
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ff22:	d01f      	beq.n	800ff64 <TIM_Base_SetConfig+0x70>
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	4a62      	ldr	r2, [pc, #392]	@ (80100b0 <TIM_Base_SetConfig+0x1bc>)
 800ff28:	4293      	cmp	r3, r2
 800ff2a:	d01b      	beq.n	800ff64 <TIM_Base_SetConfig+0x70>
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	4a61      	ldr	r2, [pc, #388]	@ (80100b4 <TIM_Base_SetConfig+0x1c0>)
 800ff30:	4293      	cmp	r3, r2
 800ff32:	d017      	beq.n	800ff64 <TIM_Base_SetConfig+0x70>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	4a60      	ldr	r2, [pc, #384]	@ (80100b8 <TIM_Base_SetConfig+0x1c4>)
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d013      	beq.n	800ff64 <TIM_Base_SetConfig+0x70>
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	4a5f      	ldr	r2, [pc, #380]	@ (80100bc <TIM_Base_SetConfig+0x1c8>)
 800ff40:	4293      	cmp	r3, r2
 800ff42:	d00f      	beq.n	800ff64 <TIM_Base_SetConfig+0x70>
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	4a5e      	ldr	r2, [pc, #376]	@ (80100c0 <TIM_Base_SetConfig+0x1cc>)
 800ff48:	4293      	cmp	r3, r2
 800ff4a:	d00b      	beq.n	800ff64 <TIM_Base_SetConfig+0x70>
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	4a5d      	ldr	r2, [pc, #372]	@ (80100c4 <TIM_Base_SetConfig+0x1d0>)
 800ff50:	4293      	cmp	r3, r2
 800ff52:	d007      	beq.n	800ff64 <TIM_Base_SetConfig+0x70>
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	4a5c      	ldr	r2, [pc, #368]	@ (80100c8 <TIM_Base_SetConfig+0x1d4>)
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d003      	beq.n	800ff64 <TIM_Base_SetConfig+0x70>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4a5b      	ldr	r2, [pc, #364]	@ (80100cc <TIM_Base_SetConfig+0x1d8>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d108      	bne.n	800ff76 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ff6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	685b      	ldr	r3, [r3, #4]
 800ff70:	68fa      	ldr	r2, [r7, #12]
 800ff72:	4313      	orrs	r3, r2
 800ff74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	4a4b      	ldr	r2, [pc, #300]	@ (80100a8 <TIM_Base_SetConfig+0x1b4>)
 800ff7a:	4293      	cmp	r3, r2
 800ff7c:	d043      	beq.n	8010006 <TIM_Base_SetConfig+0x112>
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	4a4a      	ldr	r2, [pc, #296]	@ (80100ac <TIM_Base_SetConfig+0x1b8>)
 800ff82:	4293      	cmp	r3, r2
 800ff84:	d03f      	beq.n	8010006 <TIM_Base_SetConfig+0x112>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ff8c:	d03b      	beq.n	8010006 <TIM_Base_SetConfig+0x112>
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ff94:	d037      	beq.n	8010006 <TIM_Base_SetConfig+0x112>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	4a45      	ldr	r2, [pc, #276]	@ (80100b0 <TIM_Base_SetConfig+0x1bc>)
 800ff9a:	4293      	cmp	r3, r2
 800ff9c:	d033      	beq.n	8010006 <TIM_Base_SetConfig+0x112>
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	4a44      	ldr	r2, [pc, #272]	@ (80100b4 <TIM_Base_SetConfig+0x1c0>)
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	d02f      	beq.n	8010006 <TIM_Base_SetConfig+0x112>
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	4a43      	ldr	r2, [pc, #268]	@ (80100b8 <TIM_Base_SetConfig+0x1c4>)
 800ffaa:	4293      	cmp	r3, r2
 800ffac:	d02b      	beq.n	8010006 <TIM_Base_SetConfig+0x112>
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	4a42      	ldr	r2, [pc, #264]	@ (80100bc <TIM_Base_SetConfig+0x1c8>)
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d027      	beq.n	8010006 <TIM_Base_SetConfig+0x112>
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	4a41      	ldr	r2, [pc, #260]	@ (80100c0 <TIM_Base_SetConfig+0x1cc>)
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	d023      	beq.n	8010006 <TIM_Base_SetConfig+0x112>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	4a40      	ldr	r2, [pc, #256]	@ (80100c4 <TIM_Base_SetConfig+0x1d0>)
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	d01f      	beq.n	8010006 <TIM_Base_SetConfig+0x112>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	4a3f      	ldr	r2, [pc, #252]	@ (80100c8 <TIM_Base_SetConfig+0x1d4>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d01b      	beq.n	8010006 <TIM_Base_SetConfig+0x112>
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	4a3e      	ldr	r2, [pc, #248]	@ (80100cc <TIM_Base_SetConfig+0x1d8>)
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d017      	beq.n	8010006 <TIM_Base_SetConfig+0x112>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	4a3d      	ldr	r2, [pc, #244]	@ (80100d0 <TIM_Base_SetConfig+0x1dc>)
 800ffda:	4293      	cmp	r3, r2
 800ffdc:	d013      	beq.n	8010006 <TIM_Base_SetConfig+0x112>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	4a3c      	ldr	r2, [pc, #240]	@ (80100d4 <TIM_Base_SetConfig+0x1e0>)
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d00f      	beq.n	8010006 <TIM_Base_SetConfig+0x112>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	4a3b      	ldr	r2, [pc, #236]	@ (80100d8 <TIM_Base_SetConfig+0x1e4>)
 800ffea:	4293      	cmp	r3, r2
 800ffec:	d00b      	beq.n	8010006 <TIM_Base_SetConfig+0x112>
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	4a3a      	ldr	r2, [pc, #232]	@ (80100dc <TIM_Base_SetConfig+0x1e8>)
 800fff2:	4293      	cmp	r3, r2
 800fff4:	d007      	beq.n	8010006 <TIM_Base_SetConfig+0x112>
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	4a39      	ldr	r2, [pc, #228]	@ (80100e0 <TIM_Base_SetConfig+0x1ec>)
 800fffa:	4293      	cmp	r3, r2
 800fffc:	d003      	beq.n	8010006 <TIM_Base_SetConfig+0x112>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	4a38      	ldr	r2, [pc, #224]	@ (80100e4 <TIM_Base_SetConfig+0x1f0>)
 8010002:	4293      	cmp	r3, r2
 8010004:	d108      	bne.n	8010018 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801000c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	68db      	ldr	r3, [r3, #12]
 8010012:	68fa      	ldr	r2, [r7, #12]
 8010014:	4313      	orrs	r3, r2
 8010016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	695b      	ldr	r3, [r3, #20]
 8010022:	4313      	orrs	r3, r2
 8010024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	68fa      	ldr	r2, [r7, #12]
 801002a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	689a      	ldr	r2, [r3, #8]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	681a      	ldr	r2, [r3, #0]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	4a1a      	ldr	r2, [pc, #104]	@ (80100a8 <TIM_Base_SetConfig+0x1b4>)
 8010040:	4293      	cmp	r3, r2
 8010042:	d023      	beq.n	801008c <TIM_Base_SetConfig+0x198>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	4a19      	ldr	r2, [pc, #100]	@ (80100ac <TIM_Base_SetConfig+0x1b8>)
 8010048:	4293      	cmp	r3, r2
 801004a:	d01f      	beq.n	801008c <TIM_Base_SetConfig+0x198>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	4a1e      	ldr	r2, [pc, #120]	@ (80100c8 <TIM_Base_SetConfig+0x1d4>)
 8010050:	4293      	cmp	r3, r2
 8010052:	d01b      	beq.n	801008c <TIM_Base_SetConfig+0x198>
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	4a1d      	ldr	r2, [pc, #116]	@ (80100cc <TIM_Base_SetConfig+0x1d8>)
 8010058:	4293      	cmp	r3, r2
 801005a:	d017      	beq.n	801008c <TIM_Base_SetConfig+0x198>
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	4a1c      	ldr	r2, [pc, #112]	@ (80100d0 <TIM_Base_SetConfig+0x1dc>)
 8010060:	4293      	cmp	r3, r2
 8010062:	d013      	beq.n	801008c <TIM_Base_SetConfig+0x198>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	4a1b      	ldr	r2, [pc, #108]	@ (80100d4 <TIM_Base_SetConfig+0x1e0>)
 8010068:	4293      	cmp	r3, r2
 801006a:	d00f      	beq.n	801008c <TIM_Base_SetConfig+0x198>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	4a1a      	ldr	r2, [pc, #104]	@ (80100d8 <TIM_Base_SetConfig+0x1e4>)
 8010070:	4293      	cmp	r3, r2
 8010072:	d00b      	beq.n	801008c <TIM_Base_SetConfig+0x198>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	4a19      	ldr	r2, [pc, #100]	@ (80100dc <TIM_Base_SetConfig+0x1e8>)
 8010078:	4293      	cmp	r3, r2
 801007a:	d007      	beq.n	801008c <TIM_Base_SetConfig+0x198>
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	4a18      	ldr	r2, [pc, #96]	@ (80100e0 <TIM_Base_SetConfig+0x1ec>)
 8010080:	4293      	cmp	r3, r2
 8010082:	d003      	beq.n	801008c <TIM_Base_SetConfig+0x198>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	4a17      	ldr	r2, [pc, #92]	@ (80100e4 <TIM_Base_SetConfig+0x1f0>)
 8010088:	4293      	cmp	r3, r2
 801008a:	d103      	bne.n	8010094 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	691a      	ldr	r2, [r3, #16]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2201      	movs	r2, #1
 8010098:	615a      	str	r2, [r3, #20]
}
 801009a:	bf00      	nop
 801009c:	3714      	adds	r7, #20
 801009e:	46bd      	mov	sp, r7
 80100a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a4:	4770      	bx	lr
 80100a6:	bf00      	nop
 80100a8:	40012c00 	.word	0x40012c00
 80100ac:	50012c00 	.word	0x50012c00
 80100b0:	40000400 	.word	0x40000400
 80100b4:	50000400 	.word	0x50000400
 80100b8:	40000800 	.word	0x40000800
 80100bc:	50000800 	.word	0x50000800
 80100c0:	40000c00 	.word	0x40000c00
 80100c4:	50000c00 	.word	0x50000c00
 80100c8:	40013400 	.word	0x40013400
 80100cc:	50013400 	.word	0x50013400
 80100d0:	40014000 	.word	0x40014000
 80100d4:	50014000 	.word	0x50014000
 80100d8:	40014400 	.word	0x40014400
 80100dc:	50014400 	.word	0x50014400
 80100e0:	40014800 	.word	0x40014800
 80100e4:	50014800 	.word	0x50014800

080100e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80100e8:	b480      	push	{r7}
 80100ea:	b087      	sub	sp, #28
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	60f8      	str	r0, [r7, #12]
 80100f0:	60b9      	str	r1, [r7, #8]
 80100f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	6a1b      	ldr	r3, [r3, #32]
 80100f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	6a1b      	ldr	r3, [r3, #32]
 80100fe:	f023 0201 	bic.w	r2, r3, #1
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	699b      	ldr	r3, [r3, #24]
 801010a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	011b      	lsls	r3, r3, #4
 8010118:	693a      	ldr	r2, [r7, #16]
 801011a:	4313      	orrs	r3, r2
 801011c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	f023 030a 	bic.w	r3, r3, #10
 8010124:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010126:	697a      	ldr	r2, [r7, #20]
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	4313      	orrs	r3, r2
 801012c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	693a      	ldr	r2, [r7, #16]
 8010132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	697a      	ldr	r2, [r7, #20]
 8010138:	621a      	str	r2, [r3, #32]
}
 801013a:	bf00      	nop
 801013c:	371c      	adds	r7, #28
 801013e:	46bd      	mov	sp, r7
 8010140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010144:	4770      	bx	lr

08010146 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010146:	b480      	push	{r7}
 8010148:	b087      	sub	sp, #28
 801014a:	af00      	add	r7, sp, #0
 801014c:	60f8      	str	r0, [r7, #12]
 801014e:	60b9      	str	r1, [r7, #8]
 8010150:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	6a1b      	ldr	r3, [r3, #32]
 8010156:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	6a1b      	ldr	r3, [r3, #32]
 801015c:	f023 0210 	bic.w	r2, r3, #16
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	699b      	ldr	r3, [r3, #24]
 8010168:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801016a:	693b      	ldr	r3, [r7, #16]
 801016c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010170:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	031b      	lsls	r3, r3, #12
 8010176:	693a      	ldr	r2, [r7, #16]
 8010178:	4313      	orrs	r3, r2
 801017a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010182:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	011b      	lsls	r3, r3, #4
 8010188:	697a      	ldr	r2, [r7, #20]
 801018a:	4313      	orrs	r3, r2
 801018c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	693a      	ldr	r2, [r7, #16]
 8010192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	697a      	ldr	r2, [r7, #20]
 8010198:	621a      	str	r2, [r3, #32]
}
 801019a:	bf00      	nop
 801019c:	371c      	adds	r7, #28
 801019e:	46bd      	mov	sp, r7
 80101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a4:	4770      	bx	lr

080101a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80101a6:	b480      	push	{r7}
 80101a8:	b085      	sub	sp, #20
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	6078      	str	r0, [r7, #4]
 80101ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	689b      	ldr	r3, [r3, #8]
 80101b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80101bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80101c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80101c2:	683a      	ldr	r2, [r7, #0]
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	4313      	orrs	r3, r2
 80101c8:	f043 0307 	orr.w	r3, r3, #7
 80101cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	68fa      	ldr	r2, [r7, #12]
 80101d2:	609a      	str	r2, [r3, #8]
}
 80101d4:	bf00      	nop
 80101d6:	3714      	adds	r7, #20
 80101d8:	46bd      	mov	sp, r7
 80101da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101de:	4770      	bx	lr

080101e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80101e0:	b480      	push	{r7}
 80101e2:	b087      	sub	sp, #28
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	60f8      	str	r0, [r7, #12]
 80101e8:	60b9      	str	r1, [r7, #8]
 80101ea:	607a      	str	r2, [r7, #4]
 80101ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	689b      	ldr	r3, [r3, #8]
 80101f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80101fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	021a      	lsls	r2, r3, #8
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	431a      	orrs	r2, r3
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	4313      	orrs	r3, r2
 8010208:	697a      	ldr	r2, [r7, #20]
 801020a:	4313      	orrs	r3, r2
 801020c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	697a      	ldr	r2, [r7, #20]
 8010212:	609a      	str	r2, [r3, #8]
}
 8010214:	bf00      	nop
 8010216:	371c      	adds	r7, #28
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr

08010220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010220:	b480      	push	{r7}
 8010222:	b085      	sub	sp, #20
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010230:	2b01      	cmp	r3, #1
 8010232:	d101      	bne.n	8010238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010234:	2302      	movs	r3, #2
 8010236:	e097      	b.n	8010368 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2201      	movs	r2, #1
 801023c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2202      	movs	r2, #2
 8010244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	685b      	ldr	r3, [r3, #4]
 801024e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	689b      	ldr	r3, [r3, #8]
 8010256:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4a45      	ldr	r2, [pc, #276]	@ (8010374 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d00e      	beq.n	8010280 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	4a44      	ldr	r2, [pc, #272]	@ (8010378 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8010268:	4293      	cmp	r3, r2
 801026a:	d009      	beq.n	8010280 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	4a42      	ldr	r2, [pc, #264]	@ (801037c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8010272:	4293      	cmp	r3, r2
 8010274:	d004      	beq.n	8010280 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	4a41      	ldr	r2, [pc, #260]	@ (8010380 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 801027c:	4293      	cmp	r3, r2
 801027e:	d108      	bne.n	8010292 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010286:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	685b      	ldr	r3, [r3, #4]
 801028c:	68fa      	ldr	r2, [r7, #12]
 801028e:	4313      	orrs	r3, r2
 8010290:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8010298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801029c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	68fa      	ldr	r2, [r7, #12]
 80102a4:	4313      	orrs	r3, r2
 80102a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	68fa      	ldr	r2, [r7, #12]
 80102ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	4a2f      	ldr	r2, [pc, #188]	@ (8010374 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80102b6:	4293      	cmp	r3, r2
 80102b8:	d040      	beq.n	801033c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	4a2e      	ldr	r2, [pc, #184]	@ (8010378 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d03b      	beq.n	801033c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80102cc:	d036      	beq.n	801033c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80102d6:	d031      	beq.n	801033c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	4a29      	ldr	r2, [pc, #164]	@ (8010384 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80102de:	4293      	cmp	r3, r2
 80102e0:	d02c      	beq.n	801033c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	4a28      	ldr	r2, [pc, #160]	@ (8010388 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80102e8:	4293      	cmp	r3, r2
 80102ea:	d027      	beq.n	801033c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	4a26      	ldr	r2, [pc, #152]	@ (801038c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80102f2:	4293      	cmp	r3, r2
 80102f4:	d022      	beq.n	801033c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	4a25      	ldr	r2, [pc, #148]	@ (8010390 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80102fc:	4293      	cmp	r3, r2
 80102fe:	d01d      	beq.n	801033c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	4a23      	ldr	r2, [pc, #140]	@ (8010394 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8010306:	4293      	cmp	r3, r2
 8010308:	d018      	beq.n	801033c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	4a22      	ldr	r2, [pc, #136]	@ (8010398 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8010310:	4293      	cmp	r3, r2
 8010312:	d013      	beq.n	801033c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	4a18      	ldr	r2, [pc, #96]	@ (801037c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 801031a:	4293      	cmp	r3, r2
 801031c:	d00e      	beq.n	801033c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	4a17      	ldr	r2, [pc, #92]	@ (8010380 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010324:	4293      	cmp	r3, r2
 8010326:	d009      	beq.n	801033c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	4a1b      	ldr	r2, [pc, #108]	@ (801039c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 801032e:	4293      	cmp	r3, r2
 8010330:	d004      	beq.n	801033c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	4a1a      	ldr	r2, [pc, #104]	@ (80103a0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8010338:	4293      	cmp	r3, r2
 801033a:	d10c      	bne.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010342:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	689b      	ldr	r3, [r3, #8]
 8010348:	68ba      	ldr	r2, [r7, #8]
 801034a:	4313      	orrs	r3, r2
 801034c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	68ba      	ldr	r2, [r7, #8]
 8010354:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2201      	movs	r2, #1
 801035a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2200      	movs	r2, #0
 8010362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010366:	2300      	movs	r3, #0
}
 8010368:	4618      	mov	r0, r3
 801036a:	3714      	adds	r7, #20
 801036c:	46bd      	mov	sp, r7
 801036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010372:	4770      	bx	lr
 8010374:	40012c00 	.word	0x40012c00
 8010378:	50012c00 	.word	0x50012c00
 801037c:	40013400 	.word	0x40013400
 8010380:	50013400 	.word	0x50013400
 8010384:	40000400 	.word	0x40000400
 8010388:	50000400 	.word	0x50000400
 801038c:	40000800 	.word	0x40000800
 8010390:	50000800 	.word	0x50000800
 8010394:	40000c00 	.word	0x40000c00
 8010398:	50000c00 	.word	0x50000c00
 801039c:	40014000 	.word	0x40014000
 80103a0:	50014000 	.word	0x50014000

080103a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80103a4:	b480      	push	{r7}
 80103a6:	b083      	sub	sp, #12
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80103ac:	bf00      	nop
 80103ae:	370c      	adds	r7, #12
 80103b0:	46bd      	mov	sp, r7
 80103b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b6:	4770      	bx	lr

080103b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b083      	sub	sp, #12
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80103c0:	bf00      	nop
 80103c2:	370c      	adds	r7, #12
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80103cc:	b480      	push	{r7}
 80103ce:	b083      	sub	sp, #12
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80103d4:	bf00      	nop
 80103d6:	370c      	adds	r7, #12
 80103d8:	46bd      	mov	sp, r7
 80103da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103de:	4770      	bx	lr

080103e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80103e0:	b480      	push	{r7}
 80103e2:	b083      	sub	sp, #12
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80103e8:	bf00      	nop
 80103ea:	370c      	adds	r7, #12
 80103ec:	46bd      	mov	sp, r7
 80103ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f2:	4770      	bx	lr

080103f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b083      	sub	sp, #12
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80103fc:	bf00      	nop
 80103fe:	370c      	adds	r7, #12
 8010400:	46bd      	mov	sp, r7
 8010402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010406:	4770      	bx	lr

08010408 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8010408:	b480      	push	{r7}
 801040a:	b083      	sub	sp, #12
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8010410:	bf00      	nop
 8010412:	370c      	adds	r7, #12
 8010414:	46bd      	mov	sp, r7
 8010416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041a:	4770      	bx	lr

0801041c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 801041c:	b480      	push	{r7}
 801041e:	b083      	sub	sp, #12
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8010424:	bf00      	nop
 8010426:	370c      	adds	r7, #12
 8010428:	46bd      	mov	sp, r7
 801042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042e:	4770      	bx	lr

08010430 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010430:	b084      	sub	sp, #16
 8010432:	b580      	push	{r7, lr}
 8010434:	b084      	sub	sp, #16
 8010436:	af00      	add	r7, sp, #0
 8010438:	6078      	str	r0, [r7, #4]
 801043a:	f107 001c 	add.w	r0, r7, #28
 801043e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	68db      	ldr	r3, [r3, #12]
 8010446:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f001 faaa 	bl	80119a8 <USB_CoreReset>
 8010454:	4603      	mov	r3, r0
 8010456:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8010458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801045a:	2b00      	cmp	r3, #0
 801045c:	d106      	bne.n	801046c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010462:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	639a      	str	r2, [r3, #56]	@ 0x38
 801046a:	e005      	b.n	8010478 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010470:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8010478:	7bfb      	ldrb	r3, [r7, #15]
}
 801047a:	4618      	mov	r0, r3
 801047c:	3710      	adds	r7, #16
 801047e:	46bd      	mov	sp, r7
 8010480:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010484:	b004      	add	sp, #16
 8010486:	4770      	bx	lr

08010488 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010488:	b480      	push	{r7}
 801048a:	b087      	sub	sp, #28
 801048c:	af00      	add	r7, sp, #0
 801048e:	60f8      	str	r0, [r7, #12]
 8010490:	60b9      	str	r1, [r7, #8]
 8010492:	4613      	mov	r3, r2
 8010494:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010496:	79fb      	ldrb	r3, [r7, #7]
 8010498:	2b02      	cmp	r3, #2
 801049a:	d165      	bne.n	8010568 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	4a41      	ldr	r2, [pc, #260]	@ (80105a4 <USB_SetTurnaroundTime+0x11c>)
 80104a0:	4293      	cmp	r3, r2
 80104a2:	d906      	bls.n	80104b2 <USB_SetTurnaroundTime+0x2a>
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	4a40      	ldr	r2, [pc, #256]	@ (80105a8 <USB_SetTurnaroundTime+0x120>)
 80104a8:	4293      	cmp	r3, r2
 80104aa:	d202      	bcs.n	80104b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80104ac:	230f      	movs	r3, #15
 80104ae:	617b      	str	r3, [r7, #20]
 80104b0:	e062      	b.n	8010578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	4a3c      	ldr	r2, [pc, #240]	@ (80105a8 <USB_SetTurnaroundTime+0x120>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d306      	bcc.n	80104c8 <USB_SetTurnaroundTime+0x40>
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	4a3b      	ldr	r2, [pc, #236]	@ (80105ac <USB_SetTurnaroundTime+0x124>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d202      	bcs.n	80104c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80104c2:	230e      	movs	r3, #14
 80104c4:	617b      	str	r3, [r7, #20]
 80104c6:	e057      	b.n	8010578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	4a38      	ldr	r2, [pc, #224]	@ (80105ac <USB_SetTurnaroundTime+0x124>)
 80104cc:	4293      	cmp	r3, r2
 80104ce:	d306      	bcc.n	80104de <USB_SetTurnaroundTime+0x56>
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	4a37      	ldr	r2, [pc, #220]	@ (80105b0 <USB_SetTurnaroundTime+0x128>)
 80104d4:	4293      	cmp	r3, r2
 80104d6:	d202      	bcs.n	80104de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80104d8:	230d      	movs	r3, #13
 80104da:	617b      	str	r3, [r7, #20]
 80104dc:	e04c      	b.n	8010578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	4a33      	ldr	r2, [pc, #204]	@ (80105b0 <USB_SetTurnaroundTime+0x128>)
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d306      	bcc.n	80104f4 <USB_SetTurnaroundTime+0x6c>
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	4a32      	ldr	r2, [pc, #200]	@ (80105b4 <USB_SetTurnaroundTime+0x12c>)
 80104ea:	4293      	cmp	r3, r2
 80104ec:	d802      	bhi.n	80104f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80104ee:	230c      	movs	r3, #12
 80104f0:	617b      	str	r3, [r7, #20]
 80104f2:	e041      	b.n	8010578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	4a2f      	ldr	r2, [pc, #188]	@ (80105b4 <USB_SetTurnaroundTime+0x12c>)
 80104f8:	4293      	cmp	r3, r2
 80104fa:	d906      	bls.n	801050a <USB_SetTurnaroundTime+0x82>
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	4a2e      	ldr	r2, [pc, #184]	@ (80105b8 <USB_SetTurnaroundTime+0x130>)
 8010500:	4293      	cmp	r3, r2
 8010502:	d802      	bhi.n	801050a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010504:	230b      	movs	r3, #11
 8010506:	617b      	str	r3, [r7, #20]
 8010508:	e036      	b.n	8010578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	4a2a      	ldr	r2, [pc, #168]	@ (80105b8 <USB_SetTurnaroundTime+0x130>)
 801050e:	4293      	cmp	r3, r2
 8010510:	d906      	bls.n	8010520 <USB_SetTurnaroundTime+0x98>
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	4a29      	ldr	r2, [pc, #164]	@ (80105bc <USB_SetTurnaroundTime+0x134>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d802      	bhi.n	8010520 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801051a:	230a      	movs	r3, #10
 801051c:	617b      	str	r3, [r7, #20]
 801051e:	e02b      	b.n	8010578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	4a26      	ldr	r2, [pc, #152]	@ (80105bc <USB_SetTurnaroundTime+0x134>)
 8010524:	4293      	cmp	r3, r2
 8010526:	d906      	bls.n	8010536 <USB_SetTurnaroundTime+0xae>
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	4a25      	ldr	r2, [pc, #148]	@ (80105c0 <USB_SetTurnaroundTime+0x138>)
 801052c:	4293      	cmp	r3, r2
 801052e:	d202      	bcs.n	8010536 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010530:	2309      	movs	r3, #9
 8010532:	617b      	str	r3, [r7, #20]
 8010534:	e020      	b.n	8010578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	4a21      	ldr	r2, [pc, #132]	@ (80105c0 <USB_SetTurnaroundTime+0x138>)
 801053a:	4293      	cmp	r3, r2
 801053c:	d306      	bcc.n	801054c <USB_SetTurnaroundTime+0xc4>
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	4a20      	ldr	r2, [pc, #128]	@ (80105c4 <USB_SetTurnaroundTime+0x13c>)
 8010542:	4293      	cmp	r3, r2
 8010544:	d802      	bhi.n	801054c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010546:	2308      	movs	r3, #8
 8010548:	617b      	str	r3, [r7, #20]
 801054a:	e015      	b.n	8010578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	4a1d      	ldr	r2, [pc, #116]	@ (80105c4 <USB_SetTurnaroundTime+0x13c>)
 8010550:	4293      	cmp	r3, r2
 8010552:	d906      	bls.n	8010562 <USB_SetTurnaroundTime+0xda>
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	4a1c      	ldr	r2, [pc, #112]	@ (80105c8 <USB_SetTurnaroundTime+0x140>)
 8010558:	4293      	cmp	r3, r2
 801055a:	d202      	bcs.n	8010562 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801055c:	2307      	movs	r3, #7
 801055e:	617b      	str	r3, [r7, #20]
 8010560:	e00a      	b.n	8010578 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010562:	2306      	movs	r3, #6
 8010564:	617b      	str	r3, [r7, #20]
 8010566:	e007      	b.n	8010578 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010568:	79fb      	ldrb	r3, [r7, #7]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d102      	bne.n	8010574 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801056e:	2309      	movs	r3, #9
 8010570:	617b      	str	r3, [r7, #20]
 8010572:	e001      	b.n	8010578 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010574:	2309      	movs	r3, #9
 8010576:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	68db      	ldr	r3, [r3, #12]
 801057c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	68da      	ldr	r2, [r3, #12]
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	029b      	lsls	r3, r3, #10
 801058c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8010590:	431a      	orrs	r2, r3
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010596:	2300      	movs	r3, #0
}
 8010598:	4618      	mov	r0, r3
 801059a:	371c      	adds	r7, #28
 801059c:	46bd      	mov	sp, r7
 801059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a2:	4770      	bx	lr
 80105a4:	00d8acbf 	.word	0x00d8acbf
 80105a8:	00e4e1c0 	.word	0x00e4e1c0
 80105ac:	00f42400 	.word	0x00f42400
 80105b0:	01067380 	.word	0x01067380
 80105b4:	011a499f 	.word	0x011a499f
 80105b8:	01312cff 	.word	0x01312cff
 80105bc:	014ca43f 	.word	0x014ca43f
 80105c0:	016e3600 	.word	0x016e3600
 80105c4:	01a6ab1f 	.word	0x01a6ab1f
 80105c8:	01e84800 	.word	0x01e84800

080105cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80105cc:	b480      	push	{r7}
 80105ce:	b083      	sub	sp, #12
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	689b      	ldr	r3, [r3, #8]
 80105d8:	f043 0201 	orr.w	r2, r3, #1
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80105e0:	2300      	movs	r3, #0
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	370c      	adds	r7, #12
 80105e6:	46bd      	mov	sp, r7
 80105e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ec:	4770      	bx	lr

080105ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80105ee:	b480      	push	{r7}
 80105f0:	b083      	sub	sp, #12
 80105f2:	af00      	add	r7, sp, #0
 80105f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	689b      	ldr	r3, [r3, #8]
 80105fa:	f023 0201 	bic.w	r2, r3, #1
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010602:	2300      	movs	r3, #0
}
 8010604:	4618      	mov	r0, r3
 8010606:	370c      	adds	r7, #12
 8010608:	46bd      	mov	sp, r7
 801060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060e:	4770      	bx	lr

08010610 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b084      	sub	sp, #16
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
 8010618:	460b      	mov	r3, r1
 801061a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801061c:	2300      	movs	r3, #0
 801061e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	68db      	ldr	r3, [r3, #12]
 8010624:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801062c:	78fb      	ldrb	r3, [r7, #3]
 801062e:	2b01      	cmp	r3, #1
 8010630:	d115      	bne.n	801065e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	68db      	ldr	r3, [r3, #12]
 8010636:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801063e:	2001      	movs	r0, #1
 8010640:	f7f2 f896 	bl	8002770 <HAL_Delay>
      ms++;
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	3301      	adds	r3, #1
 8010648:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f001 f91d 	bl	801188a <USB_GetMode>
 8010650:	4603      	mov	r3, r0
 8010652:	2b01      	cmp	r3, #1
 8010654:	d01e      	beq.n	8010694 <USB_SetCurrentMode+0x84>
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	2b31      	cmp	r3, #49	@ 0x31
 801065a:	d9f0      	bls.n	801063e <USB_SetCurrentMode+0x2e>
 801065c:	e01a      	b.n	8010694 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801065e:	78fb      	ldrb	r3, [r7, #3]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d115      	bne.n	8010690 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	68db      	ldr	r3, [r3, #12]
 8010668:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010670:	2001      	movs	r0, #1
 8010672:	f7f2 f87d 	bl	8002770 <HAL_Delay>
      ms++;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	3301      	adds	r3, #1
 801067a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f001 f904 	bl	801188a <USB_GetMode>
 8010682:	4603      	mov	r3, r0
 8010684:	2b00      	cmp	r3, #0
 8010686:	d005      	beq.n	8010694 <USB_SetCurrentMode+0x84>
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	2b31      	cmp	r3, #49	@ 0x31
 801068c:	d9f0      	bls.n	8010670 <USB_SetCurrentMode+0x60>
 801068e:	e001      	b.n	8010694 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010690:	2301      	movs	r3, #1
 8010692:	e005      	b.n	80106a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2b32      	cmp	r3, #50	@ 0x32
 8010698:	d101      	bne.n	801069e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801069a:	2301      	movs	r3, #1
 801069c:	e000      	b.n	80106a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801069e:	2300      	movs	r3, #0
}
 80106a0:	4618      	mov	r0, r3
 80106a2:	3710      	adds	r7, #16
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80106a8:	b084      	sub	sp, #16
 80106aa:	b580      	push	{r7, lr}
 80106ac:	b086      	sub	sp, #24
 80106ae:	af00      	add	r7, sp, #0
 80106b0:	6078      	str	r0, [r7, #4]
 80106b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80106b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80106ba:	2300      	movs	r3, #0
 80106bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80106c2:	2300      	movs	r3, #0
 80106c4:	613b      	str	r3, [r7, #16]
 80106c6:	e009      	b.n	80106dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80106c8:	687a      	ldr	r2, [r7, #4]
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	3340      	adds	r3, #64	@ 0x40
 80106ce:	009b      	lsls	r3, r3, #2
 80106d0:	4413      	add	r3, r2
 80106d2:	2200      	movs	r2, #0
 80106d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	3301      	adds	r3, #1
 80106da:	613b      	str	r3, [r7, #16]
 80106dc:	693b      	ldr	r3, [r7, #16]
 80106de:	2b0e      	cmp	r3, #14
 80106e0:	d9f2      	bls.n	80106c8 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80106e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d11c      	bne.n	8010722 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80106ee:	685b      	ldr	r3, [r3, #4]
 80106f0:	68fa      	ldr	r2, [r7, #12]
 80106f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80106f6:	f043 0302 	orr.w	r3, r3, #2
 80106fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010700:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	601a      	str	r2, [r3, #0]
 8010720:	e005      	b.n	801072e <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010726:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010734:	461a      	mov	r2, r3
 8010736:	2300      	movs	r3, #0
 8010738:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801073a:	2103      	movs	r1, #3
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f000 f95b 	bl	80109f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010742:	2110      	movs	r1, #16
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f000 f8f3 	bl	8010930 <USB_FlushTxFifo>
 801074a:	4603      	mov	r3, r0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d001      	beq.n	8010754 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8010750:	2301      	movs	r3, #1
 8010752:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f000 f91f 	bl	8010998 <USB_FlushRxFifo>
 801075a:	4603      	mov	r3, r0
 801075c:	2b00      	cmp	r3, #0
 801075e:	d001      	beq.n	8010764 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8010760:	2301      	movs	r3, #1
 8010762:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801076a:	461a      	mov	r2, r3
 801076c:	2300      	movs	r3, #0
 801076e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010776:	461a      	mov	r2, r3
 8010778:	2300      	movs	r3, #0
 801077a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010782:	461a      	mov	r2, r3
 8010784:	2300      	movs	r3, #0
 8010786:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010788:	2300      	movs	r3, #0
 801078a:	613b      	str	r3, [r7, #16]
 801078c:	e043      	b.n	8010816 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801078e:	693b      	ldr	r3, [r7, #16]
 8010790:	015a      	lsls	r2, r3, #5
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	4413      	add	r3, r2
 8010796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80107a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80107a4:	d118      	bne.n	80107d8 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80107a6:	693b      	ldr	r3, [r7, #16]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d10a      	bne.n	80107c2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80107ac:	693b      	ldr	r3, [r7, #16]
 80107ae:	015a      	lsls	r2, r3, #5
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	4413      	add	r3, r2
 80107b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107b8:	461a      	mov	r2, r3
 80107ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80107be:	6013      	str	r3, [r2, #0]
 80107c0:	e013      	b.n	80107ea <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	015a      	lsls	r2, r3, #5
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	4413      	add	r3, r2
 80107ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107ce:	461a      	mov	r2, r3
 80107d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80107d4:	6013      	str	r3, [r2, #0]
 80107d6:	e008      	b.n	80107ea <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	015a      	lsls	r2, r3, #5
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	4413      	add	r3, r2
 80107e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107e4:	461a      	mov	r2, r3
 80107e6:	2300      	movs	r3, #0
 80107e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	015a      	lsls	r2, r3, #5
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	4413      	add	r3, r2
 80107f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107f6:	461a      	mov	r2, r3
 80107f8:	2300      	movs	r3, #0
 80107fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80107fc:	693b      	ldr	r3, [r7, #16]
 80107fe:	015a      	lsls	r2, r3, #5
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	4413      	add	r3, r2
 8010804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010808:	461a      	mov	r2, r3
 801080a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801080e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	3301      	adds	r3, #1
 8010814:	613b      	str	r3, [r7, #16]
 8010816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010818:	693a      	ldr	r2, [r7, #16]
 801081a:	429a      	cmp	r2, r3
 801081c:	d3b7      	bcc.n	801078e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801081e:	2300      	movs	r3, #0
 8010820:	613b      	str	r3, [r7, #16]
 8010822:	e043      	b.n	80108ac <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	015a      	lsls	r2, r3, #5
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	4413      	add	r3, r2
 801082c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010836:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801083a:	d118      	bne.n	801086e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d10a      	bne.n	8010858 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	015a      	lsls	r2, r3, #5
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	4413      	add	r3, r2
 801084a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801084e:	461a      	mov	r2, r3
 8010850:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010854:	6013      	str	r3, [r2, #0]
 8010856:	e013      	b.n	8010880 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	015a      	lsls	r2, r3, #5
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	4413      	add	r3, r2
 8010860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010864:	461a      	mov	r2, r3
 8010866:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801086a:	6013      	str	r3, [r2, #0]
 801086c:	e008      	b.n	8010880 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801086e:	693b      	ldr	r3, [r7, #16]
 8010870:	015a      	lsls	r2, r3, #5
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	4413      	add	r3, r2
 8010876:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801087a:	461a      	mov	r2, r3
 801087c:	2300      	movs	r3, #0
 801087e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010880:	693b      	ldr	r3, [r7, #16]
 8010882:	015a      	lsls	r2, r3, #5
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	4413      	add	r3, r2
 8010888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801088c:	461a      	mov	r2, r3
 801088e:	2300      	movs	r3, #0
 8010890:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	015a      	lsls	r2, r3, #5
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	4413      	add	r3, r2
 801089a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801089e:	461a      	mov	r2, r3
 80108a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80108a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	3301      	adds	r3, #1
 80108aa:	613b      	str	r3, [r7, #16]
 80108ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ae:	693a      	ldr	r2, [r7, #16]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d3b7      	bcc.n	8010824 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80108ba:	691b      	ldr	r3, [r3, #16]
 80108bc:	68fa      	ldr	r2, [r7, #12]
 80108be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80108c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80108c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2200      	movs	r2, #0
 80108cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80108d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80108d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d105      	bne.n	80108e8 <USB_DevInit+0x240>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	699b      	ldr	r3, [r3, #24]
 80108e0:	f043 0210 	orr.w	r2, r3, #16
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	699a      	ldr	r2, [r3, #24]
 80108ec:	4b0f      	ldr	r3, [pc, #60]	@ (801092c <USB_DevInit+0x284>)
 80108ee:	4313      	orrs	r3, r2
 80108f0:	687a      	ldr	r2, [r7, #4]
 80108f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80108f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d005      	beq.n	8010906 <USB_DevInit+0x25e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	699b      	ldr	r3, [r3, #24]
 80108fe:	f043 0208 	orr.w	r2, r3, #8
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010908:	2b01      	cmp	r3, #1
 801090a:	d107      	bne.n	801091c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	699b      	ldr	r3, [r3, #24]
 8010910:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010914:	f043 0304 	orr.w	r3, r3, #4
 8010918:	687a      	ldr	r2, [r7, #4]
 801091a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801091c:	7dfb      	ldrb	r3, [r7, #23]
}
 801091e:	4618      	mov	r0, r3
 8010920:	3718      	adds	r7, #24
 8010922:	46bd      	mov	sp, r7
 8010924:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010928:	b004      	add	sp, #16
 801092a:	4770      	bx	lr
 801092c:	803c3800 	.word	0x803c3800

08010930 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010930:	b480      	push	{r7}
 8010932:	b085      	sub	sp, #20
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801093a:	2300      	movs	r3, #0
 801093c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	3301      	adds	r3, #1
 8010942:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	4a13      	ldr	r2, [pc, #76]	@ (8010994 <USB_FlushTxFifo+0x64>)
 8010948:	4293      	cmp	r3, r2
 801094a:	d901      	bls.n	8010950 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801094c:	2303      	movs	r3, #3
 801094e:	e01b      	b.n	8010988 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	691b      	ldr	r3, [r3, #16]
 8010954:	2b00      	cmp	r3, #0
 8010956:	daf2      	bge.n	801093e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010958:	2300      	movs	r3, #0
 801095a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	019b      	lsls	r3, r3, #6
 8010960:	f043 0220 	orr.w	r2, r3, #32
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	3301      	adds	r3, #1
 801096c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	4a08      	ldr	r2, [pc, #32]	@ (8010994 <USB_FlushTxFifo+0x64>)
 8010972:	4293      	cmp	r3, r2
 8010974:	d901      	bls.n	801097a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010976:	2303      	movs	r3, #3
 8010978:	e006      	b.n	8010988 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	691b      	ldr	r3, [r3, #16]
 801097e:	f003 0320 	and.w	r3, r3, #32
 8010982:	2b20      	cmp	r3, #32
 8010984:	d0f0      	beq.n	8010968 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010986:	2300      	movs	r3, #0
}
 8010988:	4618      	mov	r0, r3
 801098a:	3714      	adds	r7, #20
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr
 8010994:	00030d40 	.word	0x00030d40

08010998 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010998:	b480      	push	{r7}
 801099a:	b085      	sub	sp, #20
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80109a0:	2300      	movs	r3, #0
 80109a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	3301      	adds	r3, #1
 80109a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	4a11      	ldr	r2, [pc, #68]	@ (80109f4 <USB_FlushRxFifo+0x5c>)
 80109ae:	4293      	cmp	r3, r2
 80109b0:	d901      	bls.n	80109b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80109b2:	2303      	movs	r3, #3
 80109b4:	e018      	b.n	80109e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	691b      	ldr	r3, [r3, #16]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	daf2      	bge.n	80109a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80109be:	2300      	movs	r3, #0
 80109c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2210      	movs	r2, #16
 80109c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	3301      	adds	r3, #1
 80109cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	4a08      	ldr	r2, [pc, #32]	@ (80109f4 <USB_FlushRxFifo+0x5c>)
 80109d2:	4293      	cmp	r3, r2
 80109d4:	d901      	bls.n	80109da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80109d6:	2303      	movs	r3, #3
 80109d8:	e006      	b.n	80109e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	691b      	ldr	r3, [r3, #16]
 80109de:	f003 0310 	and.w	r3, r3, #16
 80109e2:	2b10      	cmp	r3, #16
 80109e4:	d0f0      	beq.n	80109c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80109e6:	2300      	movs	r3, #0
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3714      	adds	r7, #20
 80109ec:	46bd      	mov	sp, r7
 80109ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f2:	4770      	bx	lr
 80109f4:	00030d40 	.word	0x00030d40

080109f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80109f8:	b480      	push	{r7}
 80109fa:	b085      	sub	sp, #20
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	460b      	mov	r3, r1
 8010a02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a0e:	681a      	ldr	r2, [r3, #0]
 8010a10:	78fb      	ldrb	r3, [r7, #3]
 8010a12:	68f9      	ldr	r1, [r7, #12]
 8010a14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010a18:	4313      	orrs	r3, r2
 8010a1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010a1c:	2300      	movs	r3, #0
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3714      	adds	r7, #20
 8010a22:	46bd      	mov	sp, r7
 8010a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a28:	4770      	bx	lr

08010a2a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8010a2a:	b480      	push	{r7}
 8010a2c:	b087      	sub	sp, #28
 8010a2e:	af00      	add	r7, sp, #0
 8010a30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a3c:	689b      	ldr	r3, [r3, #8]
 8010a3e:	f003 0306 	and.w	r3, r3, #6
 8010a42:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d102      	bne.n	8010a50 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	75fb      	strb	r3, [r7, #23]
 8010a4e:	e00a      	b.n	8010a66 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	2b02      	cmp	r3, #2
 8010a54:	d002      	beq.n	8010a5c <USB_GetDevSpeed+0x32>
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2b06      	cmp	r3, #6
 8010a5a:	d102      	bne.n	8010a62 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010a5c:	2302      	movs	r3, #2
 8010a5e:	75fb      	strb	r3, [r7, #23]
 8010a60:	e001      	b.n	8010a66 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010a62:	230f      	movs	r3, #15
 8010a64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a68:	4618      	mov	r0, r3
 8010a6a:	371c      	adds	r7, #28
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a72:	4770      	bx	lr

08010a74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010a74:	b480      	push	{r7}
 8010a76:	b085      	sub	sp, #20
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	781b      	ldrb	r3, [r3, #0]
 8010a86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	785b      	ldrb	r3, [r3, #1]
 8010a8c:	2b01      	cmp	r3, #1
 8010a8e:	d13a      	bne.n	8010b06 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a96:	69da      	ldr	r2, [r3, #28]
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	781b      	ldrb	r3, [r3, #0]
 8010a9c:	f003 030f 	and.w	r3, r3, #15
 8010aa0:	2101      	movs	r1, #1
 8010aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8010aa6:	b29b      	uxth	r3, r3
 8010aa8:	68f9      	ldr	r1, [r7, #12]
 8010aaa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010aae:	4313      	orrs	r3, r2
 8010ab0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	015a      	lsls	r2, r3, #5
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	4413      	add	r3, r2
 8010aba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d155      	bne.n	8010b74 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	015a      	lsls	r2, r3, #5
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	4413      	add	r3, r2
 8010ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ad4:	681a      	ldr	r2, [r3, #0]
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	689b      	ldr	r3, [r3, #8]
 8010ada:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	791b      	ldrb	r3, [r3, #4]
 8010ae2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010ae4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010ae6:	68bb      	ldr	r3, [r7, #8]
 8010ae8:	059b      	lsls	r3, r3, #22
 8010aea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010aec:	4313      	orrs	r3, r2
 8010aee:	68ba      	ldr	r2, [r7, #8]
 8010af0:	0151      	lsls	r1, r2, #5
 8010af2:	68fa      	ldr	r2, [r7, #12]
 8010af4:	440a      	add	r2, r1
 8010af6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010afe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010b02:	6013      	str	r3, [r2, #0]
 8010b04:	e036      	b.n	8010b74 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b0c:	69da      	ldr	r2, [r3, #28]
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	f003 030f 	and.w	r3, r3, #15
 8010b16:	2101      	movs	r1, #1
 8010b18:	fa01 f303 	lsl.w	r3, r1, r3
 8010b1c:	041b      	lsls	r3, r3, #16
 8010b1e:	68f9      	ldr	r1, [r7, #12]
 8010b20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010b24:	4313      	orrs	r3, r2
 8010b26:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	015a      	lsls	r2, r3, #5
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	4413      	add	r3, r2
 8010b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d11a      	bne.n	8010b74 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	015a      	lsls	r2, r3, #5
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	4413      	add	r3, r2
 8010b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b4a:	681a      	ldr	r2, [r3, #0]
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	689b      	ldr	r3, [r3, #8]
 8010b50:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	791b      	ldrb	r3, [r3, #4]
 8010b58:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010b5a:	430b      	orrs	r3, r1
 8010b5c:	4313      	orrs	r3, r2
 8010b5e:	68ba      	ldr	r2, [r7, #8]
 8010b60:	0151      	lsls	r1, r2, #5
 8010b62:	68fa      	ldr	r2, [r7, #12]
 8010b64:	440a      	add	r2, r1
 8010b66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010b72:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010b74:	2300      	movs	r3, #0
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	3714      	adds	r7, #20
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr
	...

08010b84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010b84:	b480      	push	{r7}
 8010b86:	b085      	sub	sp, #20
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
 8010b8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	781b      	ldrb	r3, [r3, #0]
 8010b96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010b98:	683b      	ldr	r3, [r7, #0]
 8010b9a:	785b      	ldrb	r3, [r3, #1]
 8010b9c:	2b01      	cmp	r3, #1
 8010b9e:	d161      	bne.n	8010c64 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	015a      	lsls	r2, r3, #5
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	4413      	add	r3, r2
 8010ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010bb6:	d11f      	bne.n	8010bf8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	015a      	lsls	r2, r3, #5
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	4413      	add	r3, r2
 8010bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	68ba      	ldr	r2, [r7, #8]
 8010bc8:	0151      	lsls	r1, r2, #5
 8010bca:	68fa      	ldr	r2, [r7, #12]
 8010bcc:	440a      	add	r2, r1
 8010bce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010bd2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010bd6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	015a      	lsls	r2, r3, #5
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	4413      	add	r3, r2
 8010be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	68ba      	ldr	r2, [r7, #8]
 8010be8:	0151      	lsls	r1, r2, #5
 8010bea:	68fa      	ldr	r2, [r7, #12]
 8010bec:	440a      	add	r2, r1
 8010bee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010bf2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010bf6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010bfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	f003 030f 	and.w	r3, r3, #15
 8010c08:	2101      	movs	r1, #1
 8010c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8010c0e:	b29b      	uxth	r3, r3
 8010c10:	43db      	mvns	r3, r3
 8010c12:	68f9      	ldr	r1, [r7, #12]
 8010c14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010c18:	4013      	ands	r3, r2
 8010c1a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c22:	69da      	ldr	r2, [r3, #28]
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	f003 030f 	and.w	r3, r3, #15
 8010c2c:	2101      	movs	r1, #1
 8010c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8010c32:	b29b      	uxth	r3, r3
 8010c34:	43db      	mvns	r3, r3
 8010c36:	68f9      	ldr	r1, [r7, #12]
 8010c38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010c3c:	4013      	ands	r3, r2
 8010c3e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	015a      	lsls	r2, r3, #5
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	4413      	add	r3, r2
 8010c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c4c:	681a      	ldr	r2, [r3, #0]
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	0159      	lsls	r1, r3, #5
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	440b      	add	r3, r1
 8010c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c5a:	4619      	mov	r1, r3
 8010c5c:	4b35      	ldr	r3, [pc, #212]	@ (8010d34 <USB_DeactivateEndpoint+0x1b0>)
 8010c5e:	4013      	ands	r3, r2
 8010c60:	600b      	str	r3, [r1, #0]
 8010c62:	e060      	b.n	8010d26 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	015a      	lsls	r2, r3, #5
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	4413      	add	r3, r2
 8010c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010c76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010c7a:	d11f      	bne.n	8010cbc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	015a      	lsls	r2, r3, #5
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	4413      	add	r3, r2
 8010c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	68ba      	ldr	r2, [r7, #8]
 8010c8c:	0151      	lsls	r1, r2, #5
 8010c8e:	68fa      	ldr	r2, [r7, #12]
 8010c90:	440a      	add	r2, r1
 8010c92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010c96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010c9a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	015a      	lsls	r2, r3, #5
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	4413      	add	r3, r2
 8010ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	68ba      	ldr	r2, [r7, #8]
 8010cac:	0151      	lsls	r1, r2, #5
 8010cae:	68fa      	ldr	r2, [r7, #12]
 8010cb0:	440a      	add	r2, r1
 8010cb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010cb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010cba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010cc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	781b      	ldrb	r3, [r3, #0]
 8010cc8:	f003 030f 	and.w	r3, r3, #15
 8010ccc:	2101      	movs	r1, #1
 8010cce:	fa01 f303 	lsl.w	r3, r1, r3
 8010cd2:	041b      	lsls	r3, r3, #16
 8010cd4:	43db      	mvns	r3, r3
 8010cd6:	68f9      	ldr	r1, [r7, #12]
 8010cd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010cdc:	4013      	ands	r3, r2
 8010cde:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010ce6:	69da      	ldr	r2, [r3, #28]
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	f003 030f 	and.w	r3, r3, #15
 8010cf0:	2101      	movs	r1, #1
 8010cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8010cf6:	041b      	lsls	r3, r3, #16
 8010cf8:	43db      	mvns	r3, r3
 8010cfa:	68f9      	ldr	r1, [r7, #12]
 8010cfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010d00:	4013      	ands	r3, r2
 8010d02:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	015a      	lsls	r2, r3, #5
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	4413      	add	r3, r2
 8010d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d10:	681a      	ldr	r2, [r3, #0]
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	0159      	lsls	r1, r3, #5
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	440b      	add	r3, r1
 8010d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d1e:	4619      	mov	r1, r3
 8010d20:	4b05      	ldr	r3, [pc, #20]	@ (8010d38 <USB_DeactivateEndpoint+0x1b4>)
 8010d22:	4013      	ands	r3, r2
 8010d24:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010d26:	2300      	movs	r3, #0
}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	3714      	adds	r7, #20
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d32:	4770      	bx	lr
 8010d34:	ec337800 	.word	0xec337800
 8010d38:	eff37800 	.word	0xeff37800

08010d3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b08a      	sub	sp, #40	@ 0x28
 8010d40:	af02      	add	r7, sp, #8
 8010d42:	60f8      	str	r0, [r7, #12]
 8010d44:	60b9      	str	r1, [r7, #8]
 8010d46:	4613      	mov	r3, r2
 8010d48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010d4e:	68bb      	ldr	r3, [r7, #8]
 8010d50:	781b      	ldrb	r3, [r3, #0]
 8010d52:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	785b      	ldrb	r3, [r3, #1]
 8010d58:	2b01      	cmp	r3, #1
 8010d5a:	f040 817a 	bne.w	8011052 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	691b      	ldr	r3, [r3, #16]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d132      	bne.n	8010dcc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010d66:	69bb      	ldr	r3, [r7, #24]
 8010d68:	015a      	lsls	r2, r3, #5
 8010d6a:	69fb      	ldr	r3, [r7, #28]
 8010d6c:	4413      	add	r3, r2
 8010d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d72:	691b      	ldr	r3, [r3, #16]
 8010d74:	69ba      	ldr	r2, [r7, #24]
 8010d76:	0151      	lsls	r1, r2, #5
 8010d78:	69fa      	ldr	r2, [r7, #28]
 8010d7a:	440a      	add	r2, r1
 8010d7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010d80:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8010d84:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8010d88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010d8a:	69bb      	ldr	r3, [r7, #24]
 8010d8c:	015a      	lsls	r2, r3, #5
 8010d8e:	69fb      	ldr	r3, [r7, #28]
 8010d90:	4413      	add	r3, r2
 8010d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d96:	691b      	ldr	r3, [r3, #16]
 8010d98:	69ba      	ldr	r2, [r7, #24]
 8010d9a:	0151      	lsls	r1, r2, #5
 8010d9c:	69fa      	ldr	r2, [r7, #28]
 8010d9e:	440a      	add	r2, r1
 8010da0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010da4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010da8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010daa:	69bb      	ldr	r3, [r7, #24]
 8010dac:	015a      	lsls	r2, r3, #5
 8010dae:	69fb      	ldr	r3, [r7, #28]
 8010db0:	4413      	add	r3, r2
 8010db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010db6:	691b      	ldr	r3, [r3, #16]
 8010db8:	69ba      	ldr	r2, [r7, #24]
 8010dba:	0151      	lsls	r1, r2, #5
 8010dbc:	69fa      	ldr	r2, [r7, #28]
 8010dbe:	440a      	add	r2, r1
 8010dc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010dc4:	0cdb      	lsrs	r3, r3, #19
 8010dc6:	04db      	lsls	r3, r3, #19
 8010dc8:	6113      	str	r3, [r2, #16]
 8010dca:	e092      	b.n	8010ef2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010dcc:	69bb      	ldr	r3, [r7, #24]
 8010dce:	015a      	lsls	r2, r3, #5
 8010dd0:	69fb      	ldr	r3, [r7, #28]
 8010dd2:	4413      	add	r3, r2
 8010dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010dd8:	691b      	ldr	r3, [r3, #16]
 8010dda:	69ba      	ldr	r2, [r7, #24]
 8010ddc:	0151      	lsls	r1, r2, #5
 8010dde:	69fa      	ldr	r2, [r7, #28]
 8010de0:	440a      	add	r2, r1
 8010de2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010de6:	0cdb      	lsrs	r3, r3, #19
 8010de8:	04db      	lsls	r3, r3, #19
 8010dea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010dec:	69bb      	ldr	r3, [r7, #24]
 8010dee:	015a      	lsls	r2, r3, #5
 8010df0:	69fb      	ldr	r3, [r7, #28]
 8010df2:	4413      	add	r3, r2
 8010df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010df8:	691b      	ldr	r3, [r3, #16]
 8010dfa:	69ba      	ldr	r2, [r7, #24]
 8010dfc:	0151      	lsls	r1, r2, #5
 8010dfe:	69fa      	ldr	r2, [r7, #28]
 8010e00:	440a      	add	r2, r1
 8010e02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e06:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8010e0a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8010e0e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8010e10:	69bb      	ldr	r3, [r7, #24]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d11a      	bne.n	8010e4c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	691a      	ldr	r2, [r3, #16]
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	689b      	ldr	r3, [r3, #8]
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d903      	bls.n	8010e2a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	689a      	ldr	r2, [r3, #8]
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010e2a:	69bb      	ldr	r3, [r7, #24]
 8010e2c:	015a      	lsls	r2, r3, #5
 8010e2e:	69fb      	ldr	r3, [r7, #28]
 8010e30:	4413      	add	r3, r2
 8010e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e36:	691b      	ldr	r3, [r3, #16]
 8010e38:	69ba      	ldr	r2, [r7, #24]
 8010e3a:	0151      	lsls	r1, r2, #5
 8010e3c:	69fa      	ldr	r2, [r7, #28]
 8010e3e:	440a      	add	r2, r1
 8010e40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010e48:	6113      	str	r3, [r2, #16]
 8010e4a:	e01b      	b.n	8010e84 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010e4c:	69bb      	ldr	r3, [r7, #24]
 8010e4e:	015a      	lsls	r2, r3, #5
 8010e50:	69fb      	ldr	r3, [r7, #28]
 8010e52:	4413      	add	r3, r2
 8010e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e58:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	6919      	ldr	r1, [r3, #16]
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	689b      	ldr	r3, [r3, #8]
 8010e62:	440b      	add	r3, r1
 8010e64:	1e59      	subs	r1, r3, #1
 8010e66:	68bb      	ldr	r3, [r7, #8]
 8010e68:	689b      	ldr	r3, [r3, #8]
 8010e6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8010e6e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010e70:	4ba2      	ldr	r3, [pc, #648]	@ (80110fc <USB_EPStartXfer+0x3c0>)
 8010e72:	400b      	ands	r3, r1
 8010e74:	69b9      	ldr	r1, [r7, #24]
 8010e76:	0148      	lsls	r0, r1, #5
 8010e78:	69f9      	ldr	r1, [r7, #28]
 8010e7a:	4401      	add	r1, r0
 8010e7c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010e80:	4313      	orrs	r3, r2
 8010e82:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010e84:	69bb      	ldr	r3, [r7, #24]
 8010e86:	015a      	lsls	r2, r3, #5
 8010e88:	69fb      	ldr	r3, [r7, #28]
 8010e8a:	4413      	add	r3, r2
 8010e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e90:	691a      	ldr	r2, [r3, #16]
 8010e92:	68bb      	ldr	r3, [r7, #8]
 8010e94:	691b      	ldr	r3, [r3, #16]
 8010e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010e9a:	69b9      	ldr	r1, [r7, #24]
 8010e9c:	0148      	lsls	r0, r1, #5
 8010e9e:	69f9      	ldr	r1, [r7, #28]
 8010ea0:	4401      	add	r1, r0
 8010ea2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010ea6:	4313      	orrs	r3, r2
 8010ea8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	791b      	ldrb	r3, [r3, #4]
 8010eae:	2b01      	cmp	r3, #1
 8010eb0:	d11f      	bne.n	8010ef2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010eb2:	69bb      	ldr	r3, [r7, #24]
 8010eb4:	015a      	lsls	r2, r3, #5
 8010eb6:	69fb      	ldr	r3, [r7, #28]
 8010eb8:	4413      	add	r3, r2
 8010eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ebe:	691b      	ldr	r3, [r3, #16]
 8010ec0:	69ba      	ldr	r2, [r7, #24]
 8010ec2:	0151      	lsls	r1, r2, #5
 8010ec4:	69fa      	ldr	r2, [r7, #28]
 8010ec6:	440a      	add	r2, r1
 8010ec8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010ecc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8010ed0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010ed2:	69bb      	ldr	r3, [r7, #24]
 8010ed4:	015a      	lsls	r2, r3, #5
 8010ed6:	69fb      	ldr	r3, [r7, #28]
 8010ed8:	4413      	add	r3, r2
 8010eda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ede:	691b      	ldr	r3, [r3, #16]
 8010ee0:	69ba      	ldr	r2, [r7, #24]
 8010ee2:	0151      	lsls	r1, r2, #5
 8010ee4:	69fa      	ldr	r2, [r7, #28]
 8010ee6:	440a      	add	r2, r1
 8010ee8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010eec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010ef0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010ef2:	79fb      	ldrb	r3, [r7, #7]
 8010ef4:	2b01      	cmp	r3, #1
 8010ef6:	d14b      	bne.n	8010f90 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	69db      	ldr	r3, [r3, #28]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d009      	beq.n	8010f14 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010f00:	69bb      	ldr	r3, [r7, #24]
 8010f02:	015a      	lsls	r2, r3, #5
 8010f04:	69fb      	ldr	r3, [r7, #28]
 8010f06:	4413      	add	r3, r2
 8010f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	69db      	ldr	r3, [r3, #28]
 8010f12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	791b      	ldrb	r3, [r3, #4]
 8010f18:	2b01      	cmp	r3, #1
 8010f1a:	d128      	bne.n	8010f6e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010f1c:	69fb      	ldr	r3, [r7, #28]
 8010f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f22:	689b      	ldr	r3, [r3, #8]
 8010f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d110      	bne.n	8010f4e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010f2c:	69bb      	ldr	r3, [r7, #24]
 8010f2e:	015a      	lsls	r2, r3, #5
 8010f30:	69fb      	ldr	r3, [r7, #28]
 8010f32:	4413      	add	r3, r2
 8010f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	69ba      	ldr	r2, [r7, #24]
 8010f3c:	0151      	lsls	r1, r2, #5
 8010f3e:	69fa      	ldr	r2, [r7, #28]
 8010f40:	440a      	add	r2, r1
 8010f42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010f46:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010f4a:	6013      	str	r3, [r2, #0]
 8010f4c:	e00f      	b.n	8010f6e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010f4e:	69bb      	ldr	r3, [r7, #24]
 8010f50:	015a      	lsls	r2, r3, #5
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	4413      	add	r3, r2
 8010f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	69ba      	ldr	r2, [r7, #24]
 8010f5e:	0151      	lsls	r1, r2, #5
 8010f60:	69fa      	ldr	r2, [r7, #28]
 8010f62:	440a      	add	r2, r1
 8010f64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010f6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010f6e:	69bb      	ldr	r3, [r7, #24]
 8010f70:	015a      	lsls	r2, r3, #5
 8010f72:	69fb      	ldr	r3, [r7, #28]
 8010f74:	4413      	add	r3, r2
 8010f76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	69ba      	ldr	r2, [r7, #24]
 8010f7e:	0151      	lsls	r1, r2, #5
 8010f80:	69fa      	ldr	r2, [r7, #28]
 8010f82:	440a      	add	r2, r1
 8010f84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010f88:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010f8c:	6013      	str	r3, [r2, #0]
 8010f8e:	e165      	b.n	801125c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010f90:	69bb      	ldr	r3, [r7, #24]
 8010f92:	015a      	lsls	r2, r3, #5
 8010f94:	69fb      	ldr	r3, [r7, #28]
 8010f96:	4413      	add	r3, r2
 8010f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	69ba      	ldr	r2, [r7, #24]
 8010fa0:	0151      	lsls	r1, r2, #5
 8010fa2:	69fa      	ldr	r2, [r7, #28]
 8010fa4:	440a      	add	r2, r1
 8010fa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010faa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010fae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	791b      	ldrb	r3, [r3, #4]
 8010fb4:	2b01      	cmp	r3, #1
 8010fb6:	d015      	beq.n	8010fe4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010fb8:	68bb      	ldr	r3, [r7, #8]
 8010fba:	691b      	ldr	r3, [r3, #16]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	f000 814d 	beq.w	801125c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010fc2:	69fb      	ldr	r3, [r7, #28]
 8010fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010fc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	781b      	ldrb	r3, [r3, #0]
 8010fce:	f003 030f 	and.w	r3, r3, #15
 8010fd2:	2101      	movs	r1, #1
 8010fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8010fd8:	69f9      	ldr	r1, [r7, #28]
 8010fda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010fde:	4313      	orrs	r3, r2
 8010fe0:	634b      	str	r3, [r1, #52]	@ 0x34
 8010fe2:	e13b      	b.n	801125c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010fe4:	69fb      	ldr	r3, [r7, #28]
 8010fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010fea:	689b      	ldr	r3, [r3, #8]
 8010fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d110      	bne.n	8011016 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010ff4:	69bb      	ldr	r3, [r7, #24]
 8010ff6:	015a      	lsls	r2, r3, #5
 8010ff8:	69fb      	ldr	r3, [r7, #28]
 8010ffa:	4413      	add	r3, r2
 8010ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	69ba      	ldr	r2, [r7, #24]
 8011004:	0151      	lsls	r1, r2, #5
 8011006:	69fa      	ldr	r2, [r7, #28]
 8011008:	440a      	add	r2, r1
 801100a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801100e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011012:	6013      	str	r3, [r2, #0]
 8011014:	e00f      	b.n	8011036 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011016:	69bb      	ldr	r3, [r7, #24]
 8011018:	015a      	lsls	r2, r3, #5
 801101a:	69fb      	ldr	r3, [r7, #28]
 801101c:	4413      	add	r3, r2
 801101e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	69ba      	ldr	r2, [r7, #24]
 8011026:	0151      	lsls	r1, r2, #5
 8011028:	69fa      	ldr	r2, [r7, #28]
 801102a:	440a      	add	r2, r1
 801102c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011034:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011036:	68bb      	ldr	r3, [r7, #8]
 8011038:	68d9      	ldr	r1, [r3, #12]
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	781a      	ldrb	r2, [r3, #0]
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	691b      	ldr	r3, [r3, #16]
 8011042:	b298      	uxth	r0, r3
 8011044:	79fb      	ldrb	r3, [r7, #7]
 8011046:	9300      	str	r3, [sp, #0]
 8011048:	4603      	mov	r3, r0
 801104a:	68f8      	ldr	r0, [r7, #12]
 801104c:	f000 f9b8 	bl	80113c0 <USB_WritePacket>
 8011050:	e104      	b.n	801125c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011052:	69bb      	ldr	r3, [r7, #24]
 8011054:	015a      	lsls	r2, r3, #5
 8011056:	69fb      	ldr	r3, [r7, #28]
 8011058:	4413      	add	r3, r2
 801105a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801105e:	691b      	ldr	r3, [r3, #16]
 8011060:	69ba      	ldr	r2, [r7, #24]
 8011062:	0151      	lsls	r1, r2, #5
 8011064:	69fa      	ldr	r2, [r7, #28]
 8011066:	440a      	add	r2, r1
 8011068:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801106c:	0cdb      	lsrs	r3, r3, #19
 801106e:	04db      	lsls	r3, r3, #19
 8011070:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011072:	69bb      	ldr	r3, [r7, #24]
 8011074:	015a      	lsls	r2, r3, #5
 8011076:	69fb      	ldr	r3, [r7, #28]
 8011078:	4413      	add	r3, r2
 801107a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801107e:	691b      	ldr	r3, [r3, #16]
 8011080:	69ba      	ldr	r2, [r7, #24]
 8011082:	0151      	lsls	r1, r2, #5
 8011084:	69fa      	ldr	r2, [r7, #28]
 8011086:	440a      	add	r2, r1
 8011088:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801108c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8011090:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8011094:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8011096:	69bb      	ldr	r3, [r7, #24]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d131      	bne.n	8011100 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 801109c:	68bb      	ldr	r3, [r7, #8]
 801109e:	691b      	ldr	r3, [r3, #16]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d003      	beq.n	80110ac <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	689a      	ldr	r2, [r3, #8]
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	689a      	ldr	r2, [r3, #8]
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80110b4:	69bb      	ldr	r3, [r7, #24]
 80110b6:	015a      	lsls	r2, r3, #5
 80110b8:	69fb      	ldr	r3, [r7, #28]
 80110ba:	4413      	add	r3, r2
 80110bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110c0:	691a      	ldr	r2, [r3, #16]
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	6a1b      	ldr	r3, [r3, #32]
 80110c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80110ca:	69b9      	ldr	r1, [r7, #24]
 80110cc:	0148      	lsls	r0, r1, #5
 80110ce:	69f9      	ldr	r1, [r7, #28]
 80110d0:	4401      	add	r1, r0
 80110d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80110d6:	4313      	orrs	r3, r2
 80110d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80110da:	69bb      	ldr	r3, [r7, #24]
 80110dc:	015a      	lsls	r2, r3, #5
 80110de:	69fb      	ldr	r3, [r7, #28]
 80110e0:	4413      	add	r3, r2
 80110e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110e6:	691b      	ldr	r3, [r3, #16]
 80110e8:	69ba      	ldr	r2, [r7, #24]
 80110ea:	0151      	lsls	r1, r2, #5
 80110ec:	69fa      	ldr	r2, [r7, #28]
 80110ee:	440a      	add	r2, r1
 80110f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80110f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80110f8:	6113      	str	r3, [r2, #16]
 80110fa:	e061      	b.n	80111c0 <USB_EPStartXfer+0x484>
 80110fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	691b      	ldr	r3, [r3, #16]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d123      	bne.n	8011150 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011108:	69bb      	ldr	r3, [r7, #24]
 801110a:	015a      	lsls	r2, r3, #5
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	4413      	add	r3, r2
 8011110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011114:	691a      	ldr	r2, [r3, #16]
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	689b      	ldr	r3, [r3, #8]
 801111a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801111e:	69b9      	ldr	r1, [r7, #24]
 8011120:	0148      	lsls	r0, r1, #5
 8011122:	69f9      	ldr	r1, [r7, #28]
 8011124:	4401      	add	r1, r0
 8011126:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801112a:	4313      	orrs	r3, r2
 801112c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801112e:	69bb      	ldr	r3, [r7, #24]
 8011130:	015a      	lsls	r2, r3, #5
 8011132:	69fb      	ldr	r3, [r7, #28]
 8011134:	4413      	add	r3, r2
 8011136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801113a:	691b      	ldr	r3, [r3, #16]
 801113c:	69ba      	ldr	r2, [r7, #24]
 801113e:	0151      	lsls	r1, r2, #5
 8011140:	69fa      	ldr	r2, [r7, #28]
 8011142:	440a      	add	r2, r1
 8011144:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011148:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801114c:	6113      	str	r3, [r2, #16]
 801114e:	e037      	b.n	80111c0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	691a      	ldr	r2, [r3, #16]
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	689b      	ldr	r3, [r3, #8]
 8011158:	4413      	add	r3, r2
 801115a:	1e5a      	subs	r2, r3, #1
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	689b      	ldr	r3, [r3, #8]
 8011160:	fbb2 f3f3 	udiv	r3, r2, r3
 8011164:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	689b      	ldr	r3, [r3, #8]
 801116a:	8afa      	ldrh	r2, [r7, #22]
 801116c:	fb03 f202 	mul.w	r2, r3, r2
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011174:	69bb      	ldr	r3, [r7, #24]
 8011176:	015a      	lsls	r2, r3, #5
 8011178:	69fb      	ldr	r3, [r7, #28]
 801117a:	4413      	add	r3, r2
 801117c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011180:	691a      	ldr	r2, [r3, #16]
 8011182:	8afb      	ldrh	r3, [r7, #22]
 8011184:	04d9      	lsls	r1, r3, #19
 8011186:	4b38      	ldr	r3, [pc, #224]	@ (8011268 <USB_EPStartXfer+0x52c>)
 8011188:	400b      	ands	r3, r1
 801118a:	69b9      	ldr	r1, [r7, #24]
 801118c:	0148      	lsls	r0, r1, #5
 801118e:	69f9      	ldr	r1, [r7, #28]
 8011190:	4401      	add	r1, r0
 8011192:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011196:	4313      	orrs	r3, r2
 8011198:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801119a:	69bb      	ldr	r3, [r7, #24]
 801119c:	015a      	lsls	r2, r3, #5
 801119e:	69fb      	ldr	r3, [r7, #28]
 80111a0:	4413      	add	r3, r2
 80111a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111a6:	691a      	ldr	r2, [r3, #16]
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	6a1b      	ldr	r3, [r3, #32]
 80111ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80111b0:	69b9      	ldr	r1, [r7, #24]
 80111b2:	0148      	lsls	r0, r1, #5
 80111b4:	69f9      	ldr	r1, [r7, #28]
 80111b6:	4401      	add	r1, r0
 80111b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80111bc:	4313      	orrs	r3, r2
 80111be:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80111c0:	79fb      	ldrb	r3, [r7, #7]
 80111c2:	2b01      	cmp	r3, #1
 80111c4:	d10d      	bne.n	80111e2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	68db      	ldr	r3, [r3, #12]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d009      	beq.n	80111e2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80111ce:	68bb      	ldr	r3, [r7, #8]
 80111d0:	68d9      	ldr	r1, [r3, #12]
 80111d2:	69bb      	ldr	r3, [r7, #24]
 80111d4:	015a      	lsls	r2, r3, #5
 80111d6:	69fb      	ldr	r3, [r7, #28]
 80111d8:	4413      	add	r3, r2
 80111da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111de:	460a      	mov	r2, r1
 80111e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80111e2:	68bb      	ldr	r3, [r7, #8]
 80111e4:	791b      	ldrb	r3, [r3, #4]
 80111e6:	2b01      	cmp	r3, #1
 80111e8:	d128      	bne.n	801123c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80111ea:	69fb      	ldr	r3, [r7, #28]
 80111ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80111f0:	689b      	ldr	r3, [r3, #8]
 80111f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d110      	bne.n	801121c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80111fa:	69bb      	ldr	r3, [r7, #24]
 80111fc:	015a      	lsls	r2, r3, #5
 80111fe:	69fb      	ldr	r3, [r7, #28]
 8011200:	4413      	add	r3, r2
 8011202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	69ba      	ldr	r2, [r7, #24]
 801120a:	0151      	lsls	r1, r2, #5
 801120c:	69fa      	ldr	r2, [r7, #28]
 801120e:	440a      	add	r2, r1
 8011210:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011214:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011218:	6013      	str	r3, [r2, #0]
 801121a:	e00f      	b.n	801123c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801121c:	69bb      	ldr	r3, [r7, #24]
 801121e:	015a      	lsls	r2, r3, #5
 8011220:	69fb      	ldr	r3, [r7, #28]
 8011222:	4413      	add	r3, r2
 8011224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	69ba      	ldr	r2, [r7, #24]
 801122c:	0151      	lsls	r1, r2, #5
 801122e:	69fa      	ldr	r2, [r7, #28]
 8011230:	440a      	add	r2, r1
 8011232:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801123a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801123c:	69bb      	ldr	r3, [r7, #24]
 801123e:	015a      	lsls	r2, r3, #5
 8011240:	69fb      	ldr	r3, [r7, #28]
 8011242:	4413      	add	r3, r2
 8011244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	69ba      	ldr	r2, [r7, #24]
 801124c:	0151      	lsls	r1, r2, #5
 801124e:	69fa      	ldr	r2, [r7, #28]
 8011250:	440a      	add	r2, r1
 8011252:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011256:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801125a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801125c:	2300      	movs	r3, #0
}
 801125e:	4618      	mov	r0, r3
 8011260:	3720      	adds	r7, #32
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
 8011266:	bf00      	nop
 8011268:	1ff80000 	.word	0x1ff80000

0801126c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801126c:	b480      	push	{r7}
 801126e:	b087      	sub	sp, #28
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011276:	2300      	movs	r3, #0
 8011278:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801127a:	2300      	movs	r3, #0
 801127c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	785b      	ldrb	r3, [r3, #1]
 8011286:	2b01      	cmp	r3, #1
 8011288:	d14a      	bne.n	8011320 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	781b      	ldrb	r3, [r3, #0]
 801128e:	015a      	lsls	r2, r3, #5
 8011290:	693b      	ldr	r3, [r7, #16]
 8011292:	4413      	add	r3, r2
 8011294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801129e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80112a2:	f040 8086 	bne.w	80113b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	781b      	ldrb	r3, [r3, #0]
 80112aa:	015a      	lsls	r2, r3, #5
 80112ac:	693b      	ldr	r3, [r7, #16]
 80112ae:	4413      	add	r3, r2
 80112b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	683a      	ldr	r2, [r7, #0]
 80112b8:	7812      	ldrb	r2, [r2, #0]
 80112ba:	0151      	lsls	r1, r2, #5
 80112bc:	693a      	ldr	r2, [r7, #16]
 80112be:	440a      	add	r2, r1
 80112c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80112c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80112c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	781b      	ldrb	r3, [r3, #0]
 80112ce:	015a      	lsls	r2, r3, #5
 80112d0:	693b      	ldr	r3, [r7, #16]
 80112d2:	4413      	add	r3, r2
 80112d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	683a      	ldr	r2, [r7, #0]
 80112dc:	7812      	ldrb	r2, [r2, #0]
 80112de:	0151      	lsls	r1, r2, #5
 80112e0:	693a      	ldr	r2, [r7, #16]
 80112e2:	440a      	add	r2, r1
 80112e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80112e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80112ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	3301      	adds	r3, #1
 80112f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80112fa:	4293      	cmp	r3, r2
 80112fc:	d902      	bls.n	8011304 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80112fe:	2301      	movs	r3, #1
 8011300:	75fb      	strb	r3, [r7, #23]
          break;
 8011302:	e056      	b.n	80113b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	781b      	ldrb	r3, [r3, #0]
 8011308:	015a      	lsls	r2, r3, #5
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	4413      	add	r3, r2
 801130e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011318:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801131c:	d0e7      	beq.n	80112ee <USB_EPStopXfer+0x82>
 801131e:	e048      	b.n	80113b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	781b      	ldrb	r3, [r3, #0]
 8011324:	015a      	lsls	r2, r3, #5
 8011326:	693b      	ldr	r3, [r7, #16]
 8011328:	4413      	add	r3, r2
 801132a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011334:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011338:	d13b      	bne.n	80113b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	015a      	lsls	r2, r3, #5
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	4413      	add	r3, r2
 8011344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	683a      	ldr	r2, [r7, #0]
 801134c:	7812      	ldrb	r2, [r2, #0]
 801134e:	0151      	lsls	r1, r2, #5
 8011350:	693a      	ldr	r2, [r7, #16]
 8011352:	440a      	add	r2, r1
 8011354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011358:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801135c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	781b      	ldrb	r3, [r3, #0]
 8011362:	015a      	lsls	r2, r3, #5
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	4413      	add	r3, r2
 8011368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	683a      	ldr	r2, [r7, #0]
 8011370:	7812      	ldrb	r2, [r2, #0]
 8011372:	0151      	lsls	r1, r2, #5
 8011374:	693a      	ldr	r2, [r7, #16]
 8011376:	440a      	add	r2, r1
 8011378:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801137c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011380:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	3301      	adds	r3, #1
 8011386:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801138e:	4293      	cmp	r3, r2
 8011390:	d902      	bls.n	8011398 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8011392:	2301      	movs	r3, #1
 8011394:	75fb      	strb	r3, [r7, #23]
          break;
 8011396:	e00c      	b.n	80113b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	015a      	lsls	r2, r3, #5
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	4413      	add	r3, r2
 80113a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80113ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80113b0:	d0e7      	beq.n	8011382 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80113b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	371c      	adds	r7, #28
 80113b8:	46bd      	mov	sp, r7
 80113ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113be:	4770      	bx	lr

080113c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b089      	sub	sp, #36	@ 0x24
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	4611      	mov	r1, r2
 80113cc:	461a      	mov	r2, r3
 80113ce:	460b      	mov	r3, r1
 80113d0:	71fb      	strb	r3, [r7, #7]
 80113d2:	4613      	mov	r3, r2
 80113d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80113de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d123      	bne.n	801142e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80113e6:	88bb      	ldrh	r3, [r7, #4]
 80113e8:	3303      	adds	r3, #3
 80113ea:	089b      	lsrs	r3, r3, #2
 80113ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80113ee:	2300      	movs	r3, #0
 80113f0:	61bb      	str	r3, [r7, #24]
 80113f2:	e018      	b.n	8011426 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80113f4:	79fb      	ldrb	r3, [r7, #7]
 80113f6:	031a      	lsls	r2, r3, #12
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	4413      	add	r3, r2
 80113fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011400:	461a      	mov	r2, r3
 8011402:	69fb      	ldr	r3, [r7, #28]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011408:	69fb      	ldr	r3, [r7, #28]
 801140a:	3301      	adds	r3, #1
 801140c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801140e:	69fb      	ldr	r3, [r7, #28]
 8011410:	3301      	adds	r3, #1
 8011412:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011414:	69fb      	ldr	r3, [r7, #28]
 8011416:	3301      	adds	r3, #1
 8011418:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801141a:	69fb      	ldr	r3, [r7, #28]
 801141c:	3301      	adds	r3, #1
 801141e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011420:	69bb      	ldr	r3, [r7, #24]
 8011422:	3301      	adds	r3, #1
 8011424:	61bb      	str	r3, [r7, #24]
 8011426:	69ba      	ldr	r2, [r7, #24]
 8011428:	693b      	ldr	r3, [r7, #16]
 801142a:	429a      	cmp	r2, r3
 801142c:	d3e2      	bcc.n	80113f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801142e:	2300      	movs	r3, #0
}
 8011430:	4618      	mov	r0, r3
 8011432:	3724      	adds	r7, #36	@ 0x24
 8011434:	46bd      	mov	sp, r7
 8011436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143a:	4770      	bx	lr

0801143c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801143c:	b480      	push	{r7}
 801143e:	b08b      	sub	sp, #44	@ 0x2c
 8011440:	af00      	add	r7, sp, #0
 8011442:	60f8      	str	r0, [r7, #12]
 8011444:	60b9      	str	r1, [r7, #8]
 8011446:	4613      	mov	r3, r2
 8011448:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011452:	88fb      	ldrh	r3, [r7, #6]
 8011454:	089b      	lsrs	r3, r3, #2
 8011456:	b29b      	uxth	r3, r3
 8011458:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801145a:	88fb      	ldrh	r3, [r7, #6]
 801145c:	f003 0303 	and.w	r3, r3, #3
 8011460:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011462:	2300      	movs	r3, #0
 8011464:	623b      	str	r3, [r7, #32]
 8011466:	e014      	b.n	8011492 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011468:	69bb      	ldr	r3, [r7, #24]
 801146a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801146e:	681a      	ldr	r2, [r3, #0]
 8011470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011472:	601a      	str	r2, [r3, #0]
    pDest++;
 8011474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011476:	3301      	adds	r3, #1
 8011478:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801147c:	3301      	adds	r3, #1
 801147e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011482:	3301      	adds	r3, #1
 8011484:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011488:	3301      	adds	r3, #1
 801148a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 801148c:	6a3b      	ldr	r3, [r7, #32]
 801148e:	3301      	adds	r3, #1
 8011490:	623b      	str	r3, [r7, #32]
 8011492:	6a3a      	ldr	r2, [r7, #32]
 8011494:	697b      	ldr	r3, [r7, #20]
 8011496:	429a      	cmp	r2, r3
 8011498:	d3e6      	bcc.n	8011468 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801149a:	8bfb      	ldrh	r3, [r7, #30]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d01e      	beq.n	80114de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80114a0:	2300      	movs	r3, #0
 80114a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80114a4:	69bb      	ldr	r3, [r7, #24]
 80114a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80114aa:	461a      	mov	r2, r3
 80114ac:	f107 0310 	add.w	r3, r7, #16
 80114b0:	6812      	ldr	r2, [r2, #0]
 80114b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80114b4:	693a      	ldr	r2, [r7, #16]
 80114b6:	6a3b      	ldr	r3, [r7, #32]
 80114b8:	b2db      	uxtb	r3, r3
 80114ba:	00db      	lsls	r3, r3, #3
 80114bc:	fa22 f303 	lsr.w	r3, r2, r3
 80114c0:	b2da      	uxtb	r2, r3
 80114c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114c4:	701a      	strb	r2, [r3, #0]
      i++;
 80114c6:	6a3b      	ldr	r3, [r7, #32]
 80114c8:	3301      	adds	r3, #1
 80114ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80114cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114ce:	3301      	adds	r3, #1
 80114d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80114d2:	8bfb      	ldrh	r3, [r7, #30]
 80114d4:	3b01      	subs	r3, #1
 80114d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80114d8:	8bfb      	ldrh	r3, [r7, #30]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d1ea      	bne.n	80114b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80114de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	372c      	adds	r7, #44	@ 0x2c
 80114e4:	46bd      	mov	sp, r7
 80114e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ea:	4770      	bx	lr

080114ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80114ec:	b480      	push	{r7}
 80114ee:	b085      	sub	sp, #20
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
 80114f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	781b      	ldrb	r3, [r3, #0]
 80114fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	785b      	ldrb	r3, [r3, #1]
 8011504:	2b01      	cmp	r3, #1
 8011506:	d12c      	bne.n	8011562 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	015a      	lsls	r2, r3, #5
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	4413      	add	r3, r2
 8011510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	2b00      	cmp	r3, #0
 8011518:	db12      	blt.n	8011540 <USB_EPSetStall+0x54>
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d00f      	beq.n	8011540 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	015a      	lsls	r2, r3, #5
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	4413      	add	r3, r2
 8011528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	68ba      	ldr	r2, [r7, #8]
 8011530:	0151      	lsls	r1, r2, #5
 8011532:	68fa      	ldr	r2, [r7, #12]
 8011534:	440a      	add	r2, r1
 8011536:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801153a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801153e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	015a      	lsls	r2, r3, #5
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	4413      	add	r3, r2
 8011548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	68ba      	ldr	r2, [r7, #8]
 8011550:	0151      	lsls	r1, r2, #5
 8011552:	68fa      	ldr	r2, [r7, #12]
 8011554:	440a      	add	r2, r1
 8011556:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801155a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801155e:	6013      	str	r3, [r2, #0]
 8011560:	e02b      	b.n	80115ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011562:	68bb      	ldr	r3, [r7, #8]
 8011564:	015a      	lsls	r2, r3, #5
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	4413      	add	r3, r2
 801156a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	2b00      	cmp	r3, #0
 8011572:	db12      	blt.n	801159a <USB_EPSetStall+0xae>
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d00f      	beq.n	801159a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801157a:	68bb      	ldr	r3, [r7, #8]
 801157c:	015a      	lsls	r2, r3, #5
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	4413      	add	r3, r2
 8011582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	68ba      	ldr	r2, [r7, #8]
 801158a:	0151      	lsls	r1, r2, #5
 801158c:	68fa      	ldr	r2, [r7, #12]
 801158e:	440a      	add	r2, r1
 8011590:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011594:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011598:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	015a      	lsls	r2, r3, #5
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	4413      	add	r3, r2
 80115a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	68ba      	ldr	r2, [r7, #8]
 80115aa:	0151      	lsls	r1, r2, #5
 80115ac:	68fa      	ldr	r2, [r7, #12]
 80115ae:	440a      	add	r2, r1
 80115b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80115b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80115b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80115ba:	2300      	movs	r3, #0
}
 80115bc:	4618      	mov	r0, r3
 80115be:	3714      	adds	r7, #20
 80115c0:	46bd      	mov	sp, r7
 80115c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c6:	4770      	bx	lr

080115c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80115c8:	b480      	push	{r7}
 80115ca:	b085      	sub	sp, #20
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
 80115d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	781b      	ldrb	r3, [r3, #0]
 80115da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	785b      	ldrb	r3, [r3, #1]
 80115e0:	2b01      	cmp	r3, #1
 80115e2:	d128      	bne.n	8011636 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	015a      	lsls	r2, r3, #5
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	4413      	add	r3, r2
 80115ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	68ba      	ldr	r2, [r7, #8]
 80115f4:	0151      	lsls	r1, r2, #5
 80115f6:	68fa      	ldr	r2, [r7, #12]
 80115f8:	440a      	add	r2, r1
 80115fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80115fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011602:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	791b      	ldrb	r3, [r3, #4]
 8011608:	2b03      	cmp	r3, #3
 801160a:	d003      	beq.n	8011614 <USB_EPClearStall+0x4c>
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	791b      	ldrb	r3, [r3, #4]
 8011610:	2b02      	cmp	r3, #2
 8011612:	d138      	bne.n	8011686 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	015a      	lsls	r2, r3, #5
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	4413      	add	r3, r2
 801161c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	68ba      	ldr	r2, [r7, #8]
 8011624:	0151      	lsls	r1, r2, #5
 8011626:	68fa      	ldr	r2, [r7, #12]
 8011628:	440a      	add	r2, r1
 801162a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801162e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011632:	6013      	str	r3, [r2, #0]
 8011634:	e027      	b.n	8011686 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011636:	68bb      	ldr	r3, [r7, #8]
 8011638:	015a      	lsls	r2, r3, #5
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	4413      	add	r3, r2
 801163e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	68ba      	ldr	r2, [r7, #8]
 8011646:	0151      	lsls	r1, r2, #5
 8011648:	68fa      	ldr	r2, [r7, #12]
 801164a:	440a      	add	r2, r1
 801164c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011650:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011654:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	791b      	ldrb	r3, [r3, #4]
 801165a:	2b03      	cmp	r3, #3
 801165c:	d003      	beq.n	8011666 <USB_EPClearStall+0x9e>
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	791b      	ldrb	r3, [r3, #4]
 8011662:	2b02      	cmp	r3, #2
 8011664:	d10f      	bne.n	8011686 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011666:	68bb      	ldr	r3, [r7, #8]
 8011668:	015a      	lsls	r2, r3, #5
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	4413      	add	r3, r2
 801166e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	68ba      	ldr	r2, [r7, #8]
 8011676:	0151      	lsls	r1, r2, #5
 8011678:	68fa      	ldr	r2, [r7, #12]
 801167a:	440a      	add	r2, r1
 801167c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011684:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011686:	2300      	movs	r3, #0
}
 8011688:	4618      	mov	r0, r3
 801168a:	3714      	adds	r7, #20
 801168c:	46bd      	mov	sp, r7
 801168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011692:	4770      	bx	lr

08011694 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011694:	b480      	push	{r7}
 8011696:	b085      	sub	sp, #20
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	460b      	mov	r3, r1
 801169e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	68fa      	ldr	r2, [r7, #12]
 80116ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80116b2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80116b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80116be:	681a      	ldr	r2, [r3, #0]
 80116c0:	78fb      	ldrb	r3, [r7, #3]
 80116c2:	011b      	lsls	r3, r3, #4
 80116c4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80116c8:	68f9      	ldr	r1, [r7, #12]
 80116ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80116ce:	4313      	orrs	r3, r2
 80116d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80116d2:	2300      	movs	r3, #0
}
 80116d4:	4618      	mov	r0, r3
 80116d6:	3714      	adds	r7, #20
 80116d8:	46bd      	mov	sp, r7
 80116da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116de:	4770      	bx	lr

080116e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80116e0:	b480      	push	{r7}
 80116e2:	b085      	sub	sp, #20
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	68fa      	ldr	r2, [r7, #12]
 80116f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80116fa:	f023 0303 	bic.w	r3, r3, #3
 80116fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011706:	685b      	ldr	r3, [r3, #4]
 8011708:	68fa      	ldr	r2, [r7, #12]
 801170a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801170e:	f023 0302 	bic.w	r3, r3, #2
 8011712:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011714:	2300      	movs	r3, #0
}
 8011716:	4618      	mov	r0, r3
 8011718:	3714      	adds	r7, #20
 801171a:	46bd      	mov	sp, r7
 801171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011720:	4770      	bx	lr

08011722 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011722:	b480      	push	{r7}
 8011724:	b085      	sub	sp, #20
 8011726:	af00      	add	r7, sp, #0
 8011728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	68fa      	ldr	r2, [r7, #12]
 8011738:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801173c:	f023 0303 	bic.w	r3, r3, #3
 8011740:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	68fa      	ldr	r2, [r7, #12]
 801174c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011750:	f043 0302 	orr.w	r3, r3, #2
 8011754:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011756:	2300      	movs	r3, #0
}
 8011758:	4618      	mov	r0, r3
 801175a:	3714      	adds	r7, #20
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr

08011764 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011764:	b480      	push	{r7}
 8011766:	b085      	sub	sp, #20
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	695b      	ldr	r3, [r3, #20]
 8011770:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	699b      	ldr	r3, [r3, #24]
 8011776:	68fa      	ldr	r2, [r7, #12]
 8011778:	4013      	ands	r3, r2
 801177a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801177c:	68fb      	ldr	r3, [r7, #12]
}
 801177e:	4618      	mov	r0, r3
 8011780:	3714      	adds	r7, #20
 8011782:	46bd      	mov	sp, r7
 8011784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011788:	4770      	bx	lr

0801178a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801178a:	b480      	push	{r7}
 801178c:	b085      	sub	sp, #20
 801178e:	af00      	add	r7, sp, #0
 8011790:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801179c:	699b      	ldr	r3, [r3, #24]
 801179e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117a6:	69db      	ldr	r3, [r3, #28]
 80117a8:	68ba      	ldr	r2, [r7, #8]
 80117aa:	4013      	ands	r3, r2
 80117ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80117ae:	68bb      	ldr	r3, [r7, #8]
 80117b0:	0c1b      	lsrs	r3, r3, #16
}
 80117b2:	4618      	mov	r0, r3
 80117b4:	3714      	adds	r7, #20
 80117b6:	46bd      	mov	sp, r7
 80117b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117bc:	4770      	bx	lr

080117be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80117be:	b480      	push	{r7}
 80117c0:	b085      	sub	sp, #20
 80117c2:	af00      	add	r7, sp, #0
 80117c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117d0:	699b      	ldr	r3, [r3, #24]
 80117d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117da:	69db      	ldr	r3, [r3, #28]
 80117dc:	68ba      	ldr	r2, [r7, #8]
 80117de:	4013      	ands	r3, r2
 80117e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	b29b      	uxth	r3, r3
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3714      	adds	r7, #20
 80117ea:	46bd      	mov	sp, r7
 80117ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f0:	4770      	bx	lr

080117f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80117f2:	b480      	push	{r7}
 80117f4:	b085      	sub	sp, #20
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	6078      	str	r0, [r7, #4]
 80117fa:	460b      	mov	r3, r1
 80117fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011802:	78fb      	ldrb	r3, [r7, #3]
 8011804:	015a      	lsls	r2, r3, #5
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	4413      	add	r3, r2
 801180a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801180e:	689b      	ldr	r3, [r3, #8]
 8011810:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011818:	695b      	ldr	r3, [r3, #20]
 801181a:	68ba      	ldr	r2, [r7, #8]
 801181c:	4013      	ands	r3, r2
 801181e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011820:	68bb      	ldr	r3, [r7, #8]
}
 8011822:	4618      	mov	r0, r3
 8011824:	3714      	adds	r7, #20
 8011826:	46bd      	mov	sp, r7
 8011828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182c:	4770      	bx	lr

0801182e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801182e:	b480      	push	{r7}
 8011830:	b087      	sub	sp, #28
 8011832:	af00      	add	r7, sp, #0
 8011834:	6078      	str	r0, [r7, #4]
 8011836:	460b      	mov	r3, r1
 8011838:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011844:	691b      	ldr	r3, [r3, #16]
 8011846:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801184e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011850:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011852:	78fb      	ldrb	r3, [r7, #3]
 8011854:	f003 030f 	and.w	r3, r3, #15
 8011858:	68fa      	ldr	r2, [r7, #12]
 801185a:	fa22 f303 	lsr.w	r3, r2, r3
 801185e:	01db      	lsls	r3, r3, #7
 8011860:	b2db      	uxtb	r3, r3
 8011862:	693a      	ldr	r2, [r7, #16]
 8011864:	4313      	orrs	r3, r2
 8011866:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011868:	78fb      	ldrb	r3, [r7, #3]
 801186a:	015a      	lsls	r2, r3, #5
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	4413      	add	r3, r2
 8011870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011874:	689b      	ldr	r3, [r3, #8]
 8011876:	693a      	ldr	r2, [r7, #16]
 8011878:	4013      	ands	r3, r2
 801187a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801187c:	68bb      	ldr	r3, [r7, #8]
}
 801187e:	4618      	mov	r0, r3
 8011880:	371c      	adds	r7, #28
 8011882:	46bd      	mov	sp, r7
 8011884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011888:	4770      	bx	lr

0801188a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801188a:	b480      	push	{r7}
 801188c:	b083      	sub	sp, #12
 801188e:	af00      	add	r7, sp, #0
 8011890:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	695b      	ldr	r3, [r3, #20]
 8011896:	f003 0301 	and.w	r3, r3, #1
}
 801189a:	4618      	mov	r0, r3
 801189c:	370c      	adds	r7, #12
 801189e:	46bd      	mov	sp, r7
 80118a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a4:	4770      	bx	lr

080118a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80118a6:	b480      	push	{r7}
 80118a8:	b085      	sub	sp, #20
 80118aa:	af00      	add	r7, sp, #0
 80118ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	68fa      	ldr	r2, [r7, #12]
 80118bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80118c0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80118c4:	f023 0307 	bic.w	r3, r3, #7
 80118c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80118d0:	685b      	ldr	r3, [r3, #4]
 80118d2:	68fa      	ldr	r2, [r7, #12]
 80118d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80118d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80118dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80118de:	2300      	movs	r3, #0
}
 80118e0:	4618      	mov	r0, r3
 80118e2:	3714      	adds	r7, #20
 80118e4:	46bd      	mov	sp, r7
 80118e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ea:	4770      	bx	lr

080118ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80118ec:	b480      	push	{r7}
 80118ee:	b087      	sub	sp, #28
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	60f8      	str	r0, [r7, #12]
 80118f4:	460b      	mov	r3, r1
 80118f6:	607a      	str	r2, [r7, #4]
 80118f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	333c      	adds	r3, #60	@ 0x3c
 8011902:	3304      	adds	r3, #4
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011908:	693b      	ldr	r3, [r7, #16]
 801190a:	4a26      	ldr	r2, [pc, #152]	@ (80119a4 <USB_EP0_OutStart+0xb8>)
 801190c:	4293      	cmp	r3, r2
 801190e:	d90a      	bls.n	8011926 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801191c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011920:	d101      	bne.n	8011926 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8011922:	2300      	movs	r3, #0
 8011924:	e037      	b.n	8011996 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801192c:	461a      	mov	r2, r3
 801192e:	2300      	movs	r3, #0
 8011930:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011938:	691b      	ldr	r3, [r3, #16]
 801193a:	697a      	ldr	r2, [r7, #20]
 801193c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011940:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011944:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801194c:	691b      	ldr	r3, [r3, #16]
 801194e:	697a      	ldr	r2, [r7, #20]
 8011950:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011954:	f043 0318 	orr.w	r3, r3, #24
 8011958:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011960:	691b      	ldr	r3, [r3, #16]
 8011962:	697a      	ldr	r2, [r7, #20]
 8011964:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011968:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 801196c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801196e:	7afb      	ldrb	r3, [r7, #11]
 8011970:	2b01      	cmp	r3, #1
 8011972:	d10f      	bne.n	8011994 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801197a:	461a      	mov	r2, r3
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011980:	697b      	ldr	r3, [r7, #20]
 8011982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	697a      	ldr	r2, [r7, #20]
 801198a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801198e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8011992:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011994:	2300      	movs	r3, #0
}
 8011996:	4618      	mov	r0, r3
 8011998:	371c      	adds	r7, #28
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr
 80119a2:	bf00      	nop
 80119a4:	4f54300a 	.word	0x4f54300a

080119a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80119a8:	b480      	push	{r7}
 80119aa:	b085      	sub	sp, #20
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80119b0:	2300      	movs	r3, #0
 80119b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	3301      	adds	r3, #1
 80119b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	4a13      	ldr	r2, [pc, #76]	@ (8011a0c <USB_CoreReset+0x64>)
 80119be:	4293      	cmp	r3, r2
 80119c0:	d901      	bls.n	80119c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80119c2:	2303      	movs	r3, #3
 80119c4:	e01b      	b.n	80119fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	691b      	ldr	r3, [r3, #16]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	daf2      	bge.n	80119b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80119ce:	2300      	movs	r3, #0
 80119d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	691b      	ldr	r3, [r3, #16]
 80119d6:	f043 0201 	orr.w	r2, r3, #1
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	3301      	adds	r3, #1
 80119e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	4a09      	ldr	r2, [pc, #36]	@ (8011a0c <USB_CoreReset+0x64>)
 80119e8:	4293      	cmp	r3, r2
 80119ea:	d901      	bls.n	80119f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80119ec:	2303      	movs	r3, #3
 80119ee:	e006      	b.n	80119fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	691b      	ldr	r3, [r3, #16]
 80119f4:	f003 0301 	and.w	r3, r3, #1
 80119f8:	2b01      	cmp	r3, #1
 80119fa:	d0f0      	beq.n	80119de <USB_CoreReset+0x36>

  return HAL_OK;
 80119fc:	2300      	movs	r3, #0
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3714      	adds	r7, #20
 8011a02:	46bd      	mov	sp, r7
 8011a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a08:	4770      	bx	lr
 8011a0a:	bf00      	nop
 8011a0c:	00030d40 	.word	0x00030d40

08011a10 <IPnPLComponentGetKey>:
};

// Inline functions definition
// ***************************
static inline char *IPnPLComponentGetKey(IPnPLComponent_t *_this)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b082      	sub	sp, #8
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
  return _this->vptr->PnPLComponentGetKey(_this);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	4798      	blx	r3
 8011a22:	4603      	mov	r3, r0
}
 8011a24:	4618      	mov	r0, r3
 8011a26:	3708      	adds	r7, #8
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}

08011a2c <IPnPLComponentGetNCommands>:

static inline uint8_t IPnPLComponentGetNCommands(IPnPLComponent_t *_this)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b082      	sub	sp, #8
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
  return _this->vptr->PnPLComponentGetNCommands(_this);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	685b      	ldr	r3, [r3, #4]
 8011a3a:	6878      	ldr	r0, [r7, #4]
 8011a3c:	4798      	blx	r3
 8011a3e:	4603      	mov	r3, r0
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3708      	adds	r7, #8
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}

08011a48 <IPnPLComponentGetCommandKey>:

static inline char *IPnPLComponentGetCommandKey(IPnPLComponent_t *_this, uint8_t id)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b082      	sub	sp, #8
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
 8011a50:	460b      	mov	r3, r1
 8011a52:	70fb      	strb	r3, [r7, #3]
  return _this->vptr->PnPLComponentGetCommandsKey(_this, id);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	689b      	ldr	r3, [r3, #8]
 8011a5a:	78fa      	ldrb	r2, [r7, #3]
 8011a5c:	4611      	mov	r1, r2
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	4798      	blx	r3
 8011a62:	4603      	mov	r3, r0
}
 8011a64:	4618      	mov	r0, r3
 8011a66:	3708      	adds	r7, #8
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd80      	pop	{r7, pc}

08011a6c <IPnPLComponentGetStatus>:

static inline uint8_t IPnPLComponentGetStatus(IPnPLComponent_t *_this, char **serializedJSON, uint32_t *size, uint8_t pretty)
{
 8011a6c:	b590      	push	{r4, r7, lr}
 8011a6e:	b085      	sub	sp, #20
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	60f8      	str	r0, [r7, #12]
 8011a74:	60b9      	str	r1, [r7, #8]
 8011a76:	607a      	str	r2, [r7, #4]
 8011a78:	70fb      	strb	r3, [r7, #3]
  return _this->vptr->PnPLComponentGetStatus(_this, serializedJSON, size, pretty);
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	68dc      	ldr	r4, [r3, #12]
 8011a80:	78fb      	ldrb	r3, [r7, #3]
 8011a82:	687a      	ldr	r2, [r7, #4]
 8011a84:	68b9      	ldr	r1, [r7, #8]
 8011a86:	68f8      	ldr	r0, [r7, #12]
 8011a88:	47a0      	blx	r4
 8011a8a:	4603      	mov	r3, r0
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3714      	adds	r7, #20
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd90      	pop	{r4, r7, pc}

08011a94 <IPnPLComponentSetProperty>:

static inline uint8_t IPnPLComponentSetProperty(IPnPLComponent_t *_this, char *serializedJSON)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
 8011a9c:	6039      	str	r1, [r7, #0]
  return _this->vptr->PnPLComponentSetProperty(_this, serializedJSON);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	691b      	ldr	r3, [r3, #16]
 8011aa4:	6839      	ldr	r1, [r7, #0]
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	4798      	blx	r3
 8011aaa:	4603      	mov	r3, r0
}
 8011aac:	4618      	mov	r0, r3
 8011aae:	3708      	adds	r7, #8
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	bd80      	pop	{r7, pc}

08011ab4 <IPnPLCommandExecuteFunction>:

static inline uint8_t IPnPLCommandExecuteFunction(IPnPLComponent_t *_this, char *serializedJSON)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
 8011abc:	6039      	str	r1, [r7, #0]
  return _this->vptr->PnPLCommandExecuteFunction(_this, serializedJSON);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	695b      	ldr	r3, [r3, #20]
 8011ac4:	6839      	ldr	r1, [r7, #0]
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	4798      	blx	r3
 8011aca:	4603      	mov	r3, r0
}
 8011acc:	4618      	mov	r0, r3
 8011ace:	3708      	adds	r7, #8
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}

08011ad4 <PnPLSetFWID>:
}

#ifndef FW_ID
/* Set FW Unique ID */
void PnPLSetFWID(uint8_t id)
{
 8011ad4:	b480      	push	{r7}
 8011ad6:	b083      	sub	sp, #12
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	4603      	mov	r3, r0
 8011adc:	71fb      	strb	r3, [r7, #7]
  fw_id = id;
 8011ade:	4a04      	ldr	r2, [pc, #16]	@ (8011af0 <PnPLSetFWID+0x1c>)
 8011ae0:	79fb      	ldrb	r3, [r7, #7]
 8011ae2:	7013      	strb	r3, [r2, #0]
}
 8011ae4:	bf00      	nop
 8011ae6:	370c      	adds	r7, #12
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aee:	4770      	bx	lr
 8011af0:	20045809 	.word	0x20045809

08011af4 <PnPLGetUniqueID>:
#endif

/* Unique ID is directly derived from STM32 UID and converted to string
string needs to be 25bytes 24+\0  */
static void PnPLGetUniqueID(char *id)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b088      	sub	sp, #32
 8011af8:	af02      	add	r7, sp, #8
 8011afa:	6078      	str	r0, [r7, #4]
  uint32_t stm32_UID[3];

  stm32_UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 8011afc:	4b0a      	ldr	r3, [pc, #40]	@ (8011b28 <PnPLGetUniqueID+0x34>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	60fb      	str	r3, [r7, #12]
  stm32_UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8011b02:	4b0a      	ldr	r3, [pc, #40]	@ (8011b2c <PnPLGetUniqueID+0x38>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	613b      	str	r3, [r7, #16]
  stm32_UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8011b08:	4b09      	ldr	r3, [pc, #36]	@ (8011b30 <PnPLGetUniqueID+0x3c>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	617b      	str	r3, [r7, #20]

  (void)sprintf(id, "%08lX%08lX%08lX", (unsigned long)stm32_UID[0], (unsigned long)stm32_UID[1], (unsigned long)stm32_UID[2]);
 8011b0e:	68fa      	ldr	r2, [r7, #12]
 8011b10:	6939      	ldr	r1, [r7, #16]
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	9300      	str	r3, [sp, #0]
 8011b16:	460b      	mov	r3, r1
 8011b18:	4906      	ldr	r1, [pc, #24]	@ (8011b34 <PnPLGetUniqueID+0x40>)
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f00c fc6e 	bl	801e3fc <siprintf>
}
 8011b20:	bf00      	nop
 8011b22:	3718      	adds	r7, #24
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	0bfa0700 	.word	0x0bfa0700
 8011b2c:	0bfa0704 	.word	0x0bfa0704
 8011b30:	0bfa0708 	.word	0x0bfa0708
 8011b34:	0802306c 	.word	0x0802306c

08011b38 <PnPLAddComponent>:

  (void)strcpy(uuid, global_uuid);
}

uint8_t PnPLAddComponent(IPnPLComponent_t *pComponent)
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b085      	sub	sp, #20
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
  uint8_t id = 0;
 8011b40:	2300      	movs	r3, #0
 8011b42:	73fb      	strb	r3, [r7, #15]
  uint16_t ii;
  bool add_ok = false;
 8011b44:	2300      	movs	r3, #0
 8011b46:	72fb      	strb	r3, [r7, #11]

  for (ii = 0; ii <= spPnPLObj.n_components; ii++)
 8011b48:	2300      	movs	r3, #0
 8011b4a:	81bb      	strh	r3, [r7, #12]
 8011b4c:	e011      	b.n	8011b72 <PnPLAddComponent+0x3a>
  {
    if (spPnPLObj.Components[ii] == NULL)
 8011b4e:	89bb      	ldrh	r3, [r7, #12]
 8011b50:	4a14      	ldr	r2, [pc, #80]	@ (8011ba4 <PnPLAddComponent+0x6c>)
 8011b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d108      	bne.n	8011b6c <PnPLAddComponent+0x34>
    {
      spPnPLObj.Components[ii] = pComponent;
 8011b5a:	89bb      	ldrh	r3, [r7, #12]
 8011b5c:	4911      	ldr	r1, [pc, #68]	@ (8011ba4 <PnPLAddComponent+0x6c>)
 8011b5e:	687a      	ldr	r2, [r7, #4]
 8011b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      add_ok = true;
 8011b64:	2301      	movs	r3, #1
 8011b66:	72fb      	strb	r3, [r7, #11]
      id = (uint8_t)ii;
 8011b68:	89bb      	ldrh	r3, [r7, #12]
 8011b6a:	73fb      	strb	r3, [r7, #15]
  for (ii = 0; ii <= spPnPLObj.n_components; ii++)
 8011b6c:	89bb      	ldrh	r3, [r7, #12]
 8011b6e:	3301      	adds	r3, #1
 8011b70:	81bb      	strh	r3, [r7, #12]
 8011b72:	4b0c      	ldr	r3, [pc, #48]	@ (8011ba4 <PnPLAddComponent+0x6c>)
 8011b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011b78:	89ba      	ldrh	r2, [r7, #12]
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	d9e7      	bls.n	8011b4e <PnPLAddComponent+0x16>
    }
  }

  if (add_ok)
 8011b7e:	7afb      	ldrb	r3, [r7, #11]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d007      	beq.n	8011b94 <PnPLAddComponent+0x5c>
  {
    spPnPLObj.n_components++;
 8011b84:	4b07      	ldr	r3, [pc, #28]	@ (8011ba4 <PnPLAddComponent+0x6c>)
 8011b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011b8a:	3301      	adds	r3, #1
 8011b8c:	b29a      	uxth	r2, r3
 8011b8e:	4b05      	ldr	r3, [pc, #20]	@ (8011ba4 <PnPLAddComponent+0x6c>)
 8011b90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  }

  return id;
 8011b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3714      	adds	r7, #20
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba0:	4770      	bx	lr
 8011ba2:	bf00      	nop
 8011ba4:	20045790 	.word	0x20045790

08011ba8 <PnPLGetNComponents>:

uint16_t PnPLGetNComponents(void)
{
 8011ba8:	b480      	push	{r7}
 8011baa:	af00      	add	r7, sp, #0
  return spPnPLObj.n_components;
 8011bac:	4b03      	ldr	r3, [pc, #12]	@ (8011bbc <PnPLGetNComponents+0x14>)
 8011bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
}
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bba:	4770      	bx	lr
 8011bbc:	20045790 	.word	0x20045790

08011bc0 <PnPLGetPresentationJSON>:
  return PNPL_CMD_ERROR_CODE;
}


uint8_t PnPLGetPresentationJSON(char **serializedJSON, uint32_t *size)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b084      	sub	sp, #16
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	6039      	str	r1, [r7, #0]
  JSON_Value *tempJSON;
  JSON_Object *JSON_Status;

  tempJSON = json_value_init_object();
 8011bca:	f004 fa0b 	bl	8015fe4 <json_value_init_object>
 8011bce:	60f8      	str	r0, [r7, #12]
  JSON_Status = json_value_get_object(tempJSON);
 8011bd0:	68f8      	ldr	r0, [r7, #12]
 8011bd2:	f004 f93e 	bl	8015e52 <json_value_get_object>
 8011bd6:	60b8      	str	r0, [r7, #8]

  json_object_dotset_number(JSON_Status, "board_id", BOARD_ID);
 8011bd8:	ed9f 0b13 	vldr	d0, [pc, #76]	@ 8011c28 <PnPLGetPresentationJSON+0x68>
 8011bdc:	4914      	ldr	r1, [pc, #80]	@ (8011c30 <PnPLGetPresentationJSON+0x70>)
 8011bde:	68b8      	ldr	r0, [r7, #8]
 8011be0:	f004 fdcf 	bl	8016782 <json_object_dotset_number>
#ifndef FW_ID
  json_object_dotset_number(JSON_Status, "fw_id", fw_id);
 8011be4:	4b13      	ldr	r3, [pc, #76]	@ (8011c34 <PnPLGetPresentationJSON+0x74>)
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	4618      	mov	r0, r3
 8011bea:	f7ee fc99 	bl	8000520 <__aeabi_ui2d>
 8011bee:	4602      	mov	r2, r0
 8011bf0:	460b      	mov	r3, r1
 8011bf2:	ec43 2b10 	vmov	d0, r2, r3
 8011bf6:	4910      	ldr	r1, [pc, #64]	@ (8011c38 <PnPLGetPresentationJSON+0x78>)
 8011bf8:	68b8      	ldr	r0, [r7, #8]
 8011bfa:	f004 fdc2 	bl	8016782 <json_object_dotset_number>
#else
  json_object_dotset_number(JSON_Status, "fw_id", FW_ID);
#endif

  *serializedJSON = json_serialize_to_string(tempJSON);
 8011bfe:	68f8      	ldr	r0, [r7, #12]
 8011c00:	f004 fb64 	bl	80162cc <json_serialize_to_string>
 8011c04:	4602      	mov	r2, r0
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	601a      	str	r2, [r3, #0]
  *size = json_serialization_size(tempJSON);
 8011c0a:	68f8      	ldr	r0, [r7, #12]
 8011c0c:	f004 fb1a 	bl	8016244 <json_serialization_size>
 8011c10:	4602      	mov	r2, r0
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	601a      	str	r2, [r3, #0]

  json_value_free(tempJSON);
 8011c16:	68f8      	ldr	r0, [r7, #12]
 8011c18:	f004 f9b6 	bl	8015f88 <json_value_free>
  return PNPL_CMD_NO_ERROR_CODE;
 8011c1c:	2300      	movs	r3, #0
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3710      	adds	r7, #16
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}
 8011c26:	bf00      	nop
 8011c28:	00000000 	.word	0x00000000
 8011c2c:	402c0000 	.word	0x402c0000
 8011c30:	080230a8 	.word	0x080230a8
 8011c34:	20045809 	.word	0x20045809
 8011c38:	080230b4 	.word	0x080230b4
 8011c3c:	00000000 	.word	0x00000000

08011c40 <PnPLGetDeviceStatusJSON>:


uint8_t PnPLGetDeviceStatusJSON(char **serializedJSON, uint32_t *size, uint8_t pretty)
{
 8011c40:	b590      	push	{r4, r7, lr}
 8011c42:	b097      	sub	sp, #92	@ 0x5c
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	60f8      	str	r0, [r7, #12]
 8011c48:	60b9      	str	r1, [r7, #8]
 8011c4a:	4613      	mov	r3, r2
 8011c4c:	71fb      	strb	r3, [r7, #7]
  JSON_Object *JSON_DeviceConfig;
  JSON_Object *JSON_Device;
  JSON_Array *JSON_DeviceArray;
  JSON_Array *JSON_ComponentArray;

  uint32_t sz_comp = 0;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	617b      	str	r3, [r7, #20]
  char *ser_comp = NULL;
 8011c52:	2300      	movs	r3, #0
 8011c54:	613b      	str	r3, [r7, #16]

  tempJSON = json_value_init_object();
 8011c56:	f004 f9c5 	bl	8015fe4 <json_value_init_object>
 8011c5a:	6538      	str	r0, [r7, #80]	@ 0x50
  JSON_DeviceConfig = json_value_get_object(tempJSON);
 8011c5c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8011c5e:	f004 f8f8 	bl	8015e52 <json_value_get_object>
 8011c62:	64f8      	str	r0, [r7, #76]	@ 0x4c
              ]​
          }​
      ],​​
  }*/

  json_object_dotset_string(JSON_DeviceConfig, "schema_version", "2.0.0");
 8011c64:	4a52      	ldr	r2, [pc, #328]	@ (8011db0 <PnPLGetDeviceStatusJSON+0x170>)
 8011c66:	4953      	ldr	r1, [pc, #332]	@ (8011db4 <PnPLGetDeviceStatusJSON+0x174>)
 8011c68:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8011c6a:	f004 fd67 	bl	801673c <json_object_dotset_string>
  //char uuid[37];
  //PnPLGenerateAcquisitionUUID(uuid);
  //json_object_dotset_string(JSON_Device, "uuid", uuid);
  json_object_dotset_string(JSON_DeviceConfig, "uuid", global_uuid);
 8011c6e:	4a52      	ldr	r2, [pc, #328]	@ (8011db8 <PnPLGetDeviceStatusJSON+0x178>)
 8011c70:	4952      	ldr	r1, [pc, #328]	@ (8011dbc <PnPLGetDeviceStatusJSON+0x17c>)
 8011c72:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8011c74:	f004 fd62 	bl	801673c <json_object_dotset_string>

  tempJSONDevice = json_value_init_object();
 8011c78:	f004 f9b4 	bl	8015fe4 <json_value_init_object>
 8011c7c:	64b8      	str	r0, [r7, #72]	@ 0x48
  JSON_Device = json_value_get_object(tempJSONDevice);
 8011c7e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8011c80:	f004 f8e7 	bl	8015e52 <json_value_get_object>
 8011c84:	6478      	str	r0, [r7, #68]	@ 0x44

  json_object_set_value(JSON_DeviceConfig, "devices", json_value_init_array());
 8011c86:	f004 f9d9 	bl	801603c <json_value_init_array>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	461a      	mov	r2, r3
 8011c8e:	494c      	ldr	r1, [pc, #304]	@ (8011dc0 <PnPLGetDeviceStatusJSON+0x180>)
 8011c90:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8011c92:	f004 fbec 	bl	801646e <json_object_set_value>
  JSON_DeviceArray = json_object_dotget_array(JSON_DeviceConfig, "devices");
 8011c96:	494a      	ldr	r1, [pc, #296]	@ (8011dc0 <PnPLGetDeviceStatusJSON+0x180>)
 8011c98:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8011c9a:	f003 ffe9 	bl	8015c70 <json_object_dotget_array>
 8011c9e:	6438      	str	r0, [r7, #64]	@ 0x40
  json_array_append_value(JSON_DeviceArray, tempJSONDevice);
 8011ca0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8011ca2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011ca4:	f004 fbc8 	bl	8016438 <json_array_append_value>

  json_object_dotset_number(JSON_Device, "board_id", BOARD_ID);
 8011ca8:	ed9f 0b3f 	vldr	d0, [pc, #252]	@ 8011da8 <PnPLGetDeviceStatusJSON+0x168>
 8011cac:	4945      	ldr	r1, [pc, #276]	@ (8011dc4 <PnPLGetDeviceStatusJSON+0x184>)
 8011cae:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011cb0:	f004 fd67 	bl	8016782 <json_object_dotset_number>
#ifndef FW_ID
  json_object_dotset_number(JSON_Device, "fw_id", fw_id);
 8011cb4:	4b44      	ldr	r3, [pc, #272]	@ (8011dc8 <PnPLGetDeviceStatusJSON+0x188>)
 8011cb6:	781b      	ldrb	r3, [r3, #0]
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f7ee fc31 	bl	8000520 <__aeabi_ui2d>
 8011cbe:	4602      	mov	r2, r0
 8011cc0:	460b      	mov	r3, r1
 8011cc2:	ec43 2b10 	vmov	d0, r2, r3
 8011cc6:	4941      	ldr	r1, [pc, #260]	@ (8011dcc <PnPLGetDeviceStatusJSON+0x18c>)
 8011cc8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011cca:	f004 fd5a 	bl	8016782 <json_object_dotset_number>
#else
  json_object_dotset_number(JSON_Device, "fw_id", FW_ID);
#endif
  PnPLGetUniqueID(serial_number);
 8011cce:	f107 0318 	add.w	r3, r7, #24
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7ff ff0e 	bl	8011af4 <PnPLGetUniqueID>
  json_object_dotset_string(JSON_Device, "sn", serial_number);
 8011cd8:	f107 0318 	add.w	r3, r7, #24
 8011cdc:	461a      	mov	r2, r3
 8011cde:	493c      	ldr	r1, [pc, #240]	@ (8011dd0 <PnPLGetDeviceStatusJSON+0x190>)
 8011ce0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011ce2:	f004 fd2b 	bl	801673c <json_object_dotset_string>

//  json_object_set_value(JSON_Device, "device", json_value_init_array());
//  JSON_ComponentArray = json_object_dotget_array(JSON_Device, "device");
  json_object_set_value(JSON_Device, "components", json_value_init_array());
 8011ce6:	f004 f9a9 	bl	801603c <json_value_init_array>
 8011cea:	4603      	mov	r3, r0
 8011cec:	461a      	mov	r2, r3
 8011cee:	4939      	ldr	r1, [pc, #228]	@ (8011dd4 <PnPLGetDeviceStatusJSON+0x194>)
 8011cf0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011cf2:	f004 fbbc 	bl	801646e <json_object_set_value>
  JSON_ComponentArray = json_object_dotget_array(JSON_Device, "components");
 8011cf6:	4937      	ldr	r1, [pc, #220]	@ (8011dd4 <PnPLGetDeviceStatusJSON+0x194>)
 8011cf8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011cfa:	f003 ffb9 	bl	8015c70 <json_object_dotget_array>
 8011cfe:	63f8      	str	r0, [r7, #60]	@ 0x3c

  for (uint8_t i = 0; i < PnPLGetNComponents(); i++)
 8011d00:	2300      	movs	r3, #0
 8011d02:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8011d06:	e023      	b.n	8011d50 <PnPLGetDeviceStatusJSON+0x110>
  {
    IPnPLComponent_t *p_obj = spPnPLObj.Components[i];
 8011d08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011d0c:	4a32      	ldr	r2, [pc, #200]	@ (8011dd8 <PnPLGetDeviceStatusJSON+0x198>)
 8011d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d12:	63bb      	str	r3, [r7, #56]	@ 0x38
    sz_comp = 0;
 8011d14:	2300      	movs	r3, #0
 8011d16:	617b      	str	r3, [r7, #20]
    ser_comp = NULL;
 8011d18:	2300      	movs	r3, #0
 8011d1a:	613b      	str	r3, [r7, #16]
    IPnPLComponentGetStatus(p_obj, &ser_comp, &sz_comp, 0);
 8011d1c:	f107 0214 	add.w	r2, r7, #20
 8011d20:	f107 0110 	add.w	r1, r7, #16
 8011d24:	2300      	movs	r3, #0
 8011d26:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011d28:	f7ff fea0 	bl	8011a6c <IPnPLComponentGetStatus>
    tempJSON1 = json_parse_string(ser_comp);
 8011d2c:	693b      	ldr	r3, [r7, #16]
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f003 fed4 	bl	8015adc <json_parse_string>
 8011d34:	6378      	str	r0, [r7, #52]	@ 0x34
    json_array_append_value(JSON_ComponentArray, tempJSON1);
 8011d36:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011d38:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011d3a:	f004 fb7d 	bl	8016438 <json_array_append_value>
    json_free_serialized_string(ser_comp);
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	4618      	mov	r0, r3
 8011d42:	f004 fb6b 	bl	801641c <json_free_serialized_string>
  for (uint8_t i = 0; i < PnPLGetNComponents(); i++)
 8011d46:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011d4a:	3301      	adds	r3, #1
 8011d4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8011d50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011d54:	b29c      	uxth	r4, r3
 8011d56:	f7ff ff27 	bl	8011ba8 <PnPLGetNComponents>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	429c      	cmp	r4, r3
 8011d5e:	d3d3      	bcc.n	8011d08 <PnPLGetDeviceStatusJSON+0xc8>
  }

  /* convert to a json string and write to file */
  if (pretty == 1u)
 8011d60:	79fb      	ldrb	r3, [r7, #7]
 8011d62:	2b01      	cmp	r3, #1
 8011d64:	d10c      	bne.n	8011d80 <PnPLGetDeviceStatusJSON+0x140>
  {
    *serializedJSON = json_serialize_to_string_pretty(tempJSON);
 8011d66:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8011d68:	f004 fb26 	bl	80163b8 <json_serialize_to_string_pretty>
 8011d6c:	4602      	mov	r2, r0
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	601a      	str	r2, [r3, #0]
    *size = json_serialization_size_pretty(tempJSON);
 8011d72:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8011d74:	f004 fadc 	bl	8016330 <json_serialization_size_pretty>
 8011d78:	4602      	mov	r2, r0
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	601a      	str	r2, [r3, #0]
 8011d7e:	e00b      	b.n	8011d98 <PnPLGetDeviceStatusJSON+0x158>
  }
  else
  {
    *serializedJSON = json_serialize_to_string(tempJSON);
 8011d80:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8011d82:	f004 faa3 	bl	80162cc <json_serialize_to_string>
 8011d86:	4602      	mov	r2, r0
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	601a      	str	r2, [r3, #0]
    *size = json_serialization_size(tempJSON);
 8011d8c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8011d8e:	f004 fa59 	bl	8016244 <json_serialization_size>
 8011d92:	4602      	mov	r2, r0
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	601a      	str	r2, [r3, #0]
  }

  json_value_free(tempJSON);
 8011d98:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8011d9a:	f004 f8f5 	bl	8015f88 <json_value_free>
  return PNPL_CMD_NO_ERROR_CODE;
 8011d9e:	2300      	movs	r3, #0
}
 8011da0:	4618      	mov	r0, r3
 8011da2:	375c      	adds	r7, #92	@ 0x5c
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd90      	pop	{r4, r7, pc}
 8011da8:	00000000 	.word	0x00000000
 8011dac:	402c0000 	.word	0x402c0000
 8011db0:	080230bc 	.word	0x080230bc
 8011db4:	080230c4 	.word	0x080230c4
 8011db8:	200457e4 	.word	0x200457e4
 8011dbc:	080230d4 	.word	0x080230d4
 8011dc0:	080230dc 	.word	0x080230dc
 8011dc4:	080230a8 	.word	0x080230a8
 8011dc8:	20045809 	.word	0x20045809
 8011dcc:	080230b4 	.word	0x080230b4
 8011dd0:	080230e4 	.word	0x080230e4
 8011dd4:	080230e8 	.word	0x080230e8
 8011dd8:	20045790 	.word	0x20045790

08011ddc <PnPLUpdateDeviceStatusFromJSON>:
   return PNPL_CMD_NO_ERROR_CODE;
}


uint8_t PnPLUpdateDeviceStatusFromJSON(char *serializedJSON)
{
 8011ddc:	b590      	push	{r4, r7, lr}
 8011dde:	b095      	sub	sp, #84	@ 0x54
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]

  JSON_Array *JSON_components, *JSON_devices;
  JSON_Object *component, *device;
  JSON_Value *component_value;

  JSON_Value *tempJSON = json_parse_string(serializedJSON);
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f003 fe79 	bl	8015adc <json_parse_string>
 8011dea:	6478      	str	r0, [r7, #68]	@ 0x44
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 8011dec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011dee:	f004 f830 	bl	8015e52 <json_value_get_object>
 8011df2:	6438      	str	r0, [r7, #64]	@ 0x40

  if (json_object_has_value(JSON_ParseHandler, "devices") == 1)
 8011df4:	4940      	ldr	r1, [pc, #256]	@ (8011ef8 <PnPLUpdateDeviceStatusFromJSON+0x11c>)
 8011df6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011df8:	f003 ffa4 	bl	8015d44 <json_object_has_value>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	2b01      	cmp	r3, #1
 8011e00:	d10f      	bne.n	8011e22 <PnPLUpdateDeviceStatusFromJSON+0x46>
  {
    JSON_devices = json_object_get_array(JSON_ParseHandler, "devices");
 8011e02:	493d      	ldr	r1, [pc, #244]	@ (8011ef8 <PnPLUpdateDeviceStatusFromJSON+0x11c>)
 8011e04:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011e06:	f003 fecc 	bl	8015ba2 <json_object_get_array>
 8011e0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    device = json_array_get_object(JSON_devices, 0);
 8011e0c:	2100      	movs	r1, #0
 8011e0e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011e10:	f003 ffd9 	bl	8015dc6 <json_array_get_object>
 8011e14:	63b8      	str	r0, [r7, #56]	@ 0x38
    JSON_components = json_object_get_array(device, "components");
 8011e16:	4939      	ldr	r1, [pc, #228]	@ (8011efc <PnPLUpdateDeviceStatusFromJSON+0x120>)
 8011e18:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011e1a:	f003 fec2 	bl	8015ba2 <json_object_get_array>
 8011e1e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011e20:	e004      	b.n	8011e2c <PnPLUpdateDeviceStatusFromJSON+0x50>
  }
  else
  {
    //old status version (without "device" key)
    JSON_components = json_object_get_array(JSON_ParseHandler, "");
 8011e22:	4937      	ldr	r1, [pc, #220]	@ (8011f00 <PnPLUpdateDeviceStatusFromJSON+0x124>)
 8011e24:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011e26:	f003 febc 	bl	8015ba2 <json_object_get_array>
 8011e2a:	64f8      	str	r0, [r7, #76]	@ 0x4c
  }

  for (uint8_t i = 0; i < json_array_get_count(JSON_components); i++)
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8011e32:	e051      	b.n	8011ed8 <PnPLUpdateDeviceStatusFromJSON+0xfc>
  {
    component = json_array_get_object(JSON_components, i);
 8011e34:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8011e38:	4619      	mov	r1, r3
 8011e3a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8011e3c:	f003 ffc3 	bl	8015dc6 <json_array_get_object>
 8011e40:	6378      	str	r0, [r7, #52]	@ 0x34
    strcpy(componentName, json_object_get_name(component, 0));
 8011e42:	2100      	movs	r1, #0
 8011e44:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8011e46:	f003 ff36 	bl	8015cb6 <json_object_get_name>
 8011e4a:	4602      	mov	r2, r0
 8011e4c:	f107 0308 	add.w	r3, r7, #8
 8011e50:	4611      	mov	r1, r2
 8011e52:	4618      	mov	r0, r3
 8011e54:	f00c fd27 	bl	801e8a6 <strcpy>
    for (uint8_t j = 0; j < PnPLGetNComponents(); j++)
 8011e58:	2300      	movs	r3, #0
 8011e5a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8011e5e:	e02e      	b.n	8011ebe <PnPLUpdateDeviceStatusFromJSON+0xe2>
    {
      IPnPLComponent_t *p_obj = (IPnPLComponent_t *)(spPnPLObj.Components[j]);
 8011e60:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8011e64:	4a27      	ldr	r2, [pc, #156]	@ (8011f04 <PnPLUpdateDeviceStatusFromJSON+0x128>)
 8011e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e6a:	633b      	str	r3, [r7, #48]	@ 0x30
      if (strcmp(componentName, IPnPLComponentGetKey(p_obj)) == 0)
 8011e6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011e6e:	f7ff fdcf 	bl	8011a10 <IPnPLComponentGetKey>
 8011e72:	4602      	mov	r2, r0
 8011e74:	f107 0308 	add.w	r3, r7, #8
 8011e78:	4611      	mov	r1, r2
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7ee f9fc 	bl	8000278 <strcmp>
 8011e80:	4603      	mov	r3, r0
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d116      	bne.n	8011eb4 <PnPLUpdateDeviceStatusFromJSON+0xd8>
      {
        component_value = json_object_get_value(component, componentName);
 8011e86:	f107 0308 	add.w	r3, r7, #8
 8011e8a:	4619      	mov	r1, r3
 8011e8c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8011e8e:	f003 fe49 	bl	8015b24 <json_object_get_value>
 8011e92:	62f8      	str	r0, [r7, #44]	@ 0x2c
        char *comp_string = json_serialize_to_string(json_value_get_parent(component_value));
 8011e94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011e96:	f004 f866 	bl	8015f66 <json_value_get_parent>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f004 fa15 	bl	80162cc <json_serialize_to_string>
 8011ea2:	62b8      	str	r0, [r7, #40]	@ 0x28
        IPnPLComponentSetProperty(p_obj, comp_string);
 8011ea4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011ea6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011ea8:	f7ff fdf4 	bl	8011a94 <IPnPLComponentSetProperty>
        json_free_serialized_string(comp_string);
 8011eac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011eae:	f004 fab5 	bl	801641c <json_free_serialized_string>
        break;
 8011eb2:	e00c      	b.n	8011ece <PnPLUpdateDeviceStatusFromJSON+0xf2>
    for (uint8_t j = 0; j < PnPLGetNComponents(); j++)
 8011eb4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8011eb8:	3301      	adds	r3, #1
 8011eba:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8011ebe:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8011ec2:	b29c      	uxth	r4, r3
 8011ec4:	f7ff fe70 	bl	8011ba8 <PnPLGetNComponents>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	429c      	cmp	r4, r3
 8011ecc:	d3c8      	bcc.n	8011e60 <PnPLUpdateDeviceStatusFromJSON+0x84>
  for (uint8_t i = 0; i < json_array_get_count(JSON_components); i++)
 8011ece:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8011ed2:	3301      	adds	r3, #1
 8011ed4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8011ed8:	f897 404b 	ldrb.w	r4, [r7, #75]	@ 0x4b
 8011edc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8011ede:	f003 ff84 	bl	8015dea <json_array_get_count>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	429c      	cmp	r4, r3
 8011ee6:	d3a5      	bcc.n	8011e34 <PnPLUpdateDeviceStatusFromJSON+0x58>
      }
    }
  }

  json_value_free(tempJSON);
 8011ee8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011eea:	f004 f84d 	bl	8015f88 <json_value_free>
  return PNPL_CMD_NO_ERROR_CODE;
 8011eee:	2300      	movs	r3, #0
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3754      	adds	r7, #84	@ 0x54
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd90      	pop	{r4, r7, pc}
 8011ef8:	080230dc 	.word	0x080230dc
 8011efc:	080230e8 	.word	0x080230e8
 8011f00:	080230f4 	.word	0x080230f4
 8011f04:	20045790 	.word	0x20045790

08011f08 <extract_PnPL_cmd_data>:

static uint8_t extract_PnPL_cmd_data(char *commandString, uint8_t *commandType, char *componentName)
{
 8011f08:	b590      	push	{r4, r7, lr}
 8011f0a:	b08d      	sub	sp, #52	@ 0x34
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	60f8      	str	r0, [r7, #12]
 8011f10:	60b9      	str	r1, [r7, #8]
 8011f12:	607a      	str	r2, [r7, #4]
  JSON_Value *tempJSON = json_parse_string(commandString);
 8011f14:	68f8      	ldr	r0, [r7, #12]
 8011f16:	f003 fde1 	bl	8015adc <json_parse_string>
 8011f1a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (tempJSON != NULL)
 8011f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	f000 80ea 	beq.w	80120f8 <extract_PnPL_cmd_data+0x1f0>
  {
    JSON_Object *tempJSONObject = json_value_get_object(tempJSON);
 8011f24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f26:	f003 ff94 	bl	8015e52 <json_value_get_object>
 8011f2a:	6278      	str	r0, [r7, #36]	@ 0x24
    strcpy(componentName, json_object_get_name(tempJSONObject, 0));
 8011f2c:	2100      	movs	r1, #0
 8011f2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011f30:	f003 fec1 	bl	8015cb6 <json_object_get_name>
 8011f34:	4603      	mov	r3, r0
 8011f36:	4619      	mov	r1, r3
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f00c fcb4 	bl	801e8a6 <strcpy>
    for (uint8_t i = 0; i < PnPLGetNComponents(); i++)
 8011f3e:	2300      	movs	r3, #0
 8011f40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011f44:	e049      	b.n	8011fda <extract_PnPL_cmd_data+0xd2>
    {
      IPnPLComponent_t *p_obj = (IPnPLComponent_t *)(spPnPLObj.Components[i]);
 8011f46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011f4a:	4a6f      	ldr	r2, [pc, #444]	@ (8012108 <extract_PnPL_cmd_data+0x200>)
 8011f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f50:	61bb      	str	r3, [r7, #24]
      if (strcmp(IPnPLComponentGetKey(p_obj), componentName) == 0)
 8011f52:	69b8      	ldr	r0, [r7, #24]
 8011f54:	f7ff fd5c 	bl	8011a10 <IPnPLComponentGetKey>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	6879      	ldr	r1, [r7, #4]
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f7ee f98b 	bl	8000278 <strcmp>
 8011f62:	4603      	mov	r3, r0
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d107      	bne.n	8011f78 <extract_PnPL_cmd_data+0x70>
      {
        //Check if extracted string is a component added to the current FW
        *commandType = PNPL_CMD_SET;
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	2220      	movs	r2, #32
 8011f6c:	701a      	strb	r2, [r3, #0]
        json_value_free(tempJSON);
 8011f6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f70:	f004 f80a 	bl	8015f88 <json_value_free>
        return PNPL_CMD_NO_ERROR_CODE;
 8011f74:	2300      	movs	r3, #0
 8011f76:	e0c3      	b.n	8012100 <extract_PnPL_cmd_data+0x1f8>
      }
      //in case of control commands
      uint8_t nOfCommands = IPnPLComponentGetNCommands(p_obj);
 8011f78:	69b8      	ldr	r0, [r7, #24]
 8011f7a:	f7ff fd57 	bl	8011a2c <IPnPLComponentGetNCommands>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	75fb      	strb	r3, [r7, #23]
      if (nOfCommands > 0u)
 8011f82:	7dfb      	ldrb	r3, [r7, #23]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d023      	beq.n	8011fd0 <extract_PnPL_cmd_data+0xc8>
      {
        for (uint8_t j = 0; j < nOfCommands; j++)
 8011f88:	2300      	movs	r3, #0
 8011f8a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8011f8e:	e01a      	b.n	8011fc6 <extract_PnPL_cmd_data+0xbe>
        {
          if (strcmp(IPnPLComponentGetCommandKey(p_obj, j), componentName) == 0)
 8011f90:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011f94:	4619      	mov	r1, r3
 8011f96:	69b8      	ldr	r0, [r7, #24]
 8011f98:	f7ff fd56 	bl	8011a48 <IPnPLComponentGetCommandKey>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	6879      	ldr	r1, [r7, #4]
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f7ee f969 	bl	8000278 <strcmp>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d107      	bne.n	8011fbc <extract_PnPL_cmd_data+0xb4>
          {
            *commandType = PNPL_CMD_SET;
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	2220      	movs	r2, #32
 8011fb0:	701a      	strb	r2, [r3, #0]
            json_value_free(tempJSON);
 8011fb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011fb4:	f003 ffe8 	bl	8015f88 <json_value_free>
            return PNPL_CMD_NO_ERROR_CODE;
 8011fb8:	2300      	movs	r3, #0
 8011fba:	e0a1      	b.n	8012100 <extract_PnPL_cmd_data+0x1f8>
        for (uint8_t j = 0; j < nOfCommands; j++)
 8011fbc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011fc0:	3301      	adds	r3, #1
 8011fc2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8011fc6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8011fca:	7dfb      	ldrb	r3, [r7, #23]
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d3df      	bcc.n	8011f90 <extract_PnPL_cmd_data+0x88>
    for (uint8_t i = 0; i < PnPLGetNComponents(); i++)
 8011fd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011fd4:	3301      	adds	r3, #1
 8011fd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011fda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011fde:	b29c      	uxth	r4, r3
 8011fe0:	f7ff fde2 	bl	8011ba8 <PnPLGetNComponents>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	429c      	cmp	r4, r3
 8011fe8:	d3ad      	bcc.n	8011f46 <extract_PnPL_cmd_data+0x3e>
          }
        }
      }
    }

    if (strcmp(componentName, "get_status") == 0)
 8011fea:	4948      	ldr	r1, [pc, #288]	@ (801210c <extract_PnPL_cmd_data+0x204>)
 8011fec:	6878      	ldr	r0, [r7, #4]
 8011fee:	f7ee f943 	bl	8000278 <strcmp>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d110      	bne.n	801201a <extract_PnPL_cmd_data+0x112>
    {
      *commandType = PNPL_CMD_GET;
 8011ff8:	68bb      	ldr	r3, [r7, #8]
 8011ffa:	2210      	movs	r2, #16
 8011ffc:	701a      	strb	r2, [r3, #0]
      strcpy(componentName, json_object_get_string(tempJSONObject, "get_status"));
 8011ffe:	4943      	ldr	r1, [pc, #268]	@ (801210c <extract_PnPL_cmd_data+0x204>)
 8012000:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012002:	f003 fdaa 	bl	8015b5a <json_object_get_string>
 8012006:	4603      	mov	r3, r0
 8012008:	4619      	mov	r1, r3
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f00c fc4b 	bl	801e8a6 <strcpy>
      json_value_free(tempJSON);
 8012010:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012012:	f003 ffb9 	bl	8015f88 <json_value_free>
      return PNPL_CMD_NO_ERROR_CODE;
 8012016:	2300      	movs	r3, #0
 8012018:	e072      	b.n	8012100 <extract_PnPL_cmd_data+0x1f8>
    }
    else if (strcmp(componentName, "update_device_status") == 0)
 801201a:	493d      	ldr	r1, [pc, #244]	@ (8012110 <extract_PnPL_cmd_data+0x208>)
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f7ee f92b 	bl	8000278 <strcmp>
 8012022:	4603      	mov	r3, r0
 8012024:	2b00      	cmp	r3, #0
 8012026:	d114      	bne.n	8012052 <extract_PnPL_cmd_data+0x14a>
    {
      *commandType = PNPL_CMD_UPDATE_DEVICE;
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	2221      	movs	r2, #33	@ 0x21
 801202c:	701a      	strb	r2, [r3, #0]
      JSON_Value *tempJSONValue = json_object_get_value(tempJSONObject, "update_device_status");
 801202e:	4938      	ldr	r1, [pc, #224]	@ (8012110 <extract_PnPL_cmd_data+0x208>)
 8012030:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012032:	f003 fd77 	bl	8015b24 <json_object_get_value>
 8012036:	61f8      	str	r0, [r7, #28]
      strcpy(commandString, json_serialize_to_string(tempJSONValue));
 8012038:	69f8      	ldr	r0, [r7, #28]
 801203a:	f004 f947 	bl	80162cc <json_serialize_to_string>
 801203e:	4603      	mov	r3, r0
 8012040:	4619      	mov	r1, r3
 8012042:	68f8      	ldr	r0, [r7, #12]
 8012044:	f00c fc2f 	bl	801e8a6 <strcpy>
      json_value_free(tempJSONValue);
 8012048:	69f8      	ldr	r0, [r7, #28]
 801204a:	f003 ff9d 	bl	8015f88 <json_value_free>
      return PNPL_CMD_NO_ERROR_CODE;
 801204e:	2300      	movs	r3, #0
 8012050:	e056      	b.n	8012100 <extract_PnPL_cmd_data+0x1f8>
    }
    else if (strcmp(componentName, "system_config") == 0)
 8012052:	4930      	ldr	r1, [pc, #192]	@ (8012114 <extract_PnPL_cmd_data+0x20c>)
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f7ee f90f 	bl	8000278 <strcmp>
 801205a:	4603      	mov	r3, r0
 801205c:	2b00      	cmp	r3, #0
 801205e:	d115      	bne.n	801208c <extract_PnPL_cmd_data+0x184>
    {
      *commandType = PNPL_CMD_SYSTEM_CONFIG;
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	2240      	movs	r2, #64	@ 0x40
 8012064:	701a      	strb	r2, [r3, #0]
      JSON_Object *tempJSONObject2 = json_object_get_object(tempJSONObject, "system_config");
 8012066:	492b      	ldr	r1, [pc, #172]	@ (8012114 <extract_PnPL_cmd_data+0x20c>)
 8012068:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801206a:	f003 fd88 	bl	8015b7e <json_object_get_object>
 801206e:	6238      	str	r0, [r7, #32]
      strcpy(componentName, json_object_get_string(tempJSONObject2, "comp_name"));
 8012070:	4929      	ldr	r1, [pc, #164]	@ (8012118 <extract_PnPL_cmd_data+0x210>)
 8012072:	6a38      	ldr	r0, [r7, #32]
 8012074:	f003 fd71 	bl	8015b5a <json_object_get_string>
 8012078:	4603      	mov	r3, r0
 801207a:	4619      	mov	r1, r3
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f00c fc12 	bl	801e8a6 <strcpy>
      json_value_free(tempJSON);
 8012082:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012084:	f003 ff80 	bl	8015f88 <json_value_free>
      return PNPL_CMD_NO_ERROR_CODE;
 8012088:	2300      	movs	r3, #0
 801208a:	e039      	b.n	8012100 <extract_PnPL_cmd_data+0x1f8>
    }
    else if (strcmp(componentName, "system_info") == 0)//NOTE Used for OLD get_presentation command
 801208c:	4923      	ldr	r1, [pc, #140]	@ (801211c <extract_PnPL_cmd_data+0x214>)
 801208e:	6878      	ldr	r0, [r7, #4]
 8012090:	f7ee f8f2 	bl	8000278 <strcmp>
 8012094:	4603      	mov	r3, r0
 8012096:	2b00      	cmp	r3, #0
 8012098:	d10a      	bne.n	80120b0 <extract_PnPL_cmd_data+0x1a8>
    {
      *commandType = PNPL_CMD_SYSTEM_INFO;
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	2250      	movs	r2, #80	@ 0x50
 801209e:	701a      	strb	r2, [r3, #0]
      strcpy(componentName, "");
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2200      	movs	r2, #0
 80120a4:	701a      	strb	r2, [r3, #0]
      json_value_free(tempJSON);
 80120a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80120a8:	f003 ff6e 	bl	8015f88 <json_value_free>
      return PNPL_CMD_NO_ERROR_CODE;
 80120ac:	2300      	movs	r3, #0
 80120ae:	e027      	b.n	8012100 <extract_PnPL_cmd_data+0x1f8>
    }
    else if (strcmp(componentName, "get_presentation") == 0)//NOTE New get_presentation command
 80120b0:	491b      	ldr	r1, [pc, #108]	@ (8012120 <extract_PnPL_cmd_data+0x218>)
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f7ee f8e0 	bl	8000278 <strcmp>
 80120b8:	4603      	mov	r3, r0
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d10a      	bne.n	80120d4 <extract_PnPL_cmd_data+0x1cc>
    {
      *commandType = PNPL_CMD_SYSTEM_INFO;
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	2250      	movs	r2, #80	@ 0x50
 80120c2:	701a      	strb	r2, [r3, #0]
      strcpy(componentName, "");
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2200      	movs	r2, #0
 80120c8:	701a      	strb	r2, [r3, #0]
      json_value_free(tempJSON);
 80120ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80120cc:	f003 ff5c 	bl	8015f88 <json_value_free>
      return PNPL_CMD_NO_ERROR_CODE;
 80120d0:	2300      	movs	r3, #0
 80120d2:	e015      	b.n	8012100 <extract_PnPL_cmd_data+0x1f8>
    }
    else if (strcmp(componentName, "get_identity") == 0)//NOTE New get_identity command (Asked from SW-Platform)
 80120d4:	4913      	ldr	r1, [pc, #76]	@ (8012124 <extract_PnPL_cmd_data+0x21c>)
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f7ee f8ce 	bl	8000278 <strcmp>
 80120dc:	4603      	mov	r3, r0
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d10a      	bne.n	80120f8 <extract_PnPL_cmd_data+0x1f0>
    {
      *commandType = PNPL_CMD_SYSTEM_INFO;
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	2250      	movs	r2, #80	@ 0x50
 80120e6:	701a      	strb	r2, [r3, #0]
      strcpy(componentName, "");
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2200      	movs	r2, #0
 80120ec:	701a      	strb	r2, [r3, #0]
      json_value_free(tempJSON);
 80120ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80120f0:	f003 ff4a 	bl	8015f88 <json_value_free>
      return PNPL_CMD_NO_ERROR_CODE;
 80120f4:	2300      	movs	r3, #0
 80120f6:	e003      	b.n	8012100 <extract_PnPL_cmd_data+0x1f8>
    }
  }
  json_value_free(tempJSON);
 80120f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80120fa:	f003 ff45 	bl	8015f88 <json_value_free>
  //Not JSON command!
  return PNPL_CMD_ERROR_CODE;
 80120fe:	2301      	movs	r3, #1
}
 8012100:	4618      	mov	r0, r3
 8012102:	3734      	adds	r7, #52	@ 0x34
 8012104:	46bd      	mov	sp, r7
 8012106:	bd90      	pop	{r4, r7, pc}
 8012108:	20045790 	.word	0x20045790
 801210c:	080230f8 	.word	0x080230f8
 8012110:	08023104 	.word	0x08023104
 8012114:	0802311c 	.word	0x0802311c
 8012118:	0802312c 	.word	0x0802312c
 801211c:	08023138 	.word	0x08023138
 8012120:	08023144 	.word	0x08023144
 8012124:	08023158 	.word	0x08023158

08012128 <PnPLParseCommand>:

uint8_t PnPLParseCommand(char *commandString, PnPLCommand_t *command)
{
 8012128:	b590      	push	{r4, r7, lr}
 801212a:	b099      	sub	sp, #100	@ 0x64
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	6039      	str	r1, [r7, #0]
  uint8_t commandType = 0;
 8012132:	2300      	movs	r3, #0
 8012134:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  char componentName[2 *
                     COMP_KEY_MAX_LENGTH]; //2* because this could be a comp or a comm key. If comm_key this is in the form (comp_key*comm_key)
  uint8_t ret = extract_PnPL_cmd_data(commandString, &commandType, componentName);
 8012138:	f107 020c 	add.w	r2, r7, #12
 801213c:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8012140:	4619      	mov	r1, r3
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f7ff fee0 	bl	8011f08 <extract_PnPL_cmd_data>
 8012148:	4603      	mov	r3, r0
 801214a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

  command->comm_type = commandType;
 801214e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	701a      	strb	r2, [r3, #0]
  strcpy(command->comp_name, componentName);
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	3301      	adds	r3, #1
 801215a:	f107 020c 	add.w	r2, r7, #12
 801215e:	4611      	mov	r1, r2
 8012160:	4618      	mov	r0, r3
 8012162:	f00c fba0 	bl	801e8a6 <strcpy>

  if (ret == PNPL_CMD_NO_ERROR_CODE)
 8012166:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 801216a:	2b00      	cmp	r3, #0
 801216c:	f040 808d 	bne.w	801228a <PnPLParseCommand+0x162>
  {
    if (commandType == PNPL_CMD_SET)
 8012170:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8012174:	2b20      	cmp	r3, #32
 8012176:	d154      	bne.n	8012222 <PnPLParseCommand+0xfa>
    {
      //Select right parse/update function
      for (uint8_t i = 0; i < PnPLGetNComponents(); i++)
 8012178:	2300      	movs	r3, #0
 801217a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801217e:	e048      	b.n	8012212 <PnPLParseCommand+0xea>
      {
        IPnPLComponent_t *p_obj = (IPnPLComponent_t *)(spPnPLObj.Components[i]);
 8012180:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012184:	4a45      	ldr	r2, [pc, #276]	@ (801229c <PnPLParseCommand+0x174>)
 8012186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801218a:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (strcmp(componentName, IPnPLComponentGetKey(p_obj)) == 0)
 801218c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801218e:	f7ff fc3f 	bl	8011a10 <IPnPLComponentGetKey>
 8012192:	4602      	mov	r2, r0
 8012194:	f107 030c 	add.w	r3, r7, #12
 8012198:	4611      	mov	r1, r2
 801219a:	4618      	mov	r0, r3
 801219c:	f7ee f86c 	bl	8000278 <strcmp>
 80121a0:	4603      	mov	r3, r0
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d103      	bne.n	80121ae <PnPLParseCommand+0x86>
        {
          IPnPLComponentSetProperty(p_obj, commandString);
 80121a6:	6879      	ldr	r1, [r7, #4]
 80121a8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80121aa:	f7ff fc73 	bl	8011a94 <IPnPLComponentSetProperty>
        }
        uint8_t nOfCommands = IPnPLComponentGetNCommands(p_obj); // 0 if none
 80121ae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80121b0:	f7ff fc3c 	bl	8011a2c <IPnPLComponentGetNCommands>
 80121b4:	4603      	mov	r3, r0
 80121b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if (nOfCommands > 0u)
 80121ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d022      	beq.n	8012208 <PnPLParseCommand+0xe0>
        {
          for (uint8_t j = 0; j < nOfCommands; j++)
 80121c2:	2300      	movs	r3, #0
 80121c4:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 80121c8:	e018      	b.n	80121fc <PnPLParseCommand+0xd4>
          {
            if (strcmp(IPnPLComponentGetCommandKey(p_obj, j), componentName) == 0)
 80121ca:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80121ce:	4619      	mov	r1, r3
 80121d0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80121d2:	f7ff fc39 	bl	8011a48 <IPnPLComponentGetCommandKey>
 80121d6:	4602      	mov	r2, r0
 80121d8:	f107 030c 	add.w	r3, r7, #12
 80121dc:	4619      	mov	r1, r3
 80121de:	4610      	mov	r0, r2
 80121e0:	f7ee f84a 	bl	8000278 <strcmp>
 80121e4:	4603      	mov	r3, r0
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d103      	bne.n	80121f2 <PnPLParseCommand+0xca>
            {
              IPnPLCommandExecuteFunction(p_obj, commandString);
 80121ea:	6879      	ldr	r1, [r7, #4]
 80121ec:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80121ee:	f7ff fc61 	bl	8011ab4 <IPnPLCommandExecuteFunction>
          for (uint8_t j = 0; j < nOfCommands; j++)
 80121f2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80121f6:	3301      	adds	r3, #1
 80121f8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 80121fc:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 8012200:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012204:	429a      	cmp	r2, r3
 8012206:	d3e0      	bcc.n	80121ca <PnPLParseCommand+0xa2>
      for (uint8_t i = 0; i < PnPLGetNComponents(); i++)
 8012208:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801220c:	3301      	adds	r3, #1
 801220e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012212:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012216:	b29c      	uxth	r4, r3
 8012218:	f7ff fcc6 	bl	8011ba8 <PnPLGetNComponents>
 801221c:	4603      	mov	r3, r0
 801221e:	429c      	cmp	r4, r3
 8012220:	d3ae      	bcc.n	8012180 <PnPLParseCommand+0x58>
            }
          }
        }
      }
    }
    if (commandType == PNPL_CMD_SYSTEM_CONFIG)
 8012222:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8012226:	2b40      	cmp	r3, #64	@ 0x40
 8012228:	d127      	bne.n	801227a <PnPLParseCommand+0x152>
    {
      for (uint8_t i = 0; i < PnPLGetNComponents(); i++)
 801222a:	2300      	movs	r3, #0
 801222c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 8012230:	e01b      	b.n	801226a <PnPLParseCommand+0x142>
      {
        IPnPLComponent_t *p_obj = (IPnPLComponent_t *)(spPnPLObj.Components[i]);
 8012232:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8012236:	4a19      	ldr	r2, [pc, #100]	@ (801229c <PnPLParseCommand+0x174>)
 8012238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801223c:	653b      	str	r3, [r7, #80]	@ 0x50
        if (strcmp(componentName, IPnPLComponentGetKey(p_obj)) == 0)
 801223e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012240:	f7ff fbe6 	bl	8011a10 <IPnPLComponentGetKey>
 8012244:	4602      	mov	r2, r0
 8012246:	f107 030c 	add.w	r3, r7, #12
 801224a:	4611      	mov	r1, r2
 801224c:	4618      	mov	r0, r3
 801224e:	f7ee f813 	bl	8000278 <strcmp>
 8012252:	4603      	mov	r3, r0
 8012254:	2b00      	cmp	r3, #0
 8012256:	d103      	bne.n	8012260 <PnPLParseCommand+0x138>
        {
          IPnPLComponentSetProperty(p_obj, commandString);
 8012258:	6879      	ldr	r1, [r7, #4]
 801225a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801225c:	f7ff fc1a 	bl	8011a94 <IPnPLComponentSetProperty>
      for (uint8_t i = 0; i < PnPLGetNComponents(); i++)
 8012260:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8012264:	3301      	adds	r3, #1
 8012266:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 801226a:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 801226e:	b29c      	uxth	r4, r3
 8012270:	f7ff fc9a 	bl	8011ba8 <PnPLGetNComponents>
 8012274:	4603      	mov	r3, r0
 8012276:	429c      	cmp	r4, r3
 8012278:	d3db      	bcc.n	8012232 <PnPLParseCommand+0x10a>
        }
      }
    }
    if (commandType == PNPL_CMD_UPDATE_DEVICE)
 801227a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801227e:	2b21      	cmp	r3, #33	@ 0x21
 8012280:	d106      	bne.n	8012290 <PnPLParseCommand+0x168>
    {
      PnPLUpdateDeviceStatusFromJSON(commandString);
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f7ff fdaa 	bl	8011ddc <PnPLUpdateDeviceStatusFromJSON>
 8012288:	e002      	b.n	8012290 <PnPLParseCommand+0x168>
    }
  }
  else
  {
    command->comm_type = PNPL_CMD_ERROR;
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	2270      	movs	r2, #112	@ 0x70
 801228e:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 8012290:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
}
 8012294:	4618      	mov	r0, r3
 8012296:	3764      	adds	r7, #100	@ 0x64
 8012298:	46bd      	mov	sp, r7
 801229a:	bd90      	pop	{r4, r7, pc}
 801229c:	20045790 	.word	0x20045790

080122a0 <PnPLSerializeResponse>:

uint8_t PnPLSerializeResponse(PnPLCommand_t *command, char **SerializedJSON, uint32_t *size, uint8_t pretty)
{
 80122a0:	b5b0      	push	{r4, r5, r7, lr}
 80122a2:	b088      	sub	sp, #32
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	60f8      	str	r0, [r7, #12]
 80122a8:	60b9      	str	r1, [r7, #8]
 80122aa:	607a      	str	r2, [r7, #4]
 80122ac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = PNPL_CMD_NO_ERROR_CODE;
 80122ae:	2300      	movs	r3, #0
 80122b0:	77fb      	strb	r3, [r7, #31]

  if(command->comm_type == PNPL_CMD_SYSTEM_INFO)
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	2b50      	cmp	r3, #80	@ 0x50
 80122b8:	d104      	bne.n	80122c4 <PnPLSerializeResponse+0x24>
  {
   (void)PnPLGetPresentationJSON(SerializedJSON, size);
 80122ba:	6879      	ldr	r1, [r7, #4]
 80122bc:	68b8      	ldr	r0, [r7, #8]
 80122be:	f7ff fc7f 	bl	8011bc0 <PnPLGetPresentationJSON>
 80122c2:	e05f      	b.n	8012384 <PnPLSerializeResponse+0xe4>
  }
  else if (command->comm_type == PNPL_CMD_GET)
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	781b      	ldrb	r3, [r3, #0]
 80122c8:	2b10      	cmp	r3, #16
 80122ca:	d148      	bne.n	801235e <PnPLSerializeResponse+0xbe>
  {
    uint16_t comp_found = 0;
 80122cc:	2300      	movs	r3, #0
 80122ce:	83bb      	strh	r3, [r7, #28]
    if (strcmp(command->comp_name, "all") == 0)
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	3301      	adds	r3, #1
 80122d4:	492e      	ldr	r1, [pc, #184]	@ (8012390 <PnPLSerializeResponse+0xf0>)
 80122d6:	4618      	mov	r0, r3
 80122d8:	f7ed ffce 	bl	8000278 <strcmp>
 80122dc:	4603      	mov	r3, r0
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d10a      	bne.n	80122f8 <PnPLSerializeResponse+0x58>
    {
      (void)PnPLGetDeviceStatusJSON(SerializedJSON, size, pretty);
 80122e2:	78fb      	ldrb	r3, [r7, #3]
 80122e4:	461a      	mov	r2, r3
 80122e6:	6879      	ldr	r1, [r7, #4]
 80122e8:	68b8      	ldr	r0, [r7, #8]
 80122ea:	f7ff fca9 	bl	8011c40 <PnPLGetDeviceStatusJSON>
      comp_found = PnPLGetNComponents();
 80122ee:	f7ff fc5b 	bl	8011ba8 <PnPLGetNComponents>
 80122f2:	4603      	mov	r3, r0
 80122f4:	83bb      	strh	r3, [r7, #28]
 80122f6:	e02c      	b.n	8012352 <PnPLSerializeResponse+0xb2>
    }
    else
    {
      for (uint8_t i = 0; i < PnPLGetNComponents(); i++)
 80122f8:	2300      	movs	r3, #0
 80122fa:	76fb      	strb	r3, [r7, #27]
 80122fc:	e020      	b.n	8012340 <PnPLSerializeResponse+0xa0>
      {
        IPnPLComponent_t *p_obj = (IPnPLComponent_t *)(spPnPLObj.Components[i]);
 80122fe:	7efb      	ldrb	r3, [r7, #27]
 8012300:	4a24      	ldr	r2, [pc, #144]	@ (8012394 <PnPLSerializeResponse+0xf4>)
 8012302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012306:	617b      	str	r3, [r7, #20]
        if (strcmp(command->comp_name, IPnPLComponentGetKey(p_obj)) == 0)
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	1c5c      	adds	r4, r3, #1
 801230c:	6978      	ldr	r0, [r7, #20]
 801230e:	f7ff fb7f 	bl	8011a10 <IPnPLComponentGetKey>
 8012312:	4603      	mov	r3, r0
 8012314:	4619      	mov	r1, r3
 8012316:	4620      	mov	r0, r4
 8012318:	f7ed ffae 	bl	8000278 <strcmp>
 801231c:	4603      	mov	r3, r0
 801231e:	2b00      	cmp	r3, #0
 8012320:	d10b      	bne.n	801233a <PnPLSerializeResponse+0x9a>
        {
          if (IPnPLComponentGetStatus(p_obj, SerializedJSON, size, pretty) == 0u)
 8012322:	78fb      	ldrb	r3, [r7, #3]
 8012324:	687a      	ldr	r2, [r7, #4]
 8012326:	68b9      	ldr	r1, [r7, #8]
 8012328:	6978      	ldr	r0, [r7, #20]
 801232a:	f7ff fb9f 	bl	8011a6c <IPnPLComponentGetStatus>
 801232e:	4603      	mov	r3, r0
 8012330:	2b00      	cmp	r3, #0
 8012332:	d10d      	bne.n	8012350 <PnPLSerializeResponse+0xb0>
          {
            comp_found = 1;
 8012334:	2301      	movs	r3, #1
 8012336:	83bb      	strh	r3, [r7, #28]
          }
          break;
 8012338:	e00a      	b.n	8012350 <PnPLSerializeResponse+0xb0>
      for (uint8_t i = 0; i < PnPLGetNComponents(); i++)
 801233a:	7efb      	ldrb	r3, [r7, #27]
 801233c:	3301      	adds	r3, #1
 801233e:	76fb      	strb	r3, [r7, #27]
 8012340:	7efb      	ldrb	r3, [r7, #27]
 8012342:	b29c      	uxth	r4, r3
 8012344:	f7ff fc30 	bl	8011ba8 <PnPLGetNComponents>
 8012348:	4603      	mov	r3, r0
 801234a:	429c      	cmp	r4, r3
 801234c:	d3d7      	bcc.n	80122fe <PnPLSerializeResponse+0x5e>
 801234e:	e000      	b.n	8012352 <PnPLSerializeResponse+0xb2>
          break;
 8012350:	bf00      	nop
        }
      }
    }
    if (comp_found == 0u)
 8012352:	8bbb      	ldrh	r3, [r7, #28]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d115      	bne.n	8012384 <PnPLSerializeResponse+0xe4>
    {
      ret = PNPL_CMD_ERROR_CODE;
 8012358:	2301      	movs	r3, #1
 801235a:	77fb      	strb	r3, [r7, #31]
 801235c:	e012      	b.n	8012384 <PnPLSerializeResponse+0xe4>
    }
  }
  else if (command->comm_type == PNPL_CMD_ERROR)
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	781b      	ldrb	r3, [r3, #0]
 8012362:	2b70      	cmp	r3, #112	@ 0x70
 8012364:	d10e      	bne.n	8012384 <PnPLSerializeResponse+0xe4>
  {
    (void)strcpy(*SerializedJSON, "{\"PnPL_Error\":\"\"}\0");
 8012366:	68bb      	ldr	r3, [r7, #8]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	4a0b      	ldr	r2, [pc, #44]	@ (8012398 <PnPLSerializeResponse+0xf8>)
 801236c:	461d      	mov	r5, r3
 801236e:	4614      	mov	r4, r2
 8012370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012372:	6028      	str	r0, [r5, #0]
 8012374:	6069      	str	r1, [r5, #4]
 8012376:	60aa      	str	r2, [r5, #8]
 8012378:	60eb      	str	r3, [r5, #12]
 801237a:	8823      	ldrh	r3, [r4, #0]
 801237c:	822b      	strh	r3, [r5, #16]
    *size = 18;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2212      	movs	r2, #18
 8012382:	601a      	str	r2, [r3, #0]
  }
  return ret;
 8012384:	7ffb      	ldrb	r3, [r7, #31]
}
 8012386:	4618      	mov	r0, r3
 8012388:	3720      	adds	r7, #32
 801238a:	46bd      	mov	sp, r7
 801238c:	bdb0      	pop	{r4, r5, r7, pc}
 801238e:	bf00      	nop
 8012390:	08023168 	.word	0x08023168
 8012394:	20045790 	.word	0x20045790
 8012398:	0802316c 	.word	0x0802316c

0801239c <setTelemetryValue>:

static uint8_t setTelemetryValue(uint8_t type, JSON_Object* json_obj, char* name, void* value, uint8_t n_sub_telemetries)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b098      	sub	sp, #96	@ 0x60
 80123a0:	af02      	add	r7, sp, #8
 80123a2:	60b9      	str	r1, [r7, #8]
 80123a4:	607a      	str	r2, [r7, #4]
 80123a6:	603b      	str	r3, [r7, #0]
 80123a8:	4603      	mov	r3, r0
 80123aa:	73fb      	strb	r3, [r7, #15]
	switch (type) {
 80123ac:	7bfb      	ldrb	r3, [r7, #15]
 80123ae:	2b04      	cmp	r3, #4
 80123b0:	f200 809c 	bhi.w	80124ec <setTelemetryValue+0x150>
 80123b4:	a201      	add	r2, pc, #4	@ (adr r2, 80123bc <setTelemetryValue+0x20>)
 80123b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123ba:	bf00      	nop
 80123bc:	080123d1 	.word	0x080123d1
 80123c0:	080123ed 	.word	0x080123ed
 80123c4:	08012409 	.word	0x08012409
 80123c8:	08012415 	.word	0x08012415
 80123cc:	08012425 	.word	0x08012425
		case PNPL_INT:
			json_object_dotset_number(json_obj, name, (double) *(int*) value);
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	4618      	mov	r0, r3
 80123d6:	f7ee f8b3 	bl	8000540 <__aeabi_i2d>
 80123da:	4602      	mov	r2, r0
 80123dc:	460b      	mov	r3, r1
 80123de:	ec43 2b10 	vmov	d0, r2, r3
 80123e2:	6879      	ldr	r1, [r7, #4]
 80123e4:	68b8      	ldr	r0, [r7, #8]
 80123e6:	f004 f9cc 	bl	8016782 <json_object_dotset_number>
			break;
 80123ea:	e080      	b.n	80124ee <setTelemetryValue+0x152>
		case PNPL_FLOAT:
			json_object_dotset_number(json_obj, name, *(float*) value);
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	4618      	mov	r0, r3
 80123f2:	f7ee f8b7 	bl	8000564 <__aeabi_f2d>
 80123f6:	4602      	mov	r2, r0
 80123f8:	460b      	mov	r3, r1
 80123fa:	ec43 2b10 	vmov	d0, r2, r3
 80123fe:	6879      	ldr	r1, [r7, #4]
 8012400:	68b8      	ldr	r0, [r7, #8]
 8012402:	f004 f9be 	bl	8016782 <json_object_dotset_number>
			break;
 8012406:	e072      	b.n	80124ee <setTelemetryValue+0x152>
		case PNPL_STRING:
			json_object_dotset_string(json_obj, name, (const char*) value);
 8012408:	683a      	ldr	r2, [r7, #0]
 801240a:	6879      	ldr	r1, [r7, #4]
 801240c:	68b8      	ldr	r0, [r7, #8]
 801240e:	f004 f995 	bl	801673c <json_object_dotset_string>
			break;
 8012412:	e06c      	b.n	80124ee <setTelemetryValue+0x152>
		case PNPL_BOOLEAN:
			json_object_dotset_boolean(json_obj, name, *(int*) value);
 8012414:	683b      	ldr	r3, [r7, #0]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	461a      	mov	r2, r3
 801241a:	6879      	ldr	r1, [r7, #4]
 801241c:	68b8      	ldr	r0, [r7, #8]
 801241e:	f004 f9d5 	bl	80167cc <json_object_dotset_boolean>
			break;
 8012422:	e064      	b.n	80124ee <setTelemetryValue+0x152>
		case PNPL_TELEMETRY:
			for (uint8_t j = 0; j < n_sub_telemetries; j++){
 8012424:	2300      	movs	r3, #0
 8012426:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 801242a:	e058      	b.n	80124de <setTelemetryValue+0x142>
				uint8_t sub_telemetry_type = ((PnPLTelemetry_t*) value)[j].telemetry_type;
 801242c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8012430:	4613      	mov	r3, r2
 8012432:	009b      	lsls	r3, r3, #2
 8012434:	4413      	add	r3, r2
 8012436:	00db      	lsls	r3, r3, #3
 8012438:	461a      	mov	r2, r3
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	4413      	add	r3, r2
 801243e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012442:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
			    char dotStr[(COMP_KEY_MAX_LENGTH * 2) + 1];
				(void)strcpy(dotStr, name);
 8012446:	f107 0314 	add.w	r3, r7, #20
 801244a:	6879      	ldr	r1, [r7, #4]
 801244c:	4618      	mov	r0, r3
 801244e:	f00c fa2a 	bl	801e8a6 <strcpy>
				(void)strcat(dotStr, ".");
 8012452:	f107 0314 	add.w	r3, r7, #20
 8012456:	4618      	mov	r0, r3
 8012458:	f7ed ff18 	bl	800028c <strlen>
 801245c:	4603      	mov	r3, r0
 801245e:	461a      	mov	r2, r3
 8012460:	f107 0314 	add.w	r3, r7, #20
 8012464:	4413      	add	r3, r2
 8012466:	4924      	ldr	r1, [pc, #144]	@ (80124f8 <setTelemetryValue+0x15c>)
 8012468:	461a      	mov	r2, r3
 801246a:	460b      	mov	r3, r1
 801246c:	881b      	ldrh	r3, [r3, #0]
 801246e:	8013      	strh	r3, [r2, #0]
				(void)strcat(dotStr, ((PnPLTelemetry_t*) value)[j].telemetry_name);
 8012470:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8012474:	4613      	mov	r3, r2
 8012476:	009b      	lsls	r3, r3, #2
 8012478:	4413      	add	r3, r2
 801247a:	00db      	lsls	r3, r3, #3
 801247c:	461a      	mov	r2, r3
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	4413      	add	r3, r2
 8012482:	461a      	mov	r2, r3
 8012484:	f107 0314 	add.w	r3, r7, #20
 8012488:	4611      	mov	r1, r2
 801248a:	4618      	mov	r0, r3
 801248c:	f00c f8d0 	bl	801e630 <strcat>
				uint8_t n_sub_sub_telemetries = ((PnPLTelemetry_t*) value)[j].n_sub_telemetries;
 8012490:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8012494:	4613      	mov	r3, r2
 8012496:	009b      	lsls	r3, r3, #2
 8012498:	4413      	add	r3, r2
 801249a:	00db      	lsls	r3, r3, #3
 801249c:	461a      	mov	r2, r3
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	4413      	add	r3, r2
 80124a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80124a6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				setTelemetryValue(sub_telemetry_type, json_obj, dotStr, ((PnPLTelemetry_t*) value)[j].telemetry_value, n_sub_sub_telemetries);
 80124aa:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80124ae:	4613      	mov	r3, r2
 80124b0:	009b      	lsls	r3, r3, #2
 80124b2:	4413      	add	r3, r2
 80124b4:	00db      	lsls	r3, r3, #3
 80124b6:	461a      	mov	r2, r3
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	4413      	add	r3, r2
 80124bc:	6a19      	ldr	r1, [r3, #32]
 80124be:	f107 0214 	add.w	r2, r7, #20
 80124c2:	f897 0056 	ldrb.w	r0, [r7, #86]	@ 0x56
 80124c6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80124ca:	9300      	str	r3, [sp, #0]
 80124cc:	460b      	mov	r3, r1
 80124ce:	68b9      	ldr	r1, [r7, #8]
 80124d0:	f7ff ff64 	bl	801239c <setTelemetryValue>
			for (uint8_t j = 0; j < n_sub_telemetries; j++){
 80124d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80124d8:	3301      	adds	r3, #1
 80124da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80124de:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80124e2:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80124e6:	429a      	cmp	r2, r3
 80124e8:	d3a0      	bcc.n	801242c <setTelemetryValue+0x90>
			}
			break;
 80124ea:	e000      	b.n	80124ee <setTelemetryValue+0x152>
		default:
			break;
 80124ec:	bf00      	nop
	}
	return PNPL_CMD_NO_ERROR_CODE;
 80124ee:	2300      	movs	r3, #0
}
 80124f0:	4618      	mov	r0, r3
 80124f2:	3758      	adds	r7, #88	@ 0x58
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}
 80124f8:	08023180 	.word	0x08023180

080124fc <PnPLSerializeTelemetry>:
 *        "tele_fieldN": valueN   -
 *      }
 *  }
 * */
uint8_t PnPLSerializeTelemetry(char *compName, PnPLTelemetry_t *telemetryValue, uint8_t telemetryNum, char **telemetryJSON, uint32_t *size, uint8_t pretty)
{
 80124fc:	b590      	push	{r4, r7, lr}
 80124fe:	b08d      	sub	sp, #52	@ 0x34
 8012500:	af02      	add	r7, sp, #8
 8012502:	60f8      	str	r0, [r7, #12]
 8012504:	60b9      	str	r1, [r7, #8]
 8012506:	603b      	str	r3, [r7, #0]
 8012508:	4613      	mov	r3, r2
 801250a:	71fb      	strb	r3, [r7, #7]
	JSON_Value *root_value = json_value_init_object();
 801250c:	f003 fd6a 	bl	8015fe4 <json_value_init_object>
 8012510:	6238      	str	r0, [r7, #32]
	JSON_Object *root_object = json_value_get_object(root_value);
 8012512:	6a38      	ldr	r0, [r7, #32]
 8012514:	f003 fc9d 	bl	8015e52 <json_value_get_object>
 8012518:	61f8      	str	r0, [r7, #28]

	JSON_Value *telemetry_value = json_value_init_object();
 801251a:	f003 fd63 	bl	8015fe4 <json_value_init_object>
 801251e:	61b8      	str	r0, [r7, #24]
	JSON_Object *telemetry_object = json_value_get_object(telemetry_value);
 8012520:	69b8      	ldr	r0, [r7, #24]
 8012522:	f003 fc96 	bl	8015e52 <json_value_get_object>
 8012526:	6178      	str	r0, [r7, #20]

	for (uint8_t i = 0; i < telemetryNum; i++) {
 8012528:	2300      	movs	r3, #0
 801252a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801252e:	e036      	b.n	801259e <PnPLSerializeTelemetry+0xa2>
		uint8_t telemetry_type = telemetryValue[i].telemetry_type;
 8012530:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8012534:	4613      	mov	r3, r2
 8012536:	009b      	lsls	r3, r3, #2
 8012538:	4413      	add	r3, r2
 801253a:	00db      	lsls	r3, r3, #3
 801253c:	461a      	mov	r2, r3
 801253e:	68bb      	ldr	r3, [r7, #8]
 8012540:	4413      	add	r3, r2
 8012542:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012546:	74fb      	strb	r3, [r7, #19]
		setTelemetryValue(telemetry_type, telemetry_object, telemetryValue[i].telemetry_name, telemetryValue[i].telemetry_value, telemetryValue[i].n_sub_telemetries);
 8012548:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801254c:	4613      	mov	r3, r2
 801254e:	009b      	lsls	r3, r3, #2
 8012550:	4413      	add	r3, r2
 8012552:	00db      	lsls	r3, r3, #3
 8012554:	461a      	mov	r2, r3
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	4413      	add	r3, r2
 801255a:	461c      	mov	r4, r3
 801255c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8012560:	4613      	mov	r3, r2
 8012562:	009b      	lsls	r3, r3, #2
 8012564:	4413      	add	r3, r2
 8012566:	00db      	lsls	r3, r3, #3
 8012568:	461a      	mov	r2, r3
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	4413      	add	r3, r2
 801256e:	6a19      	ldr	r1, [r3, #32]
 8012570:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8012574:	4613      	mov	r3, r2
 8012576:	009b      	lsls	r3, r3, #2
 8012578:	4413      	add	r3, r2
 801257a:	00db      	lsls	r3, r3, #3
 801257c:	461a      	mov	r2, r3
 801257e:	68bb      	ldr	r3, [r7, #8]
 8012580:	4413      	add	r3, r2
 8012582:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8012586:	7cf8      	ldrb	r0, [r7, #19]
 8012588:	9300      	str	r3, [sp, #0]
 801258a:	460b      	mov	r3, r1
 801258c:	4622      	mov	r2, r4
 801258e:	6979      	ldr	r1, [r7, #20]
 8012590:	f7ff ff04 	bl	801239c <setTelemetryValue>
	for (uint8_t i = 0; i < telemetryNum; i++) {
 8012594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012598:	3301      	adds	r3, #1
 801259a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801259e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80125a2:	79fb      	ldrb	r3, [r7, #7]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d3c3      	bcc.n	8012530 <PnPLSerializeTelemetry+0x34>
	}

	json_object_set_value(root_object, compName, telemetry_value);
 80125a8:	69ba      	ldr	r2, [r7, #24]
 80125aa:	68f9      	ldr	r1, [r7, #12]
 80125ac:	69f8      	ldr	r0, [r7, #28]
 80125ae:	f003 ff5e 	bl	801646e <json_object_set_value>

	/* convert to a json string and write to file */
	if(pretty == 1u)
 80125b2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80125b6:	2b01      	cmp	r3, #1
 80125b8:	d10c      	bne.n	80125d4 <PnPLSerializeTelemetry+0xd8>
	{
		*telemetryJSON = json_serialize_to_string_pretty(root_value);
 80125ba:	6a38      	ldr	r0, [r7, #32]
 80125bc:	f003 fefc 	bl	80163b8 <json_serialize_to_string_pretty>
 80125c0:	4602      	mov	r2, r0
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	601a      	str	r2, [r3, #0]
		*size = json_serialization_size_pretty(root_value);
 80125c6:	6a38      	ldr	r0, [r7, #32]
 80125c8:	f003 feb2 	bl	8016330 <json_serialization_size_pretty>
 80125cc:	4602      	mov	r2, r0
 80125ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125d0:	601a      	str	r2, [r3, #0]
 80125d2:	e00b      	b.n	80125ec <PnPLSerializeTelemetry+0xf0>
	}
	else
	{
		*telemetryJSON = json_serialize_to_string(root_value);
 80125d4:	6a38      	ldr	r0, [r7, #32]
 80125d6:	f003 fe79 	bl	80162cc <json_serialize_to_string>
 80125da:	4602      	mov	r2, r0
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	601a      	str	r2, [r3, #0]
		*size = json_serialization_size(root_value);
 80125e0:	6a38      	ldr	r0, [r7, #32]
 80125e2:	f003 fe2f 	bl	8016244 <json_serialization_size>
 80125e6:	4602      	mov	r2, r0
 80125e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125ea:	601a      	str	r2, [r3, #0]
	}

	json_value_free(root_value);
 80125ec:	6a38      	ldr	r0, [r7, #32]
 80125ee:	f003 fccb 	bl	8015f88 <json_value_free>
	return PNPL_CMD_NO_ERROR_CODE;
 80125f2:	2300      	movs	r3, #0
}
 80125f4:	4618      	mov	r0, r3
 80125f6:	372c      	adds	r7, #44	@ 0x2c
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd90      	pop	{r4, r7, pc}

080125fc <complex_abs>:
/*----------------------------------------------------------------------------*/
/* Support functions          			      						          */
/*----------------------------------------------------------------------------*/

// Calculation of the complex absolute value.
float complex_abs(float real, float compl) {
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	af00      	add	r7, sp, #0
 8012602:	ed87 0a01 	vstr	s0, [r7, #4]
 8012606:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 801260a:	edd7 7a01 	vldr	s15, [r7, #4]
 801260e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8012612:	edd7 7a00 	vldr	s15, [r7]
 8012616:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801261a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801261e:	eeb0 0a67 	vmov.f32	s0, s15
 8012622:	f00e fca5 	bl	8020f70 <sqrtf>
 8012626:	eef0 7a40 	vmov.f32	s15, s0
}
 801262a:	eeb0 0a67 	vmov.f32	s0, s15
 801262e:	3708      	adds	r7, #8
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}

08012634 <dot_product>:

// Dot product calculation using CMSIS DSP library.
float32_t dot_product(float32_t* in_1, uint32_t data_in1_size, float32_t* in_2, uint32_t data_in2_size) {
 8012634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012638:	b089      	sub	sp, #36	@ 0x24
 801263a:	af00      	add	r7, sp, #0
 801263c:	60f8      	str	r0, [r7, #12]
 801263e:	60b9      	str	r1, [r7, #8]
 8012640:	607a      	str	r2, [r7, #4]
 8012642:	603b      	str	r3, [r7, #0]
 8012644:	466b      	mov	r3, sp
 8012646:	461e      	mov	r6, r3

	float32_t multOutput[data_in1_size];
 8012648:	68b9      	ldr	r1, [r7, #8]
 801264a:	460b      	mov	r3, r1
 801264c:	3b01      	subs	r3, #1
 801264e:	61bb      	str	r3, [r7, #24]
 8012650:	2300      	movs	r3, #0
 8012652:	4688      	mov	r8, r1
 8012654:	4699      	mov	r9, r3
 8012656:	f04f 0200 	mov.w	r2, #0
 801265a:	f04f 0300 	mov.w	r3, #0
 801265e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8012662:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8012666:	ea4f 1248 	mov.w	r2, r8, lsl #5
 801266a:	2300      	movs	r3, #0
 801266c:	460c      	mov	r4, r1
 801266e:	461d      	mov	r5, r3
 8012670:	f04f 0200 	mov.w	r2, #0
 8012674:	f04f 0300 	mov.w	r3, #0
 8012678:	016b      	lsls	r3, r5, #5
 801267a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 801267e:	0162      	lsls	r2, r4, #5
 8012680:	008b      	lsls	r3, r1, #2
 8012682:	3307      	adds	r3, #7
 8012684:	08db      	lsrs	r3, r3, #3
 8012686:	00db      	lsls	r3, r3, #3
 8012688:	ebad 0d03 	sub.w	sp, sp, r3
 801268c:	466b      	mov	r3, sp
 801268e:	3303      	adds	r3, #3
 8012690:	089b      	lsrs	r3, r3, #2
 8012692:	009b      	lsls	r3, r3, #2
 8012694:	617b      	str	r3, [r7, #20]
	float32_t dot_out=0;
 8012696:	f04f 0300 	mov.w	r3, #0
 801269a:	613b      	str	r3, [r7, #16]
	arm_mult_f32(in_1, in_2, multOutput, data_in1_size);
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	697a      	ldr	r2, [r7, #20]
 80126a0:	6879      	ldr	r1, [r7, #4]
 80126a2:	68f8      	ldr	r0, [r7, #12]
 80126a4:	f006 fe0e 	bl	80192c4 <arm_mult_f32>
	for (int i=0;  i<data_in1_size;   i++){
 80126a8:	2300      	movs	r3, #0
 80126aa:	61fb      	str	r3, [r7, #28]
 80126ac:	e00d      	b.n	80126ca <dot_product+0x96>
		arm_add_f32(&dot_out, &multOutput[i], &dot_out, 1);
 80126ae:	69fb      	ldr	r3, [r7, #28]
 80126b0:	009b      	lsls	r3, r3, #2
 80126b2:	697a      	ldr	r2, [r7, #20]
 80126b4:	18d1      	adds	r1, r2, r3
 80126b6:	f107 0210 	add.w	r2, r7, #16
 80126ba:	f107 0010 	add.w	r0, r7, #16
 80126be:	2301      	movs	r3, #1
 80126c0:	f006 fe5a 	bl	8019378 <arm_add_f32>
	for (int i=0;  i<data_in1_size;   i++){
 80126c4:	69fb      	ldr	r3, [r7, #28]
 80126c6:	3301      	adds	r3, #1
 80126c8:	61fb      	str	r3, [r7, #28]
 80126ca:	69fb      	ldr	r3, [r7, #28]
 80126cc:	68ba      	ldr	r2, [r7, #8]
 80126ce:	429a      	cmp	r2, r3
 80126d0:	d8ed      	bhi.n	80126ae <dot_product+0x7a>
	}
	return dot_out;
 80126d2:	693b      	ldr	r3, [r7, #16]
 80126d4:	46b5      	mov	sp, r6
 80126d6:	ee07 3a90 	vmov	s15, r3
}
 80126da:	eeb0 0a67 	vmov.f32	s0, s15
 80126de:	3724      	adds	r7, #36	@ 0x24
 80126e0:	46bd      	mov	sp, r7
 80126e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080126e8 <hz_to_mel>:

// Conversion from Hz to Mel.
float hz_to_mel(float f_Hz_in) {
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b082      	sub	sp, #8
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	ed87 0a01 	vstr	s0, [r7, #4]
	return 2595*log10(1+f_Hz_in/700);
 80126f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80126f6:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8012750 <hz_to_mel+0x68>
 80126fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80126fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012702:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012706:	ee17 0a90 	vmov	r0, s15
 801270a:	f7ed ff2b 	bl	8000564 <__aeabi_f2d>
 801270e:	4602      	mov	r2, r0
 8012710:	460b      	mov	r3, r1
 8012712:	ec43 2b10 	vmov	d0, r2, r3
 8012716:	f00e fb47 	bl	8020da8 <log10>
 801271a:	ec51 0b10 	vmov	r0, r1, d0
 801271e:	a30a      	add	r3, pc, #40	@ (adr r3, 8012748 <hz_to_mel+0x60>)
 8012720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012724:	f7ed ff76 	bl	8000614 <__aeabi_dmul>
 8012728:	4602      	mov	r2, r0
 801272a:	460b      	mov	r3, r1
 801272c:	4610      	mov	r0, r2
 801272e:	4619      	mov	r1, r3
 8012730:	f7ee fa68 	bl	8000c04 <__aeabi_d2f>
 8012734:	4603      	mov	r3, r0
 8012736:	ee07 3a90 	vmov	s15, r3
}
 801273a:	eeb0 0a67 	vmov.f32	s0, s15
 801273e:	3708      	adds	r7, #8
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}
 8012744:	f3af 8000 	nop.w
 8012748:	00000000 	.word	0x00000000
 801274c:	40a44600 	.word	0x40a44600
 8012750:	442f0000 	.word	0x442f0000
 8012754:	00000000 	.word	0x00000000

08012758 <mel_to_hz>:

// Conversion from Mel to Hz.
float mel_to_hz(float f_Mel_in) {
 8012758:	b580      	push	{r7, lr}
 801275a:	b082      	sub	sp, #8
 801275c:	af00      	add	r7, sp, #0
 801275e:	ed87 0a01 	vstr	s0, [r7, #4]
	return (700*(pow(10,f_Mel_in/2595)-1));
 8012762:	edd7 7a01 	vldr	s15, [r7, #4]
 8012766:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80127d0 <mel_to_hz+0x78>
 801276a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801276e:	ee16 0a90 	vmov	r0, s13
 8012772:	f7ed fef7 	bl	8000564 <__aeabi_f2d>
 8012776:	4602      	mov	r2, r0
 8012778:	460b      	mov	r3, r1
 801277a:	ec43 2b11 	vmov	d1, r2, r3
 801277e:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 80127c8 <mel_to_hz+0x70>
 8012782:	f00e fb4f 	bl	8020e24 <pow>
 8012786:	ec51 0b10 	vmov	r0, r1, d0
 801278a:	f04f 0200 	mov.w	r2, #0
 801278e:	4b11      	ldr	r3, [pc, #68]	@ (80127d4 <mel_to_hz+0x7c>)
 8012790:	f7ed fd88 	bl	80002a4 <__aeabi_dsub>
 8012794:	4602      	mov	r2, r0
 8012796:	460b      	mov	r3, r1
 8012798:	4610      	mov	r0, r2
 801279a:	4619      	mov	r1, r3
 801279c:	f04f 0200 	mov.w	r2, #0
 80127a0:	4b0d      	ldr	r3, [pc, #52]	@ (80127d8 <mel_to_hz+0x80>)
 80127a2:	f7ed ff37 	bl	8000614 <__aeabi_dmul>
 80127a6:	4602      	mov	r2, r0
 80127a8:	460b      	mov	r3, r1
 80127aa:	4610      	mov	r0, r2
 80127ac:	4619      	mov	r1, r3
 80127ae:	f7ee fa29 	bl	8000c04 <__aeabi_d2f>
 80127b2:	4603      	mov	r3, r0
 80127b4:	ee07 3a90 	vmov	s15, r3
}
 80127b8:	eeb0 0a67 	vmov.f32	s0, s15
 80127bc:	3708      	adds	r7, #8
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}
 80127c2:	bf00      	nop
 80127c4:	f3af 8000 	nop.w
 80127c8:	00000000 	.word	0x00000000
 80127cc:	40240000 	.word	0x40240000
 80127d0:	45223000 	.word	0x45223000
 80127d4:	3ff00000 	.word	0x3ff00000
 80127d8:	4085e000 	.word	0x4085e000

080127dc <axis_selection>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing: Axis selection                                      */
/*----------------------------------------------------------------------------*/

void axis_selection(tridimensional_data_t * data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, axis_t axis) {
 80127dc:	b480      	push	{r7}
 80127de:	b089      	sub	sp, #36	@ 0x24
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	60f8      	str	r0, [r7, #12]
 80127e4:	60b9      	str	r1, [r7, #8]
 80127e6:	607a      	str	r2, [r7, #4]
 80127e8:	603b      	str	r3, [r7, #0]
	if (axis == X)
 80127ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d118      	bne.n	8012824 <axis_selection+0x48>
	{
		for (int i=0; i<data_out_size ; i++){
 80127f2:	2300      	movs	r3, #0
 80127f4:	61fb      	str	r3, [r7, #28]
 80127f6:	e010      	b.n	801281a <axis_selection+0x3e>
	    	data_out[i]=data_in[i].x;
 80127f8:	69fa      	ldr	r2, [r7, #28]
 80127fa:	4613      	mov	r3, r2
 80127fc:	005b      	lsls	r3, r3, #1
 80127fe:	4413      	add	r3, r2
 8012800:	009b      	lsls	r3, r3, #2
 8012802:	461a      	mov	r2, r3
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	441a      	add	r2, r3
 8012808:	69fb      	ldr	r3, [r7, #28]
 801280a:	009b      	lsls	r3, r3, #2
 801280c:	6879      	ldr	r1, [r7, #4]
 801280e:	440b      	add	r3, r1
 8012810:	6812      	ldr	r2, [r2, #0]
 8012812:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 8012814:	69fb      	ldr	r3, [r7, #28]
 8012816:	3301      	adds	r3, #1
 8012818:	61fb      	str	r3, [r7, #28]
 801281a:	69fb      	ldr	r3, [r7, #28]
 801281c:	683a      	ldr	r2, [r7, #0]
 801281e:	429a      	cmp	r2, r3
 8012820:	d8ea      	bhi.n	80127f8 <axis_selection+0x1c>
	{
		for (int i=0; i<data_out_size ; i++){
	    	data_out[i]=data_in[i].z;
	    }
	}
}
 8012822:	e038      	b.n	8012896 <axis_selection+0xba>
	else if (axis == Y)
 8012824:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012828:	2b01      	cmp	r3, #1
 801282a:	d118      	bne.n	801285e <axis_selection+0x82>
		for (int i=0; i<data_out_size ; i++){
 801282c:	2300      	movs	r3, #0
 801282e:	61bb      	str	r3, [r7, #24]
 8012830:	e010      	b.n	8012854 <axis_selection+0x78>
	    	data_out[i]=data_in[i].y;
 8012832:	69ba      	ldr	r2, [r7, #24]
 8012834:	4613      	mov	r3, r2
 8012836:	005b      	lsls	r3, r3, #1
 8012838:	4413      	add	r3, r2
 801283a:	009b      	lsls	r3, r3, #2
 801283c:	461a      	mov	r2, r3
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	441a      	add	r2, r3
 8012842:	69bb      	ldr	r3, [r7, #24]
 8012844:	009b      	lsls	r3, r3, #2
 8012846:	6879      	ldr	r1, [r7, #4]
 8012848:	440b      	add	r3, r1
 801284a:	6852      	ldr	r2, [r2, #4]
 801284c:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 801284e:	69bb      	ldr	r3, [r7, #24]
 8012850:	3301      	adds	r3, #1
 8012852:	61bb      	str	r3, [r7, #24]
 8012854:	69bb      	ldr	r3, [r7, #24]
 8012856:	683a      	ldr	r2, [r7, #0]
 8012858:	429a      	cmp	r2, r3
 801285a:	d8ea      	bhi.n	8012832 <axis_selection+0x56>
}
 801285c:	e01b      	b.n	8012896 <axis_selection+0xba>
	else if (axis == Z)
 801285e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012862:	2b02      	cmp	r3, #2
 8012864:	d117      	bne.n	8012896 <axis_selection+0xba>
		for (int i=0; i<data_out_size ; i++){
 8012866:	2300      	movs	r3, #0
 8012868:	617b      	str	r3, [r7, #20]
 801286a:	e010      	b.n	801288e <axis_selection+0xb2>
	    	data_out[i]=data_in[i].z;
 801286c:	697a      	ldr	r2, [r7, #20]
 801286e:	4613      	mov	r3, r2
 8012870:	005b      	lsls	r3, r3, #1
 8012872:	4413      	add	r3, r2
 8012874:	009b      	lsls	r3, r3, #2
 8012876:	461a      	mov	r2, r3
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	441a      	add	r2, r3
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	009b      	lsls	r3, r3, #2
 8012880:	6879      	ldr	r1, [r7, #4]
 8012882:	440b      	add	r3, r1
 8012884:	6892      	ldr	r2, [r2, #8]
 8012886:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	3301      	adds	r3, #1
 801288c:	617b      	str	r3, [r7, #20]
 801288e:	697b      	ldr	r3, [r7, #20]
 8012890:	683a      	ldr	r2, [r7, #0]
 8012892:	429a      	cmp	r2, r3
 8012894:	d8ea      	bhi.n	801286c <axis_selection+0x90>
}
 8012896:	bf00      	nop
 8012898:	3724      	adds	r7, #36	@ 0x24
 801289a:	46bd      	mov	sp, r7
 801289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a0:	4770      	bx	lr
	...

080128a4 <mean_removal>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing: Remove mean from signal                             */
/*----------------------------------------------------------------------------*/

void mean_removal (float32_t * data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size) {
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b086      	sub	sp, #24
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	60f8      	str	r0, [r7, #12]
 80128ac:	60b9      	str	r1, [r7, #8]
 80128ae:	607a      	str	r2, [r7, #4]
 80128b0:	603b      	str	r3, [r7, #0]

	static float32_t mean;

	// calculation of the signal mean value
	arm_mean_f32(data_in, data_in_size, &mean);
 80128b2:	4a12      	ldr	r2, [pc, #72]	@ (80128fc <mean_removal+0x58>)
 80128b4:	68b9      	ldr	r1, [r7, #8]
 80128b6:	68f8      	ldr	r0, [r7, #12]
 80128b8:	f005 fc38 	bl	801812c <arm_mean_f32>

	// subtract the mean value from the signal in order to remove gravity effect on the accelerometric data
	for (int i=0 ; i < data_out_size ; i++){
 80128bc:	2300      	movs	r3, #0
 80128be:	617b      	str	r3, [r7, #20]
 80128c0:	e013      	b.n	80128ea <mean_removal+0x46>
		data_out[i] = data_in[i] - mean;
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	009b      	lsls	r3, r3, #2
 80128c6:	68fa      	ldr	r2, [r7, #12]
 80128c8:	4413      	add	r3, r2
 80128ca:	ed93 7a00 	vldr	s14, [r3]
 80128ce:	4b0b      	ldr	r3, [pc, #44]	@ (80128fc <mean_removal+0x58>)
 80128d0:	edd3 7a00 	vldr	s15, [r3]
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	009b      	lsls	r3, r3, #2
 80128d8:	687a      	ldr	r2, [r7, #4]
 80128da:	4413      	add	r3, r2
 80128dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80128e0:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0 ; i < data_out_size ; i++){
 80128e4:	697b      	ldr	r3, [r7, #20]
 80128e6:	3301      	adds	r3, #1
 80128e8:	617b      	str	r3, [r7, #20]
 80128ea:	697b      	ldr	r3, [r7, #20]
 80128ec:	683a      	ldr	r2, [r7, #0]
 80128ee:	429a      	cmp	r2, r3
 80128f0:	d8e7      	bhi.n	80128c2 <mean_removal+0x1e>
	}
}
 80128f2:	bf00      	nop
 80128f4:	bf00      	nop
 80128f6:	3718      	adds	r7, #24
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}
 80128fc:	2004580c 	.word	0x2004580c

08012900 <triangular_filters_init>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing: Calculation of the triangular filters bank          */
/*----------------------------------------------------------------------------*/

void triangular_filters_init(uint32_t number_of_samples, uint32_t triangular_filters_bank_size, float32_t triangular_filters_bank_fraction, float32_t odr, triangular_filters_scale_t triangular_filters_scale, uint32_t* bin) {
 8012900:	b590      	push	{r4, r7, lr}
 8012902:	b091      	sub	sp, #68	@ 0x44
 8012904:	af00      	add	r7, sp, #0
 8012906:	6178      	str	r0, [r7, #20]
 8012908:	6139      	str	r1, [r7, #16]
 801290a:	ed87 0a03 	vstr	s0, [r7, #12]
 801290e:	edc7 0a02 	vstr	s1, [r7, #8]
 8012912:	603b      	str	r3, [r7, #0]
 8012914:	4613      	mov	r3, r2
 8012916:	71fb      	strb	r3, [r7, #7]

	float32_t low_freq;
	float32_t high_freq;
	float32_t* Hz_points = (float32_t*) SysAlloc((triangular_filters_bank_size + 2) * sizeof(float32_t));
 8012918:	693b      	ldr	r3, [r7, #16]
 801291a:	3302      	adds	r3, #2
 801291c:	009b      	lsls	r3, r3, #2
 801291e:	4618      	mov	r0, r3
 8012920:	f000 fb7a 	bl	8013018 <SysAlloc>
 8012924:	62f8      	str	r0, [r7, #44]	@ 0x2c
	float32_t d_hz_points;
	float32_t bin_sep;
	float32_t f_max;
	float32_t f_min = 0.0;
 8012926:	f04f 0300 	mov.w	r3, #0
 801292a:	62bb      	str	r3, [r7, #40]	@ 0x28

	f_max = odr * triangular_filters_bank_fraction;
 801292c:	ed97 7a02 	vldr	s14, [r7, #8]
 8012930:	edd7 7a03 	vldr	s15, [r7, #12]
 8012934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012938:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	if (triangular_filters_scale == TRIANGULAR_FILTERS_SCALE_MEL) {
 801293c:	79fb      	ldrb	r3, [r7, #7]
 801293e:	2b01      	cmp	r3, #1
 8012940:	d10c      	bne.n	801295c <triangular_filters_init+0x5c>
	    low_freq = hz_to_mel(f_min);
 8012942:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8012946:	f7ff fecf 	bl	80126e8 <hz_to_mel>
 801294a:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	    high_freq = hz_to_mel(f_max);
 801294e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8012952:	f7ff fec9 	bl	80126e8 <hz_to_mel>
 8012956:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
 801295a:	e003      	b.n	8012964 <triangular_filters_init+0x64>
	} else {
        low_freq = f_min;
 801295c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801295e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	    high_freq = f_max;
 8012960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012962:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	d_hz_points = (high_freq - low_freq) / (float32_t) (triangular_filters_bank_size + 1);
 8012964:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8012968:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 801296c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8012970:	693b      	ldr	r3, [r7, #16]
 8012972:	3301      	adds	r3, #1
 8012974:	ee07 3a90 	vmov	s15, r3
 8012978:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801297c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012980:	edc7 7a08 	vstr	s15, [r7, #32]

	bin_sep = odr / (float32_t) number_of_samples;
 8012984:	697b      	ldr	r3, [r7, #20]
 8012986:	ee07 3a90 	vmov	s15, r3
 801298a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801298e:	edd7 6a02 	vldr	s13, [r7, #8]
 8012992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012996:	edc7 7a07 	vstr	s15, [r7, #28]

	if (triangular_filters_scale == TRIANGULAR_FILTERS_SCALE_MEL) {
 801299a:	79fb      	ldrb	r3, [r7, #7]
 801299c:	2b01      	cmp	r3, #1
 801299e:	d14e      	bne.n	8012a3e <triangular_filters_init+0x13e>
		for (int i = 0; i < triangular_filters_bank_size + 2; i++){
 80129a0:	2300      	movs	r3, #0
 80129a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80129a4:	e045      	b.n	8012a32 <triangular_filters_init+0x132>
			Hz_points[i] = (float32_t) (low_freq + i * d_hz_points);
 80129a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129a8:	ee07 3a90 	vmov	s15, r3
 80129ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80129b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80129b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80129b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129ba:	009b      	lsls	r3, r3, #2
 80129bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80129be:	4413      	add	r3, r2
 80129c0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80129c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80129c8:	edc3 7a00 	vstr	s15, [r3]
			Hz_points[i] = mel_to_hz(Hz_points[i]);
 80129cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129ce:	009b      	lsls	r3, r3, #2
 80129d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80129d2:	4413      	add	r3, r2
 80129d4:	edd3 7a00 	vldr	s15, [r3]
 80129d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129da:	009b      	lsls	r3, r3, #2
 80129dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80129de:	18d4      	adds	r4, r2, r3
 80129e0:	eeb0 0a67 	vmov.f32	s0, s15
 80129e4:	f7ff feb8 	bl	8012758 <mel_to_hz>
 80129e8:	eef0 7a40 	vmov.f32	s15, s0
 80129ec:	edc4 7a00 	vstr	s15, [r4]
			bin[i] = floor((Hz_points[i] / bin_sep));
 80129f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129f2:	009b      	lsls	r3, r3, #2
 80129f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80129f6:	4413      	add	r3, r2
 80129f8:	ed93 7a00 	vldr	s14, [r3]
 80129fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8012a00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012a04:	ee16 0a90 	vmov	r0, s13
 8012a08:	f7ed fdac 	bl	8000564 <__aeabi_f2d>
 8012a0c:	4602      	mov	r2, r0
 8012a0e:	460b      	mov	r3, r1
 8012a10:	ec43 2b10 	vmov	d0, r2, r3
 8012a14:	f00e fb44 	bl	80210a0 <floor>
 8012a18:	ec51 0b10 	vmov	r0, r1, d0
 8012a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a1e:	009b      	lsls	r3, r3, #2
 8012a20:	683a      	ldr	r2, [r7, #0]
 8012a22:	18d4      	adds	r4, r2, r3
 8012a24:	f7ee f8ce 	bl	8000bc4 <__aeabi_d2uiz>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	6023      	str	r3, [r4, #0]
		for (int i = 0; i < triangular_filters_bank_size + 2; i++){
 8012a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a2e:	3301      	adds	r3, #1
 8012a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	1c9a      	adds	r2, r3, #2
 8012a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	d8b4      	bhi.n	80129a6 <triangular_filters_init+0xa6>
 8012a3c:	e03b      	b.n	8012ab6 <triangular_filters_init+0x1b6>
		}
	} else {
		for (int i = 0; i < triangular_filters_bank_size + 2; i++){
 8012a3e:	2300      	movs	r3, #0
 8012a40:	633b      	str	r3, [r7, #48]	@ 0x30
 8012a42:	e033      	b.n	8012aac <triangular_filters_init+0x1ac>
			Hz_points[i] = (float32_t) (low_freq + i * d_hz_points);
 8012a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a46:	ee07 3a90 	vmov	s15, r3
 8012a4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012a4e:	edd7 7a08 	vldr	s15, [r7, #32]
 8012a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a58:	009b      	lsls	r3, r3, #2
 8012a5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a5c:	4413      	add	r3, r2
 8012a5e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8012a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012a66:	edc3 7a00 	vstr	s15, [r3]
			bin[i] = floor((Hz_points[i] / bin_sep));
 8012a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a6c:	009b      	lsls	r3, r3, #2
 8012a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a70:	4413      	add	r3, r2
 8012a72:	ed93 7a00 	vldr	s14, [r3]
 8012a76:	edd7 7a07 	vldr	s15, [r7, #28]
 8012a7a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012a7e:	ee16 0a90 	vmov	r0, s13
 8012a82:	f7ed fd6f 	bl	8000564 <__aeabi_f2d>
 8012a86:	4602      	mov	r2, r0
 8012a88:	460b      	mov	r3, r1
 8012a8a:	ec43 2b10 	vmov	d0, r2, r3
 8012a8e:	f00e fb07 	bl	80210a0 <floor>
 8012a92:	ec51 0b10 	vmov	r0, r1, d0
 8012a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a98:	009b      	lsls	r3, r3, #2
 8012a9a:	683a      	ldr	r2, [r7, #0]
 8012a9c:	18d4      	adds	r4, r2, r3
 8012a9e:	f7ee f891 	bl	8000bc4 <__aeabi_d2uiz>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	6023      	str	r3, [r4, #0]
		for (int i = 0; i < triangular_filters_bank_size + 2; i++){
 8012aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aa8:	3301      	adds	r3, #1
 8012aaa:	633b      	str	r3, [r7, #48]	@ 0x30
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	1c9a      	adds	r2, r3, #2
 8012ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d8c6      	bhi.n	8012a44 <triangular_filters_init+0x144>
		}
	}

	SysFree(Hz_points);
 8012ab6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012ab8:	f000 fabd 	bl	8013036 <SysFree>
}
 8012abc:	bf00      	nop
 8012abe:	3744      	adds	r7, #68	@ 0x44
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd90      	pop	{r4, r7, pc}

08012ac4 <multipliers_init>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing: Initializing the multipliers array                  */
/*----------------------------------------------------------------------------*/

void multipliers_init(float32_t* multipliers, uint32_t data_size, signal_windowing_t signal_windowing) {
 8012ac4:	b590      	push	{r4, r7, lr}
 8012ac6:	b087      	sub	sp, #28
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	60f8      	str	r0, [r7, #12]
 8012acc:	60b9      	str	r1, [r7, #8]
 8012ace:	4613      	mov	r3, r2
 8012ad0:	71fb      	strb	r3, [r7, #7]
	switch (signal_windowing) {
 8012ad2:	79fb      	ldrb	r3, [r7, #7]
 8012ad4:	2b01      	cmp	r3, #1
 8012ad6:	d13a      	bne.n	8012b4e <multipliers_init+0x8a>
		case HANNING:
		{
			for (int i = 0; i < data_size; i++) {
 8012ad8:	2300      	movs	r3, #0
 8012ada:	617b      	str	r3, [r7, #20]
 8012adc:	e032      	b.n	8012b44 <multipliers_init+0x80>
				multipliers[i] = 0.5 * (1 - arm_cos_f32((float32_t) 2*PI*i/(data_size-1)));
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	ee07 3a90 	vmov	s15, r3
 8012ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ae8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8012b58 <multipliers_init+0x94>
 8012aec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	3b01      	subs	r3, #1
 8012af4:	ee07 3a90 	vmov	s15, r3
 8012af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012afc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012b00:	eeb0 0a66 	vmov.f32	s0, s13
 8012b04:	f006 fb50 	bl	80191a8 <arm_cos_f32>
 8012b08:	eef0 7a40 	vmov.f32	s15, s0
 8012b0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b14:	ee17 0a90 	vmov	r0, s15
 8012b18:	f7ed fd24 	bl	8000564 <__aeabi_f2d>
 8012b1c:	f04f 0200 	mov.w	r2, #0
 8012b20:	4b0e      	ldr	r3, [pc, #56]	@ (8012b5c <multipliers_init+0x98>)
 8012b22:	f7ed fd77 	bl	8000614 <__aeabi_dmul>
 8012b26:	4602      	mov	r2, r0
 8012b28:	460b      	mov	r3, r1
 8012b2a:	4610      	mov	r0, r2
 8012b2c:	4619      	mov	r1, r3
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	009b      	lsls	r3, r3, #2
 8012b32:	68fa      	ldr	r2, [r7, #12]
 8012b34:	18d4      	adds	r4, r2, r3
 8012b36:	f7ee f865 	bl	8000c04 <__aeabi_d2f>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	6023      	str	r3, [r4, #0]
			for (int i = 0; i < data_size; i++) {
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	3301      	adds	r3, #1
 8012b42:	617b      	str	r3, [r7, #20]
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	68ba      	ldr	r2, [r7, #8]
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d8c8      	bhi.n	8012ade <multipliers_init+0x1a>
			}
			break;
 8012b4c:	e000      	b.n	8012b50 <multipliers_init+0x8c>
		}
		default: {
			// no window applied (rectangular case)
			break;
 8012b4e:	bf00      	nop
		}
	}
}
 8012b50:	bf00      	nop
 8012b52:	371c      	adds	r7, #28
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd90      	pop	{r4, r7, pc}
 8012b58:	40c90fdb 	.word	0x40c90fdb
 8012b5c:	3fe00000 	.word	0x3fe00000

08012b60 <hanning>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing: Multiply the Hanning window to the input signal     */
/*----------------------------------------------------------------------------*/

void hanning(float32_t* data_in, uint32_t data_in_size, float32_t* data_out, uint32_t data_out_size, float32_t* multipliers) {
 8012b60:	b480      	push	{r7}
 8012b62:	b087      	sub	sp, #28
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	60f8      	str	r0, [r7, #12]
 8012b68:	60b9      	str	r1, [r7, #8]
 8012b6a:	607a      	str	r2, [r7, #4]
 8012b6c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < data_in_size; i++) {
 8012b6e:	2300      	movs	r3, #0
 8012b70:	617b      	str	r3, [r7, #20]
 8012b72:	e016      	b.n	8012ba2 <hanning+0x42>
		data_out[i] = multipliers[i] * data_in[i];
 8012b74:	697b      	ldr	r3, [r7, #20]
 8012b76:	009b      	lsls	r3, r3, #2
 8012b78:	6a3a      	ldr	r2, [r7, #32]
 8012b7a:	4413      	add	r3, r2
 8012b7c:	ed93 7a00 	vldr	s14, [r3]
 8012b80:	697b      	ldr	r3, [r7, #20]
 8012b82:	009b      	lsls	r3, r3, #2
 8012b84:	68fa      	ldr	r2, [r7, #12]
 8012b86:	4413      	add	r3, r2
 8012b88:	edd3 7a00 	vldr	s15, [r3]
 8012b8c:	697b      	ldr	r3, [r7, #20]
 8012b8e:	009b      	lsls	r3, r3, #2
 8012b90:	687a      	ldr	r2, [r7, #4]
 8012b92:	4413      	add	r3, r2
 8012b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b98:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < data_in_size; i++) {
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	3301      	adds	r3, #1
 8012ba0:	617b      	str	r3, [r7, #20]
 8012ba2:	697b      	ldr	r3, [r7, #20]
 8012ba4:	68ba      	ldr	r2, [r7, #8]
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	d8e4      	bhi.n	8012b74 <hanning+0x14>
	}
}
 8012baa:	bf00      	nop
 8012bac:	bf00      	nop
 8012bae:	371c      	adds	r7, #28
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb6:	4770      	bx	lr

08012bb8 <fft>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing: FFT Calculation using CMSIS DSP Library             */
/*----------------------------------------------------------------------------*/

void fft(float32_t *data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, arm_rfft_fast_instance_f32 * fft_handler, signal_windowing_t signal_windowing, float32_t* multipliers) {
 8012bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bbc:	b08b      	sub	sp, #44	@ 0x2c
 8012bbe:	af02      	add	r7, sp, #8
 8012bc0:	60f8      	str	r0, [r7, #12]
 8012bc2:	60b9      	str	r1, [r7, #8]
 8012bc4:	607a      	str	r2, [r7, #4]
 8012bc6:	603b      	str	r3, [r7, #0]
 8012bc8:	466b      	mov	r3, sp
 8012bca:	461e      	mov	r6, r3
	float32_t fft_out_buf[data_in_size];
 8012bcc:	68b9      	ldr	r1, [r7, #8]
 8012bce:	460b      	mov	r3, r1
 8012bd0:	3b01      	subs	r3, #1
 8012bd2:	617b      	str	r3, [r7, #20]
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	4688      	mov	r8, r1
 8012bd8:	4699      	mov	r9, r3
 8012bda:	f04f 0200 	mov.w	r2, #0
 8012bde:	f04f 0300 	mov.w	r3, #0
 8012be2:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8012be6:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8012bea:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8012bee:	2300      	movs	r3, #0
 8012bf0:	460c      	mov	r4, r1
 8012bf2:	461d      	mov	r5, r3
 8012bf4:	f04f 0200 	mov.w	r2, #0
 8012bf8:	f04f 0300 	mov.w	r3, #0
 8012bfc:	016b      	lsls	r3, r5, #5
 8012bfe:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8012c02:	0162      	lsls	r2, r4, #5
 8012c04:	008b      	lsls	r3, r1, #2
 8012c06:	3307      	adds	r3, #7
 8012c08:	08db      	lsrs	r3, r3, #3
 8012c0a:	00db      	lsls	r3, r3, #3
 8012c0c:	ebad 0d03 	sub.w	sp, sp, r3
 8012c10:	ab02      	add	r3, sp, #8
 8012c12:	3303      	adds	r3, #3
 8012c14:	089b      	lsrs	r3, r3, #2
 8012c16:	009b      	lsls	r3, r3, #2
 8012c18:	613b      	str	r3, [r7, #16]
	switch (signal_windowing) {
 8012c1a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8012c1e:	2b01      	cmp	r3, #1
 8012c20:	d108      	bne.n	8012c34 <fft+0x7c>
		case HANNING:
		{
			hanning(data_in, data_in_size, data_in, data_in_size, multipliers);
 8012c22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012c24:	9300      	str	r3, [sp, #0]
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	68fa      	ldr	r2, [r7, #12]
 8012c2a:	68b9      	ldr	r1, [r7, #8]
 8012c2c:	68f8      	ldr	r0, [r7, #12]
 8012c2e:	f7ff ff97 	bl	8012b60 <hanning>
			break;
 8012c32:	e000      	b.n	8012c36 <fft+0x7e>
		}
		default: {
			// no window applied (rectangular case)
			break;
 8012c34:	bf00      	nop
		}
	}

	arm_rfft_fast_f32(fft_handler, (float32_t*)  data_in, (float32_t*) fft_out_buf, 0);
 8012c36:	2300      	movs	r3, #0
 8012c38:	693a      	ldr	r2, [r7, #16]
 8012c3a:	68f9      	ldr	r1, [r7, #12]
 8012c3c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8012c3e:	f005 fccf 	bl	80185e0 <arm_rfft_fast_f32>

	int freqpoint = 0;
 8012c42:	2300      	movs	r3, #0
 8012c44:	61fb      	str	r3, [r7, #28]

	for (int i=0;   i<data_in_size   ; i=i+2) {
 8012c46:	2300      	movs	r3, #0
 8012c48:	61bb      	str	r3, [r7, #24]
 8012c4a:	e036      	b.n	8012cba <fft+0x102>
		data_out[freqpoint] =(complex_abs(fft_out_buf[i], fft_out_buf[i+1]));
 8012c4c:	693a      	ldr	r2, [r7, #16]
 8012c4e:	69bb      	ldr	r3, [r7, #24]
 8012c50:	009b      	lsls	r3, r3, #2
 8012c52:	4413      	add	r3, r2
 8012c54:	edd3 7a00 	vldr	s15, [r3]
 8012c58:	69bb      	ldr	r3, [r7, #24]
 8012c5a:	3301      	adds	r3, #1
 8012c5c:	693a      	ldr	r2, [r7, #16]
 8012c5e:	009b      	lsls	r3, r3, #2
 8012c60:	4413      	add	r3, r2
 8012c62:	ed93 7a00 	vldr	s14, [r3]
 8012c66:	69fb      	ldr	r3, [r7, #28]
 8012c68:	009b      	lsls	r3, r3, #2
 8012c6a:	687a      	ldr	r2, [r7, #4]
 8012c6c:	18d4      	adds	r4, r2, r3
 8012c6e:	eef0 0a47 	vmov.f32	s1, s14
 8012c72:	eeb0 0a67 	vmov.f32	s0, s15
 8012c76:	f7ff fcc1 	bl	80125fc <complex_abs>
 8012c7a:	eef0 7a40 	vmov.f32	s15, s0
 8012c7e:	edc4 7a00 	vstr	s15, [r4]
		if(data_out[freqpoint] < 1e-8){
 8012c82:	69fb      	ldr	r3, [r7, #28]
 8012c84:	009b      	lsls	r3, r3, #2
 8012c86:	687a      	ldr	r2, [r7, #4]
 8012c88:	4413      	add	r3, r2
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f7ed fc69 	bl	8000564 <__aeabi_f2d>
 8012c92:	a310      	add	r3, pc, #64	@ (adr r3, 8012cd4 <fft+0x11c>)
 8012c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c98:	f7ed ff2e 	bl	8000af8 <__aeabi_dcmplt>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d005      	beq.n	8012cae <fft+0xf6>
			data_out[freqpoint] = 1e-8;
 8012ca2:	69fb      	ldr	r3, [r7, #28]
 8012ca4:	009b      	lsls	r3, r3, #2
 8012ca6:	687a      	ldr	r2, [r7, #4]
 8012ca8:	4413      	add	r3, r2
 8012caa:	4a09      	ldr	r2, [pc, #36]	@ (8012cd0 <fft+0x118>)
 8012cac:	601a      	str	r2, [r3, #0]
		}

		freqpoint++;
 8012cae:	69fb      	ldr	r3, [r7, #28]
 8012cb0:	3301      	adds	r3, #1
 8012cb2:	61fb      	str	r3, [r7, #28]
	for (int i=0;   i<data_in_size   ; i=i+2) {
 8012cb4:	69bb      	ldr	r3, [r7, #24]
 8012cb6:	3302      	adds	r3, #2
 8012cb8:	61bb      	str	r3, [r7, #24]
 8012cba:	69bb      	ldr	r3, [r7, #24]
 8012cbc:	68ba      	ldr	r2, [r7, #8]
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d8c4      	bhi.n	8012c4c <fft+0x94>
 8012cc2:	46b5      	mov	sp, r6
	}
}
 8012cc4:	bf00      	nop
 8012cc6:	3724      	adds	r7, #36	@ 0x24
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012cce:	bf00      	nop
 8012cd0:	322bcc77 	.word	0x322bcc77
 8012cd4:	e2308c3a 	.word	0xe2308c3a
 8012cd8:	3e45798e 	.word	0x3e45798e

08012cdc <triangular_filters_convolution>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing: Convolution of the triangular filters bank          */
/*----------------------------------------------------------------------------*/

void triangular_filters_convolution(float32_t * data_in, uint32_t data_in_size, float32_t * data_out,  uint32_t data_out_size, uint32_t * bin) {
 8012cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ce0:	b08f      	sub	sp, #60	@ 0x3c
 8012ce2:	af00      	add	r7, sp, #0
 8012ce4:	60f8      	str	r0, [r7, #12]
 8012ce6:	60b9      	str	r1, [r7, #8]
 8012ce8:	607a      	str	r2, [r7, #4]
 8012cea:	603b      	str	r3, [r7, #0]
 8012cec:	466b      	mov	r3, sp
 8012cee:	461e      	mov	r6, r3

	int f_m_minus=0, f_m=0, f_m_plus=0;
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	623b      	str	r3, [r7, #32]
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	61fb      	str	r3, [r7, #28]
	float32_t in_vector[data_in_size];
 8012cfc:	68b9      	ldr	r1, [r7, #8]
 8012cfe:	460b      	mov	r3, r1
 8012d00:	3b01      	subs	r3, #1
 8012d02:	61bb      	str	r3, [r7, #24]
 8012d04:	2300      	movs	r3, #0
 8012d06:	4688      	mov	r8, r1
 8012d08:	4699      	mov	r9, r3
 8012d0a:	f04f 0200 	mov.w	r2, #0
 8012d0e:	f04f 0300 	mov.w	r3, #0
 8012d12:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8012d16:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8012d1a:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8012d1e:	2300      	movs	r3, #0
 8012d20:	460c      	mov	r4, r1
 8012d22:	461d      	mov	r5, r3
 8012d24:	f04f 0200 	mov.w	r2, #0
 8012d28:	f04f 0300 	mov.w	r3, #0
 8012d2c:	016b      	lsls	r3, r5, #5
 8012d2e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8012d32:	0162      	lsls	r2, r4, #5
 8012d34:	008b      	lsls	r3, r1, #2
 8012d36:	3307      	adds	r3, #7
 8012d38:	08db      	lsrs	r3, r3, #3
 8012d3a:	00db      	lsls	r3, r3, #3
 8012d3c:	ebad 0d03 	sub.w	sp, sp, r3
 8012d40:	466b      	mov	r3, sp
 8012d42:	3303      	adds	r3, #3
 8012d44:	089b      	lsrs	r3, r3, #2
 8012d46:	009b      	lsls	r3, r3, #2
 8012d48:	617b      	str	r3, [r7, #20]

	for (int m=1; m < data_out_size+1; m++){
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8012d4e:	e084      	b.n	8012e5a <triangular_filters_convolution+0x17e>
		f_m_minus = bin[m-1];
 8012d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012d56:	3b01      	subs	r3, #1
 8012d58:	009b      	lsls	r3, r3, #2
 8012d5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012d5c:	4413      	add	r3, r2
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	627b      	str	r3, [r7, #36]	@ 0x24
		f_m = bin[m];
 8012d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d64:	009b      	lsls	r3, r3, #2
 8012d66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012d68:	4413      	add	r3, r2
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	623b      	str	r3, [r7, #32]
		f_m_plus = bin[m+1];
 8012d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d70:	3301      	adds	r3, #1
 8012d72:	009b      	lsls	r3, r3, #2
 8012d74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012d76:	4413      	add	r3, r2
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	61fb      	str	r3, [r7, #28]

		for (int i=0; i<data_in_size   ;i++){
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012d80:	e009      	b.n	8012d96 <triangular_filters_convolution+0xba>
			in_vector[i] = (float32_t) 0.0;
 8012d82:	697a      	ldr	r2, [r7, #20]
 8012d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d86:	009b      	lsls	r3, r3, #2
 8012d88:	4413      	add	r3, r2
 8012d8a:	f04f 0200 	mov.w	r2, #0
 8012d8e:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_in_size   ;i++){
 8012d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d92:	3301      	adds	r3, #1
 8012d94:	633b      	str	r3, [r7, #48]	@ 0x30
 8012d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d98:	68ba      	ldr	r2, [r7, #8]
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d8f1      	bhi.n	8012d82 <triangular_filters_convolution+0xa6>
		}
		for (int k=f_m_minus;k < f_m;k++){
 8012d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012da2:	e01d      	b.n	8012de0 <triangular_filters_convolution+0x104>
			in_vector[k] = (((float32_t)k-f_m_minus)/(f_m-f_m_minus));
 8012da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012da6:	ee07 3a90 	vmov	s15, r3
 8012daa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012db0:	ee07 3a90 	vmov	s15, r3
 8012db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012db8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8012dbc:	6a3a      	ldr	r2, [r7, #32]
 8012dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dc0:	1ad3      	subs	r3, r2, r3
 8012dc2:	ee07 3a90 	vmov	s15, r3
 8012dc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012dca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012dce:	697a      	ldr	r2, [r7, #20]
 8012dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dd2:	009b      	lsls	r3, r3, #2
 8012dd4:	4413      	add	r3, r2
 8012dd6:	edc3 7a00 	vstr	s15, [r3]
		for (int k=f_m_minus;k < f_m;k++){
 8012dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ddc:	3301      	adds	r3, #1
 8012dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012de0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012de2:	6a3b      	ldr	r3, [r7, #32]
 8012de4:	429a      	cmp	r2, r3
 8012de6:	dbdd      	blt.n	8012da4 <triangular_filters_convolution+0xc8>
		}
		for (int j=f_m; j<f_m_plus;j++){
 8012de8:	6a3b      	ldr	r3, [r7, #32]
 8012dea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012dec:	e01d      	b.n	8012e2a <triangular_filters_convolution+0x14e>
			in_vector[j] = (float32_t)((f_m_plus-(float32_t)j)/(f_m_plus-f_m));
 8012dee:	69fb      	ldr	r3, [r7, #28]
 8012df0:	ee07 3a90 	vmov	s15, r3
 8012df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dfa:	ee07 3a90 	vmov	s15, r3
 8012dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e02:	ee77 6a67 	vsub.f32	s13, s14, s15
 8012e06:	69fa      	ldr	r2, [r7, #28]
 8012e08:	6a3b      	ldr	r3, [r7, #32]
 8012e0a:	1ad3      	subs	r3, r2, r3
 8012e0c:	ee07 3a90 	vmov	s15, r3
 8012e10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012e18:	697a      	ldr	r2, [r7, #20]
 8012e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e1c:	009b      	lsls	r3, r3, #2
 8012e1e:	4413      	add	r3, r2
 8012e20:	edc3 7a00 	vstr	s15, [r3]
		for (int j=f_m; j<f_m_plus;j++){
 8012e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e26:	3301      	adds	r3, #1
 8012e28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012e2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012e2c:	69fb      	ldr	r3, [r7, #28]
 8012e2e:	429a      	cmp	r2, r3
 8012e30:	dbdd      	blt.n	8012dee <triangular_filters_convolution+0x112>
		}
		data_out[m-1] = dot_product(in_vector, data_in_size,data_in, data_in_size);
 8012e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012e38:	3b01      	subs	r3, #1
 8012e3a:	009b      	lsls	r3, r3, #2
 8012e3c:	687a      	ldr	r2, [r7, #4]
 8012e3e:	18d4      	adds	r4, r2, r3
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	68fa      	ldr	r2, [r7, #12]
 8012e44:	68b9      	ldr	r1, [r7, #8]
 8012e46:	6978      	ldr	r0, [r7, #20]
 8012e48:	f7ff fbf4 	bl	8012634 <dot_product>
 8012e4c:	eef0 7a40 	vmov.f32	s15, s0
 8012e50:	edc4 7a00 	vstr	s15, [r4]
	for (int m=1; m < data_out_size+1; m++){
 8012e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e56:	3301      	adds	r3, #1
 8012e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e5a:	683b      	ldr	r3, [r7, #0]
 8012e5c:	1c5a      	adds	r2, r3, #1
 8012e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e60:	429a      	cmp	r2, r3
 8012e62:	f63f af75 	bhi.w	8012d50 <triangular_filters_convolution+0x74>
 8012e66:	46b5      	mov	sp, r6
	}
}
 8012e68:	bf00      	nop
 8012e6a:	373c      	adds	r7, #60	@ 0x3c
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e72:	0000      	movs	r0, r0
 8012e74:	0000      	movs	r0, r0
	...

08012e78 <mfcc>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing: MFCC                                                */
/*----------------------------------------------------------------------------*/

void mfcc(float32_t * data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, uint32_t * bin, arm_dct4_instance_f32 * dct4f32, arm_rfft_fast_instance_f32 * fft_handler,  signal_windowing_t signal_windowing, float32_t* multipliers) {
 8012e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e7c:	b091      	sub	sp, #68	@ 0x44
 8012e7e:	af04      	add	r7, sp, #16
 8012e80:	6178      	str	r0, [r7, #20]
 8012e82:	6139      	str	r1, [r7, #16]
 8012e84:	60fa      	str	r2, [r7, #12]
 8012e86:	60bb      	str	r3, [r7, #8]
 8012e88:	466b      	mov	r3, sp
 8012e8a:	461e      	mov	r6, r3

	float32_t dct_status[data_out_size*2];
 8012e8c:	68bb      	ldr	r3, [r7, #8]
 8012e8e:	0059      	lsls	r1, r3, #1
 8012e90:	460b      	mov	r3, r1
 8012e92:	3b01      	subs	r3, #1
 8012e94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012e96:	2300      	movs	r3, #0
 8012e98:	6039      	str	r1, [r7, #0]
 8012e9a:	607b      	str	r3, [r7, #4]
 8012e9c:	f04f 0200 	mov.w	r2, #0
 8012ea0:	f04f 0300 	mov.w	r3, #0
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	0143      	lsls	r3, r0, #5
 8012ea8:	6838      	ldr	r0, [r7, #0]
 8012eaa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8012eae:	6838      	ldr	r0, [r7, #0]
 8012eb0:	0142      	lsls	r2, r0, #5
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	468a      	mov	sl, r1
 8012eb6:	469b      	mov	fp, r3
 8012eb8:	f04f 0200 	mov.w	r2, #0
 8012ebc:	f04f 0300 	mov.w	r3, #0
 8012ec0:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8012ec4:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8012ec8:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8012ecc:	008b      	lsls	r3, r1, #2
 8012ece:	3307      	adds	r3, #7
 8012ed0:	08db      	lsrs	r3, r3, #3
 8012ed2:	00db      	lsls	r3, r3, #3
 8012ed4:	ebad 0d03 	sub.w	sp, sp, r3
 8012ed8:	ab04      	add	r3, sp, #16
 8012eda:	3303      	adds	r3, #3
 8012edc:	089b      	lsrs	r3, r3, #2
 8012ede:	009b      	lsls	r3, r3, #2
 8012ee0:	627b      	str	r3, [r7, #36]	@ 0x24
	float32_t fft_out[data_in_size/2];
 8012ee2:	693b      	ldr	r3, [r7, #16]
 8012ee4:	0859      	lsrs	r1, r3, #1
 8012ee6:	460b      	mov	r3, r1
 8012ee8:	3b01      	subs	r3, #1
 8012eea:	623b      	str	r3, [r7, #32]
 8012eec:	2300      	movs	r3, #0
 8012eee:	4688      	mov	r8, r1
 8012ef0:	4699      	mov	r9, r3
 8012ef2:	f04f 0200 	mov.w	r2, #0
 8012ef6:	f04f 0300 	mov.w	r3, #0
 8012efa:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8012efe:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8012f02:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8012f06:	2300      	movs	r3, #0
 8012f08:	460c      	mov	r4, r1
 8012f0a:	461d      	mov	r5, r3
 8012f0c:	f04f 0200 	mov.w	r2, #0
 8012f10:	f04f 0300 	mov.w	r3, #0
 8012f14:	016b      	lsls	r3, r5, #5
 8012f16:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8012f1a:	0162      	lsls	r2, r4, #5
 8012f1c:	008b      	lsls	r3, r1, #2
 8012f1e:	3307      	adds	r3, #7
 8012f20:	08db      	lsrs	r3, r3, #3
 8012f22:	00db      	lsls	r3, r3, #3
 8012f24:	ebad 0d03 	sub.w	sp, sp, r3
 8012f28:	ab04      	add	r3, sp, #16
 8012f2a:	3303      	adds	r3, #3
 8012f2c:	089b      	lsrs	r3, r3, #2
 8012f2e:	009b      	lsls	r3, r3, #2
 8012f30:	61fb      	str	r3, [r7, #28]

	fft(data_in, data_in_size, fft_out, data_in_size/2, fft_handler, signal_windowing, multipliers);
 8012f32:	693b      	ldr	r3, [r7, #16]
 8012f34:	085a      	lsrs	r2, r3, #1
 8012f36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012f38:	9302      	str	r3, [sp, #8]
 8012f3a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8012f3e:	9301      	str	r3, [sp, #4]
 8012f40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012f42:	9300      	str	r3, [sp, #0]
 8012f44:	4613      	mov	r3, r2
 8012f46:	69fa      	ldr	r2, [r7, #28]
 8012f48:	6939      	ldr	r1, [r7, #16]
 8012f4a:	6978      	ldr	r0, [r7, #20]
 8012f4c:	f7ff fe34 	bl	8012bb8 <fft>
	triangular_filters_convolution(fft_out, data_in_size/2, data_out, data_out_size, bin);
 8012f50:	693b      	ldr	r3, [r7, #16]
 8012f52:	0859      	lsrs	r1, r3, #1
 8012f54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012f56:	9300      	str	r3, [sp, #0]
 8012f58:	68bb      	ldr	r3, [r7, #8]
 8012f5a:	68fa      	ldr	r2, [r7, #12]
 8012f5c:	69f8      	ldr	r0, [r7, #28]
 8012f5e:	f7ff febd 	bl	8012cdc <triangular_filters_convolution>

	for (int i = 0; i<data_out_size; i++) {
 8012f62:	2300      	movs	r3, #0
 8012f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012f66:	e039      	b.n	8012fdc <mfcc+0x164>
		if (data_out[i] < 10e-10){
 8012f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f6a:	009b      	lsls	r3, r3, #2
 8012f6c:	68fa      	ldr	r2, [r7, #12]
 8012f6e:	4413      	add	r3, r2
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7ed faf6 	bl	8000564 <__aeabi_f2d>
 8012f78:	a323      	add	r3, pc, #140	@ (adr r3, 8013008 <mfcc+0x190>)
 8012f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f7e:	f7ed fdbb 	bl	8000af8 <__aeabi_dcmplt>
 8012f82:	4603      	mov	r3, r0
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d005      	beq.n	8012f94 <mfcc+0x11c>
			data_out[i] = 10e-10;
 8012f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f8a:	009b      	lsls	r3, r3, #2
 8012f8c:	68fa      	ldr	r2, [r7, #12]
 8012f8e:	4413      	add	r3, r2
 8012f90:	4a1b      	ldr	r2, [pc, #108]	@ (8013000 <mfcc+0x188>)
 8012f92:	601a      	str	r2, [r3, #0]
		}
		data_out[i] = 20*log10(data_out[i]);
 8012f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f96:	009b      	lsls	r3, r3, #2
 8012f98:	68fa      	ldr	r2, [r7, #12]
 8012f9a:	4413      	add	r3, r2
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f7ed fae0 	bl	8000564 <__aeabi_f2d>
 8012fa4:	4602      	mov	r2, r0
 8012fa6:	460b      	mov	r3, r1
 8012fa8:	ec43 2b10 	vmov	d0, r2, r3
 8012fac:	f00d fefc 	bl	8020da8 <log10>
 8012fb0:	ec51 0b10 	vmov	r0, r1, d0
 8012fb4:	f04f 0200 	mov.w	r2, #0
 8012fb8:	4b12      	ldr	r3, [pc, #72]	@ (8013004 <mfcc+0x18c>)
 8012fba:	f7ed fb2b 	bl	8000614 <__aeabi_dmul>
 8012fbe:	4602      	mov	r2, r0
 8012fc0:	460b      	mov	r3, r1
 8012fc2:	4610      	mov	r0, r2
 8012fc4:	4619      	mov	r1, r3
 8012fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fc8:	009b      	lsls	r3, r3, #2
 8012fca:	68fa      	ldr	r2, [r7, #12]
 8012fcc:	18d4      	adds	r4, r2, r3
 8012fce:	f7ed fe19 	bl	8000c04 <__aeabi_d2f>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	6023      	str	r3, [r4, #0]
	for (int i = 0; i<data_out_size; i++) {
 8012fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fd8:	3301      	adds	r3, #1
 8012fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fde:	68ba      	ldr	r2, [r7, #8]
 8012fe0:	429a      	cmp	r2, r3
 8012fe2:	d8c1      	bhi.n	8012f68 <mfcc+0xf0>
	}

	// apply the direct cosine transform in order to have the MFCC
	arm_dct4_f32(dct4f32, dct_status, data_out);
 8012fe4:	68fa      	ldr	r2, [r7, #12]
 8012fe6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012fe8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8012fea:	f005 ff03 	bl	8018df4 <arm_dct4_f32>
 8012fee:	46b5      	mov	sp, r6
}
 8012ff0:	bf00      	nop
 8012ff2:	3734      	adds	r7, #52	@ 0x34
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ffa:	bf00      	nop
 8012ffc:	f3af 8000 	nop.w
 8013000:	3089705f 	.word	0x3089705f
 8013004:	40340000 	.word	0x40340000
 8013008:	e826d695 	.word	0xe826d695
 801300c:	3e112e0b 	.word	0x3e112e0b

08013010 <sys_error_handler>:

#include "sys_functions.h"
#include "stdint.h"

void sys_error_handler(void)
{
 8013010:	b480      	push	{r7}
 8013012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 8013014:	bf00      	nop
 8013016:	e7fd      	b.n	8013014 <sys_error_handler+0x4>

08013018 <SysAlloc>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

void *SysAlloc(size_t nSize) {
 8013018:	b580      	push	{r7, lr}
 801301a:	b084      	sub	sp, #16
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
  void *pcMemory = (void *) calloc(nSize,sizeof(uint8_t));
 8013020:	2101      	movs	r1, #1
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	f009 fa38 	bl	801c498 <calloc>
 8013028:	4603      	mov	r3, r0
 801302a:	60fb      	str	r3, [r7, #12]
  return pcMemory;
 801302c:	68fb      	ldr	r3, [r7, #12]
}
 801302e:	4618      	mov	r0, r3
 8013030:	3710      	adds	r7, #16
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}

08013036 <SysFree>:

void SysFree(void *pvData) {
 8013036:	b580      	push	{r7, lr}
 8013038:	b082      	sub	sp, #8
 801303a:	af00      	add	r7, sp, #0
 801303c:	6078      	str	r0, [r7, #4]
  free(pvData);
 801303e:	6878      	ldr	r0, [r7, #4]
 8013040:	f009 fa4e 	bl	801c4e0 <free>
}
 8013044:	bf00      	nop
 8013046:	3708      	adds	r7, #8
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}

0801304c <parson_strndup>:
        escaped = PARSON_FALSE;
        string++;
    }
}

static char * parson_strndup(const char *string, size_t n) {
 801304c:	b580      	push	{r7, lr}
 801304e:	b084      	sub	sp, #16
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
 8013054:	6039      	str	r1, [r7, #0]
    /* We expect the caller has validated that 'n' fits within the input buffer. */
    char *output_string = (char*)parson_malloc(n + 1);
 8013056:	4b0d      	ldr	r3, [pc, #52]	@ (801308c <parson_strndup+0x40>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	683a      	ldr	r2, [r7, #0]
 801305c:	3201      	adds	r2, #1
 801305e:	4610      	mov	r0, r2
 8013060:	4798      	blx	r3
 8013062:	60f8      	str	r0, [r7, #12]
    if (!output_string) {
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d101      	bne.n	801306e <parson_strndup+0x22>
        return NULL;
 801306a:	2300      	movs	r3, #0
 801306c:	e00a      	b.n	8013084 <parson_strndup+0x38>
    }
    output_string[n] = '\0';
 801306e:	68fa      	ldr	r2, [r7, #12]
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	4413      	add	r3, r2
 8013074:	2200      	movs	r2, #0
 8013076:	701a      	strb	r2, [r3, #0]
    memcpy(output_string, string, n);
 8013078:	683a      	ldr	r2, [r7, #0]
 801307a:	6879      	ldr	r1, [r7, #4]
 801307c:	68f8      	ldr	r0, [r7, #12]
 801307e:	f00b fc28 	bl	801e8d2 <memcpy>
    return output_string;
 8013082:	68fb      	ldr	r3, [r7, #12]
}
 8013084:	4618      	mov	r0, r3
 8013086:	3710      	adds	r7, #16
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}
 801308c:	20000894 	.word	0x20000894

08013090 <parson_strdup>:

static char * parson_strdup(const char *string) {
 8013090:	b580      	push	{r7, lr}
 8013092:	b082      	sub	sp, #8
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
    return parson_strndup(string, strlen(string));
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	f7ed f8f7 	bl	800028c <strlen>
 801309e:	4603      	mov	r3, r0
 80130a0:	4619      	mov	r1, r3
 80130a2:	6878      	ldr	r0, [r7, #4]
 80130a4:	f7ff ffd2 	bl	801304c <parson_strndup>
 80130a8:	4603      	mov	r3, r0
}
 80130aa:	4618      	mov	r0, r3
 80130ac:	3708      	adds	r7, #8
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}

080130b2 <hex_char_to_int>:

static int hex_char_to_int(char c) {
 80130b2:	b480      	push	{r7}
 80130b4:	b083      	sub	sp, #12
 80130b6:	af00      	add	r7, sp, #0
 80130b8:	4603      	mov	r3, r0
 80130ba:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 80130bc:	79fb      	ldrb	r3, [r7, #7]
 80130be:	2b2f      	cmp	r3, #47	@ 0x2f
 80130c0:	d905      	bls.n	80130ce <hex_char_to_int+0x1c>
 80130c2:	79fb      	ldrb	r3, [r7, #7]
 80130c4:	2b39      	cmp	r3, #57	@ 0x39
 80130c6:	d802      	bhi.n	80130ce <hex_char_to_int+0x1c>
        return c - '0';
 80130c8:	79fb      	ldrb	r3, [r7, #7]
 80130ca:	3b30      	subs	r3, #48	@ 0x30
 80130cc:	e013      	b.n	80130f6 <hex_char_to_int+0x44>
    } else if (c >= 'a' && c <= 'f') {
 80130ce:	79fb      	ldrb	r3, [r7, #7]
 80130d0:	2b60      	cmp	r3, #96	@ 0x60
 80130d2:	d905      	bls.n	80130e0 <hex_char_to_int+0x2e>
 80130d4:	79fb      	ldrb	r3, [r7, #7]
 80130d6:	2b66      	cmp	r3, #102	@ 0x66
 80130d8:	d802      	bhi.n	80130e0 <hex_char_to_int+0x2e>
        return c - 'a' + 10;
 80130da:	79fb      	ldrb	r3, [r7, #7]
 80130dc:	3b57      	subs	r3, #87	@ 0x57
 80130de:	e00a      	b.n	80130f6 <hex_char_to_int+0x44>
    } else if (c >= 'A' && c <= 'F') {
 80130e0:	79fb      	ldrb	r3, [r7, #7]
 80130e2:	2b40      	cmp	r3, #64	@ 0x40
 80130e4:	d905      	bls.n	80130f2 <hex_char_to_int+0x40>
 80130e6:	79fb      	ldrb	r3, [r7, #7]
 80130e8:	2b46      	cmp	r3, #70	@ 0x46
 80130ea:	d802      	bhi.n	80130f2 <hex_char_to_int+0x40>
        return c - 'A' + 10;
 80130ec:	79fb      	ldrb	r3, [r7, #7]
 80130ee:	3b37      	subs	r3, #55	@ 0x37
 80130f0:	e001      	b.n	80130f6 <hex_char_to_int+0x44>
    }
    return -1;
 80130f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	370c      	adds	r7, #12
 80130fa:	46bd      	mov	sp, r7
 80130fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013100:	4770      	bx	lr

08013102 <parse_utf16_hex>:

static JSON_Status parse_utf16_hex(const char *s, unsigned int *result) {
 8013102:	b580      	push	{r7, lr}
 8013104:	b086      	sub	sp, #24
 8013106:	af00      	add	r7, sp, #0
 8013108:	6078      	str	r0, [r7, #4]
 801310a:	6039      	str	r1, [r7, #0]
    int x1, x2, x3, x4;
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	781b      	ldrb	r3, [r3, #0]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d00e      	beq.n	8013132 <parse_utf16_hex+0x30>
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	3301      	adds	r3, #1
 8013118:	781b      	ldrb	r3, [r3, #0]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d009      	beq.n	8013132 <parse_utf16_hex+0x30>
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	3302      	adds	r3, #2
 8013122:	781b      	ldrb	r3, [r3, #0]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d004      	beq.n	8013132 <parse_utf16_hex+0x30>
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	3303      	adds	r3, #3
 801312c:	781b      	ldrb	r3, [r3, #0]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d102      	bne.n	8013138 <parse_utf16_hex+0x36>
        return JSONFailure;
 8013132:	f04f 33ff 	mov.w	r3, #4294967295
 8013136:	e03b      	b.n	80131b0 <parse_utf16_hex+0xae>
    }
    x1 = hex_char_to_int(s[0]);
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	4618      	mov	r0, r3
 801313e:	f7ff ffb8 	bl	80130b2 <hex_char_to_int>
 8013142:	6178      	str	r0, [r7, #20]
    x2 = hex_char_to_int(s[1]);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	3301      	adds	r3, #1
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	4618      	mov	r0, r3
 801314c:	f7ff ffb1 	bl	80130b2 <hex_char_to_int>
 8013150:	6138      	str	r0, [r7, #16]
    x3 = hex_char_to_int(s[2]);
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	3302      	adds	r3, #2
 8013156:	781b      	ldrb	r3, [r3, #0]
 8013158:	4618      	mov	r0, r3
 801315a:	f7ff ffaa 	bl	80130b2 <hex_char_to_int>
 801315e:	60f8      	str	r0, [r7, #12]
    x4 = hex_char_to_int(s[3]);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	3303      	adds	r3, #3
 8013164:	781b      	ldrb	r3, [r3, #0]
 8013166:	4618      	mov	r0, r3
 8013168:	f7ff ffa3 	bl	80130b2 <hex_char_to_int>
 801316c:	60b8      	str	r0, [r7, #8]
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013174:	d00b      	beq.n	801318e <parse_utf16_hex+0x8c>
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	f1b3 3fff 	cmp.w	r3, #4294967295
 801317c:	d007      	beq.n	801318e <parse_utf16_hex+0x8c>
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013184:	d003      	beq.n	801318e <parse_utf16_hex+0x8c>
 8013186:	68bb      	ldr	r3, [r7, #8]
 8013188:	f1b3 3fff 	cmp.w	r3, #4294967295
 801318c:	d102      	bne.n	8013194 <parse_utf16_hex+0x92>
        return JSONFailure;
 801318e:	f04f 33ff 	mov.w	r3, #4294967295
 8013192:	e00d      	b.n	80131b0 <parse_utf16_hex+0xae>
    }
    *result = (unsigned int)((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 8013194:	697b      	ldr	r3, [r7, #20]
 8013196:	031a      	lsls	r2, r3, #12
 8013198:	693b      	ldr	r3, [r7, #16]
 801319a:	021b      	lsls	r3, r3, #8
 801319c:	431a      	orrs	r2, r3
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	011b      	lsls	r3, r3, #4
 80131a2:	431a      	orrs	r2, r3
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	4313      	orrs	r3, r2
 80131a8:	461a      	mov	r2, r3
 80131aa:	683b      	ldr	r3, [r7, #0]
 80131ac:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 80131ae:	2300      	movs	r3, #0
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	3718      	adds	r7, #24
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}

080131b8 <num_bytes_in_utf8_sequence>:

static int num_bytes_in_utf8_sequence(unsigned char c) {
 80131b8:	b480      	push	{r7}
 80131ba:	b083      	sub	sp, #12
 80131bc:	af00      	add	r7, sp, #0
 80131be:	4603      	mov	r3, r0
 80131c0:	71fb      	strb	r3, [r7, #7]
    if (c == 0xC0 || c == 0xC1 || c > 0xF4 || IS_CONT(c)) {
 80131c2:	79fb      	ldrb	r3, [r7, #7]
 80131c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80131c6:	d00a      	beq.n	80131de <num_bytes_in_utf8_sequence+0x26>
 80131c8:	79fb      	ldrb	r3, [r7, #7]
 80131ca:	2bc1      	cmp	r3, #193	@ 0xc1
 80131cc:	d007      	beq.n	80131de <num_bytes_in_utf8_sequence+0x26>
 80131ce:	79fb      	ldrb	r3, [r7, #7]
 80131d0:	2bf4      	cmp	r3, #244	@ 0xf4
 80131d2:	d804      	bhi.n	80131de <num_bytes_in_utf8_sequence+0x26>
 80131d4:	79fb      	ldrb	r3, [r7, #7]
 80131d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80131da:	2b80      	cmp	r3, #128	@ 0x80
 80131dc:	d101      	bne.n	80131e2 <num_bytes_in_utf8_sequence+0x2a>
        return 0;
 80131de:	2300      	movs	r3, #0
 80131e0:	e01b      	b.n	801321a <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0x80) == 0) {    /* 0xxxxxxx */
 80131e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	db01      	blt.n	80131ee <num_bytes_in_utf8_sequence+0x36>
        return 1;
 80131ea:	2301      	movs	r3, #1
 80131ec:	e015      	b.n	801321a <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xE0) == 0xC0) { /* 110xxxxx */
 80131ee:	79fb      	ldrb	r3, [r7, #7]
 80131f0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80131f4:	2bc0      	cmp	r3, #192	@ 0xc0
 80131f6:	d101      	bne.n	80131fc <num_bytes_in_utf8_sequence+0x44>
        return 2;
 80131f8:	2302      	movs	r3, #2
 80131fa:	e00e      	b.n	801321a <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xF0) == 0xE0) { /* 1110xxxx */
 80131fc:	79fb      	ldrb	r3, [r7, #7]
 80131fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013202:	2be0      	cmp	r3, #224	@ 0xe0
 8013204:	d101      	bne.n	801320a <num_bytes_in_utf8_sequence+0x52>
        return 3;
 8013206:	2303      	movs	r3, #3
 8013208:	e007      	b.n	801321a <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xF8) == 0xF0) { /* 11110xxx */
 801320a:	79fb      	ldrb	r3, [r7, #7]
 801320c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8013210:	2bf0      	cmp	r3, #240	@ 0xf0
 8013212:	d101      	bne.n	8013218 <num_bytes_in_utf8_sequence+0x60>
        return 4;
 8013214:	2304      	movs	r3, #4
 8013216:	e000      	b.n	801321a <num_bytes_in_utf8_sequence+0x62>
    }
    return 0; /* won't happen */
 8013218:	2300      	movs	r3, #0
}
 801321a:	4618      	mov	r0, r3
 801321c:	370c      	adds	r7, #12
 801321e:	46bd      	mov	sp, r7
 8013220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013224:	4770      	bx	lr

08013226 <verify_utf8_sequence>:

static JSON_Status verify_utf8_sequence(const unsigned char *string, int *len) {
 8013226:	b580      	push	{r7, lr}
 8013228:	b084      	sub	sp, #16
 801322a:	af00      	add	r7, sp, #0
 801322c:	6078      	str	r0, [r7, #4]
 801322e:	6039      	str	r1, [r7, #0]
    unsigned int cp = 0;
 8013230:	2300      	movs	r3, #0
 8013232:	60fb      	str	r3, [r7, #12]
    *len = num_bytes_in_utf8_sequence(string[0]);
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	781b      	ldrb	r3, [r3, #0]
 8013238:	4618      	mov	r0, r3
 801323a:	f7ff ffbd 	bl	80131b8 <num_bytes_in_utf8_sequence>
 801323e:	4602      	mov	r2, r0
 8013240:	683b      	ldr	r3, [r7, #0]
 8013242:	601a      	str	r2, [r3, #0]

    if (*len == 1) {
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	2b01      	cmp	r3, #1
 801324a:	d103      	bne.n	8013254 <verify_utf8_sequence+0x2e>
        cp = string[0];
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	781b      	ldrb	r3, [r3, #0]
 8013250:	60fb      	str	r3, [r7, #12]
 8013252:	e080      	b.n	8013356 <verify_utf8_sequence+0x130>
    } else if (*len == 2 && IS_CONT(string[1])) {
 8013254:	683b      	ldr	r3, [r7, #0]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	2b02      	cmp	r3, #2
 801325a:	d115      	bne.n	8013288 <verify_utf8_sequence+0x62>
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	3301      	adds	r3, #1
 8013260:	781b      	ldrb	r3, [r3, #0]
 8013262:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8013266:	2b80      	cmp	r3, #128	@ 0x80
 8013268:	d10e      	bne.n	8013288 <verify_utf8_sequence+0x62>
        cp = string[0] & 0x1F;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	781b      	ldrb	r3, [r3, #0]
 801326e:	f003 031f 	and.w	r3, r3, #31
 8013272:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	019a      	lsls	r2, r3, #6
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	3301      	adds	r3, #1
 801327c:	781b      	ldrb	r3, [r3, #0]
 801327e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013282:	4313      	orrs	r3, r2
 8013284:	60fb      	str	r3, [r7, #12]
 8013286:	e066      	b.n	8013356 <verify_utf8_sequence+0x130>
    } else if (*len == 3 && IS_CONT(string[1]) && IS_CONT(string[2])) {
 8013288:	683b      	ldr	r3, [r7, #0]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	2b03      	cmp	r3, #3
 801328e:	d125      	bne.n	80132dc <verify_utf8_sequence+0xb6>
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	3301      	adds	r3, #1
 8013294:	781b      	ldrb	r3, [r3, #0]
 8013296:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801329a:	2b80      	cmp	r3, #128	@ 0x80
 801329c:	d11e      	bne.n	80132dc <verify_utf8_sequence+0xb6>
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	3302      	adds	r3, #2
 80132a2:	781b      	ldrb	r3, [r3, #0]
 80132a4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80132a8:	2b80      	cmp	r3, #128	@ 0x80
 80132aa:	d117      	bne.n	80132dc <verify_utf8_sequence+0xb6>
        cp = ((unsigned char)string[0]) & 0xF;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	f003 030f 	and.w	r3, r3, #15
 80132b4:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	019a      	lsls	r2, r3, #6
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	3301      	adds	r3, #1
 80132be:	781b      	ldrb	r3, [r3, #0]
 80132c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80132c4:	4313      	orrs	r3, r2
 80132c6:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[2] & 0x3F);
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	019a      	lsls	r2, r3, #6
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	3302      	adds	r3, #2
 80132d0:	781b      	ldrb	r3, [r3, #0]
 80132d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80132d6:	4313      	orrs	r3, r2
 80132d8:	60fb      	str	r3, [r7, #12]
 80132da:	e03c      	b.n	8013356 <verify_utf8_sequence+0x130>
    } else if (*len == 4 && IS_CONT(string[1]) && IS_CONT(string[2]) && IS_CONT(string[3])) {
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	2b04      	cmp	r3, #4
 80132e2:	d135      	bne.n	8013350 <verify_utf8_sequence+0x12a>
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	3301      	adds	r3, #1
 80132e8:	781b      	ldrb	r3, [r3, #0]
 80132ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80132ee:	2b80      	cmp	r3, #128	@ 0x80
 80132f0:	d12e      	bne.n	8013350 <verify_utf8_sequence+0x12a>
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	3302      	adds	r3, #2
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80132fc:	2b80      	cmp	r3, #128	@ 0x80
 80132fe:	d127      	bne.n	8013350 <verify_utf8_sequence+0x12a>
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	3303      	adds	r3, #3
 8013304:	781b      	ldrb	r3, [r3, #0]
 8013306:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801330a:	2b80      	cmp	r3, #128	@ 0x80
 801330c:	d120      	bne.n	8013350 <verify_utf8_sequence+0x12a>
        cp = string[0] & 0x7;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	781b      	ldrb	r3, [r3, #0]
 8013312:	f003 0307 	and.w	r3, r3, #7
 8013316:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	019a      	lsls	r2, r3, #6
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	3301      	adds	r3, #1
 8013320:	781b      	ldrb	r3, [r3, #0]
 8013322:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013326:	4313      	orrs	r3, r2
 8013328:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[2] & 0x3F);
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	019a      	lsls	r2, r3, #6
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	3302      	adds	r3, #2
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013338:	4313      	orrs	r3, r2
 801333a:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[3] & 0x3F);
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	019a      	lsls	r2, r3, #6
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	3303      	adds	r3, #3
 8013344:	781b      	ldrb	r3, [r3, #0]
 8013346:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801334a:	4313      	orrs	r3, r2
 801334c:	60fb      	str	r3, [r7, #12]
 801334e:	e002      	b.n	8013356 <verify_utf8_sequence+0x130>
    } else {
        return JSONFailure;
 8013350:	f04f 33ff 	mov.w	r3, #4294967295
 8013354:	e02c      	b.n	80133b0 <verify_utf8_sequence+0x18a>
    }

    /* overlong encodings */
    if ((cp < 0x80    && *len > 1) ||
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	2b7f      	cmp	r3, #127	@ 0x7f
 801335a:	d803      	bhi.n	8013364 <verify_utf8_sequence+0x13e>
 801335c:	683b      	ldr	r3, [r7, #0]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	2b01      	cmp	r3, #1
 8013362:	dc0f      	bgt.n	8013384 <verify_utf8_sequence+0x15e>
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801336a:	d203      	bcs.n	8013374 <verify_utf8_sequence+0x14e>
        (cp < 0x800   && *len > 2) ||
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	2b02      	cmp	r3, #2
 8013372:	dc07      	bgt.n	8013384 <verify_utf8_sequence+0x15e>
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801337a:	d206      	bcs.n	801338a <verify_utf8_sequence+0x164>
        (cp < 0x10000 && *len > 3)) {
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	2b03      	cmp	r3, #3
 8013382:	dd02      	ble.n	801338a <verify_utf8_sequence+0x164>
        return JSONFailure;
 8013384:	f04f 33ff 	mov.w	r3, #4294967295
 8013388:	e012      	b.n	80133b0 <verify_utf8_sequence+0x18a>
    }

    /* invalid unicode */
    if (cp > 0x10FFFF) {
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8013390:	d302      	bcc.n	8013398 <verify_utf8_sequence+0x172>
        return JSONFailure;
 8013392:	f04f 33ff 	mov.w	r3, #4294967295
 8013396:	e00b      	b.n	80133b0 <verify_utf8_sequence+0x18a>
    }

    /* surrogate halves */
    if (cp >= 0xD800 && cp <= 0xDFFF) {
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 801339e:	d306      	bcc.n	80133ae <verify_utf8_sequence+0x188>
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80133a6:	d202      	bcs.n	80133ae <verify_utf8_sequence+0x188>
        return JSONFailure;
 80133a8:	f04f 33ff 	mov.w	r3, #4294967295
 80133ac:	e000      	b.n	80133b0 <verify_utf8_sequence+0x18a>
    }

    return JSONSuccess;
 80133ae:	2300      	movs	r3, #0
}
 80133b0:	4618      	mov	r0, r3
 80133b2:	3710      	adds	r7, #16
 80133b4:	46bd      	mov	sp, r7
 80133b6:	bd80      	pop	{r7, pc}

080133b8 <is_valid_utf8>:

static int is_valid_utf8(const char *string, size_t string_len) {
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b084      	sub	sp, #16
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
 80133c0:	6039      	str	r1, [r7, #0]
    int len = 0;
 80133c2:	2300      	movs	r3, #0
 80133c4:	60bb      	str	r3, [r7, #8]
    const char *string_end =  string + string_len;
 80133c6:	687a      	ldr	r2, [r7, #4]
 80133c8:	683b      	ldr	r3, [r7, #0]
 80133ca:	4413      	add	r3, r2
 80133cc:	60fb      	str	r3, [r7, #12]
    while (string < string_end) {
 80133ce:	e00f      	b.n	80133f0 <is_valid_utf8+0x38>
        if (verify_utf8_sequence((const unsigned char*)string, &len) != JSONSuccess) {
 80133d0:	f107 0308 	add.w	r3, r7, #8
 80133d4:	4619      	mov	r1, r3
 80133d6:	6878      	ldr	r0, [r7, #4]
 80133d8:	f7ff ff25 	bl	8013226 <verify_utf8_sequence>
 80133dc:	4603      	mov	r3, r0
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d001      	beq.n	80133e6 <is_valid_utf8+0x2e>
            return PARSON_FALSE;
 80133e2:	2300      	movs	r3, #0
 80133e4:	e009      	b.n	80133fa <is_valid_utf8+0x42>
        }
        string += len;
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	461a      	mov	r2, r3
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	4413      	add	r3, r2
 80133ee:	607b      	str	r3, [r7, #4]
    while (string < string_end) {
 80133f0:	687a      	ldr	r2, [r7, #4]
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	429a      	cmp	r2, r3
 80133f6:	d3eb      	bcc.n	80133d0 <is_valid_utf8+0x18>
    }
    return PARSON_TRUE;
 80133f8:	2301      	movs	r3, #1
}
 80133fa:	4618      	mov	r0, r3
 80133fc:	3710      	adds	r7, #16
 80133fe:	46bd      	mov	sp, r7
 8013400:	bd80      	pop	{r7, pc}
	...

08013404 <is_decimal>:

static parson_bool_t is_decimal(const char *string, size_t length) {
 8013404:	b580      	push	{r7, lr}
 8013406:	b082      	sub	sp, #8
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
 801340c:	6039      	str	r1, [r7, #0]
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 801340e:	683b      	ldr	r3, [r7, #0]
 8013410:	2b01      	cmp	r3, #1
 8013412:	d90a      	bls.n	801342a <is_decimal+0x26>
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	781b      	ldrb	r3, [r3, #0]
 8013418:	2b30      	cmp	r3, #48	@ 0x30
 801341a:	d106      	bne.n	801342a <is_decimal+0x26>
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	3301      	adds	r3, #1
 8013420:	781b      	ldrb	r3, [r3, #0]
 8013422:	2b2e      	cmp	r3, #46	@ 0x2e
 8013424:	d001      	beq.n	801342a <is_decimal+0x26>
        return PARSON_FALSE;
 8013426:	2300      	movs	r3, #0
 8013428:	e024      	b.n	8013474 <is_decimal+0x70>
    }
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 801342a:	683b      	ldr	r3, [r7, #0]
 801342c:	2b02      	cmp	r3, #2
 801342e:	d91b      	bls.n	8013468 <is_decimal+0x64>
 8013430:	2202      	movs	r2, #2
 8013432:	4912      	ldr	r1, [pc, #72]	@ (801347c <is_decimal+0x78>)
 8013434:	6878      	ldr	r0, [r7, #4]
 8013436:	f00b f917 	bl	801e668 <strncmp>
 801343a:	4603      	mov	r3, r0
 801343c:	2b00      	cmp	r3, #0
 801343e:	d113      	bne.n	8013468 <is_decimal+0x64>
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	3302      	adds	r3, #2
 8013444:	781b      	ldrb	r3, [r3, #0]
 8013446:	2b2e      	cmp	r3, #46	@ 0x2e
 8013448:	d00e      	beq.n	8013468 <is_decimal+0x64>
        return PARSON_FALSE;
 801344a:	2300      	movs	r3, #0
 801344c:	e012      	b.n	8013474 <is_decimal+0x70>
    }
    while (length--) {
        if (strchr("xX", string[length])) {
 801344e:	687a      	ldr	r2, [r7, #4]
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	4413      	add	r3, r2
 8013454:	781b      	ldrb	r3, [r3, #0]
 8013456:	4619      	mov	r1, r3
 8013458:	4809      	ldr	r0, [pc, #36]	@ (8013480 <is_decimal+0x7c>)
 801345a:	f00b f8f8 	bl	801e64e <strchr>
 801345e:	4603      	mov	r3, r0
 8013460:	2b00      	cmp	r3, #0
 8013462:	d001      	beq.n	8013468 <is_decimal+0x64>
            return PARSON_FALSE;
 8013464:	2300      	movs	r3, #0
 8013466:	e005      	b.n	8013474 <is_decimal+0x70>
    while (length--) {
 8013468:	683b      	ldr	r3, [r7, #0]
 801346a:	1e5a      	subs	r2, r3, #1
 801346c:	603a      	str	r2, [r7, #0]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d1ed      	bne.n	801344e <is_decimal+0x4a>
        }
    }
    return PARSON_TRUE;
 8013472:	2301      	movs	r3, #1
}
 8013474:	4618      	mov	r0, r3
 8013476:	3708      	adds	r7, #8
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}
 801347c:	08023188 	.word	0x08023188
 8013480:	0802318c 	.word	0x0802318c

08013484 <hash_string>:

static unsigned long hash_string(const char *string, size_t n) {
 8013484:	b480      	push	{r7}
 8013486:	b087      	sub	sp, #28
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
 801348c:	6039      	str	r1, [r7, #0]
#ifdef PARSON_FORCE_HASH_COLLISIONS
    (void)string;
    (void)n;
    return 0;
#else
    unsigned long hash = 5381;
 801348e:	f241 5305 	movw	r3, #5381	@ 0x1505
 8013492:	617b      	str	r3, [r7, #20]
    unsigned char c;
    size_t i = 0;
 8013494:	2300      	movs	r3, #0
 8013496:	613b      	str	r3, [r7, #16]
    for (i = 0; i < n; i++) {
 8013498:	2300      	movs	r3, #0
 801349a:	613b      	str	r3, [r7, #16]
 801349c:	e011      	b.n	80134c2 <hash_string+0x3e>
        c = string[i];
 801349e:	687a      	ldr	r2, [r7, #4]
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	4413      	add	r3, r2
 80134a4:	781b      	ldrb	r3, [r3, #0]
 80134a6:	73fb      	strb	r3, [r7, #15]
        if (c == '\0') {
 80134a8:	7bfb      	ldrb	r3, [r7, #15]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d00e      	beq.n	80134cc <hash_string+0x48>
            break;
        }
        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
 80134ae:	697b      	ldr	r3, [r7, #20]
 80134b0:	015a      	lsls	r2, r3, #5
 80134b2:	697b      	ldr	r3, [r7, #20]
 80134b4:	441a      	add	r2, r3
 80134b6:	7bfb      	ldrb	r3, [r7, #15]
 80134b8:	4413      	add	r3, r2
 80134ba:	617b      	str	r3, [r7, #20]
    for (i = 0; i < n; i++) {
 80134bc:	693b      	ldr	r3, [r7, #16]
 80134be:	3301      	adds	r3, #1
 80134c0:	613b      	str	r3, [r7, #16]
 80134c2:	693a      	ldr	r2, [r7, #16]
 80134c4:	683b      	ldr	r3, [r7, #0]
 80134c6:	429a      	cmp	r2, r3
 80134c8:	d3e9      	bcc.n	801349e <hash_string+0x1a>
 80134ca:	e000      	b.n	80134ce <hash_string+0x4a>
            break;
 80134cc:	bf00      	nop
    }
    return hash;
 80134ce:	697b      	ldr	r3, [r7, #20]
#endif
}
 80134d0:	4618      	mov	r0, r3
 80134d2:	371c      	adds	r7, #28
 80134d4:	46bd      	mov	sp, r7
 80134d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134da:	4770      	bx	lr

080134dc <json_object_make>:

/* JSON Object */
static JSON_Object * json_object_make(JSON_Value *wrapping_value) {
 80134dc:	b580      	push	{r7, lr}
 80134de:	b084      	sub	sp, #16
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
    JSON_Status res = JSONFailure;
 80134e4:	f04f 33ff 	mov.w	r3, #4294967295
 80134e8:	60fb      	str	r3, [r7, #12]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 80134ea:	4b10      	ldr	r3, [pc, #64]	@ (801352c <json_object_make+0x50>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	2024      	movs	r0, #36	@ 0x24
 80134f0:	4798      	blx	r3
 80134f2:	60b8      	str	r0, [r7, #8]
    if (new_obj == NULL) {
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d101      	bne.n	80134fe <json_object_make+0x22>
        return NULL;
 80134fa:	2300      	movs	r3, #0
 80134fc:	e011      	b.n	8013522 <json_object_make+0x46>
    }
    new_obj->wrapping_value = wrapping_value;
 80134fe:	68bb      	ldr	r3, [r7, #8]
 8013500:	687a      	ldr	r2, [r7, #4]
 8013502:	601a      	str	r2, [r3, #0]
    res = json_object_init(new_obj, 0);
 8013504:	2100      	movs	r1, #0
 8013506:	68b8      	ldr	r0, [r7, #8]
 8013508:	f000 f814 	bl	8013534 <json_object_init>
 801350c:	60f8      	str	r0, [r7, #12]
    if (res != JSONSuccess) {
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d005      	beq.n	8013520 <json_object_make+0x44>
        parson_free(new_obj);
 8013514:	4b06      	ldr	r3, [pc, #24]	@ (8013530 <json_object_make+0x54>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	68b8      	ldr	r0, [r7, #8]
 801351a:	4798      	blx	r3
        return NULL;
 801351c:	2300      	movs	r3, #0
 801351e:	e000      	b.n	8013522 <json_object_make+0x46>
    }
    return new_obj;
 8013520:	68bb      	ldr	r3, [r7, #8]
}
 8013522:	4618      	mov	r0, r3
 8013524:	3710      	adds	r7, #16
 8013526:	46bd      	mov	sp, r7
 8013528:	bd80      	pop	{r7, pc}
 801352a:	bf00      	nop
 801352c:	20000894 	.word	0x20000894
 8013530:	20000898 	.word	0x20000898

08013534 <json_object_init>:

static JSON_Status json_object_init(JSON_Object *object, size_t capacity) {
 8013534:	b580      	push	{r7, lr}
 8013536:	b084      	sub	sp, #16
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
 801353c:	6039      	str	r1, [r7, #0]
    unsigned int i = 0;
 801353e:	2300      	movs	r3, #0
 8013540:	60fb      	str	r3, [r7, #12]

    object->cells = NULL;
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	2200      	movs	r2, #0
 8013546:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	2200      	movs	r2, #0
 801354c:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	2200      	movs	r2, #0
 8013552:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2200      	movs	r2, #0
 8013558:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2200      	movs	r2, #0
 801355e:	609a      	str	r2, [r3, #8]

    object->count = 0;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2200      	movs	r2, #0
 8013564:	619a      	str	r2, [r3, #24]
    object->cell_capacity = capacity;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	683a      	ldr	r2, [r7, #0]
 801356a:	621a      	str	r2, [r3, #32]
    object->item_capacity = (unsigned int)(capacity * 0.7f);
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	ee07 3a90 	vmov	s15, r3
 8013572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013576:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8013694 <json_object_init+0x160>
 801357a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801357e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013582:	ee17 2a90 	vmov	r2, s15
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	61da      	str	r2, [r3, #28]

    if (capacity == 0) {
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d101      	bne.n	8013594 <json_object_init+0x60>
        return JSONSuccess;
 8013590:	2300      	movs	r3, #0
 8013592:	e07b      	b.n	801368c <json_object_init+0x158>
    }

    object->cells = (size_t*)parson_malloc(object->cell_capacity * sizeof(*object->cells));
 8013594:	4b40      	ldr	r3, [pc, #256]	@ (8013698 <json_object_init+0x164>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	687a      	ldr	r2, [r7, #4]
 801359a:	6a12      	ldr	r2, [r2, #32]
 801359c:	0092      	lsls	r2, r2, #2
 801359e:	4610      	mov	r0, r2
 80135a0:	4798      	blx	r3
 80135a2:	4602      	mov	r2, r0
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	605a      	str	r2, [r3, #4]
    object->names = (char**)parson_malloc(object->item_capacity * sizeof(*object->names));
 80135a8:	4b3b      	ldr	r3, [pc, #236]	@ (8013698 <json_object_init+0x164>)
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	687a      	ldr	r2, [r7, #4]
 80135ae:	69d2      	ldr	r2, [r2, #28]
 80135b0:	0092      	lsls	r2, r2, #2
 80135b2:	4610      	mov	r0, r2
 80135b4:	4798      	blx	r3
 80135b6:	4602      	mov	r2, r0
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	60da      	str	r2, [r3, #12]
    object->values = (JSON_Value**)parson_malloc(object->item_capacity * sizeof(*object->values));
 80135bc:	4b36      	ldr	r3, [pc, #216]	@ (8013698 <json_object_init+0x164>)
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	687a      	ldr	r2, [r7, #4]
 80135c2:	69d2      	ldr	r2, [r2, #28]
 80135c4:	0092      	lsls	r2, r2, #2
 80135c6:	4610      	mov	r0, r2
 80135c8:	4798      	blx	r3
 80135ca:	4602      	mov	r2, r0
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	611a      	str	r2, [r3, #16]
    object->cell_ixs = (size_t*)parson_malloc(object->item_capacity * sizeof(*object->cell_ixs));
 80135d0:	4b31      	ldr	r3, [pc, #196]	@ (8013698 <json_object_init+0x164>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	687a      	ldr	r2, [r7, #4]
 80135d6:	69d2      	ldr	r2, [r2, #28]
 80135d8:	0092      	lsls	r2, r2, #2
 80135da:	4610      	mov	r0, r2
 80135dc:	4798      	blx	r3
 80135de:	4602      	mov	r2, r0
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	615a      	str	r2, [r3, #20]
    object->hashes = (unsigned long*)parson_malloc(object->item_capacity * sizeof(*object->hashes));
 80135e4:	4b2c      	ldr	r3, [pc, #176]	@ (8013698 <json_object_init+0x164>)
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	687a      	ldr	r2, [r7, #4]
 80135ea:	69d2      	ldr	r2, [r2, #28]
 80135ec:	0092      	lsls	r2, r2, #2
 80135ee:	4610      	mov	r0, r2
 80135f0:	4798      	blx	r3
 80135f2:	4602      	mov	r2, r0
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	609a      	str	r2, [r3, #8]
    if (object->cells == NULL
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	685b      	ldr	r3, [r3, #4]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d024      	beq.n	801364a <json_object_init+0x116>
        || object->names == NULL
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	68db      	ldr	r3, [r3, #12]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d020      	beq.n	801364a <json_object_init+0x116>
        || object->values == NULL
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	691b      	ldr	r3, [r3, #16]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d01c      	beq.n	801364a <json_object_init+0x116>
        || object->cell_ixs == NULL
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	695b      	ldr	r3, [r3, #20]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d018      	beq.n	801364a <json_object_init+0x116>
        || object->hashes == NULL) {
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	689b      	ldr	r3, [r3, #8]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d014      	beq.n	801364a <json_object_init+0x116>
        goto error;
    }
    for (i = 0; i < object->cell_capacity; i++) {
 8013620:	2300      	movs	r3, #0
 8013622:	60fb      	str	r3, [r7, #12]
 8013624:	e00a      	b.n	801363c <json_object_init+0x108>
        object->cells[i] = OBJECT_INVALID_IX;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	685a      	ldr	r2, [r3, #4]
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	009b      	lsls	r3, r3, #2
 801362e:	4413      	add	r3, r2
 8013630:	f04f 32ff 	mov.w	r2, #4294967295
 8013634:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->cell_capacity; i++) {
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	3301      	adds	r3, #1
 801363a:	60fb      	str	r3, [r7, #12]
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	6a1b      	ldr	r3, [r3, #32]
 8013640:	68fa      	ldr	r2, [r7, #12]
 8013642:	429a      	cmp	r2, r3
 8013644:	d3ef      	bcc.n	8013626 <json_object_init+0xf2>
    }
    return JSONSuccess;
 8013646:	2300      	movs	r3, #0
 8013648:	e020      	b.n	801368c <json_object_init+0x158>
        goto error;
 801364a:	bf00      	nop
error:
    parson_free(object->cells);
 801364c:	4b13      	ldr	r3, [pc, #76]	@ (801369c <json_object_init+0x168>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	687a      	ldr	r2, [r7, #4]
 8013652:	6852      	ldr	r2, [r2, #4]
 8013654:	4610      	mov	r0, r2
 8013656:	4798      	blx	r3
    parson_free(object->names);
 8013658:	4b10      	ldr	r3, [pc, #64]	@ (801369c <json_object_init+0x168>)
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	687a      	ldr	r2, [r7, #4]
 801365e:	68d2      	ldr	r2, [r2, #12]
 8013660:	4610      	mov	r0, r2
 8013662:	4798      	blx	r3
    parson_free(object->values);
 8013664:	4b0d      	ldr	r3, [pc, #52]	@ (801369c <json_object_init+0x168>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	687a      	ldr	r2, [r7, #4]
 801366a:	6912      	ldr	r2, [r2, #16]
 801366c:	4610      	mov	r0, r2
 801366e:	4798      	blx	r3
    parson_free(object->cell_ixs);
 8013670:	4b0a      	ldr	r3, [pc, #40]	@ (801369c <json_object_init+0x168>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	687a      	ldr	r2, [r7, #4]
 8013676:	6952      	ldr	r2, [r2, #20]
 8013678:	4610      	mov	r0, r2
 801367a:	4798      	blx	r3
    parson_free(object->hashes);
 801367c:	4b07      	ldr	r3, [pc, #28]	@ (801369c <json_object_init+0x168>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	687a      	ldr	r2, [r7, #4]
 8013682:	6892      	ldr	r2, [r2, #8]
 8013684:	4610      	mov	r0, r2
 8013686:	4798      	blx	r3
    return JSONFailure;
 8013688:	f04f 33ff 	mov.w	r3, #4294967295
}
 801368c:	4618      	mov	r0, r3
 801368e:	3710      	adds	r7, #16
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}
 8013694:	3f333333 	.word	0x3f333333
 8013698:	20000894 	.word	0x20000894
 801369c:	20000898 	.word	0x20000898

080136a0 <json_object_deinit>:

static void json_object_deinit(JSON_Object *object, parson_bool_t free_keys, parson_bool_t free_values) {
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b086      	sub	sp, #24
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	60f8      	str	r0, [r7, #12]
 80136a8:	60b9      	str	r1, [r7, #8]
 80136aa:	607a      	str	r2, [r7, #4]
    unsigned int i = 0;
 80136ac:	2300      	movs	r3, #0
 80136ae:	617b      	str	r3, [r7, #20]
    for (i = 0; i < object->count; i++) {
 80136b0:	2300      	movs	r3, #0
 80136b2:	617b      	str	r3, [r7, #20]
 80136b4:	e01b      	b.n	80136ee <json_object_deinit+0x4e>
        if (free_keys) {
 80136b6:	68bb      	ldr	r3, [r7, #8]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d009      	beq.n	80136d0 <json_object_deinit+0x30>
            parson_free(object->names[i]);
 80136bc:	4b2b      	ldr	r3, [pc, #172]	@ (801376c <json_object_deinit+0xcc>)
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	68fa      	ldr	r2, [r7, #12]
 80136c2:	68d1      	ldr	r1, [r2, #12]
 80136c4:	697a      	ldr	r2, [r7, #20]
 80136c6:	0092      	lsls	r2, r2, #2
 80136c8:	440a      	add	r2, r1
 80136ca:	6812      	ldr	r2, [r2, #0]
 80136cc:	4610      	mov	r0, r2
 80136ce:	4798      	blx	r3
        }
        if (free_values) {
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d008      	beq.n	80136e8 <json_object_deinit+0x48>
            json_value_free(object->values[i]);
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	691a      	ldr	r2, [r3, #16]
 80136da:	697b      	ldr	r3, [r7, #20]
 80136dc:	009b      	lsls	r3, r3, #2
 80136de:	4413      	add	r3, r2
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	4618      	mov	r0, r3
 80136e4:	f002 fc50 	bl	8015f88 <json_value_free>
    for (i = 0; i < object->count; i++) {
 80136e8:	697b      	ldr	r3, [r7, #20]
 80136ea:	3301      	adds	r3, #1
 80136ec:	617b      	str	r3, [r7, #20]
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	699b      	ldr	r3, [r3, #24]
 80136f2:	697a      	ldr	r2, [r7, #20]
 80136f4:	429a      	cmp	r2, r3
 80136f6:	d3de      	bcc.n	80136b6 <json_object_deinit+0x16>
        }
    }

    object->count = 0;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	2200      	movs	r2, #0
 80136fc:	619a      	str	r2, [r3, #24]
    object->item_capacity = 0;
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	2200      	movs	r2, #0
 8013702:	61da      	str	r2, [r3, #28]
    object->cell_capacity = 0;
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	2200      	movs	r2, #0
 8013708:	621a      	str	r2, [r3, #32]

    parson_free(object->cells);
 801370a:	4b18      	ldr	r3, [pc, #96]	@ (801376c <json_object_deinit+0xcc>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	68fa      	ldr	r2, [r7, #12]
 8013710:	6852      	ldr	r2, [r2, #4]
 8013712:	4610      	mov	r0, r2
 8013714:	4798      	blx	r3
    parson_free(object->names);
 8013716:	4b15      	ldr	r3, [pc, #84]	@ (801376c <json_object_deinit+0xcc>)
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	68fa      	ldr	r2, [r7, #12]
 801371c:	68d2      	ldr	r2, [r2, #12]
 801371e:	4610      	mov	r0, r2
 8013720:	4798      	blx	r3
    parson_free(object->values);
 8013722:	4b12      	ldr	r3, [pc, #72]	@ (801376c <json_object_deinit+0xcc>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	68fa      	ldr	r2, [r7, #12]
 8013728:	6912      	ldr	r2, [r2, #16]
 801372a:	4610      	mov	r0, r2
 801372c:	4798      	blx	r3
    parson_free(object->cell_ixs);
 801372e:	4b0f      	ldr	r3, [pc, #60]	@ (801376c <json_object_deinit+0xcc>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	68fa      	ldr	r2, [r7, #12]
 8013734:	6952      	ldr	r2, [r2, #20]
 8013736:	4610      	mov	r0, r2
 8013738:	4798      	blx	r3
    parson_free(object->hashes);
 801373a:	4b0c      	ldr	r3, [pc, #48]	@ (801376c <json_object_deinit+0xcc>)
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	68fa      	ldr	r2, [r7, #12]
 8013740:	6892      	ldr	r2, [r2, #8]
 8013742:	4610      	mov	r0, r2
 8013744:	4798      	blx	r3

    object->cells = NULL;
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	2200      	movs	r2, #0
 801374a:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	2200      	movs	r2, #0
 8013750:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	2200      	movs	r2, #0
 8013756:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	2200      	movs	r2, #0
 801375c:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	2200      	movs	r2, #0
 8013762:	609a      	str	r2, [r3, #8]
}
 8013764:	bf00      	nop
 8013766:	3718      	adds	r7, #24
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}
 801376c:	20000898 	.word	0x20000898

08013770 <json_object_grow_and_rehash>:

static JSON_Status json_object_grow_and_rehash(JSON_Object *object) {
 8013770:	b5b0      	push	{r4, r5, r7, lr}
 8013772:	b092      	sub	sp, #72	@ 0x48
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
    JSON_Value *wrapping_value = NULL;
 8013778:	2300      	movs	r3, #0
 801377a:	643b      	str	r3, [r7, #64]	@ 0x40
    JSON_Object new_object;
    char *key = NULL;
 801377c:	2300      	movs	r3, #0
 801377e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    JSON_Value *value = NULL;
 8013780:	2300      	movs	r3, #0
 8013782:	63bb      	str	r3, [r7, #56]	@ 0x38
    unsigned int i = 0;
 8013784:	2300      	movs	r3, #0
 8013786:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t new_capacity = MAX(object->cell_capacity * 2, STARTING_CAPACITY);
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	6a1b      	ldr	r3, [r3, #32]
 801378c:	005b      	lsls	r3, r3, #1
 801378e:	2b10      	cmp	r3, #16
 8013790:	bf38      	it	cc
 8013792:	2310      	movcc	r3, #16
 8013794:	637b      	str	r3, [r7, #52]	@ 0x34
    JSON_Status res = json_object_init(&new_object, new_capacity);
 8013796:	f107 030c 	add.w	r3, r7, #12
 801379a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801379c:	4618      	mov	r0, r3
 801379e:	f7ff fec9 	bl	8013534 <json_object_init>
 80137a2:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res != JSONSuccess) {
 80137a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d002      	beq.n	80137b0 <json_object_grow_and_rehash+0x40>
        return JSONFailure;
 80137aa:	f04f 33ff 	mov.w	r3, #4294967295
 80137ae:	e046      	b.n	801383e <json_object_grow_and_rehash+0xce>
    }

    wrapping_value = json_object_get_wrapping_value(object);
 80137b0:	6878      	ldr	r0, [r7, #4]
 80137b2:	f002 fab6 	bl	8015d22 <json_object_get_wrapping_value>
 80137b6:	6438      	str	r0, [r7, #64]	@ 0x40
    new_object.wrapping_value = wrapping_value;
 80137b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80137ba:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < object->count; i++) {
 80137bc:	2300      	movs	r3, #0
 80137be:	647b      	str	r3, [r7, #68]	@ 0x44
 80137c0:	e028      	b.n	8013814 <json_object_grow_and_rehash+0xa4>
        key = object->names[i];
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	68da      	ldr	r2, [r3, #12]
 80137c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80137c8:	009b      	lsls	r3, r3, #2
 80137ca:	4413      	add	r3, r2
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        value = object->values[i];
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	691a      	ldr	r2, [r3, #16]
 80137d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80137d6:	009b      	lsls	r3, r3, #2
 80137d8:	4413      	add	r3, r2
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	63bb      	str	r3, [r7, #56]	@ 0x38
        res = json_object_add(&new_object, key, value);
 80137de:	f107 030c 	add.w	r3, r7, #12
 80137e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80137e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80137e6:	4618      	mov	r0, r3
 80137e8:	f000 f897 	bl	801391a <json_object_add>
 80137ec:	6338      	str	r0, [r7, #48]	@ 0x30
        if (res != JSONSuccess) {
 80137ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d009      	beq.n	8013808 <json_object_grow_and_rehash+0x98>
            json_object_deinit(&new_object, PARSON_FALSE, PARSON_FALSE);
 80137f4:	f107 030c 	add.w	r3, r7, #12
 80137f8:	2200      	movs	r2, #0
 80137fa:	2100      	movs	r1, #0
 80137fc:	4618      	mov	r0, r3
 80137fe:	f7ff ff4f 	bl	80136a0 <json_object_deinit>
            return JSONFailure;
 8013802:	f04f 33ff 	mov.w	r3, #4294967295
 8013806:	e01a      	b.n	801383e <json_object_grow_and_rehash+0xce>
        }
        value->parent = wrapping_value;
 8013808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801380a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801380c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->count; i++) {
 801380e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013810:	3301      	adds	r3, #1
 8013812:	647b      	str	r3, [r7, #68]	@ 0x44
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	699b      	ldr	r3, [r3, #24]
 8013818:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801381a:	429a      	cmp	r2, r3
 801381c:	d3d1      	bcc.n	80137c2 <json_object_grow_and_rehash+0x52>
    }
    json_object_deinit(object, PARSON_FALSE, PARSON_FALSE);
 801381e:	2200      	movs	r2, #0
 8013820:	2100      	movs	r1, #0
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f7ff ff3c 	bl	80136a0 <json_object_deinit>
    *object = new_object;
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	461d      	mov	r5, r3
 801382c:	f107 040c 	add.w	r4, r7, #12
 8013830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013838:	6823      	ldr	r3, [r4, #0]
 801383a:	602b      	str	r3, [r5, #0]
    return JSONSuccess;
 801383c:	2300      	movs	r3, #0
}
 801383e:	4618      	mov	r0, r3
 8013840:	3748      	adds	r7, #72	@ 0x48
 8013842:	46bd      	mov	sp, r7
 8013844:	bdb0      	pop	{r4, r5, r7, pc}

08013846 <json_object_get_cell_ix>:

static size_t json_object_get_cell_ix(const JSON_Object *object, const char *key, size_t key_len, unsigned long hash, parson_bool_t *out_found) {
 8013846:	b580      	push	{r7, lr}
 8013848:	b08c      	sub	sp, #48	@ 0x30
 801384a:	af00      	add	r7, sp, #0
 801384c:	60f8      	str	r0, [r7, #12]
 801384e:	60b9      	str	r1, [r7, #8]
 8013850:	607a      	str	r2, [r7, #4]
 8013852:	603b      	str	r3, [r7, #0]
    size_t cell_ix = hash & (object->cell_capacity - 1);
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	6a1b      	ldr	r3, [r3, #32]
 8013858:	3b01      	subs	r3, #1
 801385a:	683a      	ldr	r2, [r7, #0]
 801385c:	4013      	ands	r3, r2
 801385e:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t cell = 0;
 8013860:	2300      	movs	r3, #0
 8013862:	627b      	str	r3, [r7, #36]	@ 0x24
    size_t ix = 0;
 8013864:	2300      	movs	r3, #0
 8013866:	623b      	str	r3, [r7, #32]
    unsigned int i = 0;
 8013868:	2300      	movs	r3, #0
 801386a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    unsigned long hash_to_check = 0;
 801386c:	2300      	movs	r3, #0
 801386e:	61fb      	str	r3, [r7, #28]
    const char *key_to_check = NULL;
 8013870:	2300      	movs	r3, #0
 8013872:	61bb      	str	r3, [r7, #24]
    size_t key_to_check_len = 0;
 8013874:	2300      	movs	r3, #0
 8013876:	617b      	str	r3, [r7, #20]

    *out_found = PARSON_FALSE;
 8013878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801387a:	2200      	movs	r2, #0
 801387c:	601a      	str	r2, [r3, #0]

    for (i = 0; i < object->cell_capacity; i++) {
 801387e:	2300      	movs	r3, #0
 8013880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013882:	e03f      	b.n	8013904 <json_object_get_cell_ix+0xbe>
        ix = (cell_ix + i) & (object->cell_capacity - 1);
 8013884:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013888:	441a      	add	r2, r3
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	6a1b      	ldr	r3, [r3, #32]
 801388e:	3b01      	subs	r3, #1
 8013890:	4013      	ands	r3, r2
 8013892:	623b      	str	r3, [r7, #32]
        cell = object->cells[ix];
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	685a      	ldr	r2, [r3, #4]
 8013898:	6a3b      	ldr	r3, [r7, #32]
 801389a:	009b      	lsls	r3, r3, #2
 801389c:	4413      	add	r3, r2
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	627b      	str	r3, [r7, #36]	@ 0x24
        if (cell == OBJECT_INVALID_IX) {
 80138a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138a8:	d101      	bne.n	80138ae <json_object_get_cell_ix+0x68>
            return ix;
 80138aa:	6a3b      	ldr	r3, [r7, #32]
 80138ac:	e031      	b.n	8013912 <json_object_get_cell_ix+0xcc>
        }
        hash_to_check = object->hashes[cell];
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	689a      	ldr	r2, [r3, #8]
 80138b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138b4:	009b      	lsls	r3, r3, #2
 80138b6:	4413      	add	r3, r2
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	61fb      	str	r3, [r7, #28]
        if (hash != hash_to_check) {
 80138bc:	683a      	ldr	r2, [r7, #0]
 80138be:	69fb      	ldr	r3, [r7, #28]
 80138c0:	429a      	cmp	r2, r3
 80138c2:	d11b      	bne.n	80138fc <json_object_get_cell_ix+0xb6>
            continue;
        }
        key_to_check = object->names[cell];
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	68da      	ldr	r2, [r3, #12]
 80138c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138ca:	009b      	lsls	r3, r3, #2
 80138cc:	4413      	add	r3, r2
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	61bb      	str	r3, [r7, #24]
        key_to_check_len = strlen(key_to_check);
 80138d2:	69b8      	ldr	r0, [r7, #24]
 80138d4:	f7ec fcda 	bl	800028c <strlen>
 80138d8:	6178      	str	r0, [r7, #20]
        if (key_to_check_len == key_len && strncmp(key, key_to_check, key_len) == 0) {
 80138da:	697a      	ldr	r2, [r7, #20]
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	429a      	cmp	r2, r3
 80138e0:	d10d      	bne.n	80138fe <json_object_get_cell_ix+0xb8>
 80138e2:	687a      	ldr	r2, [r7, #4]
 80138e4:	69b9      	ldr	r1, [r7, #24]
 80138e6:	68b8      	ldr	r0, [r7, #8]
 80138e8:	f00a febe 	bl	801e668 <strncmp>
 80138ec:	4603      	mov	r3, r0
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d105      	bne.n	80138fe <json_object_get_cell_ix+0xb8>
            *out_found = PARSON_TRUE;
 80138f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138f4:	2201      	movs	r2, #1
 80138f6:	601a      	str	r2, [r3, #0]
            return ix;
 80138f8:	6a3b      	ldr	r3, [r7, #32]
 80138fa:	e00a      	b.n	8013912 <json_object_get_cell_ix+0xcc>
            continue;
 80138fc:	bf00      	nop
    for (i = 0; i < object->cell_capacity; i++) {
 80138fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013900:	3301      	adds	r3, #1
 8013902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	6a1b      	ldr	r3, [r3, #32]
 8013908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801390a:	429a      	cmp	r2, r3
 801390c:	d3ba      	bcc.n	8013884 <json_object_get_cell_ix+0x3e>
        }
    }
    return OBJECT_INVALID_IX;
 801390e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013912:	4618      	mov	r0, r3
 8013914:	3730      	adds	r7, #48	@ 0x30
 8013916:	46bd      	mov	sp, r7
 8013918:	bd80      	pop	{r7, pc}

0801391a <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, char *name, JSON_Value *value) {
 801391a:	b580      	push	{r7, lr}
 801391c:	b08a      	sub	sp, #40	@ 0x28
 801391e:	af02      	add	r7, sp, #8
 8013920:	60f8      	str	r0, [r7, #12]
 8013922:	60b9      	str	r1, [r7, #8]
 8013924:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 8013926:	2300      	movs	r3, #0
 8013928:	61bb      	str	r3, [r7, #24]
    parson_bool_t found = PARSON_FALSE;
 801392a:	2300      	movs	r3, #0
 801392c:	613b      	str	r3, [r7, #16]
    size_t cell_ix = 0;
 801392e:	2300      	movs	r3, #0
 8013930:	61fb      	str	r3, [r7, #28]
    JSON_Status res = JSONFailure;
 8013932:	f04f 33ff 	mov.w	r3, #4294967295
 8013936:	617b      	str	r3, [r7, #20]

    if (!object || !name || !value) {
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d005      	beq.n	801394a <json_object_add+0x30>
 801393e:	68bb      	ldr	r3, [r7, #8]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d002      	beq.n	801394a <json_object_add+0x30>
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d102      	bne.n	8013950 <json_object_add+0x36>
        return JSONFailure;
 801394a:	f04f 33ff 	mov.w	r3, #4294967295
 801394e:	e06e      	b.n	8013a2e <json_object_add+0x114>
    }

    hash = hash_string(name, strlen(name));
 8013950:	68b8      	ldr	r0, [r7, #8]
 8013952:	f7ec fc9b 	bl	800028c <strlen>
 8013956:	4603      	mov	r3, r0
 8013958:	4619      	mov	r1, r3
 801395a:	68b8      	ldr	r0, [r7, #8]
 801395c:	f7ff fd92 	bl	8013484 <hash_string>
 8013960:	61b8      	str	r0, [r7, #24]
    found = PARSON_FALSE;
 8013962:	2300      	movs	r3, #0
 8013964:	613b      	str	r3, [r7, #16]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8013966:	68b8      	ldr	r0, [r7, #8]
 8013968:	f7ec fc90 	bl	800028c <strlen>
 801396c:	4602      	mov	r2, r0
 801396e:	f107 0310 	add.w	r3, r7, #16
 8013972:	9300      	str	r3, [sp, #0]
 8013974:	69bb      	ldr	r3, [r7, #24]
 8013976:	68b9      	ldr	r1, [r7, #8]
 8013978:	68f8      	ldr	r0, [r7, #12]
 801397a:	f7ff ff64 	bl	8013846 <json_object_get_cell_ix>
 801397e:	61f8      	str	r0, [r7, #28]
    if (found) {
 8013980:	693b      	ldr	r3, [r7, #16]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d002      	beq.n	801398c <json_object_add+0x72>
        return JSONFailure;
 8013986:	f04f 33ff 	mov.w	r3, #4294967295
 801398a:	e050      	b.n	8013a2e <json_object_add+0x114>
    }

    if (object->count >= object->item_capacity) {
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	699a      	ldr	r2, [r3, #24]
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	69db      	ldr	r3, [r3, #28]
 8013994:	429a      	cmp	r2, r3
 8013996:	d316      	bcc.n	80139c6 <json_object_add+0xac>
        res = json_object_grow_and_rehash(object);
 8013998:	68f8      	ldr	r0, [r7, #12]
 801399a:	f7ff fee9 	bl	8013770 <json_object_grow_and_rehash>
 801399e:	6178      	str	r0, [r7, #20]
        if (res != JSONSuccess) {
 80139a0:	697b      	ldr	r3, [r7, #20]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d002      	beq.n	80139ac <json_object_add+0x92>
            return JSONFailure;
 80139a6:	f04f 33ff 	mov.w	r3, #4294967295
 80139aa:	e040      	b.n	8013a2e <json_object_add+0x114>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 80139ac:	68b8      	ldr	r0, [r7, #8]
 80139ae:	f7ec fc6d 	bl	800028c <strlen>
 80139b2:	4602      	mov	r2, r0
 80139b4:	f107 0310 	add.w	r3, r7, #16
 80139b8:	9300      	str	r3, [sp, #0]
 80139ba:	69bb      	ldr	r3, [r7, #24]
 80139bc:	68b9      	ldr	r1, [r7, #8]
 80139be:	68f8      	ldr	r0, [r7, #12]
 80139c0:	f7ff ff41 	bl	8013846 <json_object_get_cell_ix>
 80139c4:	61f8      	str	r0, [r7, #28]
    }

    object->names[object->count] = name;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	68da      	ldr	r2, [r3, #12]
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	699b      	ldr	r3, [r3, #24]
 80139ce:	009b      	lsls	r3, r3, #2
 80139d0:	4413      	add	r3, r2
 80139d2:	68ba      	ldr	r2, [r7, #8]
 80139d4:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	685a      	ldr	r2, [r3, #4]
 80139da:	69fb      	ldr	r3, [r7, #28]
 80139dc:	009b      	lsls	r3, r3, #2
 80139de:	4413      	add	r3, r2
 80139e0:	68fa      	ldr	r2, [r7, #12]
 80139e2:	6992      	ldr	r2, [r2, #24]
 80139e4:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	691a      	ldr	r2, [r3, #16]
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	699b      	ldr	r3, [r3, #24]
 80139ee:	009b      	lsls	r3, r3, #2
 80139f0:	4413      	add	r3, r2
 80139f2:	687a      	ldr	r2, [r7, #4]
 80139f4:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	695a      	ldr	r2, [r3, #20]
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	699b      	ldr	r3, [r3, #24]
 80139fe:	009b      	lsls	r3, r3, #2
 8013a00:	4413      	add	r3, r2
 8013a02:	69fa      	ldr	r2, [r7, #28]
 8013a04:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	689a      	ldr	r2, [r3, #8]
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	699b      	ldr	r3, [r3, #24]
 8013a0e:	009b      	lsls	r3, r3, #2
 8013a10:	4413      	add	r3, r2
 8013a12:	69ba      	ldr	r2, [r7, #24]
 8013a14:	601a      	str	r2, [r3, #0]
    object->count++;
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	699b      	ldr	r3, [r3, #24]
 8013a1a:	1c5a      	adds	r2, r3, #1
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 8013a20:	68f8      	ldr	r0, [r7, #12]
 8013a22:	f002 f97e 	bl	8015d22 <json_object_get_wrapping_value>
 8013a26:	4602      	mov	r2, r0
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	601a      	str	r2, [r3, #0]

    return JSONSuccess;
 8013a2c:	2300      	movs	r3, #0
}
 8013a2e:	4618      	mov	r0, r3
 8013a30:	3720      	adds	r7, #32
 8013a32:	46bd      	mov	sp, r7
 8013a34:	bd80      	pop	{r7, pc}

08013a36 <json_object_getn_value>:

static JSON_Value * json_object_getn_value(const JSON_Object *object, const char *name, size_t name_len) {
 8013a36:	b580      	push	{r7, lr}
 8013a38:	b08a      	sub	sp, #40	@ 0x28
 8013a3a:	af02      	add	r7, sp, #8
 8013a3c:	60f8      	str	r0, [r7, #12]
 8013a3e:	60b9      	str	r1, [r7, #8]
 8013a40:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 8013a42:	2300      	movs	r3, #0
 8013a44:	61fb      	str	r3, [r7, #28]
    parson_bool_t found = PARSON_FALSE;
 8013a46:	2300      	movs	r3, #0
 8013a48:	613b      	str	r3, [r7, #16]
    unsigned long cell_ix = 0;
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	61bb      	str	r3, [r7, #24]
    size_t item_ix = 0;
 8013a4e:	2300      	movs	r3, #0
 8013a50:	617b      	str	r3, [r7, #20]
    if (!object || !name) {
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d002      	beq.n	8013a5e <json_object_getn_value+0x28>
 8013a58:	68bb      	ldr	r3, [r7, #8]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d101      	bne.n	8013a62 <json_object_getn_value+0x2c>
        return NULL;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	e022      	b.n	8013aa8 <json_object_getn_value+0x72>
    }
    hash = hash_string(name, name_len);
 8013a62:	6879      	ldr	r1, [r7, #4]
 8013a64:	68b8      	ldr	r0, [r7, #8]
 8013a66:	f7ff fd0d 	bl	8013484 <hash_string>
 8013a6a:	61f8      	str	r0, [r7, #28]
    found = PARSON_FALSE;
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	613b      	str	r3, [r7, #16]
    cell_ix = json_object_get_cell_ix(object, name, name_len, hash, &found);
 8013a70:	f107 0310 	add.w	r3, r7, #16
 8013a74:	9300      	str	r3, [sp, #0]
 8013a76:	69fb      	ldr	r3, [r7, #28]
 8013a78:	687a      	ldr	r2, [r7, #4]
 8013a7a:	68b9      	ldr	r1, [r7, #8]
 8013a7c:	68f8      	ldr	r0, [r7, #12]
 8013a7e:	f7ff fee2 	bl	8013846 <json_object_get_cell_ix>
 8013a82:	61b8      	str	r0, [r7, #24]
    if (!found) {
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d101      	bne.n	8013a8e <json_object_getn_value+0x58>
        return NULL;
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	e00c      	b.n	8013aa8 <json_object_getn_value+0x72>
    }
    item_ix = object->cells[cell_ix];
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	685a      	ldr	r2, [r3, #4]
 8013a92:	69bb      	ldr	r3, [r7, #24]
 8013a94:	009b      	lsls	r3, r3, #2
 8013a96:	4413      	add	r3, r2
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	617b      	str	r3, [r7, #20]
    return object->values[item_ix];
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	691a      	ldr	r2, [r3, #16]
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	009b      	lsls	r3, r3, #2
 8013aa4:	4413      	add	r3, r2
 8013aa6:	681b      	ldr	r3, [r3, #0]
}
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	3720      	adds	r7, #32
 8013aac:	46bd      	mov	sp, r7
 8013aae:	bd80      	pop	{r7, pc}

08013ab0 <json_object_remove_internal>:

static JSON_Status json_object_remove_internal(JSON_Object *object, const char *name, parson_bool_t free_value) {
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b090      	sub	sp, #64	@ 0x40
 8013ab4:	af02      	add	r7, sp, #8
 8013ab6:	60f8      	str	r0, [r7, #12]
 8013ab8:	60b9      	str	r1, [r7, #8]
 8013aba:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 8013abc:	2300      	movs	r3, #0
 8013abe:	62bb      	str	r3, [r7, #40]	@ 0x28
    parson_bool_t found = PARSON_FALSE;
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	613b      	str	r3, [r7, #16]
    size_t cell = 0;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    size_t item_ix = 0;
 8013ac8:	2300      	movs	r3, #0
 8013aca:	623b      	str	r3, [r7, #32]
    size_t last_item_ix = 0;
 8013acc:	2300      	movs	r3, #0
 8013ace:	61fb      	str	r3, [r7, #28]
    size_t i = 0;
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	637b      	str	r3, [r7, #52]	@ 0x34
    size_t j = 0;
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	633b      	str	r3, [r7, #48]	@ 0x30
    size_t x = 0;
 8013ad8:	2300      	movs	r3, #0
 8013ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t k = 0;
 8013adc:	2300      	movs	r3, #0
 8013ade:	61bb      	str	r3, [r7, #24]
    JSON_Value *val = NULL;
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	617b      	str	r3, [r7, #20]

    if (object == NULL) {
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d102      	bne.n	8013af0 <json_object_remove_internal+0x40>
        return JSONFailure;
 8013aea:	f04f 33ff 	mov.w	r3, #4294967295
 8013aee:	e0f3      	b.n	8013cd8 <json_object_remove_internal+0x228>
    }

    hash = hash_string(name, strlen(name));
 8013af0:	68b8      	ldr	r0, [r7, #8]
 8013af2:	f7ec fbcb 	bl	800028c <strlen>
 8013af6:	4603      	mov	r3, r0
 8013af8:	4619      	mov	r1, r3
 8013afa:	68b8      	ldr	r0, [r7, #8]
 8013afc:	f7ff fcc2 	bl	8013484 <hash_string>
 8013b00:	62b8      	str	r0, [r7, #40]	@ 0x28
    found = PARSON_FALSE;
 8013b02:	2300      	movs	r3, #0
 8013b04:	613b      	str	r3, [r7, #16]
    cell = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8013b06:	68b8      	ldr	r0, [r7, #8]
 8013b08:	f7ec fbc0 	bl	800028c <strlen>
 8013b0c:	4602      	mov	r2, r0
 8013b0e:	f107 0310 	add.w	r3, r7, #16
 8013b12:	9300      	str	r3, [sp, #0]
 8013b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b16:	68b9      	ldr	r1, [r7, #8]
 8013b18:	68f8      	ldr	r0, [r7, #12]
 8013b1a:	f7ff fe94 	bl	8013846 <json_object_get_cell_ix>
 8013b1e:	6278      	str	r0, [r7, #36]	@ 0x24
    if (!found) {
 8013b20:	693b      	ldr	r3, [r7, #16]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d102      	bne.n	8013b2c <json_object_remove_internal+0x7c>
        return JSONFailure;
 8013b26:	f04f 33ff 	mov.w	r3, #4294967295
 8013b2a:	e0d5      	b.n	8013cd8 <json_object_remove_internal+0x228>
    }

    item_ix = object->cells[cell];
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	685a      	ldr	r2, [r3, #4]
 8013b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b32:	009b      	lsls	r3, r3, #2
 8013b34:	4413      	add	r3, r2
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	623b      	str	r3, [r7, #32]
    if (free_value) {
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d00b      	beq.n	8013b58 <json_object_remove_internal+0xa8>
        val = object->values[item_ix];
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	691a      	ldr	r2, [r3, #16]
 8013b44:	6a3b      	ldr	r3, [r7, #32]
 8013b46:	009b      	lsls	r3, r3, #2
 8013b48:	4413      	add	r3, r2
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	617b      	str	r3, [r7, #20]
        json_value_free(val);
 8013b4e:	6978      	ldr	r0, [r7, #20]
 8013b50:	f002 fa1a 	bl	8015f88 <json_value_free>
        val = NULL;
 8013b54:	2300      	movs	r3, #0
 8013b56:	617b      	str	r3, [r7, #20]
    }

    parson_free(object->names[item_ix]);
 8013b58:	4b61      	ldr	r3, [pc, #388]	@ (8013ce0 <json_object_remove_internal+0x230>)
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	68fa      	ldr	r2, [r7, #12]
 8013b5e:	68d1      	ldr	r1, [r2, #12]
 8013b60:	6a3a      	ldr	r2, [r7, #32]
 8013b62:	0092      	lsls	r2, r2, #2
 8013b64:	440a      	add	r2, r1
 8013b66:	6812      	ldr	r2, [r2, #0]
 8013b68:	4610      	mov	r0, r2
 8013b6a:	4798      	blx	r3
    last_item_ix = object->count - 1;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	699b      	ldr	r3, [r3, #24]
 8013b70:	3b01      	subs	r3, #1
 8013b72:	61fb      	str	r3, [r7, #28]
    if (item_ix < last_item_ix) {
 8013b74:	6a3a      	ldr	r2, [r7, #32]
 8013b76:	69fb      	ldr	r3, [r7, #28]
 8013b78:	429a      	cmp	r2, r3
 8013b7a:	d23b      	bcs.n	8013bf4 <json_object_remove_internal+0x144>
        object->names[item_ix] = object->names[last_item_ix];
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	68da      	ldr	r2, [r3, #12]
 8013b80:	69fb      	ldr	r3, [r7, #28]
 8013b82:	009b      	lsls	r3, r3, #2
 8013b84:	441a      	add	r2, r3
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	68d9      	ldr	r1, [r3, #12]
 8013b8a:	6a3b      	ldr	r3, [r7, #32]
 8013b8c:	009b      	lsls	r3, r3, #2
 8013b8e:	440b      	add	r3, r1
 8013b90:	6812      	ldr	r2, [r2, #0]
 8013b92:	601a      	str	r2, [r3, #0]
        object->values[item_ix] = object->values[last_item_ix];
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	691a      	ldr	r2, [r3, #16]
 8013b98:	69fb      	ldr	r3, [r7, #28]
 8013b9a:	009b      	lsls	r3, r3, #2
 8013b9c:	441a      	add	r2, r3
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	6919      	ldr	r1, [r3, #16]
 8013ba2:	6a3b      	ldr	r3, [r7, #32]
 8013ba4:	009b      	lsls	r3, r3, #2
 8013ba6:	440b      	add	r3, r1
 8013ba8:	6812      	ldr	r2, [r2, #0]
 8013baa:	601a      	str	r2, [r3, #0]
        object->cell_ixs[item_ix] = object->cell_ixs[last_item_ix];
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	695a      	ldr	r2, [r3, #20]
 8013bb0:	69fb      	ldr	r3, [r7, #28]
 8013bb2:	009b      	lsls	r3, r3, #2
 8013bb4:	441a      	add	r2, r3
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	6959      	ldr	r1, [r3, #20]
 8013bba:	6a3b      	ldr	r3, [r7, #32]
 8013bbc:	009b      	lsls	r3, r3, #2
 8013bbe:	440b      	add	r3, r1
 8013bc0:	6812      	ldr	r2, [r2, #0]
 8013bc2:	601a      	str	r2, [r3, #0]
        object->hashes[item_ix] = object->hashes[last_item_ix];
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	689a      	ldr	r2, [r3, #8]
 8013bc8:	69fb      	ldr	r3, [r7, #28]
 8013bca:	009b      	lsls	r3, r3, #2
 8013bcc:	441a      	add	r2, r3
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	6899      	ldr	r1, [r3, #8]
 8013bd2:	6a3b      	ldr	r3, [r7, #32]
 8013bd4:	009b      	lsls	r3, r3, #2
 8013bd6:	440b      	add	r3, r1
 8013bd8:	6812      	ldr	r2, [r2, #0]
 8013bda:	601a      	str	r2, [r3, #0]
        object->cells[object->cell_ixs[item_ix]] = item_ix;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	685a      	ldr	r2, [r3, #4]
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	6959      	ldr	r1, [r3, #20]
 8013be4:	6a3b      	ldr	r3, [r7, #32]
 8013be6:	009b      	lsls	r3, r3, #2
 8013be8:	440b      	add	r3, r1
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	009b      	lsls	r3, r3, #2
 8013bee:	4413      	add	r3, r2
 8013bf0:	6a3a      	ldr	r2, [r7, #32]
 8013bf2:	601a      	str	r2, [r3, #0]
    }
    object->count--;
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	699b      	ldr	r3, [r3, #24]
 8013bf8:	1e5a      	subs	r2, r3, #1
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	619a      	str	r2, [r3, #24]

    i = cell;
 8013bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c00:	637b      	str	r3, [r7, #52]	@ 0x34
    j = i;
 8013c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c04:	633b      	str	r3, [r7, #48]	@ 0x30
    for (x = 0; x < (object->cell_capacity - 1); x++) {
 8013c06:	2300      	movs	r3, #0
 8013c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013c0a:	e054      	b.n	8013cb6 <json_object_remove_internal+0x206>
        j = (j + 1) & (object->cell_capacity - 1);
 8013c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c0e:	1c5a      	adds	r2, r3, #1
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	6a1b      	ldr	r3, [r3, #32]
 8013c14:	3b01      	subs	r3, #1
 8013c16:	4013      	ands	r3, r2
 8013c18:	633b      	str	r3, [r7, #48]	@ 0x30
        if (object->cells[j] == OBJECT_INVALID_IX) {
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	685a      	ldr	r2, [r3, #4]
 8013c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c20:	009b      	lsls	r3, r3, #2
 8013c22:	4413      	add	r3, r2
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c2a:	d04b      	beq.n	8013cc4 <json_object_remove_internal+0x214>
            break;
        }
        k = object->hashes[object->cells[j]] & (object->cell_capacity - 1);
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	689a      	ldr	r2, [r3, #8]
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	6859      	ldr	r1, [r3, #4]
 8013c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c36:	009b      	lsls	r3, r3, #2
 8013c38:	440b      	add	r3, r1
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	009b      	lsls	r3, r3, #2
 8013c3e:	4413      	add	r3, r2
 8013c40:	681a      	ldr	r2, [r3, #0]
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	6a1b      	ldr	r3, [r3, #32]
 8013c46:	3b01      	subs	r3, #1
 8013c48:	4013      	ands	r3, r2
 8013c4a:	61bb      	str	r3, [r7, #24]
        if ((j > i && (k <= i || k > j))
 8013c4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c50:	429a      	cmp	r2, r3
 8013c52:	d907      	bls.n	8013c64 <json_object_remove_internal+0x1b4>
 8013c54:	69ba      	ldr	r2, [r7, #24]
 8013c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d90f      	bls.n	8013c7c <json_object_remove_internal+0x1cc>
 8013c5c:	69ba      	ldr	r2, [r7, #24]
 8013c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c60:	429a      	cmp	r2, r3
 8013c62:	d80b      	bhi.n	8013c7c <json_object_remove_internal+0x1cc>
         || (j < i && (k <= i && k > j))) {
 8013c64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	d221      	bcs.n	8013cb0 <json_object_remove_internal+0x200>
 8013c6c:	69ba      	ldr	r2, [r7, #24]
 8013c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c70:	429a      	cmp	r2, r3
 8013c72:	d81d      	bhi.n	8013cb0 <json_object_remove_internal+0x200>
 8013c74:	69ba      	ldr	r2, [r7, #24]
 8013c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d919      	bls.n	8013cb0 <json_object_remove_internal+0x200>
            object->cell_ixs[object->cells[j]] = i;
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	695a      	ldr	r2, [r3, #20]
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	6859      	ldr	r1, [r3, #4]
 8013c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c86:	009b      	lsls	r3, r3, #2
 8013c88:	440b      	add	r3, r1
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	009b      	lsls	r3, r3, #2
 8013c8e:	4413      	add	r3, r2
 8013c90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013c92:	601a      	str	r2, [r3, #0]
            object->cells[i] = object->cells[j];
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	685a      	ldr	r2, [r3, #4]
 8013c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c9a:	009b      	lsls	r3, r3, #2
 8013c9c:	441a      	add	r2, r3
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	6859      	ldr	r1, [r3, #4]
 8013ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ca4:	009b      	lsls	r3, r3, #2
 8013ca6:	440b      	add	r3, r1
 8013ca8:	6812      	ldr	r2, [r2, #0]
 8013caa:	601a      	str	r2, [r3, #0]
            i = j;
 8013cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cae:	637b      	str	r3, [r7, #52]	@ 0x34
    for (x = 0; x < (object->cell_capacity - 1); x++) {
 8013cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cb2:	3301      	adds	r3, #1
 8013cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	6a1b      	ldr	r3, [r3, #32]
 8013cba:	3b01      	subs	r3, #1
 8013cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013cbe:	429a      	cmp	r2, r3
 8013cc0:	d3a4      	bcc.n	8013c0c <json_object_remove_internal+0x15c>
 8013cc2:	e000      	b.n	8013cc6 <json_object_remove_internal+0x216>
            break;
 8013cc4:	bf00      	nop
        }
    }
    object->cells[i] = OBJECT_INVALID_IX;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	685a      	ldr	r2, [r3, #4]
 8013cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ccc:	009b      	lsls	r3, r3, #2
 8013cce:	4413      	add	r3, r2
 8013cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8013cd4:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 8013cd6:	2300      	movs	r3, #0
}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	3738      	adds	r7, #56	@ 0x38
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}
 8013ce0:	20000898 	.word	0x20000898

08013ce4 <json_object_dotremove_internal>:

static JSON_Status json_object_dotremove_internal(JSON_Object *object, const char *name, parson_bool_t free_value) {
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b088      	sub	sp, #32
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	60f8      	str	r0, [r7, #12]
 8013cec:	60b9      	str	r1, [r7, #8]
 8013cee:	607a      	str	r2, [r7, #4]
    JSON_Value *temp_value = NULL;
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	61fb      	str	r3, [r7, #28]
    JSON_Object *temp_object = NULL;
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	61bb      	str	r3, [r7, #24]
    const char *dot_pos = strchr(name, '.');
 8013cf8:	212e      	movs	r1, #46	@ 0x2e
 8013cfa:	68b8      	ldr	r0, [r7, #8]
 8013cfc:	f00a fca7 	bl	801e64e <strchr>
 8013d00:	6178      	str	r0, [r7, #20]
    if (!dot_pos) {
 8013d02:	697b      	ldr	r3, [r7, #20]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d106      	bne.n	8013d16 <json_object_dotremove_internal+0x32>
        return json_object_remove_internal(object, name, free_value);
 8013d08:	687a      	ldr	r2, [r7, #4]
 8013d0a:	68b9      	ldr	r1, [r7, #8]
 8013d0c:	68f8      	ldr	r0, [r7, #12]
 8013d0e:	f7ff fecf 	bl	8013ab0 <json_object_remove_internal>
 8013d12:	4603      	mov	r3, r0
 8013d14:	e01d      	b.n	8013d52 <json_object_dotremove_internal+0x6e>
    }
    temp_value = json_object_getn_value(object, name, dot_pos - name);
 8013d16:	697a      	ldr	r2, [r7, #20]
 8013d18:	68bb      	ldr	r3, [r7, #8]
 8013d1a:	1ad3      	subs	r3, r2, r3
 8013d1c:	461a      	mov	r2, r3
 8013d1e:	68b9      	ldr	r1, [r7, #8]
 8013d20:	68f8      	ldr	r0, [r7, #12]
 8013d22:	f7ff fe88 	bl	8013a36 <json_object_getn_value>
 8013d26:	61f8      	str	r0, [r7, #28]
    if (json_value_get_type(temp_value) != JSONObject) {
 8013d28:	69f8      	ldr	r0, [r7, #28]
 8013d2a:	f002 f880 	bl	8015e2e <json_value_get_type>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	2b04      	cmp	r3, #4
 8013d32:	d002      	beq.n	8013d3a <json_object_dotremove_internal+0x56>
        return JSONFailure;
 8013d34:	f04f 33ff 	mov.w	r3, #4294967295
 8013d38:	e00b      	b.n	8013d52 <json_object_dotremove_internal+0x6e>
    }
    temp_object = json_value_get_object(temp_value);
 8013d3a:	69f8      	ldr	r0, [r7, #28]
 8013d3c:	f002 f889 	bl	8015e52 <json_value_get_object>
 8013d40:	61b8      	str	r0, [r7, #24]
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	3301      	adds	r3, #1
 8013d46:	687a      	ldr	r2, [r7, #4]
 8013d48:	4619      	mov	r1, r3
 8013d4a:	69b8      	ldr	r0, [r7, #24]
 8013d4c:	f7ff ffca 	bl	8013ce4 <json_object_dotremove_internal>
 8013d50:	4603      	mov	r3, r0
}
 8013d52:	4618      	mov	r0, r3
 8013d54:	3720      	adds	r7, #32
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}
	...

08013d5c <json_object_free>:

static void json_object_free(JSON_Object *object) {
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b082      	sub	sp, #8
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
    json_object_deinit(object, PARSON_TRUE, PARSON_TRUE);
 8013d64:	2201      	movs	r2, #1
 8013d66:	2101      	movs	r1, #1
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f7ff fc99 	bl	80136a0 <json_object_deinit>
    parson_free(object);
 8013d6e:	4b04      	ldr	r3, [pc, #16]	@ (8013d80 <json_object_free+0x24>)
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	6878      	ldr	r0, [r7, #4]
 8013d74:	4798      	blx	r3
}
 8013d76:	bf00      	nop
 8013d78:	3708      	adds	r7, #8
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	bd80      	pop	{r7, pc}
 8013d7e:	bf00      	nop
 8013d80:	20000898 	.word	0x20000898

08013d84 <json_array_make>:

/* JSON Array */
static JSON_Array * json_array_make(JSON_Value *wrapping_value) {
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b084      	sub	sp, #16
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 8013d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8013dc4 <json_array_make+0x40>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	2010      	movs	r0, #16
 8013d92:	4798      	blx	r3
 8013d94:	60f8      	str	r0, [r7, #12]
    if (new_array == NULL) {
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d101      	bne.n	8013da0 <json_array_make+0x1c>
        return NULL;
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	e00c      	b.n	8013dba <json_array_make+0x36>
    }
    new_array->wrapping_value = wrapping_value;
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	687a      	ldr	r2, [r7, #4]
 8013da4:	601a      	str	r2, [r3, #0]
    new_array->items = (JSON_Value**)NULL;
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	2200      	movs	r2, #0
 8013daa:	605a      	str	r2, [r3, #4]
    new_array->capacity = 0;
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	2200      	movs	r2, #0
 8013db0:	60da      	str	r2, [r3, #12]
    new_array->count = 0;
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	2200      	movs	r2, #0
 8013db6:	609a      	str	r2, [r3, #8]
    return new_array;
 8013db8:	68fb      	ldr	r3, [r7, #12]
}
 8013dba:	4618      	mov	r0, r3
 8013dbc:	3710      	adds	r7, #16
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd80      	pop	{r7, pc}
 8013dc2:	bf00      	nop
 8013dc4:	20000894 	.word	0x20000894

08013dc8 <json_array_add>:

static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b084      	sub	sp, #16
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
 8013dd0:	6039      	str	r1, [r7, #0]
    if (array->count >= array->capacity) {
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	689a      	ldr	r2, [r3, #8]
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	68db      	ldr	r3, [r3, #12]
 8013dda:	429a      	cmp	r2, r3
 8013ddc:	d310      	bcc.n	8013e00 <json_array_add+0x38>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	68db      	ldr	r3, [r3, #12]
 8013de2:	005b      	lsls	r3, r3, #1
 8013de4:	2b10      	cmp	r3, #16
 8013de6:	bf38      	it	cc
 8013de8:	2310      	movcc	r3, #16
 8013dea:	60fb      	str	r3, [r7, #12]
        if (json_array_resize(array, new_capacity) != JSONSuccess) {
 8013dec:	68f9      	ldr	r1, [r7, #12]
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	f000 f81e 	bl	8013e30 <json_array_resize>
 8013df4:	4603      	mov	r3, r0
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d002      	beq.n	8013e00 <json_array_add+0x38>
            return JSONFailure;
 8013dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8013dfe:	e013      	b.n	8013e28 <json_array_add+0x60>
        }
    }
    value->parent = json_array_get_wrapping_value(array);
 8013e00:	6878      	ldr	r0, [r7, #4]
 8013e02:	f002 f803 	bl	8015e0c <json_array_get_wrapping_value>
 8013e06:	4602      	mov	r2, r0
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	601a      	str	r2, [r3, #0]
    array->items[array->count] = value;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	685a      	ldr	r2, [r3, #4]
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	689b      	ldr	r3, [r3, #8]
 8013e14:	009b      	lsls	r3, r3, #2
 8013e16:	4413      	add	r3, r2
 8013e18:	683a      	ldr	r2, [r7, #0]
 8013e1a:	601a      	str	r2, [r3, #0]
    array->count++;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	689b      	ldr	r3, [r3, #8]
 8013e20:	1c5a      	adds	r2, r3, #1
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	609a      	str	r2, [r3, #8]
    return JSONSuccess;
 8013e26:	2300      	movs	r3, #0
}
 8013e28:	4618      	mov	r0, r3
 8013e2a:	3710      	adds	r7, #16
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <json_array_resize>:

static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b084      	sub	sp, #16
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
 8013e38:	6039      	str	r1, [r7, #0]
    JSON_Value **new_items = NULL;
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	60fb      	str	r3, [r7, #12]
    if (new_capacity == 0) {
 8013e3e:	683b      	ldr	r3, [r7, #0]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d102      	bne.n	8013e4a <json_array_resize+0x1a>
        return JSONFailure;
 8013e44:	f04f 33ff 	mov.w	r3, #4294967295
 8013e48:	e02a      	b.n	8013ea0 <json_array_resize+0x70>
    }
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 8013e4a:	4b17      	ldr	r3, [pc, #92]	@ (8013ea8 <json_array_resize+0x78>)
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	683a      	ldr	r2, [r7, #0]
 8013e50:	0092      	lsls	r2, r2, #2
 8013e52:	4610      	mov	r0, r2
 8013e54:	4798      	blx	r3
 8013e56:	60f8      	str	r0, [r7, #12]
    if (new_items == NULL) {
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d102      	bne.n	8013e64 <json_array_resize+0x34>
        return JSONFailure;
 8013e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8013e62:	e01d      	b.n	8013ea0 <json_array_resize+0x70>
    }
    if (array->items != NULL && array->count > 0) {
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	685b      	ldr	r3, [r3, #4]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d00c      	beq.n	8013e86 <json_array_resize+0x56>
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	689b      	ldr	r3, [r3, #8]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d008      	beq.n	8013e86 <json_array_resize+0x56>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	6859      	ldr	r1, [r3, #4]
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	689b      	ldr	r3, [r3, #8]
 8013e7c:	009b      	lsls	r3, r3, #2
 8013e7e:	461a      	mov	r2, r3
 8013e80:	68f8      	ldr	r0, [r7, #12]
 8013e82:	f00a fd26 	bl	801e8d2 <memcpy>
    }
    parson_free(array->items);
 8013e86:	4b09      	ldr	r3, [pc, #36]	@ (8013eac <json_array_resize+0x7c>)
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	687a      	ldr	r2, [r7, #4]
 8013e8c:	6852      	ldr	r2, [r2, #4]
 8013e8e:	4610      	mov	r0, r2
 8013e90:	4798      	blx	r3
    array->items = new_items;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	68fa      	ldr	r2, [r7, #12]
 8013e96:	605a      	str	r2, [r3, #4]
    array->capacity = new_capacity;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	683a      	ldr	r2, [r7, #0]
 8013e9c:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 8013e9e:	2300      	movs	r3, #0
}
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	3710      	adds	r7, #16
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bd80      	pop	{r7, pc}
 8013ea8:	20000894 	.word	0x20000894
 8013eac:	20000898 	.word	0x20000898

08013eb0 <json_array_free>:

static void json_array_free(JSON_Array *array) {
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b084      	sub	sp, #16
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < array->count; i++) {
 8013eb8:	2300      	movs	r3, #0
 8013eba:	60fb      	str	r3, [r7, #12]
 8013ebc:	e00b      	b.n	8013ed6 <json_array_free+0x26>
        json_value_free(array->items[i]);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	685a      	ldr	r2, [r3, #4]
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	009b      	lsls	r3, r3, #2
 8013ec6:	4413      	add	r3, r2
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f002 f85c 	bl	8015f88 <json_value_free>
    for (i = 0; i < array->count; i++) {
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	3301      	adds	r3, #1
 8013ed4:	60fb      	str	r3, [r7, #12]
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	689b      	ldr	r3, [r3, #8]
 8013eda:	68fa      	ldr	r2, [r7, #12]
 8013edc:	429a      	cmp	r2, r3
 8013ede:	d3ee      	bcc.n	8013ebe <json_array_free+0xe>
    }
    parson_free(array->items);
 8013ee0:	4b06      	ldr	r3, [pc, #24]	@ (8013efc <json_array_free+0x4c>)
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	687a      	ldr	r2, [r7, #4]
 8013ee6:	6852      	ldr	r2, [r2, #4]
 8013ee8:	4610      	mov	r0, r2
 8013eea:	4798      	blx	r3
    parson_free(array);
 8013eec:	4b03      	ldr	r3, [pc, #12]	@ (8013efc <json_array_free+0x4c>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	6878      	ldr	r0, [r7, #4]
 8013ef2:	4798      	blx	r3
}
 8013ef4:	bf00      	nop
 8013ef6:	3710      	adds	r7, #16
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}
 8013efc:	20000898 	.word	0x20000898

08013f00 <json_value_init_string_no_copy>:

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string, size_t length) {
 8013f00:	b580      	push	{r7, lr}
 8013f02:	b084      	sub	sp, #16
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
 8013f08:	6039      	str	r1, [r7, #0]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8013f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8013f40 <json_value_init_string_no_copy+0x40>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	2010      	movs	r0, #16
 8013f10:	4798      	blx	r3
 8013f12:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d101      	bne.n	8013f1e <json_value_init_string_no_copy+0x1e>
        return NULL;
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	e00c      	b.n	8013f38 <json_value_init_string_no_copy+0x38>
    }
    new_value->parent = NULL;
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	2200      	movs	r2, #0
 8013f22:	601a      	str	r2, [r3, #0]
    new_value->type = JSONString;
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	2202      	movs	r2, #2
 8013f28:	605a      	str	r2, [r3, #4]
    new_value->value.string.chars = string;
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	687a      	ldr	r2, [r7, #4]
 8013f2e:	609a      	str	r2, [r3, #8]
    new_value->value.string.length = length;
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	683a      	ldr	r2, [r7, #0]
 8013f34:	60da      	str	r2, [r3, #12]
    return new_value;
 8013f36:	68fb      	ldr	r3, [r7, #12]
}
 8013f38:	4618      	mov	r0, r3
 8013f3a:	3710      	adds	r7, #16
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd80      	pop	{r7, pc}
 8013f40:	20000894 	.word	0x20000894

08013f44 <skip_quotes>:

/* Parser */
static JSON_Status skip_quotes(const char **string) {
 8013f44:	b480      	push	{r7}
 8013f46:	b083      	sub	sp, #12
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
    if (**string != '\"') {
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	781b      	ldrb	r3, [r3, #0]
 8013f52:	2b22      	cmp	r3, #34	@ 0x22
 8013f54:	d002      	beq.n	8013f5c <skip_quotes+0x18>
        return JSONFailure;
 8013f56:	f04f 33ff 	mov.w	r3, #4294967295
 8013f5a:	e02f      	b.n	8013fbc <skip_quotes+0x78>
    }
    SKIP_CHAR(string);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	1c5a      	adds	r2, r3, #1
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 8013f66:	e01e      	b.n	8013fa6 <skip_quotes+0x62>
        if (**string == '\0') {
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	781b      	ldrb	r3, [r3, #0]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d102      	bne.n	8013f78 <skip_quotes+0x34>
            return JSONFailure;
 8013f72:	f04f 33ff 	mov.w	r3, #4294967295
 8013f76:	e021      	b.n	8013fbc <skip_quotes+0x78>
        } else if (**string == '\\') {
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	781b      	ldrb	r3, [r3, #0]
 8013f7e:	2b5c      	cmp	r3, #92	@ 0x5c
 8013f80:	d10c      	bne.n	8013f9c <skip_quotes+0x58>
            SKIP_CHAR(string);
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	1c5a      	adds	r2, r3, #1
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	601a      	str	r2, [r3, #0]
            if (**string == '\0') {
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	781b      	ldrb	r3, [r3, #0]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d102      	bne.n	8013f9c <skip_quotes+0x58>
                return JSONFailure;
 8013f96:	f04f 33ff 	mov.w	r3, #4294967295
 8013f9a:	e00f      	b.n	8013fbc <skip_quotes+0x78>
            }
        }
        SKIP_CHAR(string);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	1c5a      	adds	r2, r3, #1
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	781b      	ldrb	r3, [r3, #0]
 8013fac:	2b22      	cmp	r3, #34	@ 0x22
 8013fae:	d1db      	bne.n	8013f68 <skip_quotes+0x24>
    }
    SKIP_CHAR(string);
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	1c5a      	adds	r2, r3, #1
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 8013fba:	2300      	movs	r3, #0
}
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	370c      	adds	r7, #12
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc6:	4770      	bx	lr

08013fc8 <parse_utf16>:

static JSON_Status parse_utf16(const char **unprocessed, char **processed) {
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b088      	sub	sp, #32
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
 8013fd0:	6039      	str	r1, [r7, #0]
    unsigned int cp, lead, trail;
    char *processed_ptr = *processed;
 8013fd2:	683b      	ldr	r3, [r7, #0]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	61fb      	str	r3, [r7, #28]
    const char *unprocessed_ptr = *unprocessed;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	61bb      	str	r3, [r7, #24]
    JSON_Status status = JSONFailure;
 8013fde:	f04f 33ff 	mov.w	r3, #4294967295
 8013fe2:	617b      	str	r3, [r7, #20]
    unprocessed_ptr++; /* skips u */
 8013fe4:	69bb      	ldr	r3, [r7, #24]
 8013fe6:	3301      	adds	r3, #1
 8013fe8:	61bb      	str	r3, [r7, #24]
    status = parse_utf16_hex(unprocessed_ptr, &cp);
 8013fea:	f107 030c 	add.w	r3, r7, #12
 8013fee:	4619      	mov	r1, r3
 8013ff0:	69b8      	ldr	r0, [r7, #24]
 8013ff2:	f7ff f886 	bl	8013102 <parse_utf16_hex>
 8013ff6:	6178      	str	r0, [r7, #20]
    if (status != JSONSuccess) {
 8013ff8:	697b      	ldr	r3, [r7, #20]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d002      	beq.n	8014004 <parse_utf16+0x3c>
        return JSONFailure;
 8013ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8014002:	e0ce      	b.n	80141a2 <parse_utf16+0x1da>
    }
    if (cp < 0x80) {
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	2b7f      	cmp	r3, #127	@ 0x7f
 8014008:	d804      	bhi.n	8014014 <parse_utf16+0x4c>
        processed_ptr[0] = (char)cp; /* 0xxxxxxx */
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	b2da      	uxtb	r2, r3
 801400e:	69fb      	ldr	r3, [r7, #28]
 8014010:	701a      	strb	r2, [r3, #0]
 8014012:	e0bc      	b.n	801418e <parse_utf16+0x1c6>
    } else if (cp < 0x800) {
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801401a:	d219      	bcs.n	8014050 <parse_utf16+0x88>
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	099b      	lsrs	r3, r3, #6
 8014020:	b2db      	uxtb	r3, r3
 8014022:	f003 031f 	and.w	r3, r3, #31
 8014026:	b2db      	uxtb	r3, r3
 8014028:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 801402c:	b2da      	uxtb	r2, r3
 801402e:	69fb      	ldr	r3, [r7, #28]
 8014030:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	b2db      	uxtb	r3, r3
 8014036:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801403a:	b2da      	uxtb	r2, r3
 801403c:	69fb      	ldr	r3, [r7, #28]
 801403e:	3301      	adds	r3, #1
 8014040:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8014044:	b2d2      	uxtb	r2, r2
 8014046:	701a      	strb	r2, [r3, #0]
        processed_ptr += 1;
 8014048:	69fb      	ldr	r3, [r7, #28]
 801404a:	3301      	adds	r3, #1
 801404c:	61fb      	str	r3, [r7, #28]
 801404e:	e09e      	b.n	801418e <parse_utf16+0x1c6>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8014056:	d303      	bcc.n	8014060 <parse_utf16+0x98>
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 801405e:	d325      	bcc.n	80140ac <parse_utf16+0xe4>
        processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	0b1b      	lsrs	r3, r3, #12
 8014064:	b2db      	uxtb	r3, r3
 8014066:	f003 030f 	and.w	r3, r3, #15
 801406a:	b2db      	uxtb	r3, r3
 801406c:	f063 031f 	orn	r3, r3, #31
 8014070:	b2da      	uxtb	r2, r3
 8014072:	69fb      	ldr	r3, [r7, #28]
 8014074:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	099b      	lsrs	r3, r3, #6
 801407a:	b2db      	uxtb	r3, r3
 801407c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014080:	b2da      	uxtb	r2, r3
 8014082:	69fb      	ldr	r3, [r7, #28]
 8014084:	3301      	adds	r3, #1
 8014086:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 801408a:	b2d2      	uxtb	r2, r2
 801408c:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	b2db      	uxtb	r3, r3
 8014092:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014096:	b2da      	uxtb	r2, r3
 8014098:	69fb      	ldr	r3, [r7, #28]
 801409a:	3302      	adds	r3, #2
 801409c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80140a0:	b2d2      	uxtb	r2, r2
 80140a2:	701a      	strb	r2, [r3, #0]
        processed_ptr += 2;
 80140a4:	69fb      	ldr	r3, [r7, #28]
 80140a6:	3302      	adds	r3, #2
 80140a8:	61fb      	str	r3, [r7, #28]
 80140aa:	e070      	b.n	801418e <parse_utf16+0x1c6>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 80140b2:	d369      	bcc.n	8014188 <parse_utf16+0x1c0>
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80140ba:	d265      	bcs.n	8014188 <parse_utf16+0x1c0>
        lead = cp;
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	613b      	str	r3, [r7, #16]
        unprocessed_ptr += 4; /* should always be within the buffer, otherwise previous sscanf would fail */
 80140c0:	69bb      	ldr	r3, [r7, #24]
 80140c2:	3304      	adds	r3, #4
 80140c4:	61bb      	str	r3, [r7, #24]
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 80140c6:	69bb      	ldr	r3, [r7, #24]
 80140c8:	1c5a      	adds	r2, r3, #1
 80140ca:	61ba      	str	r2, [r7, #24]
 80140cc:	781b      	ldrb	r3, [r3, #0]
 80140ce:	2b5c      	cmp	r3, #92	@ 0x5c
 80140d0:	d105      	bne.n	80140de <parse_utf16+0x116>
 80140d2:	69bb      	ldr	r3, [r7, #24]
 80140d4:	1c5a      	adds	r2, r3, #1
 80140d6:	61ba      	str	r2, [r7, #24]
 80140d8:	781b      	ldrb	r3, [r3, #0]
 80140da:	2b75      	cmp	r3, #117	@ 0x75
 80140dc:	d002      	beq.n	80140e4 <parse_utf16+0x11c>
            return JSONFailure;
 80140de:	f04f 33ff 	mov.w	r3, #4294967295
 80140e2:	e05e      	b.n	80141a2 <parse_utf16+0x1da>
        }
        status = parse_utf16_hex(unprocessed_ptr, &trail);
 80140e4:	f107 0308 	add.w	r3, r7, #8
 80140e8:	4619      	mov	r1, r3
 80140ea:	69b8      	ldr	r0, [r7, #24]
 80140ec:	f7ff f809 	bl	8013102 <parse_utf16_hex>
 80140f0:	6178      	str	r0, [r7, #20]
        if (status != JSONSuccess || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 80140f2:	697b      	ldr	r3, [r7, #20]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d107      	bne.n	8014108 <parse_utf16+0x140>
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80140fe:	d303      	bcc.n	8014108 <parse_utf16+0x140>
 8014100:	68bb      	ldr	r3, [r7, #8]
 8014102:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8014106:	d302      	bcc.n	801410e <parse_utf16+0x146>
            return JSONFailure;
 8014108:	f04f 33ff 	mov.w	r3, #4294967295
 801410c:	e049      	b.n	80141a2 <parse_utf16+0x1da>
        }
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 801410e:	693b      	ldr	r3, [r7, #16]
 8014110:	029a      	lsls	r2, r3, #10
 8014112:	4b26      	ldr	r3, [pc, #152]	@ (80141ac <parse_utf16+0x1e4>)
 8014114:	4013      	ands	r3, r2
 8014116:	68ba      	ldr	r2, [r7, #8]
 8014118:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801411c:	4313      	orrs	r3, r2
 801411e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8014122:	60fb      	str	r3, [r7, #12]
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	0c9b      	lsrs	r3, r3, #18
 8014128:	b2db      	uxtb	r3, r3
 801412a:	f003 0307 	and.w	r3, r3, #7
 801412e:	b2db      	uxtb	r3, r3
 8014130:	f063 030f 	orn	r3, r3, #15
 8014134:	b2da      	uxtb	r2, r3
 8014136:	69fb      	ldr	r3, [r7, #28]
 8014138:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	0b1b      	lsrs	r3, r3, #12
 801413e:	b2db      	uxtb	r3, r3
 8014140:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014144:	b2da      	uxtb	r2, r3
 8014146:	69fb      	ldr	r3, [r7, #28]
 8014148:	3301      	adds	r3, #1
 801414a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 801414e:	b2d2      	uxtb	r2, r2
 8014150:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	099b      	lsrs	r3, r3, #6
 8014156:	b2db      	uxtb	r3, r3
 8014158:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801415c:	b2da      	uxtb	r2, r3
 801415e:	69fb      	ldr	r3, [r7, #28]
 8014160:	3302      	adds	r3, #2
 8014162:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8014166:	b2d2      	uxtb	r2, r2
 8014168:	701a      	strb	r2, [r3, #0]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	b2db      	uxtb	r3, r3
 801416e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014172:	b2da      	uxtb	r2, r3
 8014174:	69fb      	ldr	r3, [r7, #28]
 8014176:	3303      	adds	r3, #3
 8014178:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 801417c:	b2d2      	uxtb	r2, r2
 801417e:	701a      	strb	r2, [r3, #0]
        processed_ptr += 3;
 8014180:	69fb      	ldr	r3, [r7, #28]
 8014182:	3303      	adds	r3, #3
 8014184:	61fb      	str	r3, [r7, #28]
 8014186:	e002      	b.n	801418e <parse_utf16+0x1c6>
    } else { /* trail surrogate before lead surrogate */
        return JSONFailure;
 8014188:	f04f 33ff 	mov.w	r3, #4294967295
 801418c:	e009      	b.n	80141a2 <parse_utf16+0x1da>
    }
    unprocessed_ptr += 3;
 801418e:	69bb      	ldr	r3, [r7, #24]
 8014190:	3303      	adds	r3, #3
 8014192:	61bb      	str	r3, [r7, #24]
    *processed = processed_ptr;
 8014194:	683b      	ldr	r3, [r7, #0]
 8014196:	69fa      	ldr	r2, [r7, #28]
 8014198:	601a      	str	r2, [r3, #0]
    *unprocessed = unprocessed_ptr;
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	69ba      	ldr	r2, [r7, #24]
 801419e:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 80141a0:	2300      	movs	r3, #0
}
 80141a2:	4618      	mov	r0, r3
 80141a4:	3720      	adds	r7, #32
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}
 80141aa:	bf00      	nop
 80141ac:	000ffc00 	.word	0x000ffc00

080141b0 <process_string>:


/* Copies and processes passed string up to supplied length.
Example: "\u006Corem ipsum" -> lorem ipsum */
static char* process_string(const char *input, size_t input_len, size_t *output_len) {
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b08a      	sub	sp, #40	@ 0x28
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	60f8      	str	r0, [r7, #12]
 80141b8:	60b9      	str	r1, [r7, #8]
 80141ba:	607a      	str	r2, [r7, #4]
    const char *input_ptr = input;
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	617b      	str	r3, [r7, #20]
    size_t initial_size = (input_len + 1) * sizeof(char);
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	3301      	adds	r3, #1
 80141c4:	627b      	str	r3, [r7, #36]	@ 0x24
    size_t final_size = 0;
 80141c6:	2300      	movs	r3, #0
 80141c8:	623b      	str	r3, [r7, #32]
    char *output = NULL, *output_ptr = NULL, *resized_output = NULL;
 80141ca:	2300      	movs	r3, #0
 80141cc:	61fb      	str	r3, [r7, #28]
 80141ce:	2300      	movs	r3, #0
 80141d0:	613b      	str	r3, [r7, #16]
 80141d2:	2300      	movs	r3, #0
 80141d4:	61bb      	str	r3, [r7, #24]
    output = (char*)parson_malloc(initial_size);
 80141d6:	4b69      	ldr	r3, [pc, #420]	@ (801437c <process_string+0x1cc>)
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80141dc:	4798      	blx	r3
 80141de:	61f8      	str	r0, [r7, #28]
    if (output == NULL) {
 80141e0:	69fb      	ldr	r3, [r7, #28]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	f000 80b9 	beq.w	801435a <process_string+0x1aa>
        goto error;
    }
    output_ptr = output;
 80141e8:	69fb      	ldr	r3, [r7, #28]
 80141ea:	613b      	str	r3, [r7, #16]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 80141ec:	e08a      	b.n	8014304 <process_string+0x154>
        if (*input_ptr == '\\') {
 80141ee:	697b      	ldr	r3, [r7, #20]
 80141f0:	781b      	ldrb	r3, [r3, #0]
 80141f2:	2b5c      	cmp	r3, #92	@ 0x5c
 80141f4:	d176      	bne.n	80142e4 <process_string+0x134>
            input_ptr++;
 80141f6:	697b      	ldr	r3, [r7, #20]
 80141f8:	3301      	adds	r3, #1
 80141fa:	617b      	str	r3, [r7, #20]
            switch (*input_ptr) {
 80141fc:	697b      	ldr	r3, [r7, #20]
 80141fe:	781b      	ldrb	r3, [r3, #0]
 8014200:	2b75      	cmp	r3, #117	@ 0x75
 8014202:	f300 80ac 	bgt.w	801435e <process_string+0x1ae>
 8014206:	2b5c      	cmp	r3, #92	@ 0x5c
 8014208:	da04      	bge.n	8014214 <process_string+0x64>
 801420a:	2b22      	cmp	r3, #34	@ 0x22
 801420c:	d03e      	beq.n	801428c <process_string+0xdc>
 801420e:	2b2f      	cmp	r3, #47	@ 0x2f
 8014210:	d044      	beq.n	801429c <process_string+0xec>
                    if (parse_utf16(&input_ptr, &output_ptr) != JSONSuccess) {
                        goto error;
                    }
                    break;
                default:
                    goto error;
 8014212:	e0a4      	b.n	801435e <process_string+0x1ae>
            switch (*input_ptr) {
 8014214:	3b5c      	subs	r3, #92	@ 0x5c
 8014216:	2b19      	cmp	r3, #25
 8014218:	f200 80a1 	bhi.w	801435e <process_string+0x1ae>
 801421c:	a201      	add	r2, pc, #4	@ (adr r2, 8014224 <process_string+0x74>)
 801421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014222:	bf00      	nop
 8014224:	08014295 	.word	0x08014295
 8014228:	0801435f 	.word	0x0801435f
 801422c:	0801435f 	.word	0x0801435f
 8014230:	0801435f 	.word	0x0801435f
 8014234:	0801435f 	.word	0x0801435f
 8014238:	0801435f 	.word	0x0801435f
 801423c:	080142a5 	.word	0x080142a5
 8014240:	0801435f 	.word	0x0801435f
 8014244:	0801435f 	.word	0x0801435f
 8014248:	0801435f 	.word	0x0801435f
 801424c:	080142ad 	.word	0x080142ad
 8014250:	0801435f 	.word	0x0801435f
 8014254:	0801435f 	.word	0x0801435f
 8014258:	0801435f 	.word	0x0801435f
 801425c:	0801435f 	.word	0x0801435f
 8014260:	0801435f 	.word	0x0801435f
 8014264:	0801435f 	.word	0x0801435f
 8014268:	0801435f 	.word	0x0801435f
 801426c:	080142b5 	.word	0x080142b5
 8014270:	0801435f 	.word	0x0801435f
 8014274:	0801435f 	.word	0x0801435f
 8014278:	0801435f 	.word	0x0801435f
 801427c:	080142bd 	.word	0x080142bd
 8014280:	0801435f 	.word	0x0801435f
 8014284:	080142c5 	.word	0x080142c5
 8014288:	080142cd 	.word	0x080142cd
                case '\"': *output_ptr = '\"'; break;
 801428c:	693b      	ldr	r3, [r7, #16]
 801428e:	2222      	movs	r2, #34	@ 0x22
 8014290:	701a      	strb	r2, [r3, #0]
 8014292:	e031      	b.n	80142f8 <process_string+0x148>
                case '\\': *output_ptr = '\\'; break;
 8014294:	693b      	ldr	r3, [r7, #16]
 8014296:	225c      	movs	r2, #92	@ 0x5c
 8014298:	701a      	strb	r2, [r3, #0]
 801429a:	e02d      	b.n	80142f8 <process_string+0x148>
                case '/':  *output_ptr = '/';  break;
 801429c:	693b      	ldr	r3, [r7, #16]
 801429e:	222f      	movs	r2, #47	@ 0x2f
 80142a0:	701a      	strb	r2, [r3, #0]
 80142a2:	e029      	b.n	80142f8 <process_string+0x148>
                case 'b':  *output_ptr = '\b'; break;
 80142a4:	693b      	ldr	r3, [r7, #16]
 80142a6:	2208      	movs	r2, #8
 80142a8:	701a      	strb	r2, [r3, #0]
 80142aa:	e025      	b.n	80142f8 <process_string+0x148>
                case 'f':  *output_ptr = '\f'; break;
 80142ac:	693b      	ldr	r3, [r7, #16]
 80142ae:	220c      	movs	r2, #12
 80142b0:	701a      	strb	r2, [r3, #0]
 80142b2:	e021      	b.n	80142f8 <process_string+0x148>
                case 'n':  *output_ptr = '\n'; break;
 80142b4:	693b      	ldr	r3, [r7, #16]
 80142b6:	220a      	movs	r2, #10
 80142b8:	701a      	strb	r2, [r3, #0]
 80142ba:	e01d      	b.n	80142f8 <process_string+0x148>
                case 'r':  *output_ptr = '\r'; break;
 80142bc:	693b      	ldr	r3, [r7, #16]
 80142be:	220d      	movs	r2, #13
 80142c0:	701a      	strb	r2, [r3, #0]
 80142c2:	e019      	b.n	80142f8 <process_string+0x148>
                case 't':  *output_ptr = '\t'; break;
 80142c4:	693b      	ldr	r3, [r7, #16]
 80142c6:	2209      	movs	r2, #9
 80142c8:	701a      	strb	r2, [r3, #0]
 80142ca:	e015      	b.n	80142f8 <process_string+0x148>
                    if (parse_utf16(&input_ptr, &output_ptr) != JSONSuccess) {
 80142cc:	f107 0210 	add.w	r2, r7, #16
 80142d0:	f107 0314 	add.w	r3, r7, #20
 80142d4:	4611      	mov	r1, r2
 80142d6:	4618      	mov	r0, r3
 80142d8:	f7ff fe76 	bl	8013fc8 <parse_utf16>
 80142dc:	4603      	mov	r3, r0
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d009      	beq.n	80142f6 <process_string+0x146>
                        goto error;
 80142e2:	e041      	b.n	8014368 <process_string+0x1b8>
            }
        } else if ((unsigned char)*input_ptr < 0x20) {
 80142e4:	697b      	ldr	r3, [r7, #20]
 80142e6:	781b      	ldrb	r3, [r3, #0]
 80142e8:	2b1f      	cmp	r3, #31
 80142ea:	d93a      	bls.n	8014362 <process_string+0x1b2>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
        } else {
            *output_ptr = *input_ptr;
 80142ec:	697a      	ldr	r2, [r7, #20]
 80142ee:	693b      	ldr	r3, [r7, #16]
 80142f0:	7812      	ldrb	r2, [r2, #0]
 80142f2:	701a      	strb	r2, [r3, #0]
 80142f4:	e000      	b.n	80142f8 <process_string+0x148>
                    break;
 80142f6:	bf00      	nop
        }
        output_ptr++;
 80142f8:	693b      	ldr	r3, [r7, #16]
 80142fa:	3301      	adds	r3, #1
 80142fc:	613b      	str	r3, [r7, #16]
        input_ptr++;
 80142fe:	697b      	ldr	r3, [r7, #20]
 8014300:	3301      	adds	r3, #1
 8014302:	617b      	str	r3, [r7, #20]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 8014304:	697b      	ldr	r3, [r7, #20]
 8014306:	781b      	ldrb	r3, [r3, #0]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d007      	beq.n	801431c <process_string+0x16c>
 801430c:	697a      	ldr	r2, [r7, #20]
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	1ad3      	subs	r3, r2, r3
 8014312:	461a      	mov	r2, r3
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	4293      	cmp	r3, r2
 8014318:	f63f af69 	bhi.w	80141ee <process_string+0x3e>
    }
    *output_ptr = '\0';
 801431c:	693b      	ldr	r3, [r7, #16]
 801431e:	2200      	movs	r2, #0
 8014320:	701a      	strb	r2, [r3, #0]
    /* resize to new length */
    final_size = (size_t)(output_ptr-output) + 1;
 8014322:	693a      	ldr	r2, [r7, #16]
 8014324:	69fb      	ldr	r3, [r7, #28]
 8014326:	1ad3      	subs	r3, r2, r3
 8014328:	3301      	adds	r3, #1
 801432a:	623b      	str	r3, [r7, #32]
    /* todo: don't resize if final_size == initial_size */
    resized_output = (char*)parson_malloc(final_size);
 801432c:	4b13      	ldr	r3, [pc, #76]	@ (801437c <process_string+0x1cc>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	6a38      	ldr	r0, [r7, #32]
 8014332:	4798      	blx	r3
 8014334:	61b8      	str	r0, [r7, #24]
    if (resized_output == NULL) {
 8014336:	69bb      	ldr	r3, [r7, #24]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d014      	beq.n	8014366 <process_string+0x1b6>
        goto error;
    }
    memcpy(resized_output, output, final_size);
 801433c:	6a3a      	ldr	r2, [r7, #32]
 801433e:	69f9      	ldr	r1, [r7, #28]
 8014340:	69b8      	ldr	r0, [r7, #24]
 8014342:	f00a fac6 	bl	801e8d2 <memcpy>
    *output_len = final_size - 1;
 8014346:	6a3b      	ldr	r3, [r7, #32]
 8014348:	1e5a      	subs	r2, r3, #1
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	601a      	str	r2, [r3, #0]
    parson_free(output);
 801434e:	4b0c      	ldr	r3, [pc, #48]	@ (8014380 <process_string+0x1d0>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	69f8      	ldr	r0, [r7, #28]
 8014354:	4798      	blx	r3
    return resized_output;
 8014356:	69bb      	ldr	r3, [r7, #24]
 8014358:	e00b      	b.n	8014372 <process_string+0x1c2>
        goto error;
 801435a:	bf00      	nop
 801435c:	e004      	b.n	8014368 <process_string+0x1b8>
                    goto error;
 801435e:	bf00      	nop
 8014360:	e002      	b.n	8014368 <process_string+0x1b8>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
 8014362:	bf00      	nop
 8014364:	e000      	b.n	8014368 <process_string+0x1b8>
        goto error;
 8014366:	bf00      	nop
error:
    parson_free(output);
 8014368:	4b05      	ldr	r3, [pc, #20]	@ (8014380 <process_string+0x1d0>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	69f8      	ldr	r0, [r7, #28]
 801436e:	4798      	blx	r3
    return NULL;
 8014370:	2300      	movs	r3, #0
}
 8014372:	4618      	mov	r0, r3
 8014374:	3728      	adds	r7, #40	@ 0x28
 8014376:	46bd      	mov	sp, r7
 8014378:	bd80      	pop	{r7, pc}
 801437a:	bf00      	nop
 801437c:	20000894 	.word	0x20000894
 8014380:	20000898 	.word	0x20000898

08014384 <get_quoted_string>:

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string, size_t *output_string_len) {
 8014384:	b580      	push	{r7, lr}
 8014386:	b086      	sub	sp, #24
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
 801438c:	6039      	str	r1, [r7, #0]
    const char *string_start = *string;
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	617b      	str	r3, [r7, #20]
    size_t input_string_len = 0;
 8014394:	2300      	movs	r3, #0
 8014396:	613b      	str	r3, [r7, #16]
    JSON_Status status = skip_quotes(string);
 8014398:	6878      	ldr	r0, [r7, #4]
 801439a:	f7ff fdd3 	bl	8013f44 <skip_quotes>
 801439e:	60f8      	str	r0, [r7, #12]
    if (status != JSONSuccess) {
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d001      	beq.n	80143aa <get_quoted_string+0x26>
        return NULL;
 80143a6:	2300      	movs	r3, #0
 80143a8:	e00d      	b.n	80143c6 <get_quoted_string+0x42>
    }
    input_string_len = *string - string_start - 2; /* length without quotes */
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	681a      	ldr	r2, [r3, #0]
 80143ae:	697b      	ldr	r3, [r7, #20]
 80143b0:	1ad3      	subs	r3, r2, r3
 80143b2:	3b02      	subs	r3, #2
 80143b4:	613b      	str	r3, [r7, #16]
    return process_string(string_start + 1, input_string_len, output_string_len);
 80143b6:	697b      	ldr	r3, [r7, #20]
 80143b8:	3301      	adds	r3, #1
 80143ba:	683a      	ldr	r2, [r7, #0]
 80143bc:	6939      	ldr	r1, [r7, #16]
 80143be:	4618      	mov	r0, r3
 80143c0:	f7ff fef6 	bl	80141b0 <process_string>
 80143c4:	4603      	mov	r3, r0
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	3718      	adds	r7, #24
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}
	...

080143d0 <parse_value>:

static JSON_Value * parse_value(const char **string, size_t nesting) {
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b082      	sub	sp, #8
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
 80143d8:	6039      	str	r1, [r7, #0]
    if (nesting > MAX_NESTING) {
 80143da:	683b      	ldr	r3, [r7, #0]
 80143dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80143e0:	d906      	bls.n	80143f0 <parse_value+0x20>
        return NULL;
 80143e2:	2300      	movs	r3, #0
 80143e4:	e08d      	b.n	8014502 <parse_value+0x132>
    }
    SKIP_WHITESPACES(string);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	1c5a      	adds	r2, r3, #1
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	601a      	str	r2, [r3, #0]
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	781b      	ldrb	r3, [r3, #0]
 80143f6:	3301      	adds	r3, #1
 80143f8:	4a44      	ldr	r2, [pc, #272]	@ (801450c <parse_value+0x13c>)
 80143fa:	4413      	add	r3, r2
 80143fc:	781b      	ldrb	r3, [r3, #0]
 80143fe:	f003 0308 	and.w	r3, r3, #8
 8014402:	2b00      	cmp	r3, #0
 8014404:	d1ef      	bne.n	80143e6 <parse_value+0x16>
    switch (**string) {
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	781b      	ldrb	r3, [r3, #0]
 801440c:	2b7b      	cmp	r3, #123	@ 0x7b
 801440e:	dc77      	bgt.n	8014500 <parse_value+0x130>
 8014410:	2b5b      	cmp	r3, #91	@ 0x5b
 8014412:	da08      	bge.n	8014426 <parse_value+0x56>
 8014414:	2b39      	cmp	r3, #57	@ 0x39
 8014416:	dc73      	bgt.n	8014500 <parse_value+0x130>
 8014418:	2b30      	cmp	r3, #48	@ 0x30
 801441a:	da67      	bge.n	80144ec <parse_value+0x11c>
 801441c:	2b22      	cmp	r3, #34	@ 0x22
 801441e:	d05b      	beq.n	80144d8 <parse_value+0x108>
 8014420:	2b2d      	cmp	r3, #45	@ 0x2d
 8014422:	d063      	beq.n	80144ec <parse_value+0x11c>
 8014424:	e06c      	b.n	8014500 <parse_value+0x130>
 8014426:	3b5b      	subs	r3, #91	@ 0x5b
 8014428:	2b20      	cmp	r3, #32
 801442a:	d869      	bhi.n	8014500 <parse_value+0x130>
 801442c:	a201      	add	r2, pc, #4	@ (adr r2, 8014434 <parse_value+0x64>)
 801442e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014432:	bf00      	nop
 8014434:	080144c9 	.word	0x080144c9
 8014438:	08014501 	.word	0x08014501
 801443c:	08014501 	.word	0x08014501
 8014440:	08014501 	.word	0x08014501
 8014444:	08014501 	.word	0x08014501
 8014448:	08014501 	.word	0x08014501
 801444c:	08014501 	.word	0x08014501
 8014450:	08014501 	.word	0x08014501
 8014454:	08014501 	.word	0x08014501
 8014458:	08014501 	.word	0x08014501
 801445c:	08014501 	.word	0x08014501
 8014460:	080144e3 	.word	0x080144e3
 8014464:	08014501 	.word	0x08014501
 8014468:	08014501 	.word	0x08014501
 801446c:	08014501 	.word	0x08014501
 8014470:	08014501 	.word	0x08014501
 8014474:	08014501 	.word	0x08014501
 8014478:	08014501 	.word	0x08014501
 801447c:	08014501 	.word	0x08014501
 8014480:	080144f7 	.word	0x080144f7
 8014484:	08014501 	.word	0x08014501
 8014488:	08014501 	.word	0x08014501
 801448c:	08014501 	.word	0x08014501
 8014490:	08014501 	.word	0x08014501
 8014494:	08014501 	.word	0x08014501
 8014498:	080144e3 	.word	0x080144e3
 801449c:	08014501 	.word	0x08014501
 80144a0:	08014501 	.word	0x08014501
 80144a4:	08014501 	.word	0x08014501
 80144a8:	08014501 	.word	0x08014501
 80144ac:	08014501 	.word	0x08014501
 80144b0:	08014501 	.word	0x08014501
 80144b4:	080144b9 	.word	0x080144b9
        case '{':
            return parse_object_value(string, nesting + 1);
 80144b8:	683b      	ldr	r3, [r7, #0]
 80144ba:	3301      	adds	r3, #1
 80144bc:	4619      	mov	r1, r3
 80144be:	6878      	ldr	r0, [r7, #4]
 80144c0:	f000 f826 	bl	8014510 <parse_object_value>
 80144c4:	4603      	mov	r3, r0
 80144c6:	e01c      	b.n	8014502 <parse_value+0x132>
        case '[':
            return parse_array_value(string, nesting + 1);
 80144c8:	683b      	ldr	r3, [r7, #0]
 80144ca:	3301      	adds	r3, #1
 80144cc:	4619      	mov	r1, r3
 80144ce:	6878      	ldr	r0, [r7, #4]
 80144d0:	f000 f92e 	bl	8014730 <parse_array_value>
 80144d4:	4603      	mov	r3, r0
 80144d6:	e014      	b.n	8014502 <parse_value+0x132>
        case '\"':
            return parse_string_value(string);
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f000 f9ed 	bl	80148b8 <parse_string_value>
 80144de:	4603      	mov	r3, r0
 80144e0:	e00f      	b.n	8014502 <parse_value+0x132>
        case 'f': case 't':
            return parse_boolean_value(string);
 80144e2:	6878      	ldr	r0, [r7, #4]
 80144e4:	f000 fa12 	bl	801490c <parse_boolean_value>
 80144e8:	4603      	mov	r3, r0
 80144ea:	e00a      	b.n	8014502 <parse_value+0x132>
        case '-':
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
            return parse_number_value(string);
 80144ec:	6878      	ldr	r0, [r7, #4]
 80144ee:	f000 fa49 	bl	8014984 <parse_number_value>
 80144f2:	4603      	mov	r3, r0
 80144f4:	e005      	b.n	8014502 <parse_value+0x132>
        case 'n':
            return parse_null_value(string);
 80144f6:	6878      	ldr	r0, [r7, #4]
 80144f8:	f000 faa2 	bl	8014a40 <parse_null_value>
 80144fc:	4603      	mov	r3, r0
 80144fe:	e000      	b.n	8014502 <parse_value+0x132>
        default:
            return NULL;
 8014500:	2300      	movs	r3, #0
    }
}
 8014502:	4618      	mov	r0, r3
 8014504:	3708      	adds	r7, #8
 8014506:	46bd      	mov	sp, r7
 8014508:	bd80      	pop	{r7, pc}
 801450a:	bf00      	nop
 801450c:	080823a0 	.word	0x080823a0

08014510 <parse_object_value>:

static JSON_Value * parse_object_value(const char **string, size_t nesting) {
 8014510:	b580      	push	{r7, lr}
 8014512:	b088      	sub	sp, #32
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
 8014518:	6039      	str	r1, [r7, #0]
    JSON_Status status = JSONFailure;
 801451a:	f04f 33ff 	mov.w	r3, #4294967295
 801451e:	61fb      	str	r3, [r7, #28]
    JSON_Value *output_value = NULL, *new_value = NULL;
 8014520:	2300      	movs	r3, #0
 8014522:	61bb      	str	r3, [r7, #24]
 8014524:	2300      	movs	r3, #0
 8014526:	617b      	str	r3, [r7, #20]
    JSON_Object *output_object = NULL;
 8014528:	2300      	movs	r3, #0
 801452a:	613b      	str	r3, [r7, #16]
    char *new_key = NULL;
 801452c:	2300      	movs	r3, #0
 801452e:	60fb      	str	r3, [r7, #12]

    output_value = json_value_init_object();
 8014530:	f001 fd58 	bl	8015fe4 <json_value_init_object>
 8014534:	61b8      	str	r0, [r7, #24]
    if (output_value == NULL) {
 8014536:	69bb      	ldr	r3, [r7, #24]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d101      	bne.n	8014540 <parse_object_value+0x30>
        return NULL;
 801453c:	2300      	movs	r3, #0
 801453e:	e0ee      	b.n	801471e <parse_object_value+0x20e>
    }
    if (**string != '{') {
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	781b      	ldrb	r3, [r3, #0]
 8014546:	2b7b      	cmp	r3, #123	@ 0x7b
 8014548:	d004      	beq.n	8014554 <parse_object_value+0x44>
        json_value_free(output_value);
 801454a:	69b8      	ldr	r0, [r7, #24]
 801454c:	f001 fd1c 	bl	8015f88 <json_value_free>
        return NULL;
 8014550:	2300      	movs	r3, #0
 8014552:	e0e4      	b.n	801471e <parse_object_value+0x20e>
    }
    output_object = json_value_get_object(output_value);
 8014554:	69b8      	ldr	r0, [r7, #24]
 8014556:	f001 fc7c 	bl	8015e52 <json_value_get_object>
 801455a:	6138      	str	r0, [r7, #16]
    SKIP_CHAR(string);
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	1c5a      	adds	r2, r3, #1
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 8014566:	e004      	b.n	8014572 <parse_object_value+0x62>
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	1c5a      	adds	r2, r3, #1
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	601a      	str	r2, [r3, #0]
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	781b      	ldrb	r3, [r3, #0]
 8014578:	3301      	adds	r3, #1
 801457a:	4a6b      	ldr	r2, [pc, #428]	@ (8014728 <parse_object_value+0x218>)
 801457c:	4413      	add	r3, r2
 801457e:	781b      	ldrb	r3, [r3, #0]
 8014580:	f003 0308 	and.w	r3, r3, #8
 8014584:	2b00      	cmp	r3, #0
 8014586:	d1ef      	bne.n	8014568 <parse_object_value+0x58>
    if (**string == '}') { /* empty object */
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	781b      	ldrb	r3, [r3, #0]
 801458e:	2b7d      	cmp	r3, #125	@ 0x7d
 8014590:	f040 809c 	bne.w	80146cc <parse_object_value+0x1bc>
        SKIP_CHAR(string);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	1c5a      	adds	r2, r3, #1
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	601a      	str	r2, [r3, #0]
        return output_value;
 801459e:	69bb      	ldr	r3, [r7, #24]
 80145a0:	e0bd      	b.n	801471e <parse_object_value+0x20e>
    }
    while (**string != '\0') {
        size_t key_len = 0;
 80145a2:	2300      	movs	r3, #0
 80145a4:	60bb      	str	r3, [r7, #8]
        new_key = get_quoted_string(string, &key_len);
 80145a6:	f107 0308 	add.w	r3, r7, #8
 80145aa:	4619      	mov	r1, r3
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	f7ff fee9 	bl	8014384 <get_quoted_string>
 80145b2:	60f8      	str	r0, [r7, #12]
        /* We do not support key names with embedded \0 chars */
        if (!new_key) {
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d104      	bne.n	80145c4 <parse_object_value+0xb4>
            json_value_free(output_value);
 80145ba:	69b8      	ldr	r0, [r7, #24]
 80145bc:	f001 fce4 	bl	8015f88 <json_value_free>
            return NULL;
 80145c0:	2300      	movs	r3, #0
 80145c2:	e0ac      	b.n	801471e <parse_object_value+0x20e>
        }
        if (key_len != strlen(new_key)) {
 80145c4:	68f8      	ldr	r0, [r7, #12]
 80145c6:	f7eb fe61 	bl	800028c <strlen>
 80145ca:	4602      	mov	r2, r0
 80145cc:	68bb      	ldr	r3, [r7, #8]
 80145ce:	429a      	cmp	r2, r3
 80145d0:	d00d      	beq.n	80145ee <parse_object_value+0xde>
            parson_free(new_key);
 80145d2:	4b56      	ldr	r3, [pc, #344]	@ (801472c <parse_object_value+0x21c>)
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	68f8      	ldr	r0, [r7, #12]
 80145d8:	4798      	blx	r3
            json_value_free(output_value);
 80145da:	69b8      	ldr	r0, [r7, #24]
 80145dc:	f001 fcd4 	bl	8015f88 <json_value_free>
            return NULL;
 80145e0:	2300      	movs	r3, #0
 80145e2:	e09c      	b.n	801471e <parse_object_value+0x20e>
        }
        SKIP_WHITESPACES(string);
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	1c5a      	adds	r2, r3, #1
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	601a      	str	r2, [r3, #0]
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	781b      	ldrb	r3, [r3, #0]
 80145f4:	3301      	adds	r3, #1
 80145f6:	4a4c      	ldr	r2, [pc, #304]	@ (8014728 <parse_object_value+0x218>)
 80145f8:	4413      	add	r3, r2
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	f003 0308 	and.w	r3, r3, #8
 8014600:	2b00      	cmp	r3, #0
 8014602:	d1ef      	bne.n	80145e4 <parse_object_value+0xd4>
        if (**string != ':') {
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	781b      	ldrb	r3, [r3, #0]
 801460a:	2b3a      	cmp	r3, #58	@ 0x3a
 801460c:	d008      	beq.n	8014620 <parse_object_value+0x110>
            parson_free(new_key);
 801460e:	4b47      	ldr	r3, [pc, #284]	@ (801472c <parse_object_value+0x21c>)
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	68f8      	ldr	r0, [r7, #12]
 8014614:	4798      	blx	r3
            json_value_free(output_value);
 8014616:	69b8      	ldr	r0, [r7, #24]
 8014618:	f001 fcb6 	bl	8015f88 <json_value_free>
            return NULL;
 801461c:	2300      	movs	r3, #0
 801461e:	e07e      	b.n	801471e <parse_object_value+0x20e>
        }
        SKIP_CHAR(string);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	1c5a      	adds	r2, r3, #1
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	601a      	str	r2, [r3, #0]
        new_value = parse_value(string, nesting);
 801462a:	6839      	ldr	r1, [r7, #0]
 801462c:	6878      	ldr	r0, [r7, #4]
 801462e:	f7ff fecf 	bl	80143d0 <parse_value>
 8014632:	6178      	str	r0, [r7, #20]
        if (new_value == NULL) {
 8014634:	697b      	ldr	r3, [r7, #20]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d108      	bne.n	801464c <parse_object_value+0x13c>
            parson_free(new_key);
 801463a:	4b3c      	ldr	r3, [pc, #240]	@ (801472c <parse_object_value+0x21c>)
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	68f8      	ldr	r0, [r7, #12]
 8014640:	4798      	blx	r3
            json_value_free(output_value);
 8014642:	69b8      	ldr	r0, [r7, #24]
 8014644:	f001 fca0 	bl	8015f88 <json_value_free>
            return NULL;
 8014648:	2300      	movs	r3, #0
 801464a:	e068      	b.n	801471e <parse_object_value+0x20e>
        }
        status = json_object_add(output_object, new_key, new_value);
 801464c:	697a      	ldr	r2, [r7, #20]
 801464e:	68f9      	ldr	r1, [r7, #12]
 8014650:	6938      	ldr	r0, [r7, #16]
 8014652:	f7ff f962 	bl	801391a <json_object_add>
 8014656:	61f8      	str	r0, [r7, #28]
        if (status != JSONSuccess) {
 8014658:	69fb      	ldr	r3, [r7, #28]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d010      	beq.n	8014680 <parse_object_value+0x170>
            parson_free(new_key);
 801465e:	4b33      	ldr	r3, [pc, #204]	@ (801472c <parse_object_value+0x21c>)
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	68f8      	ldr	r0, [r7, #12]
 8014664:	4798      	blx	r3
            json_value_free(new_value);
 8014666:	6978      	ldr	r0, [r7, #20]
 8014668:	f001 fc8e 	bl	8015f88 <json_value_free>
            json_value_free(output_value);
 801466c:	69b8      	ldr	r0, [r7, #24]
 801466e:	f001 fc8b 	bl	8015f88 <json_value_free>
            return NULL;
 8014672:	2300      	movs	r3, #0
 8014674:	e053      	b.n	801471e <parse_object_value+0x20e>
        }
        SKIP_WHITESPACES(string);
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	1c5a      	adds	r2, r3, #1
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	601a      	str	r2, [r3, #0]
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	781b      	ldrb	r3, [r3, #0]
 8014686:	3301      	adds	r3, #1
 8014688:	4a27      	ldr	r2, [pc, #156]	@ (8014728 <parse_object_value+0x218>)
 801468a:	4413      	add	r3, r2
 801468c:	781b      	ldrb	r3, [r3, #0]
 801468e:	f003 0308 	and.w	r3, r3, #8
 8014692:	2b00      	cmp	r3, #0
 8014694:	d1ef      	bne.n	8014676 <parse_object_value+0x166>
        if (**string != ',') {
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	781b      	ldrb	r3, [r3, #0]
 801469c:	2b2c      	cmp	r3, #44	@ 0x2c
 801469e:	d11c      	bne.n	80146da <parse_object_value+0x1ca>
            break;
        }
        SKIP_CHAR(string);
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	1c5a      	adds	r2, r3, #1
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 80146aa:	e004      	b.n	80146b6 <parse_object_value+0x1a6>
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	1c5a      	adds	r2, r3, #1
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	601a      	str	r2, [r3, #0]
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	781b      	ldrb	r3, [r3, #0]
 80146bc:	3301      	adds	r3, #1
 80146be:	4a1a      	ldr	r2, [pc, #104]	@ (8014728 <parse_object_value+0x218>)
 80146c0:	4413      	add	r3, r2
 80146c2:	781b      	ldrb	r3, [r3, #0]
 80146c4:	f003 0308 	and.w	r3, r3, #8
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d1ef      	bne.n	80146ac <parse_object_value+0x19c>
    while (**string != '\0') {
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	781b      	ldrb	r3, [r3, #0]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	f47f af65 	bne.w	80145a2 <parse_object_value+0x92>
 80146d8:	e006      	b.n	80146e8 <parse_object_value+0x1d8>
            break;
 80146da:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 80146dc:	e004      	b.n	80146e8 <parse_object_value+0x1d8>
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	1c5a      	adds	r2, r3, #1
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	601a      	str	r2, [r3, #0]
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	781b      	ldrb	r3, [r3, #0]
 80146ee:	3301      	adds	r3, #1
 80146f0:	4a0d      	ldr	r2, [pc, #52]	@ (8014728 <parse_object_value+0x218>)
 80146f2:	4413      	add	r3, r2
 80146f4:	781b      	ldrb	r3, [r3, #0]
 80146f6:	f003 0308 	and.w	r3, r3, #8
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d1ef      	bne.n	80146de <parse_object_value+0x1ce>
    if (**string != '}') {
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	781b      	ldrb	r3, [r3, #0]
 8014704:	2b7d      	cmp	r3, #125	@ 0x7d
 8014706:	d004      	beq.n	8014712 <parse_object_value+0x202>
        json_value_free(output_value);
 8014708:	69b8      	ldr	r0, [r7, #24]
 801470a:	f001 fc3d 	bl	8015f88 <json_value_free>
        return NULL;
 801470e:	2300      	movs	r3, #0
 8014710:	e005      	b.n	801471e <parse_object_value+0x20e>
    }
    SKIP_CHAR(string);
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	1c5a      	adds	r2, r3, #1
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	601a      	str	r2, [r3, #0]
    return output_value;
 801471c:	69bb      	ldr	r3, [r7, #24]
}
 801471e:	4618      	mov	r0, r3
 8014720:	3720      	adds	r7, #32
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}
 8014726:	bf00      	nop
 8014728:	080823a0 	.word	0x080823a0
 801472c:	20000898 	.word	0x20000898

08014730 <parse_array_value>:

static JSON_Value * parse_array_value(const char **string, size_t nesting) {
 8014730:	b580      	push	{r7, lr}
 8014732:	b086      	sub	sp, #24
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
 8014738:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_array_value = NULL;
 801473a:	2300      	movs	r3, #0
 801473c:	617b      	str	r3, [r7, #20]
 801473e:	2300      	movs	r3, #0
 8014740:	613b      	str	r3, [r7, #16]
    JSON_Array *output_array = NULL;
 8014742:	2300      	movs	r3, #0
 8014744:	60fb      	str	r3, [r7, #12]
    output_value = json_value_init_array();
 8014746:	f001 fc79 	bl	801603c <json_value_init_array>
 801474a:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 801474c:	697b      	ldr	r3, [r7, #20]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d101      	bne.n	8014756 <parse_array_value+0x26>
        return NULL;
 8014752:	2300      	movs	r3, #0
 8014754:	e0a9      	b.n	80148aa <parse_array_value+0x17a>
    }
    if (**string != '[') {
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	781b      	ldrb	r3, [r3, #0]
 801475c:	2b5b      	cmp	r3, #91	@ 0x5b
 801475e:	d004      	beq.n	801476a <parse_array_value+0x3a>
        json_value_free(output_value);
 8014760:	6978      	ldr	r0, [r7, #20]
 8014762:	f001 fc11 	bl	8015f88 <json_value_free>
        return NULL;
 8014766:	2300      	movs	r3, #0
 8014768:	e09f      	b.n	80148aa <parse_array_value+0x17a>
    }
    output_array = json_value_get_array(output_value);
 801476a:	6978      	ldr	r0, [r7, #20]
 801476c:	f001 fb83 	bl	8015e76 <json_value_get_array>
 8014770:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	1c5a      	adds	r2, r3, #1
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 801477c:	e004      	b.n	8014788 <parse_array_value+0x58>
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	1c5a      	adds	r2, r3, #1
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	601a      	str	r2, [r3, #0]
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	781b      	ldrb	r3, [r3, #0]
 801478e:	3301      	adds	r3, #1
 8014790:	4a48      	ldr	r2, [pc, #288]	@ (80148b4 <parse_array_value+0x184>)
 8014792:	4413      	add	r3, r2
 8014794:	781b      	ldrb	r3, [r3, #0]
 8014796:	f003 0308 	and.w	r3, r3, #8
 801479a:	2b00      	cmp	r3, #0
 801479c:	d1ef      	bne.n	801477e <parse_array_value+0x4e>
    if (**string == ']') { /* empty array */
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	781b      	ldrb	r3, [r3, #0]
 80147a4:	2b5d      	cmp	r3, #93	@ 0x5d
 80147a6:	d14d      	bne.n	8014844 <parse_array_value+0x114>
        SKIP_CHAR(string);
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	1c5a      	adds	r2, r3, #1
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	601a      	str	r2, [r3, #0]
        return output_value;
 80147b2:	697b      	ldr	r3, [r7, #20]
 80147b4:	e079      	b.n	80148aa <parse_array_value+0x17a>
    }
    while (**string != '\0') {
        new_array_value = parse_value(string, nesting);
 80147b6:	6839      	ldr	r1, [r7, #0]
 80147b8:	6878      	ldr	r0, [r7, #4]
 80147ba:	f7ff fe09 	bl	80143d0 <parse_value>
 80147be:	6138      	str	r0, [r7, #16]
        if (new_array_value == NULL) {
 80147c0:	693b      	ldr	r3, [r7, #16]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d104      	bne.n	80147d0 <parse_array_value+0xa0>
            json_value_free(output_value);
 80147c6:	6978      	ldr	r0, [r7, #20]
 80147c8:	f001 fbde 	bl	8015f88 <json_value_free>
            return NULL;
 80147cc:	2300      	movs	r3, #0
 80147ce:	e06c      	b.n	80148aa <parse_array_value+0x17a>
        }
        if (json_array_add(output_array, new_array_value) != JSONSuccess) {
 80147d0:	6939      	ldr	r1, [r7, #16]
 80147d2:	68f8      	ldr	r0, [r7, #12]
 80147d4:	f7ff faf8 	bl	8013dc8 <json_array_add>
 80147d8:	4603      	mov	r3, r0
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d00c      	beq.n	80147f8 <parse_array_value+0xc8>
            json_value_free(new_array_value);
 80147de:	6938      	ldr	r0, [r7, #16]
 80147e0:	f001 fbd2 	bl	8015f88 <json_value_free>
            json_value_free(output_value);
 80147e4:	6978      	ldr	r0, [r7, #20]
 80147e6:	f001 fbcf 	bl	8015f88 <json_value_free>
            return NULL;
 80147ea:	2300      	movs	r3, #0
 80147ec:	e05d      	b.n	80148aa <parse_array_value+0x17a>
        }
        SKIP_WHITESPACES(string);
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	1c5a      	adds	r2, r3, #1
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	601a      	str	r2, [r3, #0]
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	781b      	ldrb	r3, [r3, #0]
 80147fe:	3301      	adds	r3, #1
 8014800:	4a2c      	ldr	r2, [pc, #176]	@ (80148b4 <parse_array_value+0x184>)
 8014802:	4413      	add	r3, r2
 8014804:	781b      	ldrb	r3, [r3, #0]
 8014806:	f003 0308 	and.w	r3, r3, #8
 801480a:	2b00      	cmp	r3, #0
 801480c:	d1ef      	bne.n	80147ee <parse_array_value+0xbe>
        if (**string != ',') {
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	781b      	ldrb	r3, [r3, #0]
 8014814:	2b2c      	cmp	r3, #44	@ 0x2c
 8014816:	d11b      	bne.n	8014850 <parse_array_value+0x120>
            break;
        }
        SKIP_CHAR(string);
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	1c5a      	adds	r2, r3, #1
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 8014822:	e004      	b.n	801482e <parse_array_value+0xfe>
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	1c5a      	adds	r2, r3, #1
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	601a      	str	r2, [r3, #0]
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	781b      	ldrb	r3, [r3, #0]
 8014834:	3301      	adds	r3, #1
 8014836:	4a1f      	ldr	r2, [pc, #124]	@ (80148b4 <parse_array_value+0x184>)
 8014838:	4413      	add	r3, r2
 801483a:	781b      	ldrb	r3, [r3, #0]
 801483c:	f003 0308 	and.w	r3, r3, #8
 8014840:	2b00      	cmp	r3, #0
 8014842:	d1ef      	bne.n	8014824 <parse_array_value+0xf4>
    while (**string != '\0') {
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	781b      	ldrb	r3, [r3, #0]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d1b3      	bne.n	80147b6 <parse_array_value+0x86>
 801484e:	e006      	b.n	801485e <parse_array_value+0x12e>
            break;
 8014850:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 8014852:	e004      	b.n	801485e <parse_array_value+0x12e>
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	1c5a      	adds	r2, r3, #1
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	601a      	str	r2, [r3, #0]
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	781b      	ldrb	r3, [r3, #0]
 8014864:	3301      	adds	r3, #1
 8014866:	4a13      	ldr	r2, [pc, #76]	@ (80148b4 <parse_array_value+0x184>)
 8014868:	4413      	add	r3, r2
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	f003 0308 	and.w	r3, r3, #8
 8014870:	2b00      	cmp	r3, #0
 8014872:	d1ef      	bne.n	8014854 <parse_array_value+0x124>
    if (**string != ']' || /* Trim array after parsing is over */
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	781b      	ldrb	r3, [r3, #0]
 801487a:	2b5d      	cmp	r3, #93	@ 0x5d
 801487c:	d10a      	bne.n	8014894 <parse_array_value+0x164>
        json_array_resize(output_array, json_array_get_count(output_array)) != JSONSuccess) {
 801487e:	68f8      	ldr	r0, [r7, #12]
 8014880:	f001 fab3 	bl	8015dea <json_array_get_count>
 8014884:	4603      	mov	r3, r0
 8014886:	4619      	mov	r1, r3
 8014888:	68f8      	ldr	r0, [r7, #12]
 801488a:	f7ff fad1 	bl	8013e30 <json_array_resize>
 801488e:	4603      	mov	r3, r0
    if (**string != ']' || /* Trim array after parsing is over */
 8014890:	2b00      	cmp	r3, #0
 8014892:	d004      	beq.n	801489e <parse_array_value+0x16e>
            json_value_free(output_value);
 8014894:	6978      	ldr	r0, [r7, #20]
 8014896:	f001 fb77 	bl	8015f88 <json_value_free>
            return NULL;
 801489a:	2300      	movs	r3, #0
 801489c:	e005      	b.n	80148aa <parse_array_value+0x17a>
    }
    SKIP_CHAR(string);
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	1c5a      	adds	r2, r3, #1
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	601a      	str	r2, [r3, #0]
    return output_value;
 80148a8:	697b      	ldr	r3, [r7, #20]
}
 80148aa:	4618      	mov	r0, r3
 80148ac:	3718      	adds	r7, #24
 80148ae:	46bd      	mov	sp, r7
 80148b0:	bd80      	pop	{r7, pc}
 80148b2:	bf00      	nop
 80148b4:	080823a0 	.word	0x080823a0

080148b8 <parse_string_value>:

static JSON_Value * parse_string_value(const char **string) {
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b086      	sub	sp, #24
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
    JSON_Value *value = NULL;
 80148c0:	2300      	movs	r3, #0
 80148c2:	617b      	str	r3, [r7, #20]
    size_t new_string_len = 0;
 80148c4:	2300      	movs	r3, #0
 80148c6:	60fb      	str	r3, [r7, #12]
    char *new_string = get_quoted_string(string, &new_string_len);
 80148c8:	f107 030c 	add.w	r3, r7, #12
 80148cc:	4619      	mov	r1, r3
 80148ce:	6878      	ldr	r0, [r7, #4]
 80148d0:	f7ff fd58 	bl	8014384 <get_quoted_string>
 80148d4:	6138      	str	r0, [r7, #16]
    if (new_string == NULL) {
 80148d6:	693b      	ldr	r3, [r7, #16]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d101      	bne.n	80148e0 <parse_string_value+0x28>
        return NULL;
 80148dc:	2300      	movs	r3, #0
 80148de:	e00f      	b.n	8014900 <parse_string_value+0x48>
    }
    value = json_value_init_string_no_copy(new_string, new_string_len);
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	4619      	mov	r1, r3
 80148e4:	6938      	ldr	r0, [r7, #16]
 80148e6:	f7ff fb0b 	bl	8013f00 <json_value_init_string_no_copy>
 80148ea:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 80148ec:	697b      	ldr	r3, [r7, #20]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d105      	bne.n	80148fe <parse_string_value+0x46>
        parson_free(new_string);
 80148f2:	4b05      	ldr	r3, [pc, #20]	@ (8014908 <parse_string_value+0x50>)
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	6938      	ldr	r0, [r7, #16]
 80148f8:	4798      	blx	r3
        return NULL;
 80148fa:	2300      	movs	r3, #0
 80148fc:	e000      	b.n	8014900 <parse_string_value+0x48>
    }
    return value;
 80148fe:	697b      	ldr	r3, [r7, #20]
}
 8014900:	4618      	mov	r0, r3
 8014902:	3718      	adds	r7, #24
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}
 8014908:	20000898 	.word	0x20000898

0801490c <parse_boolean_value>:

static JSON_Value * parse_boolean_value(const char **string) {
 801490c:	b580      	push	{r7, lr}
 801490e:	b084      	sub	sp, #16
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
    size_t true_token_size = SIZEOF_TOKEN("true");
 8014914:	2304      	movs	r3, #4
 8014916:	60fb      	str	r3, [r7, #12]
    size_t false_token_size = SIZEOF_TOKEN("false");
 8014918:	2305      	movs	r3, #5
 801491a:	60bb      	str	r3, [r7, #8]
    if (strncmp("true", *string, true_token_size) == 0) {
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	68fa      	ldr	r2, [r7, #12]
 8014922:	4619      	mov	r1, r3
 8014924:	4815      	ldr	r0, [pc, #84]	@ (801497c <parse_boolean_value+0x70>)
 8014926:	f009 fe9f 	bl	801e668 <strncmp>
 801492a:	4603      	mov	r3, r0
 801492c:	2b00      	cmp	r3, #0
 801492e:	d10a      	bne.n	8014946 <parse_boolean_value+0x3a>
        *string += true_token_size;
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	681a      	ldr	r2, [r3, #0]
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	441a      	add	r2, r3
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(1);
 801493c:	2001      	movs	r0, #1
 801493e:	f001 fc43 	bl	80161c8 <json_value_init_boolean>
 8014942:	4603      	mov	r3, r0
 8014944:	e015      	b.n	8014972 <parse_boolean_value+0x66>
    } else if (strncmp("false", *string, false_token_size) == 0) {
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	68ba      	ldr	r2, [r7, #8]
 801494c:	4619      	mov	r1, r3
 801494e:	480c      	ldr	r0, [pc, #48]	@ (8014980 <parse_boolean_value+0x74>)
 8014950:	f009 fe8a 	bl	801e668 <strncmp>
 8014954:	4603      	mov	r3, r0
 8014956:	2b00      	cmp	r3, #0
 8014958:	d10a      	bne.n	8014970 <parse_boolean_value+0x64>
        *string += false_token_size;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	681a      	ldr	r2, [r3, #0]
 801495e:	68bb      	ldr	r3, [r7, #8]
 8014960:	441a      	add	r2, r3
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(0);
 8014966:	2000      	movs	r0, #0
 8014968:	f001 fc2e 	bl	80161c8 <json_value_init_boolean>
 801496c:	4603      	mov	r3, r0
 801496e:	e000      	b.n	8014972 <parse_boolean_value+0x66>
    }
    return NULL;
 8014970:	2300      	movs	r3, #0
}
 8014972:	4618      	mov	r0, r3
 8014974:	3710      	adds	r7, #16
 8014976:	46bd      	mov	sp, r7
 8014978:	bd80      	pop	{r7, pc}
 801497a:	bf00      	nop
 801497c:	08023190 	.word	0x08023190
 8014980:	08023198 	.word	0x08023198

08014984 <parse_number_value>:

static JSON_Value * parse_number_value(const char **string) {
 8014984:	b580      	push	{r7, lr}
 8014986:	b086      	sub	sp, #24
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
    char *end;
    double number = 0;
 801498c:	f04f 0200 	mov.w	r2, #0
 8014990:	f04f 0300 	mov.w	r3, #0
 8014994:	e9c7 2304 	strd	r2, r3, [r7, #16]
    errno = 0;
 8014998:	f009 ff58 	bl	801e84c <__errno>
 801499c:	4603      	mov	r3, r0
 801499e:	2200      	movs	r2, #0
 80149a0:	601a      	str	r2, [r3, #0]
    number = strtod(*string, &end);
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	f107 020c 	add.w	r2, r7, #12
 80149aa:	4611      	mov	r1, r2
 80149ac:	4618      	mov	r0, r3
 80149ae:	f008 fc85 	bl	801d2bc <strtod>
 80149b2:	ed87 0b04 	vstr	d0, [r7, #16]
    if (errno == ERANGE && (number <= -HUGE_VAL || number >= HUGE_VAL)) {
 80149b6:	f009 ff49 	bl	801e84c <__errno>
 80149ba:	4603      	mov	r3, r0
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	2b22      	cmp	r3, #34	@ 0x22
 80149c0:	d116      	bne.n	80149f0 <parse_number_value+0x6c>
 80149c2:	f04f 32ff 	mov.w	r2, #4294967295
 80149c6:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 80149ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80149ce:	f7ec f893 	bl	8000af8 <__aeabi_dcmplt>
 80149d2:	4603      	mov	r3, r0
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d109      	bne.n	80149ec <parse_number_value+0x68>
 80149d8:	f04f 32ff 	mov.w	r2, #4294967295
 80149dc:	4b17      	ldr	r3, [pc, #92]	@ (8014a3c <parse_number_value+0xb8>)
 80149de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80149e2:	f7ec f8a7 	bl	8000b34 <__aeabi_dcmpgt>
 80149e6:	4603      	mov	r3, r0
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d001      	beq.n	80149f0 <parse_number_value+0x6c>
        return NULL;
 80149ec:	2300      	movs	r3, #0
 80149ee:	e021      	b.n	8014a34 <parse_number_value+0xb0>
    }
    if ((errno && errno != ERANGE) || !is_decimal(*string, end - *string)) {
 80149f0:	f009 ff2c 	bl	801e84c <__errno>
 80149f4:	4603      	mov	r3, r0
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d005      	beq.n	8014a08 <parse_number_value+0x84>
 80149fc:	f009 ff26 	bl	801e84c <__errno>
 8014a00:	4603      	mov	r3, r0
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	2b22      	cmp	r3, #34	@ 0x22
 8014a06:	d10b      	bne.n	8014a20 <parse_number_value+0x9c>
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	6818      	ldr	r0, [r3, #0]
 8014a0c:	68fa      	ldr	r2, [r7, #12]
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	1ad3      	subs	r3, r2, r3
 8014a14:	4619      	mov	r1, r3
 8014a16:	f7fe fcf5 	bl	8013404 <is_decimal>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d101      	bne.n	8014a24 <parse_number_value+0xa0>
        return NULL;
 8014a20:	2300      	movs	r3, #0
 8014a22:	e007      	b.n	8014a34 <parse_number_value+0xb0>
    }
    *string = end;
 8014a24:	68fa      	ldr	r2, [r7, #12]
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	601a      	str	r2, [r3, #0]
    return json_value_init_number(number);
 8014a2a:	ed97 0b04 	vldr	d0, [r7, #16]
 8014a2e:	f001 fb79 	bl	8016124 <json_value_init_number>
 8014a32:	4603      	mov	r3, r0
}
 8014a34:	4618      	mov	r0, r3
 8014a36:	3718      	adds	r7, #24
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}
 8014a3c:	7fefffff 	.word	0x7fefffff

08014a40 <parse_null_value>:

static JSON_Value * parse_null_value(const char **string) {
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b084      	sub	sp, #16
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
    size_t token_size = SIZEOF_TOKEN("null");
 8014a48:	2304      	movs	r3, #4
 8014a4a:	60fb      	str	r3, [r7, #12]
    if (strncmp("null", *string, token_size) == 0) {
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	68fa      	ldr	r2, [r7, #12]
 8014a52:	4619      	mov	r1, r3
 8014a54:	480a      	ldr	r0, [pc, #40]	@ (8014a80 <parse_null_value+0x40>)
 8014a56:	f009 fe07 	bl	801e668 <strncmp>
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d109      	bne.n	8014a74 <parse_null_value+0x34>
        *string += token_size;
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681a      	ldr	r2, [r3, #0]
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	441a      	add	r2, r3
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	601a      	str	r2, [r3, #0]
        return json_value_init_null();
 8014a6c:	f001 fbd0 	bl	8016210 <json_value_init_null>
 8014a70:	4603      	mov	r3, r0
 8014a72:	e000      	b.n	8014a76 <parse_null_value+0x36>
    }
    return NULL;
 8014a74:	2300      	movs	r3, #0
}
 8014a76:	4618      	mov	r0, r3
 8014a78:	3710      	adds	r7, #16
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}
 8014a7e:	bf00      	nop
 8014a80:	080231a0 	.word	0x080231a0

08014a84 <json_serialize_to_buffer_r>:
                                  if (written < 0) { return -1; }\
                                  if (buf != NULL) { buf += written; }\
                                  written_total += written; } while(0)

static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, parson_bool_t is_pretty, char *num_buf)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b094      	sub	sp, #80	@ 0x50
 8014a88:	af02      	add	r7, sp, #8
 8014a8a:	60f8      	str	r0, [r7, #12]
 8014a8c:	60b9      	str	r1, [r7, #8]
 8014a8e:	607a      	str	r2, [r7, #4]
 8014a90:	603b      	str	r3, [r7, #0]
    const char *key = NULL, *string = NULL;
 8014a92:	2300      	movs	r3, #0
 8014a94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014a96:	2300      	movs	r3, #0
 8014a98:	637b      	str	r3, [r7, #52]	@ 0x34
    JSON_Value *temp_value = NULL;
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	633b      	str	r3, [r7, #48]	@ 0x30
    JSON_Array *array = NULL;
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    JSON_Object *object = NULL;
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t i = 0, count = 0;
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8014aaa:	2300      	movs	r3, #0
 8014aac:	627b      	str	r3, [r7, #36]	@ 0x24
    double num = 0.0;
 8014aae:	f04f 0200 	mov.w	r2, #0
 8014ab2:	f04f 0300 	mov.w	r3, #0
 8014ab6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int written = -1, written_total = 0;
 8014aba:	f04f 33ff 	mov.w	r3, #4294967295
 8014abe:	643b      	str	r3, [r7, #64]	@ 0x40
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    size_t len = 0;
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	617b      	str	r3, [r7, #20]

    switch (json_value_get_type(value)) {
 8014ac8:	68f8      	ldr	r0, [r7, #12]
 8014aca:	f001 f9b0 	bl	8015e2e <json_value_get_type>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	3301      	adds	r3, #1
 8014ad2:	2b07      	cmp	r3, #7
 8014ad4:	f200 82f8 	bhi.w	80150c8 <json_serialize_to_buffer_r+0x644>
 8014ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8014ae0 <json_serialize_to_buffer_r+0x5c>)
 8014ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ade:	bf00      	nop
 8014ae0:	080150c3 	.word	0x080150c3
 8014ae4:	080150c9 	.word	0x080150c9
 8014ae8:	08015093 	.word	0x08015093
 8014aec:	08014f5d 	.word	0x08014f5d
 8014af0:	08015031 	.word	0x08015031
 8014af4:	08014ccf 	.word	0x08014ccf
 8014af8:	08014b01 	.word	0x08014b01
 8014afc:	08014fab 	.word	0x08014fab
        case JSONArray:
            array = json_value_get_array(value);
 8014b00:	68f8      	ldr	r0, [r7, #12]
 8014b02:	f001 f9b8 	bl	8015e76 <json_value_get_array>
 8014b06:	62f8      	str	r0, [r7, #44]	@ 0x2c
            count = json_array_get_count(array);
 8014b08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014b0a:	f001 f96e 	bl	8015dea <json_array_get_count>
 8014b0e:	6278      	str	r0, [r7, #36]	@ 0x24
            APPEND_STRING("[");
 8014b10:	498d      	ldr	r1, [pc, #564]	@ (8014d48 <json_serialize_to_buffer_r+0x2c4>)
 8014b12:	68b8      	ldr	r0, [r7, #8]
 8014b14:	f000 ffc8 	bl	8015aa8 <append_string>
 8014b18:	6438      	str	r0, [r7, #64]	@ 0x40
 8014b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	da02      	bge.n	8014b26 <json_serialize_to_buffer_r+0xa2>
 8014b20:	f04f 33ff 	mov.w	r3, #4294967295
 8014b24:	e2d2      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d003      	beq.n	8014b34 <json_serialize_to_buffer_r+0xb0>
 8014b2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014b2e:	68ba      	ldr	r2, [r7, #8]
 8014b30:	4413      	add	r3, r2
 8014b32:	60bb      	str	r3, [r7, #8]
 8014b34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014b38:	4413      	add	r3, r2
 8014b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (count > 0 && is_pretty) {
 8014b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d018      	beq.n	8014b74 <json_serialize_to_buffer_r+0xf0>
 8014b42:	683b      	ldr	r3, [r7, #0]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d015      	beq.n	8014b74 <json_serialize_to_buffer_r+0xf0>
                APPEND_STRING("\n");
 8014b48:	4980      	ldr	r1, [pc, #512]	@ (8014d4c <json_serialize_to_buffer_r+0x2c8>)
 8014b4a:	68b8      	ldr	r0, [r7, #8]
 8014b4c:	f000 ffac 	bl	8015aa8 <append_string>
 8014b50:	6438      	str	r0, [r7, #64]	@ 0x40
 8014b52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	da02      	bge.n	8014b5e <json_serialize_to_buffer_r+0xda>
 8014b58:	f04f 33ff 	mov.w	r3, #4294967295
 8014b5c:	e2b6      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8014b5e:	68bb      	ldr	r3, [r7, #8]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d003      	beq.n	8014b6c <json_serialize_to_buffer_r+0xe8>
 8014b64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014b66:	68ba      	ldr	r2, [r7, #8]
 8014b68:	4413      	add	r3, r2
 8014b6a:	60bb      	str	r3, [r7, #8]
 8014b6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014b70:	4413      	add	r3, r2
 8014b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            for (i = 0; i < count; i++) {
 8014b74:	2300      	movs	r3, #0
 8014b76:	647b      	str	r3, [r7, #68]	@ 0x44
 8014b78:	e071      	b.n	8014c5e <json_serialize_to_buffer_r+0x1da>
                if (is_pretty) {
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d017      	beq.n	8014bb0 <json_serialize_to_buffer_r+0x12c>
                    APPEND_INDENT(level+1);
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	3301      	adds	r3, #1
 8014b84:	4619      	mov	r1, r3
 8014b86:	68b8      	ldr	r0, [r7, #8]
 8014b88:	f000 ff5c 	bl	8015a44 <append_indent>
 8014b8c:	6438      	str	r0, [r7, #64]	@ 0x40
 8014b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	da02      	bge.n	8014b9a <json_serialize_to_buffer_r+0x116>
 8014b94:	f04f 33ff 	mov.w	r3, #4294967295
 8014b98:	e298      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8014b9a:	68bb      	ldr	r3, [r7, #8]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d003      	beq.n	8014ba8 <json_serialize_to_buffer_r+0x124>
 8014ba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ba2:	68ba      	ldr	r2, [r7, #8]
 8014ba4:	4413      	add	r3, r2
 8014ba6:	60bb      	str	r3, [r7, #8]
 8014ba8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014bac:	4413      	add	r3, r2
 8014bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
                }
                temp_value = json_array_get_value(array, i);
 8014bb0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014bb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014bb4:	f001 f8ec 	bl	8015d90 <json_array_get_value>
 8014bb8:	6338      	str	r0, [r7, #48]	@ 0x30
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	1c5a      	adds	r2, r3, #1
 8014bbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014bc0:	9300      	str	r3, [sp, #0]
 8014bc2:	683b      	ldr	r3, [r7, #0]
 8014bc4:	68b9      	ldr	r1, [r7, #8]
 8014bc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014bc8:	f7ff ff5c 	bl	8014a84 <json_serialize_to_buffer_r>
 8014bcc:	6438      	str	r0, [r7, #64]	@ 0x40
                if (written < 0) {
 8014bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	da02      	bge.n	8014bda <json_serialize_to_buffer_r+0x156>
                    return -1;
 8014bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8014bd8:	e278      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
                }
                if (buf != NULL) {
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d003      	beq.n	8014be8 <json_serialize_to_buffer_r+0x164>
                    buf += written;
 8014be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014be2:	68ba      	ldr	r2, [r7, #8]
 8014be4:	4413      	add	r3, r2
 8014be6:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 8014be8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014bec:	4413      	add	r3, r2
 8014bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
                if (i < (count - 1)) {
 8014bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bf2:	3b01      	subs	r3, #1
 8014bf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014bf6:	429a      	cmp	r2, r3
 8014bf8:	d215      	bcs.n	8014c26 <json_serialize_to_buffer_r+0x1a2>
                    APPEND_STRING(",");
 8014bfa:	4955      	ldr	r1, [pc, #340]	@ (8014d50 <json_serialize_to_buffer_r+0x2cc>)
 8014bfc:	68b8      	ldr	r0, [r7, #8]
 8014bfe:	f000 ff53 	bl	8015aa8 <append_string>
 8014c02:	6438      	str	r0, [r7, #64]	@ 0x40
 8014c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	da02      	bge.n	8014c10 <json_serialize_to_buffer_r+0x18c>
 8014c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c0e:	e25d      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8014c10:	68bb      	ldr	r3, [r7, #8]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d003      	beq.n	8014c1e <json_serialize_to_buffer_r+0x19a>
 8014c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c18:	68ba      	ldr	r2, [r7, #8]
 8014c1a:	4413      	add	r3, r2
 8014c1c:	60bb      	str	r3, [r7, #8]
 8014c1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014c20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c22:	4413      	add	r3, r2
 8014c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
                }
                if (is_pretty) {
 8014c26:	683b      	ldr	r3, [r7, #0]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d015      	beq.n	8014c58 <json_serialize_to_buffer_r+0x1d4>
                    APPEND_STRING("\n");
 8014c2c:	4947      	ldr	r1, [pc, #284]	@ (8014d4c <json_serialize_to_buffer_r+0x2c8>)
 8014c2e:	68b8      	ldr	r0, [r7, #8]
 8014c30:	f000 ff3a 	bl	8015aa8 <append_string>
 8014c34:	6438      	str	r0, [r7, #64]	@ 0x40
 8014c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	da02      	bge.n	8014c42 <json_serialize_to_buffer_r+0x1be>
 8014c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c40:	e244      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8014c42:	68bb      	ldr	r3, [r7, #8]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d003      	beq.n	8014c50 <json_serialize_to_buffer_r+0x1cc>
 8014c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c4a:	68ba      	ldr	r2, [r7, #8]
 8014c4c:	4413      	add	r3, r2
 8014c4e:	60bb      	str	r3, [r7, #8]
 8014c50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c54:	4413      	add	r3, r2
 8014c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
            for (i = 0; i < count; i++) {
 8014c58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014c5a:	3301      	adds	r3, #1
 8014c5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8014c5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c62:	429a      	cmp	r2, r3
 8014c64:	d389      	bcc.n	8014b7a <json_serialize_to_buffer_r+0xf6>
                }
            }
            if (count > 0 && is_pretty) {
 8014c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d018      	beq.n	8014c9e <json_serialize_to_buffer_r+0x21a>
 8014c6c:	683b      	ldr	r3, [r7, #0]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d015      	beq.n	8014c9e <json_serialize_to_buffer_r+0x21a>
                APPEND_INDENT(level);
 8014c72:	6879      	ldr	r1, [r7, #4]
 8014c74:	68b8      	ldr	r0, [r7, #8]
 8014c76:	f000 fee5 	bl	8015a44 <append_indent>
 8014c7a:	6438      	str	r0, [r7, #64]	@ 0x40
 8014c7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	da02      	bge.n	8014c88 <json_serialize_to_buffer_r+0x204>
 8014c82:	f04f 33ff 	mov.w	r3, #4294967295
 8014c86:	e221      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8014c88:	68bb      	ldr	r3, [r7, #8]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d003      	beq.n	8014c96 <json_serialize_to_buffer_r+0x212>
 8014c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c90:	68ba      	ldr	r2, [r7, #8]
 8014c92:	4413      	add	r3, r2
 8014c94:	60bb      	str	r3, [r7, #8]
 8014c96:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014c98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c9a:	4413      	add	r3, r2
 8014c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            APPEND_STRING("]");
 8014c9e:	492d      	ldr	r1, [pc, #180]	@ (8014d54 <json_serialize_to_buffer_r+0x2d0>)
 8014ca0:	68b8      	ldr	r0, [r7, #8]
 8014ca2:	f000 ff01 	bl	8015aa8 <append_string>
 8014ca6:	6438      	str	r0, [r7, #64]	@ 0x40
 8014ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	da02      	bge.n	8014cb4 <json_serialize_to_buffer_r+0x230>
 8014cae:	f04f 33ff 	mov.w	r3, #4294967295
 8014cb2:	e20b      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8014cb4:	68bb      	ldr	r3, [r7, #8]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d003      	beq.n	8014cc2 <json_serialize_to_buffer_r+0x23e>
 8014cba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cbc:	68ba      	ldr	r2, [r7, #8]
 8014cbe:	4413      	add	r3, r2
 8014cc0:	60bb      	str	r3, [r7, #8]
 8014cc2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014cc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cc6:	4413      	add	r3, r2
 8014cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
            return written_total;
 8014cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ccc:	e1fe      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
        case JSONObject:
            object = json_value_get_object(value);
 8014cce:	68f8      	ldr	r0, [r7, #12]
 8014cd0:	f001 f8bf 	bl	8015e52 <json_value_get_object>
 8014cd4:	62b8      	str	r0, [r7, #40]	@ 0x28
            count  = json_object_get_count(object);
 8014cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014cd8:	f000 ffdc 	bl	8015c94 <json_object_get_count>
 8014cdc:	6278      	str	r0, [r7, #36]	@ 0x24
            APPEND_STRING("{");
 8014cde:	491e      	ldr	r1, [pc, #120]	@ (8014d58 <json_serialize_to_buffer_r+0x2d4>)
 8014ce0:	68b8      	ldr	r0, [r7, #8]
 8014ce2:	f000 fee1 	bl	8015aa8 <append_string>
 8014ce6:	6438      	str	r0, [r7, #64]	@ 0x40
 8014ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	da02      	bge.n	8014cf4 <json_serialize_to_buffer_r+0x270>
 8014cee:	f04f 33ff 	mov.w	r3, #4294967295
 8014cf2:	e1eb      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8014cf4:	68bb      	ldr	r3, [r7, #8]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d003      	beq.n	8014d02 <json_serialize_to_buffer_r+0x27e>
 8014cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cfc:	68ba      	ldr	r2, [r7, #8]
 8014cfe:	4413      	add	r3, r2
 8014d00:	60bb      	str	r3, [r7, #8]
 8014d02:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014d04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d06:	4413      	add	r3, r2
 8014d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (count > 0 && is_pretty) {
 8014d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d018      	beq.n	8014d42 <json_serialize_to_buffer_r+0x2be>
 8014d10:	683b      	ldr	r3, [r7, #0]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d015      	beq.n	8014d42 <json_serialize_to_buffer_r+0x2be>
                APPEND_STRING("\n");
 8014d16:	490d      	ldr	r1, [pc, #52]	@ (8014d4c <json_serialize_to_buffer_r+0x2c8>)
 8014d18:	68b8      	ldr	r0, [r7, #8]
 8014d1a:	f000 fec5 	bl	8015aa8 <append_string>
 8014d1e:	6438      	str	r0, [r7, #64]	@ 0x40
 8014d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	da02      	bge.n	8014d2c <json_serialize_to_buffer_r+0x2a8>
 8014d26:	f04f 33ff 	mov.w	r3, #4294967295
 8014d2a:	e1cf      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8014d2c:	68bb      	ldr	r3, [r7, #8]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d003      	beq.n	8014d3a <json_serialize_to_buffer_r+0x2b6>
 8014d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d34:	68ba      	ldr	r2, [r7, #8]
 8014d36:	4413      	add	r3, r2
 8014d38:	60bb      	str	r3, [r7, #8]
 8014d3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014d3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d3e:	4413      	add	r3, r2
 8014d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            for (i = 0; i < count; i++) {
 8014d42:	2300      	movs	r3, #0
 8014d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8014d46:	e0d0      	b.n	8014eea <json_serialize_to_buffer_r+0x466>
 8014d48:	080231a8 	.word	0x080231a8
 8014d4c:	080231ac 	.word	0x080231ac
 8014d50:	080231b0 	.word	0x080231b0
 8014d54:	080231b4 	.word	0x080231b4
 8014d58:	080231b8 	.word	0x080231b8
                key = json_object_get_name(object, i);
 8014d5c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014d5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014d60:	f000 ffa9 	bl	8015cb6 <json_object_get_name>
 8014d64:	63b8      	str	r0, [r7, #56]	@ 0x38
                if (key == NULL) {
 8014d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d102      	bne.n	8014d72 <json_serialize_to_buffer_r+0x2ee>
                    return -1;
 8014d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8014d70:	e1ac      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
                }
                if (is_pretty) {
 8014d72:	683b      	ldr	r3, [r7, #0]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d017      	beq.n	8014da8 <json_serialize_to_buffer_r+0x324>
                    APPEND_INDENT(level+1);
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	3301      	adds	r3, #1
 8014d7c:	4619      	mov	r1, r3
 8014d7e:	68b8      	ldr	r0, [r7, #8]
 8014d80:	f000 fe60 	bl	8015a44 <append_indent>
 8014d84:	6438      	str	r0, [r7, #64]	@ 0x40
 8014d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	da02      	bge.n	8014d92 <json_serialize_to_buffer_r+0x30e>
 8014d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8014d90:	e19c      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d003      	beq.n	8014da0 <json_serialize_to_buffer_r+0x31c>
 8014d98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d9a:	68ba      	ldr	r2, [r7, #8]
 8014d9c:	4413      	add	r3, r2
 8014d9e:	60bb      	str	r3, [r7, #8]
 8014da0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014da4:	4413      	add	r3, r2
 8014da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                }
                /* We do not support key names with embedded \0 chars */
                written = json_serialize_string(key, strlen(key), buf);
 8014da8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014daa:	f7eb fa6f 	bl	800028c <strlen>
 8014dae:	4603      	mov	r3, r0
 8014db0:	68ba      	ldr	r2, [r7, #8]
 8014db2:	4619      	mov	r1, r3
 8014db4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014db6:	f000 f993 	bl	80150e0 <json_serialize_string>
 8014dba:	6438      	str	r0, [r7, #64]	@ 0x40
                if (written < 0) {
 8014dbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	da02      	bge.n	8014dc8 <json_serialize_to_buffer_r+0x344>
                    return -1;
 8014dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8014dc6:	e181      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
                }
                if (buf != NULL) {
 8014dc8:	68bb      	ldr	r3, [r7, #8]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d003      	beq.n	8014dd6 <json_serialize_to_buffer_r+0x352>
                    buf += written;
 8014dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014dd0:	68ba      	ldr	r2, [r7, #8]
 8014dd2:	4413      	add	r3, r2
 8014dd4:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 8014dd6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014dda:	4413      	add	r3, r2
 8014ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                APPEND_STRING(":");
 8014dde:	498d      	ldr	r1, [pc, #564]	@ (8015014 <json_serialize_to_buffer_r+0x590>)
 8014de0:	68b8      	ldr	r0, [r7, #8]
 8014de2:	f000 fe61 	bl	8015aa8 <append_string>
 8014de6:	6438      	str	r0, [r7, #64]	@ 0x40
 8014de8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	da02      	bge.n	8014df4 <json_serialize_to_buffer_r+0x370>
 8014dee:	f04f 33ff 	mov.w	r3, #4294967295
 8014df2:	e16b      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8014df4:	68bb      	ldr	r3, [r7, #8]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d003      	beq.n	8014e02 <json_serialize_to_buffer_r+0x37e>
 8014dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014dfc:	68ba      	ldr	r2, [r7, #8]
 8014dfe:	4413      	add	r3, r2
 8014e00:	60bb      	str	r3, [r7, #8]
 8014e02:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e06:	4413      	add	r3, r2
 8014e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
                if (is_pretty) {
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d015      	beq.n	8014e3c <json_serialize_to_buffer_r+0x3b8>
                    APPEND_STRING(" ");
 8014e10:	4981      	ldr	r1, [pc, #516]	@ (8015018 <json_serialize_to_buffer_r+0x594>)
 8014e12:	68b8      	ldr	r0, [r7, #8]
 8014e14:	f000 fe48 	bl	8015aa8 <append_string>
 8014e18:	6438      	str	r0, [r7, #64]	@ 0x40
 8014e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	da02      	bge.n	8014e26 <json_serialize_to_buffer_r+0x3a2>
 8014e20:	f04f 33ff 	mov.w	r3, #4294967295
 8014e24:	e152      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8014e26:	68bb      	ldr	r3, [r7, #8]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d003      	beq.n	8014e34 <json_serialize_to_buffer_r+0x3b0>
 8014e2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e2e:	68ba      	ldr	r2, [r7, #8]
 8014e30:	4413      	add	r3, r2
 8014e32:	60bb      	str	r3, [r7, #8]
 8014e34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e38:	4413      	add	r3, r2
 8014e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                }
                temp_value = json_object_get_value_at(object, i);
 8014e3c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014e3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014e40:	f000 ff54 	bl	8015cec <json_object_get_value_at>
 8014e44:	6338      	str	r0, [r7, #48]	@ 0x30
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	1c5a      	adds	r2, r3, #1
 8014e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014e4c:	9300      	str	r3, [sp, #0]
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	68b9      	ldr	r1, [r7, #8]
 8014e52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014e54:	f7ff fe16 	bl	8014a84 <json_serialize_to_buffer_r>
 8014e58:	6438      	str	r0, [r7, #64]	@ 0x40
                if (written < 0) {
 8014e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	da02      	bge.n	8014e66 <json_serialize_to_buffer_r+0x3e2>
                    return -1;
 8014e60:	f04f 33ff 	mov.w	r3, #4294967295
 8014e64:	e132      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
                }
                if (buf != NULL) {
 8014e66:	68bb      	ldr	r3, [r7, #8]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d003      	beq.n	8014e74 <json_serialize_to_buffer_r+0x3f0>
                    buf += written;
 8014e6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e6e:	68ba      	ldr	r2, [r7, #8]
 8014e70:	4413      	add	r3, r2
 8014e72:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 8014e74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e78:	4413      	add	r3, r2
 8014e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                if (i < (count - 1)) {
 8014e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e7e:	3b01      	subs	r3, #1
 8014e80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014e82:	429a      	cmp	r2, r3
 8014e84:	d215      	bcs.n	8014eb2 <json_serialize_to_buffer_r+0x42e>
                    APPEND_STRING(",");
 8014e86:	4965      	ldr	r1, [pc, #404]	@ (801501c <json_serialize_to_buffer_r+0x598>)
 8014e88:	68b8      	ldr	r0, [r7, #8]
 8014e8a:	f000 fe0d 	bl	8015aa8 <append_string>
 8014e8e:	6438      	str	r0, [r7, #64]	@ 0x40
 8014e90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	da02      	bge.n	8014e9c <json_serialize_to_buffer_r+0x418>
 8014e96:	f04f 33ff 	mov.w	r3, #4294967295
 8014e9a:	e117      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8014e9c:	68bb      	ldr	r3, [r7, #8]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d003      	beq.n	8014eaa <json_serialize_to_buffer_r+0x426>
 8014ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ea4:	68ba      	ldr	r2, [r7, #8]
 8014ea6:	4413      	add	r3, r2
 8014ea8:	60bb      	str	r3, [r7, #8]
 8014eaa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014eac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014eae:	4413      	add	r3, r2
 8014eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                }
                if (is_pretty) {
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d015      	beq.n	8014ee4 <json_serialize_to_buffer_r+0x460>
                    APPEND_STRING("\n");
 8014eb8:	4959      	ldr	r1, [pc, #356]	@ (8015020 <json_serialize_to_buffer_r+0x59c>)
 8014eba:	68b8      	ldr	r0, [r7, #8]
 8014ebc:	f000 fdf4 	bl	8015aa8 <append_string>
 8014ec0:	6438      	str	r0, [r7, #64]	@ 0x40
 8014ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	da02      	bge.n	8014ece <json_serialize_to_buffer_r+0x44a>
 8014ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8014ecc:	e0fe      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8014ece:	68bb      	ldr	r3, [r7, #8]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d003      	beq.n	8014edc <json_serialize_to_buffer_r+0x458>
 8014ed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ed6:	68ba      	ldr	r2, [r7, #8]
 8014ed8:	4413      	add	r3, r2
 8014eda:	60bb      	str	r3, [r7, #8]
 8014edc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ee0:	4413      	add	r3, r2
 8014ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            for (i = 0; i < count; i++) {
 8014ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014ee6:	3301      	adds	r3, #1
 8014ee8:	647b      	str	r3, [r7, #68]	@ 0x44
 8014eea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014eee:	429a      	cmp	r2, r3
 8014ef0:	f4ff af34 	bcc.w	8014d5c <json_serialize_to_buffer_r+0x2d8>
                }
            }
            if (count > 0 && is_pretty) {
 8014ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d018      	beq.n	8014f2c <json_serialize_to_buffer_r+0x4a8>
 8014efa:	683b      	ldr	r3, [r7, #0]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d015      	beq.n	8014f2c <json_serialize_to_buffer_r+0x4a8>
                APPEND_INDENT(level);
 8014f00:	6879      	ldr	r1, [r7, #4]
 8014f02:	68b8      	ldr	r0, [r7, #8]
 8014f04:	f000 fd9e 	bl	8015a44 <append_indent>
 8014f08:	6438      	str	r0, [r7, #64]	@ 0x40
 8014f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	da02      	bge.n	8014f16 <json_serialize_to_buffer_r+0x492>
 8014f10:	f04f 33ff 	mov.w	r3, #4294967295
 8014f14:	e0da      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d003      	beq.n	8014f24 <json_serialize_to_buffer_r+0x4a0>
 8014f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f1e:	68ba      	ldr	r2, [r7, #8]
 8014f20:	4413      	add	r3, r2
 8014f22:	60bb      	str	r3, [r7, #8]
 8014f24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014f26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f28:	4413      	add	r3, r2
 8014f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            APPEND_STRING("}");
 8014f2c:	493d      	ldr	r1, [pc, #244]	@ (8015024 <json_serialize_to_buffer_r+0x5a0>)
 8014f2e:	68b8      	ldr	r0, [r7, #8]
 8014f30:	f000 fdba 	bl	8015aa8 <append_string>
 8014f34:	6438      	str	r0, [r7, #64]	@ 0x40
 8014f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	da02      	bge.n	8014f42 <json_serialize_to_buffer_r+0x4be>
 8014f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8014f40:	e0c4      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8014f42:	68bb      	ldr	r3, [r7, #8]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d003      	beq.n	8014f50 <json_serialize_to_buffer_r+0x4cc>
 8014f48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f4a:	68ba      	ldr	r2, [r7, #8]
 8014f4c:	4413      	add	r3, r2
 8014f4e:	60bb      	str	r3, [r7, #8]
 8014f50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f54:	4413      	add	r3, r2
 8014f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
            return written_total;
 8014f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f5a:	e0b7      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
        case JSONString:
            string = json_value_get_string(value);
 8014f5c:	68f8      	ldr	r0, [r7, #12]
 8014f5e:	f000 ffae 	bl	8015ebe <json_value_get_string>
 8014f62:	6378      	str	r0, [r7, #52]	@ 0x34
            if (string == NULL) {
 8014f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d102      	bne.n	8014f70 <json_serialize_to_buffer_r+0x4ec>
                return -1;
 8014f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8014f6e:	e0ad      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
            }
            len = json_value_get_string_len(value);
 8014f70:	68f8      	ldr	r0, [r7, #12]
 8014f72:	f000 ffb7 	bl	8015ee4 <json_value_get_string_len>
 8014f76:	6178      	str	r0, [r7, #20]
            written = json_serialize_string(string, len, buf);
 8014f78:	68ba      	ldr	r2, [r7, #8]
 8014f7a:	6979      	ldr	r1, [r7, #20]
 8014f7c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8014f7e:	f000 f8af 	bl	80150e0 <json_serialize_string>
 8014f82:	6438      	str	r0, [r7, #64]	@ 0x40
            if (written < 0) {
 8014f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	da02      	bge.n	8014f90 <json_serialize_to_buffer_r+0x50c>
                return -1;
 8014f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8014f8e:	e09d      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
            }
            if (buf != NULL) {
 8014f90:	68bb      	ldr	r3, [r7, #8]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d003      	beq.n	8014f9e <json_serialize_to_buffer_r+0x51a>
                buf += written;
 8014f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f98:	68ba      	ldr	r2, [r7, #8]
 8014f9a:	4413      	add	r3, r2
 8014f9c:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 8014f9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014fa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014fa2:	4413      	add	r3, r2
 8014fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
            return written_total;
 8014fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014fa8:	e090      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
        case JSONBoolean:
            if (json_value_get_boolean(value)) {
 8014faa:	68f8      	ldr	r0, [r7, #12]
 8014fac:	f000 ffc8 	bl	8015f40 <json_value_get_boolean>
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d016      	beq.n	8014fe4 <json_serialize_to_buffer_r+0x560>
                APPEND_STRING("true");
 8014fb6:	491c      	ldr	r1, [pc, #112]	@ (8015028 <json_serialize_to_buffer_r+0x5a4>)
 8014fb8:	68b8      	ldr	r0, [r7, #8]
 8014fba:	f000 fd75 	bl	8015aa8 <append_string>
 8014fbe:	6438      	str	r0, [r7, #64]	@ 0x40
 8014fc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	da02      	bge.n	8014fcc <json_serialize_to_buffer_r+0x548>
 8014fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8014fca:	e07f      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d003      	beq.n	8014fda <json_serialize_to_buffer_r+0x556>
 8014fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014fd4:	68ba      	ldr	r2, [r7, #8]
 8014fd6:	4413      	add	r3, r2
 8014fd8:	60bb      	str	r3, [r7, #8]
 8014fda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014fde:	4413      	add	r3, r2
 8014fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014fe2:	e015      	b.n	8015010 <json_serialize_to_buffer_r+0x58c>
            } else {
                APPEND_STRING("false");
 8014fe4:	4911      	ldr	r1, [pc, #68]	@ (801502c <json_serialize_to_buffer_r+0x5a8>)
 8014fe6:	68b8      	ldr	r0, [r7, #8]
 8014fe8:	f000 fd5e 	bl	8015aa8 <append_string>
 8014fec:	6438      	str	r0, [r7, #64]	@ 0x40
 8014fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	da02      	bge.n	8014ffa <json_serialize_to_buffer_r+0x576>
 8014ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ff8:	e068      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8014ffa:	68bb      	ldr	r3, [r7, #8]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d003      	beq.n	8015008 <json_serialize_to_buffer_r+0x584>
 8015000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015002:	68ba      	ldr	r2, [r7, #8]
 8015004:	4413      	add	r3, r2
 8015006:	60bb      	str	r3, [r7, #8]
 8015008:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801500a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801500c:	4413      	add	r3, r2
 801500e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            return written_total;
 8015010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015012:	e05b      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 8015014:	080231bc 	.word	0x080231bc
 8015018:	080231c0 	.word	0x080231c0
 801501c:	080231b0 	.word	0x080231b0
 8015020:	080231ac 	.word	0x080231ac
 8015024:	080231c4 	.word	0x080231c4
 8015028:	08023190 	.word	0x08023190
 801502c:	08023198 	.word	0x08023198
        case JSONNumber:
            num = json_value_get_number(value);
 8015030:	68f8      	ldr	r0, [r7, #12]
 8015032:	f000 ff6a 	bl	8015f0a <json_value_get_number>
 8015036:	ed87 0b06 	vstr	d0, [r7, #24]
            if (buf != NULL) {
 801503a:	68bb      	ldr	r3, [r7, #8]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d001      	beq.n	8015044 <json_serialize_to_buffer_r+0x5c0>
                num_buf = buf;
 8015040:	68bb      	ldr	r3, [r7, #8]
 8015042:	653b      	str	r3, [r7, #80]	@ 0x50
            }
            if (parson_float_format) {
 8015044:	4b23      	ldr	r3, [pc, #140]	@ (80150d4 <json_serialize_to_buffer_r+0x650>)
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d008      	beq.n	801505e <json_serialize_to_buffer_r+0x5da>
                written = sprintf(num_buf, parson_float_format, num);
 801504c:	4b21      	ldr	r3, [pc, #132]	@ (80150d4 <json_serialize_to_buffer_r+0x650>)
 801504e:	6819      	ldr	r1, [r3, #0]
 8015050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015054:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8015056:	f009 f9d1 	bl	801e3fc <siprintf>
 801505a:	6438      	str	r0, [r7, #64]	@ 0x40
 801505c:	e006      	b.n	801506c <json_serialize_to_buffer_r+0x5e8>
            } else {
                written = sprintf(num_buf, PARSON_DEFAULT_FLOAT_FORMAT, num);
 801505e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015062:	491d      	ldr	r1, [pc, #116]	@ (80150d8 <json_serialize_to_buffer_r+0x654>)
 8015064:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8015066:	f009 f9c9 	bl	801e3fc <siprintf>
 801506a:	6438      	str	r0, [r7, #64]	@ 0x40
            }
            if (written < 0) {
 801506c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801506e:	2b00      	cmp	r3, #0
 8015070:	da02      	bge.n	8015078 <json_serialize_to_buffer_r+0x5f4>
                return -1;
 8015072:	f04f 33ff 	mov.w	r3, #4294967295
 8015076:	e029      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
            }
            if (buf != NULL) {
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	2b00      	cmp	r3, #0
 801507c:	d003      	beq.n	8015086 <json_serialize_to_buffer_r+0x602>
                buf += written;
 801507e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015080:	68ba      	ldr	r2, [r7, #8]
 8015082:	4413      	add	r3, r2
 8015084:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 8015086:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801508a:	4413      	add	r3, r2
 801508c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            return written_total;
 801508e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015090:	e01c      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
        case JSONNull:
            APPEND_STRING("null");
 8015092:	4912      	ldr	r1, [pc, #72]	@ (80150dc <json_serialize_to_buffer_r+0x658>)
 8015094:	68b8      	ldr	r0, [r7, #8]
 8015096:	f000 fd07 	bl	8015aa8 <append_string>
 801509a:	6438      	str	r0, [r7, #64]	@ 0x40
 801509c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801509e:	2b00      	cmp	r3, #0
 80150a0:	da02      	bge.n	80150a8 <json_serialize_to_buffer_r+0x624>
 80150a2:	f04f 33ff 	mov.w	r3, #4294967295
 80150a6:	e011      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
 80150a8:	68bb      	ldr	r3, [r7, #8]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d003      	beq.n	80150b6 <json_serialize_to_buffer_r+0x632>
 80150ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80150b0:	68ba      	ldr	r2, [r7, #8]
 80150b2:	4413      	add	r3, r2
 80150b4:	60bb      	str	r3, [r7, #8]
 80150b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80150b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80150ba:	4413      	add	r3, r2
 80150bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
            return written_total;
 80150be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80150c0:	e004      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
        case JSONError:
            return -1;
 80150c2:	f04f 33ff 	mov.w	r3, #4294967295
 80150c6:	e001      	b.n	80150cc <json_serialize_to_buffer_r+0x648>
        default:
            return -1;
 80150c8:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80150cc:	4618      	mov	r0, r3
 80150ce:	3748      	adds	r7, #72	@ 0x48
 80150d0:	46bd      	mov	sp, r7
 80150d2:	bd80      	pop	{r7, pc}
 80150d4:	20045810 	.word	0x20045810
 80150d8:	080231c8 	.word	0x080231c8
 80150dc:	080231a0 	.word	0x080231a0

080150e0 <json_serialize_string>:

static int json_serialize_string(const char *string, size_t len, char *buf) {
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b088      	sub	sp, #32
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	60f8      	str	r0, [r7, #12]
 80150e8:	60b9      	str	r1, [r7, #8]
 80150ea:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 80150ec:	2300      	movs	r3, #0
 80150ee:	61fb      	str	r3, [r7, #28]
    char c = '\0';
 80150f0:	2300      	movs	r3, #0
 80150f2:	75fb      	strb	r3, [r7, #23]
    int written = -1, written_total = 0;
 80150f4:	f04f 33ff 	mov.w	r3, #4294967295
 80150f8:	613b      	str	r3, [r7, #16]
 80150fa:	2300      	movs	r3, #0
 80150fc:	61bb      	str	r3, [r7, #24]
    APPEND_STRING("\"");
 80150fe:	49bb      	ldr	r1, [pc, #748]	@ (80153ec <json_serialize_string+0x30c>)
 8015100:	6878      	ldr	r0, [r7, #4]
 8015102:	f000 fcd1 	bl	8015aa8 <append_string>
 8015106:	6138      	str	r0, [r7, #16]
 8015108:	693b      	ldr	r3, [r7, #16]
 801510a:	2b00      	cmp	r3, #0
 801510c:	da03      	bge.n	8015116 <json_serialize_string+0x36>
 801510e:	f04f 33ff 	mov.w	r3, #4294967295
 8015112:	f000 bc88 	b.w	8015a26 <json_serialize_string+0x946>
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d003      	beq.n	8015124 <json_serialize_string+0x44>
 801511c:	693b      	ldr	r3, [r7, #16]
 801511e:	687a      	ldr	r2, [r7, #4]
 8015120:	4413      	add	r3, r2
 8015122:	607b      	str	r3, [r7, #4]
 8015124:	69ba      	ldr	r2, [r7, #24]
 8015126:	693b      	ldr	r3, [r7, #16]
 8015128:	4413      	add	r3, r2
 801512a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; i++) {
 801512c:	2300      	movs	r3, #0
 801512e:	61fb      	str	r3, [r7, #28]
 8015130:	f000 bc5d 	b.w	80159ee <json_serialize_string+0x90e>
        c = string[i];
 8015134:	68fa      	ldr	r2, [r7, #12]
 8015136:	69fb      	ldr	r3, [r7, #28]
 8015138:	4413      	add	r3, r2
 801513a:	781b      	ldrb	r3, [r3, #0]
 801513c:	75fb      	strb	r3, [r7, #23]
        switch (c) {
 801513e:	7dfb      	ldrb	r3, [r7, #23]
 8015140:	2b5c      	cmp	r3, #92	@ 0x5c
 8015142:	f200 8444 	bhi.w	80159ce <json_serialize_string+0x8ee>
 8015146:	a201      	add	r2, pc, #4	@ (adr r2, 801514c <json_serialize_string+0x6c>)
 8015148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801514c:	08015425 	.word	0x08015425
 8015150:	08015453 	.word	0x08015453
 8015154:	08015481 	.word	0x08015481
 8015158:	080154af 	.word	0x080154af
 801515c:	080154dd 	.word	0x080154dd
 8015160:	0801550b 	.word	0x0801550b
 8015164:	08015539 	.word	0x08015539
 8015168:	08015567 	.word	0x08015567
 801516c:	0801531d 	.word	0x0801531d
 8015170:	080153d5 	.word	0x080153d5
 8015174:	08015379 	.word	0x08015379
 8015178:	08015595 	.word	0x08015595
 801517c:	0801534b 	.word	0x0801534b
 8015180:	080153a7 	.word	0x080153a7
 8015184:	080155c3 	.word	0x080155c3
 8015188:	080155f1 	.word	0x080155f1
 801518c:	0801561f 	.word	0x0801561f
 8015190:	0801564d 	.word	0x0801564d
 8015194:	080156b1 	.word	0x080156b1
 8015198:	080156df 	.word	0x080156df
 801519c:	0801570d 	.word	0x0801570d
 80151a0:	0801573b 	.word	0x0801573b
 80151a4:	08015769 	.word	0x08015769
 80151a8:	08015797 	.word	0x08015797
 80151ac:	080157c5 	.word	0x080157c5
 80151b0:	080157f3 	.word	0x080157f3
 80151b4:	08015821 	.word	0x08015821
 80151b8:	0801584f 	.word	0x0801584f
 80151bc:	0801587d 	.word	0x0801587d
 80151c0:	080158ab 	.word	0x080158ab
 80151c4:	080158d9 	.word	0x080158d9
 80151c8:	0801593d 	.word	0x0801593d
 80151cc:	080159cf 	.word	0x080159cf
 80151d0:	080159cf 	.word	0x080159cf
 80151d4:	080152c1 	.word	0x080152c1
 80151d8:	080159cf 	.word	0x080159cf
 80151dc:	080159cf 	.word	0x080159cf
 80151e0:	080159cf 	.word	0x080159cf
 80151e4:	080159cf 	.word	0x080159cf
 80151e8:	080159cf 	.word	0x080159cf
 80151ec:	080159cf 	.word	0x080159cf
 80151f0:	080159cf 	.word	0x080159cf
 80151f4:	080159cf 	.word	0x080159cf
 80151f8:	080159cf 	.word	0x080159cf
 80151fc:	080159cf 	.word	0x080159cf
 8015200:	080159cf 	.word	0x080159cf
 8015204:	080159cf 	.word	0x080159cf
 8015208:	0801596b 	.word	0x0801596b
 801520c:	080159cf 	.word	0x080159cf
 8015210:	080159cf 	.word	0x080159cf
 8015214:	080159cf 	.word	0x080159cf
 8015218:	080159cf 	.word	0x080159cf
 801521c:	080159cf 	.word	0x080159cf
 8015220:	080159cf 	.word	0x080159cf
 8015224:	080159cf 	.word	0x080159cf
 8015228:	080159cf 	.word	0x080159cf
 801522c:	080159cf 	.word	0x080159cf
 8015230:	080159cf 	.word	0x080159cf
 8015234:	080159cf 	.word	0x080159cf
 8015238:	080159cf 	.word	0x080159cf
 801523c:	080159cf 	.word	0x080159cf
 8015240:	080159cf 	.word	0x080159cf
 8015244:	080159cf 	.word	0x080159cf
 8015248:	080159cf 	.word	0x080159cf
 801524c:	080159cf 	.word	0x080159cf
 8015250:	080159cf 	.word	0x080159cf
 8015254:	080159cf 	.word	0x080159cf
 8015258:	080159cf 	.word	0x080159cf
 801525c:	080159cf 	.word	0x080159cf
 8015260:	080159cf 	.word	0x080159cf
 8015264:	080159cf 	.word	0x080159cf
 8015268:	080159cf 	.word	0x080159cf
 801526c:	080159cf 	.word	0x080159cf
 8015270:	080159cf 	.word	0x080159cf
 8015274:	080159cf 	.word	0x080159cf
 8015278:	080159cf 	.word	0x080159cf
 801527c:	080159cf 	.word	0x080159cf
 8015280:	080159cf 	.word	0x080159cf
 8015284:	080159cf 	.word	0x080159cf
 8015288:	080159cf 	.word	0x080159cf
 801528c:	080159cf 	.word	0x080159cf
 8015290:	080159cf 	.word	0x080159cf
 8015294:	080159cf 	.word	0x080159cf
 8015298:	080159cf 	.word	0x080159cf
 801529c:	080159cf 	.word	0x080159cf
 80152a0:	080159cf 	.word	0x080159cf
 80152a4:	080159cf 	.word	0x080159cf
 80152a8:	080159cf 	.word	0x080159cf
 80152ac:	080159cf 	.word	0x080159cf
 80152b0:	080159cf 	.word	0x080159cf
 80152b4:	080159cf 	.word	0x080159cf
 80152b8:	080159cf 	.word	0x080159cf
 80152bc:	080152ef 	.word	0x080152ef
            case '\"': APPEND_STRING("\\\""); break;
 80152c0:	494b      	ldr	r1, [pc, #300]	@ (80153f0 <json_serialize_string+0x310>)
 80152c2:	6878      	ldr	r0, [r7, #4]
 80152c4:	f000 fbf0 	bl	8015aa8 <append_string>
 80152c8:	6138      	str	r0, [r7, #16]
 80152ca:	693b      	ldr	r3, [r7, #16]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	da02      	bge.n	80152d6 <json_serialize_string+0x1f6>
 80152d0:	f04f 33ff 	mov.w	r3, #4294967295
 80152d4:	e3a7      	b.n	8015a26 <json_serialize_string+0x946>
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d003      	beq.n	80152e4 <json_serialize_string+0x204>
 80152dc:	693b      	ldr	r3, [r7, #16]
 80152de:	687a      	ldr	r2, [r7, #4]
 80152e0:	4413      	add	r3, r2
 80152e2:	607b      	str	r3, [r7, #4]
 80152e4:	69ba      	ldr	r2, [r7, #24]
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	4413      	add	r3, r2
 80152ea:	61bb      	str	r3, [r7, #24]
 80152ec:	e37c      	b.n	80159e8 <json_serialize_string+0x908>
            case '\\': APPEND_STRING("\\\\"); break;
 80152ee:	4941      	ldr	r1, [pc, #260]	@ (80153f4 <json_serialize_string+0x314>)
 80152f0:	6878      	ldr	r0, [r7, #4]
 80152f2:	f000 fbd9 	bl	8015aa8 <append_string>
 80152f6:	6138      	str	r0, [r7, #16]
 80152f8:	693b      	ldr	r3, [r7, #16]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	da02      	bge.n	8015304 <json_serialize_string+0x224>
 80152fe:	f04f 33ff 	mov.w	r3, #4294967295
 8015302:	e390      	b.n	8015a26 <json_serialize_string+0x946>
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d003      	beq.n	8015312 <json_serialize_string+0x232>
 801530a:	693b      	ldr	r3, [r7, #16]
 801530c:	687a      	ldr	r2, [r7, #4]
 801530e:	4413      	add	r3, r2
 8015310:	607b      	str	r3, [r7, #4]
 8015312:	69ba      	ldr	r2, [r7, #24]
 8015314:	693b      	ldr	r3, [r7, #16]
 8015316:	4413      	add	r3, r2
 8015318:	61bb      	str	r3, [r7, #24]
 801531a:	e365      	b.n	80159e8 <json_serialize_string+0x908>
            case '\b': APPEND_STRING("\\b"); break;
 801531c:	4936      	ldr	r1, [pc, #216]	@ (80153f8 <json_serialize_string+0x318>)
 801531e:	6878      	ldr	r0, [r7, #4]
 8015320:	f000 fbc2 	bl	8015aa8 <append_string>
 8015324:	6138      	str	r0, [r7, #16]
 8015326:	693b      	ldr	r3, [r7, #16]
 8015328:	2b00      	cmp	r3, #0
 801532a:	da02      	bge.n	8015332 <json_serialize_string+0x252>
 801532c:	f04f 33ff 	mov.w	r3, #4294967295
 8015330:	e379      	b.n	8015a26 <json_serialize_string+0x946>
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d003      	beq.n	8015340 <json_serialize_string+0x260>
 8015338:	693b      	ldr	r3, [r7, #16]
 801533a:	687a      	ldr	r2, [r7, #4]
 801533c:	4413      	add	r3, r2
 801533e:	607b      	str	r3, [r7, #4]
 8015340:	69ba      	ldr	r2, [r7, #24]
 8015342:	693b      	ldr	r3, [r7, #16]
 8015344:	4413      	add	r3, r2
 8015346:	61bb      	str	r3, [r7, #24]
 8015348:	e34e      	b.n	80159e8 <json_serialize_string+0x908>
            case '\f': APPEND_STRING("\\f"); break;
 801534a:	492c      	ldr	r1, [pc, #176]	@ (80153fc <json_serialize_string+0x31c>)
 801534c:	6878      	ldr	r0, [r7, #4]
 801534e:	f000 fbab 	bl	8015aa8 <append_string>
 8015352:	6138      	str	r0, [r7, #16]
 8015354:	693b      	ldr	r3, [r7, #16]
 8015356:	2b00      	cmp	r3, #0
 8015358:	da02      	bge.n	8015360 <json_serialize_string+0x280>
 801535a:	f04f 33ff 	mov.w	r3, #4294967295
 801535e:	e362      	b.n	8015a26 <json_serialize_string+0x946>
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d003      	beq.n	801536e <json_serialize_string+0x28e>
 8015366:	693b      	ldr	r3, [r7, #16]
 8015368:	687a      	ldr	r2, [r7, #4]
 801536a:	4413      	add	r3, r2
 801536c:	607b      	str	r3, [r7, #4]
 801536e:	69ba      	ldr	r2, [r7, #24]
 8015370:	693b      	ldr	r3, [r7, #16]
 8015372:	4413      	add	r3, r2
 8015374:	61bb      	str	r3, [r7, #24]
 8015376:	e337      	b.n	80159e8 <json_serialize_string+0x908>
            case '\n': APPEND_STRING("\\n"); break;
 8015378:	4921      	ldr	r1, [pc, #132]	@ (8015400 <json_serialize_string+0x320>)
 801537a:	6878      	ldr	r0, [r7, #4]
 801537c:	f000 fb94 	bl	8015aa8 <append_string>
 8015380:	6138      	str	r0, [r7, #16]
 8015382:	693b      	ldr	r3, [r7, #16]
 8015384:	2b00      	cmp	r3, #0
 8015386:	da02      	bge.n	801538e <json_serialize_string+0x2ae>
 8015388:	f04f 33ff 	mov.w	r3, #4294967295
 801538c:	e34b      	b.n	8015a26 <json_serialize_string+0x946>
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d003      	beq.n	801539c <json_serialize_string+0x2bc>
 8015394:	693b      	ldr	r3, [r7, #16]
 8015396:	687a      	ldr	r2, [r7, #4]
 8015398:	4413      	add	r3, r2
 801539a:	607b      	str	r3, [r7, #4]
 801539c:	69ba      	ldr	r2, [r7, #24]
 801539e:	693b      	ldr	r3, [r7, #16]
 80153a0:	4413      	add	r3, r2
 80153a2:	61bb      	str	r3, [r7, #24]
 80153a4:	e320      	b.n	80159e8 <json_serialize_string+0x908>
            case '\r': APPEND_STRING("\\r"); break;
 80153a6:	4917      	ldr	r1, [pc, #92]	@ (8015404 <json_serialize_string+0x324>)
 80153a8:	6878      	ldr	r0, [r7, #4]
 80153aa:	f000 fb7d 	bl	8015aa8 <append_string>
 80153ae:	6138      	str	r0, [r7, #16]
 80153b0:	693b      	ldr	r3, [r7, #16]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	da02      	bge.n	80153bc <json_serialize_string+0x2dc>
 80153b6:	f04f 33ff 	mov.w	r3, #4294967295
 80153ba:	e334      	b.n	8015a26 <json_serialize_string+0x946>
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d003      	beq.n	80153ca <json_serialize_string+0x2ea>
 80153c2:	693b      	ldr	r3, [r7, #16]
 80153c4:	687a      	ldr	r2, [r7, #4]
 80153c6:	4413      	add	r3, r2
 80153c8:	607b      	str	r3, [r7, #4]
 80153ca:	69ba      	ldr	r2, [r7, #24]
 80153cc:	693b      	ldr	r3, [r7, #16]
 80153ce:	4413      	add	r3, r2
 80153d0:	61bb      	str	r3, [r7, #24]
 80153d2:	e309      	b.n	80159e8 <json_serialize_string+0x908>
            case '\t': APPEND_STRING("\\t"); break;
 80153d4:	490c      	ldr	r1, [pc, #48]	@ (8015408 <json_serialize_string+0x328>)
 80153d6:	6878      	ldr	r0, [r7, #4]
 80153d8:	f000 fb66 	bl	8015aa8 <append_string>
 80153dc:	6138      	str	r0, [r7, #16]
 80153de:	693b      	ldr	r3, [r7, #16]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	da13      	bge.n	801540c <json_serialize_string+0x32c>
 80153e4:	f04f 33ff 	mov.w	r3, #4294967295
 80153e8:	e31d      	b.n	8015a26 <json_serialize_string+0x946>
 80153ea:	bf00      	nop
 80153ec:	080231d0 	.word	0x080231d0
 80153f0:	080231d4 	.word	0x080231d4
 80153f4:	080231d8 	.word	0x080231d8
 80153f8:	080231dc 	.word	0x080231dc
 80153fc:	080231e0 	.word	0x080231e0
 8015400:	080231e4 	.word	0x080231e4
 8015404:	080231e8 	.word	0x080231e8
 8015408:	080231ec 	.word	0x080231ec
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d003      	beq.n	801541a <json_serialize_string+0x33a>
 8015412:	693b      	ldr	r3, [r7, #16]
 8015414:	687a      	ldr	r2, [r7, #4]
 8015416:	4413      	add	r3, r2
 8015418:	607b      	str	r3, [r7, #4]
 801541a:	69ba      	ldr	r2, [r7, #24]
 801541c:	693b      	ldr	r3, [r7, #16]
 801541e:	4413      	add	r3, r2
 8015420:	61bb      	str	r3, [r7, #24]
 8015422:	e2e1      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x00': APPEND_STRING("\\u0000"); break;
 8015424:	498f      	ldr	r1, [pc, #572]	@ (8015664 <json_serialize_string+0x584>)
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	f000 fb3e 	bl	8015aa8 <append_string>
 801542c:	6138      	str	r0, [r7, #16]
 801542e:	693b      	ldr	r3, [r7, #16]
 8015430:	2b00      	cmp	r3, #0
 8015432:	da02      	bge.n	801543a <json_serialize_string+0x35a>
 8015434:	f04f 33ff 	mov.w	r3, #4294967295
 8015438:	e2f5      	b.n	8015a26 <json_serialize_string+0x946>
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d003      	beq.n	8015448 <json_serialize_string+0x368>
 8015440:	693b      	ldr	r3, [r7, #16]
 8015442:	687a      	ldr	r2, [r7, #4]
 8015444:	4413      	add	r3, r2
 8015446:	607b      	str	r3, [r7, #4]
 8015448:	69ba      	ldr	r2, [r7, #24]
 801544a:	693b      	ldr	r3, [r7, #16]
 801544c:	4413      	add	r3, r2
 801544e:	61bb      	str	r3, [r7, #24]
 8015450:	e2ca      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x01': APPEND_STRING("\\u0001"); break;
 8015452:	4985      	ldr	r1, [pc, #532]	@ (8015668 <json_serialize_string+0x588>)
 8015454:	6878      	ldr	r0, [r7, #4]
 8015456:	f000 fb27 	bl	8015aa8 <append_string>
 801545a:	6138      	str	r0, [r7, #16]
 801545c:	693b      	ldr	r3, [r7, #16]
 801545e:	2b00      	cmp	r3, #0
 8015460:	da02      	bge.n	8015468 <json_serialize_string+0x388>
 8015462:	f04f 33ff 	mov.w	r3, #4294967295
 8015466:	e2de      	b.n	8015a26 <json_serialize_string+0x946>
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d003      	beq.n	8015476 <json_serialize_string+0x396>
 801546e:	693b      	ldr	r3, [r7, #16]
 8015470:	687a      	ldr	r2, [r7, #4]
 8015472:	4413      	add	r3, r2
 8015474:	607b      	str	r3, [r7, #4]
 8015476:	69ba      	ldr	r2, [r7, #24]
 8015478:	693b      	ldr	r3, [r7, #16]
 801547a:	4413      	add	r3, r2
 801547c:	61bb      	str	r3, [r7, #24]
 801547e:	e2b3      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x02': APPEND_STRING("\\u0002"); break;
 8015480:	497a      	ldr	r1, [pc, #488]	@ (801566c <json_serialize_string+0x58c>)
 8015482:	6878      	ldr	r0, [r7, #4]
 8015484:	f000 fb10 	bl	8015aa8 <append_string>
 8015488:	6138      	str	r0, [r7, #16]
 801548a:	693b      	ldr	r3, [r7, #16]
 801548c:	2b00      	cmp	r3, #0
 801548e:	da02      	bge.n	8015496 <json_serialize_string+0x3b6>
 8015490:	f04f 33ff 	mov.w	r3, #4294967295
 8015494:	e2c7      	b.n	8015a26 <json_serialize_string+0x946>
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d003      	beq.n	80154a4 <json_serialize_string+0x3c4>
 801549c:	693b      	ldr	r3, [r7, #16]
 801549e:	687a      	ldr	r2, [r7, #4]
 80154a0:	4413      	add	r3, r2
 80154a2:	607b      	str	r3, [r7, #4]
 80154a4:	69ba      	ldr	r2, [r7, #24]
 80154a6:	693b      	ldr	r3, [r7, #16]
 80154a8:	4413      	add	r3, r2
 80154aa:	61bb      	str	r3, [r7, #24]
 80154ac:	e29c      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x03': APPEND_STRING("\\u0003"); break;
 80154ae:	4970      	ldr	r1, [pc, #448]	@ (8015670 <json_serialize_string+0x590>)
 80154b0:	6878      	ldr	r0, [r7, #4]
 80154b2:	f000 faf9 	bl	8015aa8 <append_string>
 80154b6:	6138      	str	r0, [r7, #16]
 80154b8:	693b      	ldr	r3, [r7, #16]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	da02      	bge.n	80154c4 <json_serialize_string+0x3e4>
 80154be:	f04f 33ff 	mov.w	r3, #4294967295
 80154c2:	e2b0      	b.n	8015a26 <json_serialize_string+0x946>
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d003      	beq.n	80154d2 <json_serialize_string+0x3f2>
 80154ca:	693b      	ldr	r3, [r7, #16]
 80154cc:	687a      	ldr	r2, [r7, #4]
 80154ce:	4413      	add	r3, r2
 80154d0:	607b      	str	r3, [r7, #4]
 80154d2:	69ba      	ldr	r2, [r7, #24]
 80154d4:	693b      	ldr	r3, [r7, #16]
 80154d6:	4413      	add	r3, r2
 80154d8:	61bb      	str	r3, [r7, #24]
 80154da:	e285      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x04': APPEND_STRING("\\u0004"); break;
 80154dc:	4965      	ldr	r1, [pc, #404]	@ (8015674 <json_serialize_string+0x594>)
 80154de:	6878      	ldr	r0, [r7, #4]
 80154e0:	f000 fae2 	bl	8015aa8 <append_string>
 80154e4:	6138      	str	r0, [r7, #16]
 80154e6:	693b      	ldr	r3, [r7, #16]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	da02      	bge.n	80154f2 <json_serialize_string+0x412>
 80154ec:	f04f 33ff 	mov.w	r3, #4294967295
 80154f0:	e299      	b.n	8015a26 <json_serialize_string+0x946>
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d003      	beq.n	8015500 <json_serialize_string+0x420>
 80154f8:	693b      	ldr	r3, [r7, #16]
 80154fa:	687a      	ldr	r2, [r7, #4]
 80154fc:	4413      	add	r3, r2
 80154fe:	607b      	str	r3, [r7, #4]
 8015500:	69ba      	ldr	r2, [r7, #24]
 8015502:	693b      	ldr	r3, [r7, #16]
 8015504:	4413      	add	r3, r2
 8015506:	61bb      	str	r3, [r7, #24]
 8015508:	e26e      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x05': APPEND_STRING("\\u0005"); break;
 801550a:	495b      	ldr	r1, [pc, #364]	@ (8015678 <json_serialize_string+0x598>)
 801550c:	6878      	ldr	r0, [r7, #4]
 801550e:	f000 facb 	bl	8015aa8 <append_string>
 8015512:	6138      	str	r0, [r7, #16]
 8015514:	693b      	ldr	r3, [r7, #16]
 8015516:	2b00      	cmp	r3, #0
 8015518:	da02      	bge.n	8015520 <json_serialize_string+0x440>
 801551a:	f04f 33ff 	mov.w	r3, #4294967295
 801551e:	e282      	b.n	8015a26 <json_serialize_string+0x946>
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d003      	beq.n	801552e <json_serialize_string+0x44e>
 8015526:	693b      	ldr	r3, [r7, #16]
 8015528:	687a      	ldr	r2, [r7, #4]
 801552a:	4413      	add	r3, r2
 801552c:	607b      	str	r3, [r7, #4]
 801552e:	69ba      	ldr	r2, [r7, #24]
 8015530:	693b      	ldr	r3, [r7, #16]
 8015532:	4413      	add	r3, r2
 8015534:	61bb      	str	r3, [r7, #24]
 8015536:	e257      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x06': APPEND_STRING("\\u0006"); break;
 8015538:	4950      	ldr	r1, [pc, #320]	@ (801567c <json_serialize_string+0x59c>)
 801553a:	6878      	ldr	r0, [r7, #4]
 801553c:	f000 fab4 	bl	8015aa8 <append_string>
 8015540:	6138      	str	r0, [r7, #16]
 8015542:	693b      	ldr	r3, [r7, #16]
 8015544:	2b00      	cmp	r3, #0
 8015546:	da02      	bge.n	801554e <json_serialize_string+0x46e>
 8015548:	f04f 33ff 	mov.w	r3, #4294967295
 801554c:	e26b      	b.n	8015a26 <json_serialize_string+0x946>
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d003      	beq.n	801555c <json_serialize_string+0x47c>
 8015554:	693b      	ldr	r3, [r7, #16]
 8015556:	687a      	ldr	r2, [r7, #4]
 8015558:	4413      	add	r3, r2
 801555a:	607b      	str	r3, [r7, #4]
 801555c:	69ba      	ldr	r2, [r7, #24]
 801555e:	693b      	ldr	r3, [r7, #16]
 8015560:	4413      	add	r3, r2
 8015562:	61bb      	str	r3, [r7, #24]
 8015564:	e240      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x07': APPEND_STRING("\\u0007"); break;
 8015566:	4946      	ldr	r1, [pc, #280]	@ (8015680 <json_serialize_string+0x5a0>)
 8015568:	6878      	ldr	r0, [r7, #4]
 801556a:	f000 fa9d 	bl	8015aa8 <append_string>
 801556e:	6138      	str	r0, [r7, #16]
 8015570:	693b      	ldr	r3, [r7, #16]
 8015572:	2b00      	cmp	r3, #0
 8015574:	da02      	bge.n	801557c <json_serialize_string+0x49c>
 8015576:	f04f 33ff 	mov.w	r3, #4294967295
 801557a:	e254      	b.n	8015a26 <json_serialize_string+0x946>
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d003      	beq.n	801558a <json_serialize_string+0x4aa>
 8015582:	693b      	ldr	r3, [r7, #16]
 8015584:	687a      	ldr	r2, [r7, #4]
 8015586:	4413      	add	r3, r2
 8015588:	607b      	str	r3, [r7, #4]
 801558a:	69ba      	ldr	r2, [r7, #24]
 801558c:	693b      	ldr	r3, [r7, #16]
 801558e:	4413      	add	r3, r2
 8015590:	61bb      	str	r3, [r7, #24]
 8015592:	e229      	b.n	80159e8 <json_serialize_string+0x908>
            /* '\x08' duplicate: '\b' */
            /* '\x09' duplicate: '\t' */
            /* '\x0a' duplicate: '\n' */
            case '\x0b': APPEND_STRING("\\u000b"); break;
 8015594:	493b      	ldr	r1, [pc, #236]	@ (8015684 <json_serialize_string+0x5a4>)
 8015596:	6878      	ldr	r0, [r7, #4]
 8015598:	f000 fa86 	bl	8015aa8 <append_string>
 801559c:	6138      	str	r0, [r7, #16]
 801559e:	693b      	ldr	r3, [r7, #16]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	da02      	bge.n	80155aa <json_serialize_string+0x4ca>
 80155a4:	f04f 33ff 	mov.w	r3, #4294967295
 80155a8:	e23d      	b.n	8015a26 <json_serialize_string+0x946>
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d003      	beq.n	80155b8 <json_serialize_string+0x4d8>
 80155b0:	693b      	ldr	r3, [r7, #16]
 80155b2:	687a      	ldr	r2, [r7, #4]
 80155b4:	4413      	add	r3, r2
 80155b6:	607b      	str	r3, [r7, #4]
 80155b8:	69ba      	ldr	r2, [r7, #24]
 80155ba:	693b      	ldr	r3, [r7, #16]
 80155bc:	4413      	add	r3, r2
 80155be:	61bb      	str	r3, [r7, #24]
 80155c0:	e212      	b.n	80159e8 <json_serialize_string+0x908>
            /* '\x0c' duplicate: '\f' */
            /* '\x0d' duplicate: '\r' */
            case '\x0e': APPEND_STRING("\\u000e"); break;
 80155c2:	4931      	ldr	r1, [pc, #196]	@ (8015688 <json_serialize_string+0x5a8>)
 80155c4:	6878      	ldr	r0, [r7, #4]
 80155c6:	f000 fa6f 	bl	8015aa8 <append_string>
 80155ca:	6138      	str	r0, [r7, #16]
 80155cc:	693b      	ldr	r3, [r7, #16]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	da02      	bge.n	80155d8 <json_serialize_string+0x4f8>
 80155d2:	f04f 33ff 	mov.w	r3, #4294967295
 80155d6:	e226      	b.n	8015a26 <json_serialize_string+0x946>
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d003      	beq.n	80155e6 <json_serialize_string+0x506>
 80155de:	693b      	ldr	r3, [r7, #16]
 80155e0:	687a      	ldr	r2, [r7, #4]
 80155e2:	4413      	add	r3, r2
 80155e4:	607b      	str	r3, [r7, #4]
 80155e6:	69ba      	ldr	r2, [r7, #24]
 80155e8:	693b      	ldr	r3, [r7, #16]
 80155ea:	4413      	add	r3, r2
 80155ec:	61bb      	str	r3, [r7, #24]
 80155ee:	e1fb      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x0f': APPEND_STRING("\\u000f"); break;
 80155f0:	4926      	ldr	r1, [pc, #152]	@ (801568c <json_serialize_string+0x5ac>)
 80155f2:	6878      	ldr	r0, [r7, #4]
 80155f4:	f000 fa58 	bl	8015aa8 <append_string>
 80155f8:	6138      	str	r0, [r7, #16]
 80155fa:	693b      	ldr	r3, [r7, #16]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	da02      	bge.n	8015606 <json_serialize_string+0x526>
 8015600:	f04f 33ff 	mov.w	r3, #4294967295
 8015604:	e20f      	b.n	8015a26 <json_serialize_string+0x946>
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d003      	beq.n	8015614 <json_serialize_string+0x534>
 801560c:	693b      	ldr	r3, [r7, #16]
 801560e:	687a      	ldr	r2, [r7, #4]
 8015610:	4413      	add	r3, r2
 8015612:	607b      	str	r3, [r7, #4]
 8015614:	69ba      	ldr	r2, [r7, #24]
 8015616:	693b      	ldr	r3, [r7, #16]
 8015618:	4413      	add	r3, r2
 801561a:	61bb      	str	r3, [r7, #24]
 801561c:	e1e4      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x10': APPEND_STRING("\\u0010"); break;
 801561e:	491c      	ldr	r1, [pc, #112]	@ (8015690 <json_serialize_string+0x5b0>)
 8015620:	6878      	ldr	r0, [r7, #4]
 8015622:	f000 fa41 	bl	8015aa8 <append_string>
 8015626:	6138      	str	r0, [r7, #16]
 8015628:	693b      	ldr	r3, [r7, #16]
 801562a:	2b00      	cmp	r3, #0
 801562c:	da02      	bge.n	8015634 <json_serialize_string+0x554>
 801562e:	f04f 33ff 	mov.w	r3, #4294967295
 8015632:	e1f8      	b.n	8015a26 <json_serialize_string+0x946>
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d003      	beq.n	8015642 <json_serialize_string+0x562>
 801563a:	693b      	ldr	r3, [r7, #16]
 801563c:	687a      	ldr	r2, [r7, #4]
 801563e:	4413      	add	r3, r2
 8015640:	607b      	str	r3, [r7, #4]
 8015642:	69ba      	ldr	r2, [r7, #24]
 8015644:	693b      	ldr	r3, [r7, #16]
 8015646:	4413      	add	r3, r2
 8015648:	61bb      	str	r3, [r7, #24]
 801564a:	e1cd      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x11': APPEND_STRING("\\u0011"); break;
 801564c:	4911      	ldr	r1, [pc, #68]	@ (8015694 <json_serialize_string+0x5b4>)
 801564e:	6878      	ldr	r0, [r7, #4]
 8015650:	f000 fa2a 	bl	8015aa8 <append_string>
 8015654:	6138      	str	r0, [r7, #16]
 8015656:	693b      	ldr	r3, [r7, #16]
 8015658:	2b00      	cmp	r3, #0
 801565a:	da1d      	bge.n	8015698 <json_serialize_string+0x5b8>
 801565c:	f04f 33ff 	mov.w	r3, #4294967295
 8015660:	e1e1      	b.n	8015a26 <json_serialize_string+0x946>
 8015662:	bf00      	nop
 8015664:	080231f0 	.word	0x080231f0
 8015668:	080231f8 	.word	0x080231f8
 801566c:	08023200 	.word	0x08023200
 8015670:	08023208 	.word	0x08023208
 8015674:	08023210 	.word	0x08023210
 8015678:	08023218 	.word	0x08023218
 801567c:	08023220 	.word	0x08023220
 8015680:	08023228 	.word	0x08023228
 8015684:	08023230 	.word	0x08023230
 8015688:	08023238 	.word	0x08023238
 801568c:	08023240 	.word	0x08023240
 8015690:	08023248 	.word	0x08023248
 8015694:	08023250 	.word	0x08023250
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d003      	beq.n	80156a6 <json_serialize_string+0x5c6>
 801569e:	693b      	ldr	r3, [r7, #16]
 80156a0:	687a      	ldr	r2, [r7, #4]
 80156a2:	4413      	add	r3, r2
 80156a4:	607b      	str	r3, [r7, #4]
 80156a6:	69ba      	ldr	r2, [r7, #24]
 80156a8:	693b      	ldr	r3, [r7, #16]
 80156aa:	4413      	add	r3, r2
 80156ac:	61bb      	str	r3, [r7, #24]
 80156ae:	e19b      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x12': APPEND_STRING("\\u0012"); break;
 80156b0:	498f      	ldr	r1, [pc, #572]	@ (80158f0 <json_serialize_string+0x810>)
 80156b2:	6878      	ldr	r0, [r7, #4]
 80156b4:	f000 f9f8 	bl	8015aa8 <append_string>
 80156b8:	6138      	str	r0, [r7, #16]
 80156ba:	693b      	ldr	r3, [r7, #16]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	da02      	bge.n	80156c6 <json_serialize_string+0x5e6>
 80156c0:	f04f 33ff 	mov.w	r3, #4294967295
 80156c4:	e1af      	b.n	8015a26 <json_serialize_string+0x946>
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d003      	beq.n	80156d4 <json_serialize_string+0x5f4>
 80156cc:	693b      	ldr	r3, [r7, #16]
 80156ce:	687a      	ldr	r2, [r7, #4]
 80156d0:	4413      	add	r3, r2
 80156d2:	607b      	str	r3, [r7, #4]
 80156d4:	69ba      	ldr	r2, [r7, #24]
 80156d6:	693b      	ldr	r3, [r7, #16]
 80156d8:	4413      	add	r3, r2
 80156da:	61bb      	str	r3, [r7, #24]
 80156dc:	e184      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x13': APPEND_STRING("\\u0013"); break;
 80156de:	4985      	ldr	r1, [pc, #532]	@ (80158f4 <json_serialize_string+0x814>)
 80156e0:	6878      	ldr	r0, [r7, #4]
 80156e2:	f000 f9e1 	bl	8015aa8 <append_string>
 80156e6:	6138      	str	r0, [r7, #16]
 80156e8:	693b      	ldr	r3, [r7, #16]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	da02      	bge.n	80156f4 <json_serialize_string+0x614>
 80156ee:	f04f 33ff 	mov.w	r3, #4294967295
 80156f2:	e198      	b.n	8015a26 <json_serialize_string+0x946>
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d003      	beq.n	8015702 <json_serialize_string+0x622>
 80156fa:	693b      	ldr	r3, [r7, #16]
 80156fc:	687a      	ldr	r2, [r7, #4]
 80156fe:	4413      	add	r3, r2
 8015700:	607b      	str	r3, [r7, #4]
 8015702:	69ba      	ldr	r2, [r7, #24]
 8015704:	693b      	ldr	r3, [r7, #16]
 8015706:	4413      	add	r3, r2
 8015708:	61bb      	str	r3, [r7, #24]
 801570a:	e16d      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x14': APPEND_STRING("\\u0014"); break;
 801570c:	497a      	ldr	r1, [pc, #488]	@ (80158f8 <json_serialize_string+0x818>)
 801570e:	6878      	ldr	r0, [r7, #4]
 8015710:	f000 f9ca 	bl	8015aa8 <append_string>
 8015714:	6138      	str	r0, [r7, #16]
 8015716:	693b      	ldr	r3, [r7, #16]
 8015718:	2b00      	cmp	r3, #0
 801571a:	da02      	bge.n	8015722 <json_serialize_string+0x642>
 801571c:	f04f 33ff 	mov.w	r3, #4294967295
 8015720:	e181      	b.n	8015a26 <json_serialize_string+0x946>
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d003      	beq.n	8015730 <json_serialize_string+0x650>
 8015728:	693b      	ldr	r3, [r7, #16]
 801572a:	687a      	ldr	r2, [r7, #4]
 801572c:	4413      	add	r3, r2
 801572e:	607b      	str	r3, [r7, #4]
 8015730:	69ba      	ldr	r2, [r7, #24]
 8015732:	693b      	ldr	r3, [r7, #16]
 8015734:	4413      	add	r3, r2
 8015736:	61bb      	str	r3, [r7, #24]
 8015738:	e156      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x15': APPEND_STRING("\\u0015"); break;
 801573a:	4970      	ldr	r1, [pc, #448]	@ (80158fc <json_serialize_string+0x81c>)
 801573c:	6878      	ldr	r0, [r7, #4]
 801573e:	f000 f9b3 	bl	8015aa8 <append_string>
 8015742:	6138      	str	r0, [r7, #16]
 8015744:	693b      	ldr	r3, [r7, #16]
 8015746:	2b00      	cmp	r3, #0
 8015748:	da02      	bge.n	8015750 <json_serialize_string+0x670>
 801574a:	f04f 33ff 	mov.w	r3, #4294967295
 801574e:	e16a      	b.n	8015a26 <json_serialize_string+0x946>
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d003      	beq.n	801575e <json_serialize_string+0x67e>
 8015756:	693b      	ldr	r3, [r7, #16]
 8015758:	687a      	ldr	r2, [r7, #4]
 801575a:	4413      	add	r3, r2
 801575c:	607b      	str	r3, [r7, #4]
 801575e:	69ba      	ldr	r2, [r7, #24]
 8015760:	693b      	ldr	r3, [r7, #16]
 8015762:	4413      	add	r3, r2
 8015764:	61bb      	str	r3, [r7, #24]
 8015766:	e13f      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x16': APPEND_STRING("\\u0016"); break;
 8015768:	4965      	ldr	r1, [pc, #404]	@ (8015900 <json_serialize_string+0x820>)
 801576a:	6878      	ldr	r0, [r7, #4]
 801576c:	f000 f99c 	bl	8015aa8 <append_string>
 8015770:	6138      	str	r0, [r7, #16]
 8015772:	693b      	ldr	r3, [r7, #16]
 8015774:	2b00      	cmp	r3, #0
 8015776:	da02      	bge.n	801577e <json_serialize_string+0x69e>
 8015778:	f04f 33ff 	mov.w	r3, #4294967295
 801577c:	e153      	b.n	8015a26 <json_serialize_string+0x946>
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d003      	beq.n	801578c <json_serialize_string+0x6ac>
 8015784:	693b      	ldr	r3, [r7, #16]
 8015786:	687a      	ldr	r2, [r7, #4]
 8015788:	4413      	add	r3, r2
 801578a:	607b      	str	r3, [r7, #4]
 801578c:	69ba      	ldr	r2, [r7, #24]
 801578e:	693b      	ldr	r3, [r7, #16]
 8015790:	4413      	add	r3, r2
 8015792:	61bb      	str	r3, [r7, #24]
 8015794:	e128      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x17': APPEND_STRING("\\u0017"); break;
 8015796:	495b      	ldr	r1, [pc, #364]	@ (8015904 <json_serialize_string+0x824>)
 8015798:	6878      	ldr	r0, [r7, #4]
 801579a:	f000 f985 	bl	8015aa8 <append_string>
 801579e:	6138      	str	r0, [r7, #16]
 80157a0:	693b      	ldr	r3, [r7, #16]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	da02      	bge.n	80157ac <json_serialize_string+0x6cc>
 80157a6:	f04f 33ff 	mov.w	r3, #4294967295
 80157aa:	e13c      	b.n	8015a26 <json_serialize_string+0x946>
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d003      	beq.n	80157ba <json_serialize_string+0x6da>
 80157b2:	693b      	ldr	r3, [r7, #16]
 80157b4:	687a      	ldr	r2, [r7, #4]
 80157b6:	4413      	add	r3, r2
 80157b8:	607b      	str	r3, [r7, #4]
 80157ba:	69ba      	ldr	r2, [r7, #24]
 80157bc:	693b      	ldr	r3, [r7, #16]
 80157be:	4413      	add	r3, r2
 80157c0:	61bb      	str	r3, [r7, #24]
 80157c2:	e111      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x18': APPEND_STRING("\\u0018"); break;
 80157c4:	4950      	ldr	r1, [pc, #320]	@ (8015908 <json_serialize_string+0x828>)
 80157c6:	6878      	ldr	r0, [r7, #4]
 80157c8:	f000 f96e 	bl	8015aa8 <append_string>
 80157cc:	6138      	str	r0, [r7, #16]
 80157ce:	693b      	ldr	r3, [r7, #16]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	da02      	bge.n	80157da <json_serialize_string+0x6fa>
 80157d4:	f04f 33ff 	mov.w	r3, #4294967295
 80157d8:	e125      	b.n	8015a26 <json_serialize_string+0x946>
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d003      	beq.n	80157e8 <json_serialize_string+0x708>
 80157e0:	693b      	ldr	r3, [r7, #16]
 80157e2:	687a      	ldr	r2, [r7, #4]
 80157e4:	4413      	add	r3, r2
 80157e6:	607b      	str	r3, [r7, #4]
 80157e8:	69ba      	ldr	r2, [r7, #24]
 80157ea:	693b      	ldr	r3, [r7, #16]
 80157ec:	4413      	add	r3, r2
 80157ee:	61bb      	str	r3, [r7, #24]
 80157f0:	e0fa      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x19': APPEND_STRING("\\u0019"); break;
 80157f2:	4946      	ldr	r1, [pc, #280]	@ (801590c <json_serialize_string+0x82c>)
 80157f4:	6878      	ldr	r0, [r7, #4]
 80157f6:	f000 f957 	bl	8015aa8 <append_string>
 80157fa:	6138      	str	r0, [r7, #16]
 80157fc:	693b      	ldr	r3, [r7, #16]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	da02      	bge.n	8015808 <json_serialize_string+0x728>
 8015802:	f04f 33ff 	mov.w	r3, #4294967295
 8015806:	e10e      	b.n	8015a26 <json_serialize_string+0x946>
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d003      	beq.n	8015816 <json_serialize_string+0x736>
 801580e:	693b      	ldr	r3, [r7, #16]
 8015810:	687a      	ldr	r2, [r7, #4]
 8015812:	4413      	add	r3, r2
 8015814:	607b      	str	r3, [r7, #4]
 8015816:	69ba      	ldr	r2, [r7, #24]
 8015818:	693b      	ldr	r3, [r7, #16]
 801581a:	4413      	add	r3, r2
 801581c:	61bb      	str	r3, [r7, #24]
 801581e:	e0e3      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x1a': APPEND_STRING("\\u001a"); break;
 8015820:	493b      	ldr	r1, [pc, #236]	@ (8015910 <json_serialize_string+0x830>)
 8015822:	6878      	ldr	r0, [r7, #4]
 8015824:	f000 f940 	bl	8015aa8 <append_string>
 8015828:	6138      	str	r0, [r7, #16]
 801582a:	693b      	ldr	r3, [r7, #16]
 801582c:	2b00      	cmp	r3, #0
 801582e:	da02      	bge.n	8015836 <json_serialize_string+0x756>
 8015830:	f04f 33ff 	mov.w	r3, #4294967295
 8015834:	e0f7      	b.n	8015a26 <json_serialize_string+0x946>
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d003      	beq.n	8015844 <json_serialize_string+0x764>
 801583c:	693b      	ldr	r3, [r7, #16]
 801583e:	687a      	ldr	r2, [r7, #4]
 8015840:	4413      	add	r3, r2
 8015842:	607b      	str	r3, [r7, #4]
 8015844:	69ba      	ldr	r2, [r7, #24]
 8015846:	693b      	ldr	r3, [r7, #16]
 8015848:	4413      	add	r3, r2
 801584a:	61bb      	str	r3, [r7, #24]
 801584c:	e0cc      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x1b': APPEND_STRING("\\u001b"); break;
 801584e:	4931      	ldr	r1, [pc, #196]	@ (8015914 <json_serialize_string+0x834>)
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f000 f929 	bl	8015aa8 <append_string>
 8015856:	6138      	str	r0, [r7, #16]
 8015858:	693b      	ldr	r3, [r7, #16]
 801585a:	2b00      	cmp	r3, #0
 801585c:	da02      	bge.n	8015864 <json_serialize_string+0x784>
 801585e:	f04f 33ff 	mov.w	r3, #4294967295
 8015862:	e0e0      	b.n	8015a26 <json_serialize_string+0x946>
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d003      	beq.n	8015872 <json_serialize_string+0x792>
 801586a:	693b      	ldr	r3, [r7, #16]
 801586c:	687a      	ldr	r2, [r7, #4]
 801586e:	4413      	add	r3, r2
 8015870:	607b      	str	r3, [r7, #4]
 8015872:	69ba      	ldr	r2, [r7, #24]
 8015874:	693b      	ldr	r3, [r7, #16]
 8015876:	4413      	add	r3, r2
 8015878:	61bb      	str	r3, [r7, #24]
 801587a:	e0b5      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x1c': APPEND_STRING("\\u001c"); break;
 801587c:	4926      	ldr	r1, [pc, #152]	@ (8015918 <json_serialize_string+0x838>)
 801587e:	6878      	ldr	r0, [r7, #4]
 8015880:	f000 f912 	bl	8015aa8 <append_string>
 8015884:	6138      	str	r0, [r7, #16]
 8015886:	693b      	ldr	r3, [r7, #16]
 8015888:	2b00      	cmp	r3, #0
 801588a:	da02      	bge.n	8015892 <json_serialize_string+0x7b2>
 801588c:	f04f 33ff 	mov.w	r3, #4294967295
 8015890:	e0c9      	b.n	8015a26 <json_serialize_string+0x946>
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d003      	beq.n	80158a0 <json_serialize_string+0x7c0>
 8015898:	693b      	ldr	r3, [r7, #16]
 801589a:	687a      	ldr	r2, [r7, #4]
 801589c:	4413      	add	r3, r2
 801589e:	607b      	str	r3, [r7, #4]
 80158a0:	69ba      	ldr	r2, [r7, #24]
 80158a2:	693b      	ldr	r3, [r7, #16]
 80158a4:	4413      	add	r3, r2
 80158a6:	61bb      	str	r3, [r7, #24]
 80158a8:	e09e      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x1d': APPEND_STRING("\\u001d"); break;
 80158aa:	491c      	ldr	r1, [pc, #112]	@ (801591c <json_serialize_string+0x83c>)
 80158ac:	6878      	ldr	r0, [r7, #4]
 80158ae:	f000 f8fb 	bl	8015aa8 <append_string>
 80158b2:	6138      	str	r0, [r7, #16]
 80158b4:	693b      	ldr	r3, [r7, #16]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	da02      	bge.n	80158c0 <json_serialize_string+0x7e0>
 80158ba:	f04f 33ff 	mov.w	r3, #4294967295
 80158be:	e0b2      	b.n	8015a26 <json_serialize_string+0x946>
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d003      	beq.n	80158ce <json_serialize_string+0x7ee>
 80158c6:	693b      	ldr	r3, [r7, #16]
 80158c8:	687a      	ldr	r2, [r7, #4]
 80158ca:	4413      	add	r3, r2
 80158cc:	607b      	str	r3, [r7, #4]
 80158ce:	69ba      	ldr	r2, [r7, #24]
 80158d0:	693b      	ldr	r3, [r7, #16]
 80158d2:	4413      	add	r3, r2
 80158d4:	61bb      	str	r3, [r7, #24]
 80158d6:	e087      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x1e': APPEND_STRING("\\u001e"); break;
 80158d8:	4911      	ldr	r1, [pc, #68]	@ (8015920 <json_serialize_string+0x840>)
 80158da:	6878      	ldr	r0, [r7, #4]
 80158dc:	f000 f8e4 	bl	8015aa8 <append_string>
 80158e0:	6138      	str	r0, [r7, #16]
 80158e2:	693b      	ldr	r3, [r7, #16]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	da1d      	bge.n	8015924 <json_serialize_string+0x844>
 80158e8:	f04f 33ff 	mov.w	r3, #4294967295
 80158ec:	e09b      	b.n	8015a26 <json_serialize_string+0x946>
 80158ee:	bf00      	nop
 80158f0:	08023258 	.word	0x08023258
 80158f4:	08023260 	.word	0x08023260
 80158f8:	08023268 	.word	0x08023268
 80158fc:	08023270 	.word	0x08023270
 8015900:	08023278 	.word	0x08023278
 8015904:	08023280 	.word	0x08023280
 8015908:	08023288 	.word	0x08023288
 801590c:	08023290 	.word	0x08023290
 8015910:	08023298 	.word	0x08023298
 8015914:	080232a0 	.word	0x080232a0
 8015918:	080232a8 	.word	0x080232a8
 801591c:	080232b0 	.word	0x080232b0
 8015920:	080232b8 	.word	0x080232b8
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d003      	beq.n	8015932 <json_serialize_string+0x852>
 801592a:	693b      	ldr	r3, [r7, #16]
 801592c:	687a      	ldr	r2, [r7, #4]
 801592e:	4413      	add	r3, r2
 8015930:	607b      	str	r3, [r7, #4]
 8015932:	69ba      	ldr	r2, [r7, #24]
 8015934:	693b      	ldr	r3, [r7, #16]
 8015936:	4413      	add	r3, r2
 8015938:	61bb      	str	r3, [r7, #24]
 801593a:	e055      	b.n	80159e8 <json_serialize_string+0x908>
            case '\x1f': APPEND_STRING("\\u001f"); break;
 801593c:	493c      	ldr	r1, [pc, #240]	@ (8015a30 <json_serialize_string+0x950>)
 801593e:	6878      	ldr	r0, [r7, #4]
 8015940:	f000 f8b2 	bl	8015aa8 <append_string>
 8015944:	6138      	str	r0, [r7, #16]
 8015946:	693b      	ldr	r3, [r7, #16]
 8015948:	2b00      	cmp	r3, #0
 801594a:	da02      	bge.n	8015952 <json_serialize_string+0x872>
 801594c:	f04f 33ff 	mov.w	r3, #4294967295
 8015950:	e069      	b.n	8015a26 <json_serialize_string+0x946>
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d003      	beq.n	8015960 <json_serialize_string+0x880>
 8015958:	693b      	ldr	r3, [r7, #16]
 801595a:	687a      	ldr	r2, [r7, #4]
 801595c:	4413      	add	r3, r2
 801595e:	607b      	str	r3, [r7, #4]
 8015960:	69ba      	ldr	r2, [r7, #24]
 8015962:	693b      	ldr	r3, [r7, #16]
 8015964:	4413      	add	r3, r2
 8015966:	61bb      	str	r3, [r7, #24]
 8015968:	e03e      	b.n	80159e8 <json_serialize_string+0x908>
            case '/':
                if (parson_escape_slashes) {
 801596a:	4b32      	ldr	r3, [pc, #200]	@ (8015a34 <json_serialize_string+0x954>)
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d016      	beq.n	80159a0 <json_serialize_string+0x8c0>
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8015972:	4931      	ldr	r1, [pc, #196]	@ (8015a38 <json_serialize_string+0x958>)
 8015974:	6878      	ldr	r0, [r7, #4]
 8015976:	f000 f897 	bl	8015aa8 <append_string>
 801597a:	6138      	str	r0, [r7, #16]
 801597c:	693b      	ldr	r3, [r7, #16]
 801597e:	2b00      	cmp	r3, #0
 8015980:	da02      	bge.n	8015988 <json_serialize_string+0x8a8>
 8015982:	f04f 33ff 	mov.w	r3, #4294967295
 8015986:	e04e      	b.n	8015a26 <json_serialize_string+0x946>
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d003      	beq.n	8015996 <json_serialize_string+0x8b6>
 801598e:	693b      	ldr	r3, [r7, #16]
 8015990:	687a      	ldr	r2, [r7, #4]
 8015992:	4413      	add	r3, r2
 8015994:	607b      	str	r3, [r7, #4]
 8015996:	69ba      	ldr	r2, [r7, #24]
 8015998:	693b      	ldr	r3, [r7, #16]
 801599a:	4413      	add	r3, r2
 801599c:	61bb      	str	r3, [r7, #24]
                } else {
                    APPEND_STRING("/");
                }
                break;
 801599e:	e023      	b.n	80159e8 <json_serialize_string+0x908>
                    APPEND_STRING("/");
 80159a0:	4926      	ldr	r1, [pc, #152]	@ (8015a3c <json_serialize_string+0x95c>)
 80159a2:	6878      	ldr	r0, [r7, #4]
 80159a4:	f000 f880 	bl	8015aa8 <append_string>
 80159a8:	6138      	str	r0, [r7, #16]
 80159aa:	693b      	ldr	r3, [r7, #16]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	da02      	bge.n	80159b6 <json_serialize_string+0x8d6>
 80159b0:	f04f 33ff 	mov.w	r3, #4294967295
 80159b4:	e037      	b.n	8015a26 <json_serialize_string+0x946>
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d003      	beq.n	80159c4 <json_serialize_string+0x8e4>
 80159bc:	693b      	ldr	r3, [r7, #16]
 80159be:	687a      	ldr	r2, [r7, #4]
 80159c0:	4413      	add	r3, r2
 80159c2:	607b      	str	r3, [r7, #4]
 80159c4:	69ba      	ldr	r2, [r7, #24]
 80159c6:	693b      	ldr	r3, [r7, #16]
 80159c8:	4413      	add	r3, r2
 80159ca:	61bb      	str	r3, [r7, #24]
                break;
 80159cc:	e00c      	b.n	80159e8 <json_serialize_string+0x908>
            default:
                if (buf != NULL) {
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d005      	beq.n	80159e0 <json_serialize_string+0x900>
                    buf[0] = c;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	7dfa      	ldrb	r2, [r7, #23]
 80159d8:	701a      	strb	r2, [r3, #0]
                    buf += 1;
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	3301      	adds	r3, #1
 80159de:	607b      	str	r3, [r7, #4]
                }
                written_total += 1;
 80159e0:	69bb      	ldr	r3, [r7, #24]
 80159e2:	3301      	adds	r3, #1
 80159e4:	61bb      	str	r3, [r7, #24]
                break;
 80159e6:	bf00      	nop
    for (i = 0; i < len; i++) {
 80159e8:	69fb      	ldr	r3, [r7, #28]
 80159ea:	3301      	adds	r3, #1
 80159ec:	61fb      	str	r3, [r7, #28]
 80159ee:	69fa      	ldr	r2, [r7, #28]
 80159f0:	68bb      	ldr	r3, [r7, #8]
 80159f2:	429a      	cmp	r2, r3
 80159f4:	f4ff ab9e 	bcc.w	8015134 <json_serialize_string+0x54>
        }
    }
    APPEND_STRING("\"");
 80159f8:	4911      	ldr	r1, [pc, #68]	@ (8015a40 <json_serialize_string+0x960>)
 80159fa:	6878      	ldr	r0, [r7, #4]
 80159fc:	f000 f854 	bl	8015aa8 <append_string>
 8015a00:	6138      	str	r0, [r7, #16]
 8015a02:	693b      	ldr	r3, [r7, #16]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	da02      	bge.n	8015a0e <json_serialize_string+0x92e>
 8015a08:	f04f 33ff 	mov.w	r3, #4294967295
 8015a0c:	e00b      	b.n	8015a26 <json_serialize_string+0x946>
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d003      	beq.n	8015a1c <json_serialize_string+0x93c>
 8015a14:	693b      	ldr	r3, [r7, #16]
 8015a16:	687a      	ldr	r2, [r7, #4]
 8015a18:	4413      	add	r3, r2
 8015a1a:	607b      	str	r3, [r7, #4]
 8015a1c:	69ba      	ldr	r2, [r7, #24]
 8015a1e:	693b      	ldr	r3, [r7, #16]
 8015a20:	4413      	add	r3, r2
 8015a22:	61bb      	str	r3, [r7, #24]
    return written_total;
 8015a24:	69bb      	ldr	r3, [r7, #24]
}
 8015a26:	4618      	mov	r0, r3
 8015a28:	3720      	adds	r7, #32
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	bd80      	pop	{r7, pc}
 8015a2e:	bf00      	nop
 8015a30:	080232c0 	.word	0x080232c0
 8015a34:	2000089c 	.word	0x2000089c
 8015a38:	080232c8 	.word	0x080232c8
 8015a3c:	080232cc 	.word	0x080232cc
 8015a40:	080231d0 	.word	0x080231d0

08015a44 <append_indent>:

static int append_indent(char *buf, int level) {
 8015a44:	b580      	push	{r7, lr}
 8015a46:	b086      	sub	sp, #24
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]
 8015a4c:	6039      	str	r1, [r7, #0]
    int i;
    int written = -1, written_total = 0;
 8015a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8015a52:	60fb      	str	r3, [r7, #12]
 8015a54:	2300      	movs	r3, #0
 8015a56:	613b      	str	r3, [r7, #16]
    for (i = 0; i < level; i++) {
 8015a58:	2300      	movs	r3, #0
 8015a5a:	617b      	str	r3, [r7, #20]
 8015a5c:	e018      	b.n	8015a90 <append_indent+0x4c>
        APPEND_STRING("    ");
 8015a5e:	4911      	ldr	r1, [pc, #68]	@ (8015aa4 <append_indent+0x60>)
 8015a60:	6878      	ldr	r0, [r7, #4]
 8015a62:	f000 f821 	bl	8015aa8 <append_string>
 8015a66:	60f8      	str	r0, [r7, #12]
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	da02      	bge.n	8015a74 <append_indent+0x30>
 8015a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8015a72:	e012      	b.n	8015a9a <append_indent+0x56>
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d003      	beq.n	8015a82 <append_indent+0x3e>
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	687a      	ldr	r2, [r7, #4]
 8015a7e:	4413      	add	r3, r2
 8015a80:	607b      	str	r3, [r7, #4]
 8015a82:	693a      	ldr	r2, [r7, #16]
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	4413      	add	r3, r2
 8015a88:	613b      	str	r3, [r7, #16]
    for (i = 0; i < level; i++) {
 8015a8a:	697b      	ldr	r3, [r7, #20]
 8015a8c:	3301      	adds	r3, #1
 8015a8e:	617b      	str	r3, [r7, #20]
 8015a90:	697a      	ldr	r2, [r7, #20]
 8015a92:	683b      	ldr	r3, [r7, #0]
 8015a94:	429a      	cmp	r2, r3
 8015a96:	dbe2      	blt.n	8015a5e <append_indent+0x1a>
    }
    return written_total;
 8015a98:	693b      	ldr	r3, [r7, #16]
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	3718      	adds	r7, #24
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}
 8015aa2:	bf00      	nop
 8015aa4:	080232d0 	.word	0x080232d0

08015aa8 <append_string>:

static int append_string(char *buf, const char *string) {
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b082      	sub	sp, #8
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
 8015ab0:	6039      	str	r1, [r7, #0]
    if (buf == NULL) {
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d104      	bne.n	8015ac2 <append_string+0x1a>
        return (int)strlen(string);
 8015ab8:	6838      	ldr	r0, [r7, #0]
 8015aba:	f7ea fbe7 	bl	800028c <strlen>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	e005      	b.n	8015ace <append_string+0x26>
    }
    return sprintf(buf, "%s", string);
 8015ac2:	683a      	ldr	r2, [r7, #0]
 8015ac4:	4904      	ldr	r1, [pc, #16]	@ (8015ad8 <append_string+0x30>)
 8015ac6:	6878      	ldr	r0, [r7, #4]
 8015ac8:	f008 fc98 	bl	801e3fc <siprintf>
 8015acc:	4603      	mov	r3, r0
}
 8015ace:	4618      	mov	r0, r3
 8015ad0:	3708      	adds	r7, #8
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	bd80      	pop	{r7, pc}
 8015ad6:	bf00      	nop
 8015ad8:	080232d8 	.word	0x080232d8

08015adc <json_parse_string>:
    output_value = json_parse_string_with_comments(file_contents);
    parson_free(file_contents);
    return output_value;
}

JSON_Value * json_parse_string(const char *string) {
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b082      	sub	sp, #8
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d101      	bne.n	8015aee <json_parse_string+0x12>
        return NULL;
 8015aea:	2300      	movs	r3, #0
 8015aec:	e016      	b.n	8015b1c <json_parse_string+0x40>
    }
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	781b      	ldrb	r3, [r3, #0]
 8015af2:	2bef      	cmp	r3, #239	@ 0xef
 8015af4:	d10c      	bne.n	8015b10 <json_parse_string+0x34>
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	3301      	adds	r3, #1
 8015afa:	781b      	ldrb	r3, [r3, #0]
 8015afc:	2bbb      	cmp	r3, #187	@ 0xbb
 8015afe:	d107      	bne.n	8015b10 <json_parse_string+0x34>
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	3302      	adds	r3, #2
 8015b04:	781b      	ldrb	r3, [r3, #0]
 8015b06:	2bbf      	cmp	r3, #191	@ 0xbf
 8015b08:	d102      	bne.n	8015b10 <json_parse_string+0x34>
        string = string + 3; /* Support for UTF-8 BOM */
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	3303      	adds	r3, #3
 8015b0e:	607b      	str	r3, [r7, #4]
    }
    return parse_value((const char**)&string, 0);
 8015b10:	1d3b      	adds	r3, r7, #4
 8015b12:	2100      	movs	r1, #0
 8015b14:	4618      	mov	r0, r3
 8015b16:	f7fe fc5b 	bl	80143d0 <parse_value>
 8015b1a:	4603      	mov	r3, r0
}
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	3708      	adds	r7, #8
 8015b20:	46bd      	mov	sp, r7
 8015b22:	bd80      	pop	{r7, pc}

08015b24 <json_object_get_value>:
    return result;
}

/* JSON Object API */

JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b082      	sub	sp, #8
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
 8015b2c:	6039      	str	r1, [r7, #0]
    if (object == NULL || name == NULL) {
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d002      	beq.n	8015b3a <json_object_get_value+0x16>
 8015b34:	683b      	ldr	r3, [r7, #0]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d101      	bne.n	8015b3e <json_object_get_value+0x1a>
        return NULL;
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	e009      	b.n	8015b52 <json_object_get_value+0x2e>
    }
    return json_object_getn_value(object, name, strlen(name));
 8015b3e:	6838      	ldr	r0, [r7, #0]
 8015b40:	f7ea fba4 	bl	800028c <strlen>
 8015b44:	4603      	mov	r3, r0
 8015b46:	461a      	mov	r2, r3
 8015b48:	6839      	ldr	r1, [r7, #0]
 8015b4a:	6878      	ldr	r0, [r7, #4]
 8015b4c:	f7fd ff73 	bl	8013a36 <json_object_getn_value>
 8015b50:	4603      	mov	r3, r0
}
 8015b52:	4618      	mov	r0, r3
 8015b54:	3708      	adds	r7, #8
 8015b56:	46bd      	mov	sp, r7
 8015b58:	bd80      	pop	{r7, pc}

08015b5a <json_object_get_string>:

const char * json_object_get_string(const JSON_Object *object, const char *name) {
 8015b5a:	b580      	push	{r7, lr}
 8015b5c:	b082      	sub	sp, #8
 8015b5e:	af00      	add	r7, sp, #0
 8015b60:	6078      	str	r0, [r7, #4]
 8015b62:	6039      	str	r1, [r7, #0]
    return json_value_get_string(json_object_get_value(object, name));
 8015b64:	6839      	ldr	r1, [r7, #0]
 8015b66:	6878      	ldr	r0, [r7, #4]
 8015b68:	f7ff ffdc 	bl	8015b24 <json_object_get_value>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	4618      	mov	r0, r3
 8015b70:	f000 f9a5 	bl	8015ebe <json_value_get_string>
 8015b74:	4603      	mov	r3, r0
}
 8015b76:	4618      	mov	r0, r3
 8015b78:	3708      	adds	r7, #8
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	bd80      	pop	{r7, pc}

08015b7e <json_object_get_object>:

double json_object_get_number(const JSON_Object *object, const char *name) {
    return json_value_get_number(json_object_get_value(object, name));
}

JSON_Object * json_object_get_object(const JSON_Object *object, const char *name) {
 8015b7e:	b580      	push	{r7, lr}
 8015b80:	b082      	sub	sp, #8
 8015b82:	af00      	add	r7, sp, #0
 8015b84:	6078      	str	r0, [r7, #4]
 8015b86:	6039      	str	r1, [r7, #0]
    return json_value_get_object(json_object_get_value(object, name));
 8015b88:	6839      	ldr	r1, [r7, #0]
 8015b8a:	6878      	ldr	r0, [r7, #4]
 8015b8c:	f7ff ffca 	bl	8015b24 <json_object_get_value>
 8015b90:	4603      	mov	r3, r0
 8015b92:	4618      	mov	r0, r3
 8015b94:	f000 f95d 	bl	8015e52 <json_value_get_object>
 8015b98:	4603      	mov	r3, r0
}
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	3708      	adds	r7, #8
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	bd80      	pop	{r7, pc}

08015ba2 <json_object_get_array>:

JSON_Array * json_object_get_array(const JSON_Object *object, const char *name) {
 8015ba2:	b580      	push	{r7, lr}
 8015ba4:	b082      	sub	sp, #8
 8015ba6:	af00      	add	r7, sp, #0
 8015ba8:	6078      	str	r0, [r7, #4]
 8015baa:	6039      	str	r1, [r7, #0]
    return json_value_get_array(json_object_get_value(object, name));
 8015bac:	6839      	ldr	r1, [r7, #0]
 8015bae:	6878      	ldr	r0, [r7, #4]
 8015bb0:	f7ff ffb8 	bl	8015b24 <json_object_get_value>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	f000 f95d 	bl	8015e76 <json_value_get_array>
 8015bbc:	4603      	mov	r3, r0
}
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	3708      	adds	r7, #8
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bd80      	pop	{r7, pc}

08015bc6 <json_object_dotget_value>:

int json_object_get_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_get_value(object, name));
}

JSON_Value * json_object_dotget_value(const JSON_Object *object, const char *name) {
 8015bc6:	b580      	push	{r7, lr}
 8015bc8:	b084      	sub	sp, #16
 8015bca:	af00      	add	r7, sp, #0
 8015bcc:	6078      	str	r0, [r7, #4]
 8015bce:	6039      	str	r1, [r7, #0]
    const char *dot_position = strchr(name, '.');
 8015bd0:	212e      	movs	r1, #46	@ 0x2e
 8015bd2:	6838      	ldr	r0, [r7, #0]
 8015bd4:	f008 fd3b 	bl	801e64e <strchr>
 8015bd8:	60f8      	str	r0, [r7, #12]
    if (!dot_position) {
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d105      	bne.n	8015bec <json_object_dotget_value+0x26>
        return json_object_get_value(object, name);
 8015be0:	6839      	ldr	r1, [r7, #0]
 8015be2:	6878      	ldr	r0, [r7, #4]
 8015be4:	f7ff ff9e 	bl	8015b24 <json_object_get_value>
 8015be8:	4603      	mov	r3, r0
 8015bea:	e013      	b.n	8015c14 <json_object_dotget_value+0x4e>
    }
    object = json_value_get_object(json_object_getn_value(object, name, dot_position - name));
 8015bec:	68fa      	ldr	r2, [r7, #12]
 8015bee:	683b      	ldr	r3, [r7, #0]
 8015bf0:	1ad3      	subs	r3, r2, r3
 8015bf2:	461a      	mov	r2, r3
 8015bf4:	6839      	ldr	r1, [r7, #0]
 8015bf6:	6878      	ldr	r0, [r7, #4]
 8015bf8:	f7fd ff1d 	bl	8013a36 <json_object_getn_value>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f000 f927 	bl	8015e52 <json_value_get_object>
 8015c04:	6078      	str	r0, [r7, #4]
    return json_object_dotget_value(object, dot_position + 1);
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	3301      	adds	r3, #1
 8015c0a:	4619      	mov	r1, r3
 8015c0c:	6878      	ldr	r0, [r7, #4]
 8015c0e:	f7ff ffda 	bl	8015bc6 <json_object_dotget_value>
 8015c12:	4603      	mov	r3, r0
}
 8015c14:	4618      	mov	r0, r3
 8015c16:	3710      	adds	r7, #16
 8015c18:	46bd      	mov	sp, r7
 8015c1a:	bd80      	pop	{r7, pc}

08015c1c <json_object_dotget_string>:

const char * json_object_dotget_string(const JSON_Object *object, const char *name) {
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b082      	sub	sp, #8
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
 8015c24:	6039      	str	r1, [r7, #0]
    return json_value_get_string(json_object_dotget_value(object, name));
 8015c26:	6839      	ldr	r1, [r7, #0]
 8015c28:	6878      	ldr	r0, [r7, #4]
 8015c2a:	f7ff ffcc 	bl	8015bc6 <json_object_dotget_value>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	4618      	mov	r0, r3
 8015c32:	f000 f944 	bl	8015ebe <json_value_get_string>
 8015c36:	4603      	mov	r3, r0
}
 8015c38:	4618      	mov	r0, r3
 8015c3a:	3708      	adds	r7, #8
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	bd80      	pop	{r7, pc}

08015c40 <json_object_dotget_number>:

size_t json_object_dotget_string_len(const JSON_Object *object, const char *name) {
    return json_value_get_string_len(json_object_dotget_value(object, name));
}

double json_object_dotget_number(const JSON_Object *object, const char *name) {
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b082      	sub	sp, #8
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
 8015c48:	6039      	str	r1, [r7, #0]
    return json_value_get_number(json_object_dotget_value(object, name));
 8015c4a:	6839      	ldr	r1, [r7, #0]
 8015c4c:	6878      	ldr	r0, [r7, #4]
 8015c4e:	f7ff ffba 	bl	8015bc6 <json_object_dotget_value>
 8015c52:	4603      	mov	r3, r0
 8015c54:	4618      	mov	r0, r3
 8015c56:	f000 f958 	bl	8015f0a <json_value_get_number>
 8015c5a:	eeb0 7a40 	vmov.f32	s14, s0
 8015c5e:	eef0 7a60 	vmov.f32	s15, s1
}
 8015c62:	eeb0 0a47 	vmov.f32	s0, s14
 8015c66:	eef0 0a67 	vmov.f32	s1, s15
 8015c6a:	3708      	adds	r7, #8
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}

08015c70 <json_object_dotget_array>:

JSON_Object * json_object_dotget_object(const JSON_Object *object, const char *name) {
    return json_value_get_object(json_object_dotget_value(object, name));
}

JSON_Array * json_object_dotget_array(const JSON_Object *object, const char *name) {
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b082      	sub	sp, #8
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
 8015c78:	6039      	str	r1, [r7, #0]
    return json_value_get_array(json_object_dotget_value(object, name));
 8015c7a:	6839      	ldr	r1, [r7, #0]
 8015c7c:	6878      	ldr	r0, [r7, #4]
 8015c7e:	f7ff ffa2 	bl	8015bc6 <json_object_dotget_value>
 8015c82:	4603      	mov	r3, r0
 8015c84:	4618      	mov	r0, r3
 8015c86:	f000 f8f6 	bl	8015e76 <json_value_get_array>
 8015c8a:	4603      	mov	r3, r0
}
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	3708      	adds	r7, #8
 8015c90:	46bd      	mov	sp, r7
 8015c92:	bd80      	pop	{r7, pc}

08015c94 <json_object_get_count>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_dotget_value(object, name));
}

size_t json_object_get_count(const JSON_Object *object) {
 8015c94:	b480      	push	{r7}
 8015c96:	b083      	sub	sp, #12
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d002      	beq.n	8015ca8 <json_object_get_count+0x14>
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	699b      	ldr	r3, [r3, #24]
 8015ca6:	e000      	b.n	8015caa <json_object_get_count+0x16>
 8015ca8:	2300      	movs	r3, #0
}
 8015caa:	4618      	mov	r0, r3
 8015cac:	370c      	adds	r7, #12
 8015cae:	46bd      	mov	sp, r7
 8015cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb4:	4770      	bx	lr

08015cb6 <json_object_get_name>:

const char * json_object_get_name(const JSON_Object *object, size_t index) {
 8015cb6:	b580      	push	{r7, lr}
 8015cb8:	b082      	sub	sp, #8
 8015cba:	af00      	add	r7, sp, #0
 8015cbc:	6078      	str	r0, [r7, #4]
 8015cbe:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d006      	beq.n	8015cd4 <json_object_get_name+0x1e>
 8015cc6:	6878      	ldr	r0, [r7, #4]
 8015cc8:	f7ff ffe4 	bl	8015c94 <json_object_get_count>
 8015ccc:	4602      	mov	r2, r0
 8015cce:	683b      	ldr	r3, [r7, #0]
 8015cd0:	4293      	cmp	r3, r2
 8015cd2:	d301      	bcc.n	8015cd8 <json_object_get_name+0x22>
        return NULL;
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	e005      	b.n	8015ce4 <json_object_get_name+0x2e>
    }
    return object->names[index];
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	68da      	ldr	r2, [r3, #12]
 8015cdc:	683b      	ldr	r3, [r7, #0]
 8015cde:	009b      	lsls	r3, r3, #2
 8015ce0:	4413      	add	r3, r2
 8015ce2:	681b      	ldr	r3, [r3, #0]
}
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	3708      	adds	r7, #8
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bd80      	pop	{r7, pc}

08015cec <json_object_get_value_at>:

JSON_Value * json_object_get_value_at(const JSON_Object *object, size_t index) {
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b082      	sub	sp, #8
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
 8015cf4:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d006      	beq.n	8015d0a <json_object_get_value_at+0x1e>
 8015cfc:	6878      	ldr	r0, [r7, #4]
 8015cfe:	f7ff ffc9 	bl	8015c94 <json_object_get_count>
 8015d02:	4602      	mov	r2, r0
 8015d04:	683b      	ldr	r3, [r7, #0]
 8015d06:	4293      	cmp	r3, r2
 8015d08:	d301      	bcc.n	8015d0e <json_object_get_value_at+0x22>
        return NULL;
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	e005      	b.n	8015d1a <json_object_get_value_at+0x2e>
    }
    return object->values[index];
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	691a      	ldr	r2, [r3, #16]
 8015d12:	683b      	ldr	r3, [r7, #0]
 8015d14:	009b      	lsls	r3, r3, #2
 8015d16:	4413      	add	r3, r2
 8015d18:	681b      	ldr	r3, [r3, #0]
}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	3708      	adds	r7, #8
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}

08015d22 <json_object_get_wrapping_value>:

JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {
 8015d22:	b480      	push	{r7}
 8015d24:	b083      	sub	sp, #12
 8015d26:	af00      	add	r7, sp, #0
 8015d28:	6078      	str	r0, [r7, #4]
    if (!object) {
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d101      	bne.n	8015d34 <json_object_get_wrapping_value+0x12>
        return NULL;
 8015d30:	2300      	movs	r3, #0
 8015d32:	e001      	b.n	8015d38 <json_object_get_wrapping_value+0x16>
    }
    return object->wrapping_value;
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	681b      	ldr	r3, [r3, #0]
}
 8015d38:	4618      	mov	r0, r3
 8015d3a:	370c      	adds	r7, #12
 8015d3c:	46bd      	mov	sp, r7
 8015d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d42:	4770      	bx	lr

08015d44 <json_object_has_value>:

int json_object_has_value (const JSON_Object *object, const char *name) {
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b082      	sub	sp, #8
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
 8015d4c:	6039      	str	r1, [r7, #0]
    return json_object_get_value(object, name) != NULL;
 8015d4e:	6839      	ldr	r1, [r7, #0]
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	f7ff fee7 	bl	8015b24 <json_object_get_value>
 8015d56:	4603      	mov	r3, r0
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	bf14      	ite	ne
 8015d5c:	2301      	movne	r3, #1
 8015d5e:	2300      	moveq	r3, #0
 8015d60:	b2db      	uxtb	r3, r3
}
 8015d62:	4618      	mov	r0, r3
 8015d64:	3708      	adds	r7, #8
 8015d66:	46bd      	mov	sp, r7
 8015d68:	bd80      	pop	{r7, pc}

08015d6a <json_object_dothas_value>:
int json_object_has_value_of_type(const JSON_Object *object, const char *name, JSON_Value_Type type) {
    JSON_Value *val = json_object_get_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

int json_object_dothas_value (const JSON_Object *object, const char *name) {
 8015d6a:	b580      	push	{r7, lr}
 8015d6c:	b082      	sub	sp, #8
 8015d6e:	af00      	add	r7, sp, #0
 8015d70:	6078      	str	r0, [r7, #4]
 8015d72:	6039      	str	r1, [r7, #0]
    return json_object_dotget_value(object, name) != NULL;
 8015d74:	6839      	ldr	r1, [r7, #0]
 8015d76:	6878      	ldr	r0, [r7, #4]
 8015d78:	f7ff ff25 	bl	8015bc6 <json_object_dotget_value>
 8015d7c:	4603      	mov	r3, r0
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	bf14      	ite	ne
 8015d82:	2301      	movne	r3, #1
 8015d84:	2300      	moveq	r3, #0
 8015d86:	b2db      	uxtb	r3, r3
}
 8015d88:	4618      	mov	r0, r3
 8015d8a:	3708      	adds	r7, #8
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}

08015d90 <json_array_get_value>:
    JSON_Value *val = json_object_dotget_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b082      	sub	sp, #8
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
 8015d98:	6039      	str	r1, [r7, #0]
    if (array == NULL || index >= json_array_get_count(array)) {
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d006      	beq.n	8015dae <json_array_get_value+0x1e>
 8015da0:	6878      	ldr	r0, [r7, #4]
 8015da2:	f000 f822 	bl	8015dea <json_array_get_count>
 8015da6:	4602      	mov	r2, r0
 8015da8:	683b      	ldr	r3, [r7, #0]
 8015daa:	4293      	cmp	r3, r2
 8015dac:	d301      	bcc.n	8015db2 <json_array_get_value+0x22>
        return NULL;
 8015dae:	2300      	movs	r3, #0
 8015db0:	e005      	b.n	8015dbe <json_array_get_value+0x2e>
    }
    return array->items[index];
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	685a      	ldr	r2, [r3, #4]
 8015db6:	683b      	ldr	r3, [r7, #0]
 8015db8:	009b      	lsls	r3, r3, #2
 8015dba:	4413      	add	r3, r2
 8015dbc:	681b      	ldr	r3, [r3, #0]
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	3708      	adds	r7, #8
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bd80      	pop	{r7, pc}

08015dc6 <json_array_get_object>:

double json_array_get_number(const JSON_Array *array, size_t index) {
    return json_value_get_number(json_array_get_value(array, index));
}

JSON_Object * json_array_get_object(const JSON_Array *array, size_t index) {
 8015dc6:	b580      	push	{r7, lr}
 8015dc8:	b082      	sub	sp, #8
 8015dca:	af00      	add	r7, sp, #0
 8015dcc:	6078      	str	r0, [r7, #4]
 8015dce:	6039      	str	r1, [r7, #0]
    return json_value_get_object(json_array_get_value(array, index));
 8015dd0:	6839      	ldr	r1, [r7, #0]
 8015dd2:	6878      	ldr	r0, [r7, #4]
 8015dd4:	f7ff ffdc 	bl	8015d90 <json_array_get_value>
 8015dd8:	4603      	mov	r3, r0
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f000 f839 	bl	8015e52 <json_value_get_object>
 8015de0:	4603      	mov	r3, r0
}
 8015de2:	4618      	mov	r0, r3
 8015de4:	3708      	adds	r7, #8
 8015de6:	46bd      	mov	sp, r7
 8015de8:	bd80      	pop	{r7, pc}

08015dea <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 8015dea:	b480      	push	{r7}
 8015dec:	b083      	sub	sp, #12
 8015dee:	af00      	add	r7, sp, #0
 8015df0:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d002      	beq.n	8015dfe <json_array_get_count+0x14>
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	689b      	ldr	r3, [r3, #8]
 8015dfc:	e000      	b.n	8015e00 <json_array_get_count+0x16>
 8015dfe:	2300      	movs	r3, #0
}
 8015e00:	4618      	mov	r0, r3
 8015e02:	370c      	adds	r7, #12
 8015e04:	46bd      	mov	sp, r7
 8015e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0a:	4770      	bx	lr

08015e0c <json_array_get_wrapping_value>:

JSON_Value * json_array_get_wrapping_value(const JSON_Array *array) {
 8015e0c:	b480      	push	{r7}
 8015e0e:	b083      	sub	sp, #12
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	6078      	str	r0, [r7, #4]
    if (!array) {
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d101      	bne.n	8015e1e <json_array_get_wrapping_value+0x12>
        return NULL;
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	e001      	b.n	8015e22 <json_array_get_wrapping_value+0x16>
    }
    return array->wrapping_value;
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	681b      	ldr	r3, [r3, #0]
}
 8015e22:	4618      	mov	r0, r3
 8015e24:	370c      	adds	r7, #12
 8015e26:	46bd      	mov	sp, r7
 8015e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2c:	4770      	bx	lr

08015e2e <json_value_get_type>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 8015e2e:	b480      	push	{r7}
 8015e30:	b083      	sub	sp, #12
 8015e32:	af00      	add	r7, sp, #0
 8015e34:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d002      	beq.n	8015e42 <json_value_get_type+0x14>
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	685b      	ldr	r3, [r3, #4]
 8015e40:	e001      	b.n	8015e46 <json_value_get_type+0x18>
 8015e42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015e46:	4618      	mov	r0, r3
 8015e48:	370c      	adds	r7, #12
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e50:	4770      	bx	lr

08015e52 <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
 8015e52:	b580      	push	{r7, lr}
 8015e54:	b082      	sub	sp, #8
 8015e56:	af00      	add	r7, sp, #0
 8015e58:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8015e5a:	6878      	ldr	r0, [r7, #4]
 8015e5c:	f7ff ffe7 	bl	8015e2e <json_value_get_type>
 8015e60:	4603      	mov	r3, r0
 8015e62:	2b04      	cmp	r3, #4
 8015e64:	d102      	bne.n	8015e6c <json_value_get_object+0x1a>
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	689b      	ldr	r3, [r3, #8]
 8015e6a:	e000      	b.n	8015e6e <json_value_get_object+0x1c>
 8015e6c:	2300      	movs	r3, #0
}
 8015e6e:	4618      	mov	r0, r3
 8015e70:	3708      	adds	r7, #8
 8015e72:	46bd      	mov	sp, r7
 8015e74:	bd80      	pop	{r7, pc}

08015e76 <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
 8015e76:	b580      	push	{r7, lr}
 8015e78:	b082      	sub	sp, #8
 8015e7a:	af00      	add	r7, sp, #0
 8015e7c:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8015e7e:	6878      	ldr	r0, [r7, #4]
 8015e80:	f7ff ffd5 	bl	8015e2e <json_value_get_type>
 8015e84:	4603      	mov	r3, r0
 8015e86:	2b05      	cmp	r3, #5
 8015e88:	d102      	bne.n	8015e90 <json_value_get_array+0x1a>
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	689b      	ldr	r3, [r3, #8]
 8015e8e:	e000      	b.n	8015e92 <json_value_get_array+0x1c>
 8015e90:	2300      	movs	r3, #0
}
 8015e92:	4618      	mov	r0, r3
 8015e94:	3708      	adds	r7, #8
 8015e96:	46bd      	mov	sp, r7
 8015e98:	bd80      	pop	{r7, pc}

08015e9a <json_value_get_string_desc>:

static const JSON_String * json_value_get_string_desc(const JSON_Value *value) {
 8015e9a:	b580      	push	{r7, lr}
 8015e9c:	b082      	sub	sp, #8
 8015e9e:	af00      	add	r7, sp, #0
 8015ea0:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONString ? &value->value.string : NULL;
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f7ff ffc3 	bl	8015e2e <json_value_get_type>
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	2b02      	cmp	r3, #2
 8015eac:	d102      	bne.n	8015eb4 <json_value_get_string_desc+0x1a>
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	3308      	adds	r3, #8
 8015eb2:	e000      	b.n	8015eb6 <json_value_get_string_desc+0x1c>
 8015eb4:	2300      	movs	r3, #0
}
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	3708      	adds	r7, #8
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	bd80      	pop	{r7, pc}

08015ebe <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 8015ebe:	b580      	push	{r7, lr}
 8015ec0:	b084      	sub	sp, #16
 8015ec2:	af00      	add	r7, sp, #0
 8015ec4:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 8015ec6:	6878      	ldr	r0, [r7, #4]
 8015ec8:	f7ff ffe7 	bl	8015e9a <json_value_get_string_desc>
 8015ecc:	60f8      	str	r0, [r7, #12]
    return str ? str->chars : NULL;
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d002      	beq.n	8015eda <json_value_get_string+0x1c>
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	e000      	b.n	8015edc <json_value_get_string+0x1e>
 8015eda:	2300      	movs	r3, #0
}
 8015edc:	4618      	mov	r0, r3
 8015ede:	3710      	adds	r7, #16
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	bd80      	pop	{r7, pc}

08015ee4 <json_value_get_string_len>:

size_t json_value_get_string_len(const JSON_Value *value) {
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b084      	sub	sp, #16
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 8015eec:	6878      	ldr	r0, [r7, #4]
 8015eee:	f7ff ffd4 	bl	8015e9a <json_value_get_string_desc>
 8015ef2:	60f8      	str	r0, [r7, #12]
    return str ? str->length : 0;
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d002      	beq.n	8015f00 <json_value_get_string_len+0x1c>
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	685b      	ldr	r3, [r3, #4]
 8015efe:	e000      	b.n	8015f02 <json_value_get_string_len+0x1e>
 8015f00:	2300      	movs	r3, #0
}
 8015f02:	4618      	mov	r0, r3
 8015f04:	3710      	adds	r7, #16
 8015f06:	46bd      	mov	sp, r7
 8015f08:	bd80      	pop	{r7, pc}

08015f0a <json_value_get_number>:

double json_value_get_number(const JSON_Value *value) {
 8015f0a:	b580      	push	{r7, lr}
 8015f0c:	b082      	sub	sp, #8
 8015f0e:	af00      	add	r7, sp, #0
 8015f10:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 8015f12:	6878      	ldr	r0, [r7, #4]
 8015f14:	f7ff ff8b 	bl	8015e2e <json_value_get_type>
 8015f18:	4603      	mov	r3, r0
 8015f1a:	2b03      	cmp	r3, #3
 8015f1c:	d103      	bne.n	8015f26 <json_value_get_number+0x1c>
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8015f24:	e003      	b.n	8015f2e <json_value_get_number+0x24>
 8015f26:	f04f 0200 	mov.w	r2, #0
 8015f2a:	f04f 0300 	mov.w	r3, #0
 8015f2e:	ec43 2b17 	vmov	d7, r2, r3
}
 8015f32:	eeb0 0a47 	vmov.f32	s0, s14
 8015f36:	eef0 0a67 	vmov.f32	s1, s15
 8015f3a:	3708      	adds	r7, #8
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	bd80      	pop	{r7, pc}

08015f40 <json_value_get_boolean>:

int json_value_get_boolean(const JSON_Value *value) {
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b082      	sub	sp, #8
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 8015f48:	6878      	ldr	r0, [r7, #4]
 8015f4a:	f7ff ff70 	bl	8015e2e <json_value_get_type>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	2b06      	cmp	r3, #6
 8015f52:	d102      	bne.n	8015f5a <json_value_get_boolean+0x1a>
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	689b      	ldr	r3, [r3, #8]
 8015f58:	e001      	b.n	8015f5e <json_value_get_boolean+0x1e>
 8015f5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015f5e:	4618      	mov	r0, r3
 8015f60:	3708      	adds	r7, #8
 8015f62:	46bd      	mov	sp, r7
 8015f64:	bd80      	pop	{r7, pc}

08015f66 <json_value_get_parent>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
 8015f66:	b480      	push	{r7}
 8015f68:	b083      	sub	sp, #12
 8015f6a:	af00      	add	r7, sp, #0
 8015f6c:	6078      	str	r0, [r7, #4]
    return value ? value->parent : NULL;
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d002      	beq.n	8015f7a <json_value_get_parent+0x14>
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	e000      	b.n	8015f7c <json_value_get_parent+0x16>
 8015f7a:	2300      	movs	r3, #0
}
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	370c      	adds	r7, #12
 8015f80:	46bd      	mov	sp, r7
 8015f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f86:	4770      	bx	lr

08015f88 <json_value_free>:

void json_value_free(JSON_Value *value) {
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b082      	sub	sp, #8
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
 8015f90:	6878      	ldr	r0, [r7, #4]
 8015f92:	f7ff ff4c 	bl	8015e2e <json_value_get_type>
 8015f96:	4603      	mov	r3, r0
 8015f98:	2b05      	cmp	r3, #5
 8015f9a:	d012      	beq.n	8015fc2 <json_value_free+0x3a>
 8015f9c:	2b05      	cmp	r3, #5
 8015f9e:	dc16      	bgt.n	8015fce <json_value_free+0x46>
 8015fa0:	2b02      	cmp	r3, #2
 8015fa2:	d007      	beq.n	8015fb4 <json_value_free+0x2c>
 8015fa4:	2b04      	cmp	r3, #4
 8015fa6:	d112      	bne.n	8015fce <json_value_free+0x46>
        case JSONObject:
            json_object_free(value->value.object);
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	689b      	ldr	r3, [r3, #8]
 8015fac:	4618      	mov	r0, r3
 8015fae:	f7fd fed5 	bl	8013d5c <json_object_free>
            break;
 8015fb2:	e00d      	b.n	8015fd0 <json_value_free+0x48>
        case JSONString:
            parson_free(value->value.string.chars);
 8015fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8015fe0 <json_value_free+0x58>)
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	687a      	ldr	r2, [r7, #4]
 8015fba:	6892      	ldr	r2, [r2, #8]
 8015fbc:	4610      	mov	r0, r2
 8015fbe:	4798      	blx	r3
            break;
 8015fc0:	e006      	b.n	8015fd0 <json_value_free+0x48>
        case JSONArray:
            json_array_free(value->value.array);
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	689b      	ldr	r3, [r3, #8]
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f7fd ff72 	bl	8013eb0 <json_array_free>
            break;
 8015fcc:	e000      	b.n	8015fd0 <json_value_free+0x48>
        default:
            break;
 8015fce:	bf00      	nop
    }
    parson_free(value);
 8015fd0:	4b03      	ldr	r3, [pc, #12]	@ (8015fe0 <json_value_free+0x58>)
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	6878      	ldr	r0, [r7, #4]
 8015fd6:	4798      	blx	r3
}
 8015fd8:	bf00      	nop
 8015fda:	3708      	adds	r7, #8
 8015fdc:	46bd      	mov	sp, r7
 8015fde:	bd80      	pop	{r7, pc}
 8015fe0:	20000898 	.word	0x20000898

08015fe4 <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b082      	sub	sp, #8
 8015fe8:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8015fea:	4b12      	ldr	r3, [pc, #72]	@ (8016034 <json_value_init_object+0x50>)
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	2010      	movs	r0, #16
 8015ff0:	4798      	blx	r3
 8015ff2:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d101      	bne.n	8015ffe <json_value_init_object+0x1a>
        return NULL;
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	e016      	b.n	801602c <json_value_init_object+0x48>
    }
    new_value->parent = NULL;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	2200      	movs	r2, #0
 8016002:	601a      	str	r2, [r3, #0]
    new_value->type = JSONObject;
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	2204      	movs	r2, #4
 8016008:	605a      	str	r2, [r3, #4]
    new_value->value.object = json_object_make(new_value);
 801600a:	6878      	ldr	r0, [r7, #4]
 801600c:	f7fd fa66 	bl	80134dc <json_object_make>
 8016010:	4602      	mov	r2, r0
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	689b      	ldr	r3, [r3, #8]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d105      	bne.n	801602a <json_value_init_object+0x46>
        parson_free(new_value);
 801601e:	4b06      	ldr	r3, [pc, #24]	@ (8016038 <json_value_init_object+0x54>)
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	6878      	ldr	r0, [r7, #4]
 8016024:	4798      	blx	r3
        return NULL;
 8016026:	2300      	movs	r3, #0
 8016028:	e000      	b.n	801602c <json_value_init_object+0x48>
    }
    return new_value;
 801602a:	687b      	ldr	r3, [r7, #4]
}
 801602c:	4618      	mov	r0, r3
 801602e:	3708      	adds	r7, #8
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}
 8016034:	20000894 	.word	0x20000894
 8016038:	20000898 	.word	0x20000898

0801603c <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
 801603c:	b580      	push	{r7, lr}
 801603e:	b082      	sub	sp, #8
 8016040:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8016042:	4b12      	ldr	r3, [pc, #72]	@ (801608c <json_value_init_array+0x50>)
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	2010      	movs	r0, #16
 8016048:	4798      	blx	r3
 801604a:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d101      	bne.n	8016056 <json_value_init_array+0x1a>
        return NULL;
 8016052:	2300      	movs	r3, #0
 8016054:	e016      	b.n	8016084 <json_value_init_array+0x48>
    }
    new_value->parent = NULL;
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	2200      	movs	r2, #0
 801605a:	601a      	str	r2, [r3, #0]
    new_value->type = JSONArray;
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	2205      	movs	r2, #5
 8016060:	605a      	str	r2, [r3, #4]
    new_value->value.array = json_array_make(new_value);
 8016062:	6878      	ldr	r0, [r7, #4]
 8016064:	f7fd fe8e 	bl	8013d84 <json_array_make>
 8016068:	4602      	mov	r2, r0
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	609a      	str	r2, [r3, #8]
    if (!new_value->value.array) {
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	689b      	ldr	r3, [r3, #8]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d105      	bne.n	8016082 <json_value_init_array+0x46>
        parson_free(new_value);
 8016076:	4b06      	ldr	r3, [pc, #24]	@ (8016090 <json_value_init_array+0x54>)
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	6878      	ldr	r0, [r7, #4]
 801607c:	4798      	blx	r3
        return NULL;
 801607e:	2300      	movs	r3, #0
 8016080:	e000      	b.n	8016084 <json_value_init_array+0x48>
    }
    return new_value;
 8016082:	687b      	ldr	r3, [r7, #4]
}
 8016084:	4618      	mov	r0, r3
 8016086:	3708      	adds	r7, #8
 8016088:	46bd      	mov	sp, r7
 801608a:	bd80      	pop	{r7, pc}
 801608c:	20000894 	.word	0x20000894
 8016090:	20000898 	.word	0x20000898

08016094 <json_value_init_string>:

JSON_Value * json_value_init_string(const char *string) {
 8016094:	b580      	push	{r7, lr}
 8016096:	b082      	sub	sp, #8
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d101      	bne.n	80160a6 <json_value_init_string+0x12>
        return NULL;
 80160a2:	2300      	movs	r3, #0
 80160a4:	e008      	b.n	80160b8 <json_value_init_string+0x24>
    }
    return json_value_init_string_with_len(string, strlen(string));
 80160a6:	6878      	ldr	r0, [r7, #4]
 80160a8:	f7ea f8f0 	bl	800028c <strlen>
 80160ac:	4603      	mov	r3, r0
 80160ae:	4619      	mov	r1, r3
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f000 f805 	bl	80160c0 <json_value_init_string_with_len>
 80160b6:	4603      	mov	r3, r0
}
 80160b8:	4618      	mov	r0, r3
 80160ba:	3708      	adds	r7, #8
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}

080160c0 <json_value_init_string_with_len>:

JSON_Value * json_value_init_string_with_len(const char *string, size_t length) {
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b084      	sub	sp, #16
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	6078      	str	r0, [r7, #4]
 80160c8:	6039      	str	r1, [r7, #0]
    char *copy = NULL;
 80160ca:	2300      	movs	r3, #0
 80160cc:	60fb      	str	r3, [r7, #12]
    JSON_Value *value;
    if (string == NULL) {
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d101      	bne.n	80160d8 <json_value_init_string_with_len+0x18>
        return NULL;
 80160d4:	2300      	movs	r3, #0
 80160d6:	e01f      	b.n	8016118 <json_value_init_string_with_len+0x58>
    }
    if (!is_valid_utf8(string, length)) {
 80160d8:	6839      	ldr	r1, [r7, #0]
 80160da:	6878      	ldr	r0, [r7, #4]
 80160dc:	f7fd f96c 	bl	80133b8 <is_valid_utf8>
 80160e0:	4603      	mov	r3, r0
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d101      	bne.n	80160ea <json_value_init_string_with_len+0x2a>
        return NULL;
 80160e6:	2300      	movs	r3, #0
 80160e8:	e016      	b.n	8016118 <json_value_init_string_with_len+0x58>
    }
    copy = parson_strndup(string, length);
 80160ea:	6839      	ldr	r1, [r7, #0]
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	f7fc ffad 	bl	801304c <parson_strndup>
 80160f2:	60f8      	str	r0, [r7, #12]
    if (copy == NULL) {
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d101      	bne.n	80160fe <json_value_init_string_with_len+0x3e>
        return NULL;
 80160fa:	2300      	movs	r3, #0
 80160fc:	e00c      	b.n	8016118 <json_value_init_string_with_len+0x58>
    }
    value = json_value_init_string_no_copy(copy, length);
 80160fe:	6839      	ldr	r1, [r7, #0]
 8016100:	68f8      	ldr	r0, [r7, #12]
 8016102:	f7fd fefd 	bl	8013f00 <json_value_init_string_no_copy>
 8016106:	60b8      	str	r0, [r7, #8]
    if (value == NULL) {
 8016108:	68bb      	ldr	r3, [r7, #8]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d103      	bne.n	8016116 <json_value_init_string_with_len+0x56>
        parson_free(copy);
 801610e:	4b04      	ldr	r3, [pc, #16]	@ (8016120 <json_value_init_string_with_len+0x60>)
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	68f8      	ldr	r0, [r7, #12]
 8016114:	4798      	blx	r3
    }
    return value;
 8016116:	68bb      	ldr	r3, [r7, #8]
}
 8016118:	4618      	mov	r0, r3
 801611a:	3710      	adds	r7, #16
 801611c:	46bd      	mov	sp, r7
 801611e:	bd80      	pop	{r7, pc}
 8016120:	20000898 	.word	0x20000898

08016124 <json_value_init_number>:

JSON_Value * json_value_init_number(double number) {
 8016124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016126:	b085      	sub	sp, #20
 8016128:	af00      	add	r7, sp, #0
 801612a:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *new_value = NULL;
 801612e:	2300      	movs	r3, #0
 8016130:	60fb      	str	r3, [r7, #12]
    if (IS_NUMBER_INVALID(number)) {
 8016132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016136:	e9d7 0100 	ldrd	r0, r1, [r7]
 801613a:	f7ea fd05 	bl	8000b48 <__aeabi_dcmpun>
 801613e:	4603      	mov	r3, r0
 8016140:	2b00      	cmp	r3, #0
 8016142:	d121      	bne.n	8016188 <json_value_init_number+0x64>
 8016144:	683c      	ldr	r4, [r7, #0]
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 801614c:	2301      	movs	r3, #1
 801614e:	461e      	mov	r6, r3
 8016150:	f04f 32ff 	mov.w	r2, #4294967295
 8016154:	4b1a      	ldr	r3, [pc, #104]	@ (80161c0 <json_value_init_number+0x9c>)
 8016156:	4620      	mov	r0, r4
 8016158:	4629      	mov	r1, r5
 801615a:	f7ea fcf5 	bl	8000b48 <__aeabi_dcmpun>
 801615e:	4603      	mov	r3, r0
 8016160:	2b00      	cmp	r3, #0
 8016162:	d10b      	bne.n	801617c <json_value_init_number+0x58>
 8016164:	f04f 32ff 	mov.w	r2, #4294967295
 8016168:	4b15      	ldr	r3, [pc, #84]	@ (80161c0 <json_value_init_number+0x9c>)
 801616a:	4620      	mov	r0, r4
 801616c:	4629      	mov	r1, r5
 801616e:	f7ea fccd 	bl	8000b0c <__aeabi_dcmple>
 8016172:	4603      	mov	r3, r0
 8016174:	2b00      	cmp	r3, #0
 8016176:	d101      	bne.n	801617c <json_value_init_number+0x58>
 8016178:	2300      	movs	r3, #0
 801617a:	461e      	mov	r6, r3
 801617c:	b2f3      	uxtb	r3, r6
 801617e:	f083 0301 	eor.w	r3, r3, #1
 8016182:	b2db      	uxtb	r3, r3
 8016184:	2b00      	cmp	r3, #0
 8016186:	d001      	beq.n	801618c <json_value_init_number+0x68>
        return NULL;
 8016188:	2300      	movs	r3, #0
 801618a:	e015      	b.n	80161b8 <json_value_init_number+0x94>
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801618c:	4b0d      	ldr	r3, [pc, #52]	@ (80161c4 <json_value_init_number+0xa0>)
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	2010      	movs	r0, #16
 8016192:	4798      	blx	r3
 8016194:	60f8      	str	r0, [r7, #12]
    if (new_value == NULL) {
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d101      	bne.n	80161a0 <json_value_init_number+0x7c>
        return NULL;
 801619c:	2300      	movs	r3, #0
 801619e:	e00b      	b.n	80161b8 <json_value_init_number+0x94>
    }
    new_value->parent = NULL;
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	2200      	movs	r2, #0
 80161a4:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNumber;
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	2203      	movs	r2, #3
 80161aa:	605a      	str	r2, [r3, #4]
    new_value->value.number = number;
 80161ac:	68f9      	ldr	r1, [r7, #12]
 80161ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80161b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    return new_value;
 80161b6:	68fb      	ldr	r3, [r7, #12]
}
 80161b8:	4618      	mov	r0, r3
 80161ba:	3714      	adds	r7, #20
 80161bc:	46bd      	mov	sp, r7
 80161be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161c0:	7fefffff 	.word	0x7fefffff
 80161c4:	20000894 	.word	0x20000894

080161c8 <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b084      	sub	sp, #16
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80161d0:	4b0e      	ldr	r3, [pc, #56]	@ (801620c <json_value_init_boolean+0x44>)
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	2010      	movs	r0, #16
 80161d6:	4798      	blx	r3
 80161d8:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d101      	bne.n	80161e4 <json_value_init_boolean+0x1c>
        return NULL;
 80161e0:	2300      	movs	r3, #0
 80161e2:	e00f      	b.n	8016204 <json_value_init_boolean+0x3c>
    }
    new_value->parent = NULL;
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	2200      	movs	r2, #0
 80161e8:	601a      	str	r2, [r3, #0]
    new_value->type = JSONBoolean;
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	2206      	movs	r2, #6
 80161ee:	605a      	str	r2, [r3, #4]
    new_value->value.boolean = boolean ? 1 : 0;
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	bf14      	ite	ne
 80161f6:	2301      	movne	r3, #1
 80161f8:	2300      	moveq	r3, #0
 80161fa:	b2db      	uxtb	r3, r3
 80161fc:	461a      	mov	r2, r3
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	609a      	str	r2, [r3, #8]
    return new_value;
 8016202:	68fb      	ldr	r3, [r7, #12]
}
 8016204:	4618      	mov	r0, r3
 8016206:	3710      	adds	r7, #16
 8016208:	46bd      	mov	sp, r7
 801620a:	bd80      	pop	{r7, pc}
 801620c:	20000894 	.word	0x20000894

08016210 <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
 8016210:	b580      	push	{r7, lr}
 8016212:	b082      	sub	sp, #8
 8016214:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8016216:	4b0a      	ldr	r3, [pc, #40]	@ (8016240 <json_value_init_null+0x30>)
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	2010      	movs	r0, #16
 801621c:	4798      	blx	r3
 801621e:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d101      	bne.n	801622a <json_value_init_null+0x1a>
        return NULL;
 8016226:	2300      	movs	r3, #0
 8016228:	e006      	b.n	8016238 <json_value_init_null+0x28>
    }
    new_value->parent = NULL;
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	2200      	movs	r2, #0
 801622e:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNull;
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	2201      	movs	r2, #1
 8016234:	605a      	str	r2, [r3, #4]
    return new_value;
 8016236:	687b      	ldr	r3, [r7, #4]
}
 8016238:	4618      	mov	r0, r3
 801623a:	3708      	adds	r7, #8
 801623c:	46bd      	mov	sp, r7
 801623e:	bd80      	pop	{r7, pc}
 8016240:	20000894 	.word	0x20000894

08016244 <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 8016244:	b580      	push	{r7, lr}
 8016246:	b096      	sub	sp, #88	@ 0x58
 8016248:	af02      	add	r7, sp, #8
 801624a:	6078      	str	r0, [r7, #4]
    char num_buf[PARSON_NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, PARSON_FALSE, num_buf);
 801624c:	f107 030c 	add.w	r3, r7, #12
 8016250:	9300      	str	r3, [sp, #0]
 8016252:	2300      	movs	r3, #0
 8016254:	2200      	movs	r2, #0
 8016256:	2100      	movs	r1, #0
 8016258:	6878      	ldr	r0, [r7, #4]
 801625a:	f7fe fc13 	bl	8014a84 <json_serialize_to_buffer_r>
 801625e:	64f8      	str	r0, [r7, #76]	@ 0x4c
    return res < 0 ? 0 : (size_t)(res) + 1;
 8016260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016262:	2b00      	cmp	r3, #0
 8016264:	db02      	blt.n	801626c <json_serialization_size+0x28>
 8016266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016268:	3301      	adds	r3, #1
 801626a:	e000      	b.n	801626e <json_serialization_size+0x2a>
 801626c:	2300      	movs	r3, #0
}
 801626e:	4618      	mov	r0, r3
 8016270:	3750      	adds	r7, #80	@ 0x50
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}

08016276 <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 8016276:	b580      	push	{r7, lr}
 8016278:	b088      	sub	sp, #32
 801627a:	af02      	add	r7, sp, #8
 801627c:	60f8      	str	r0, [r7, #12]
 801627e:	60b9      	str	r1, [r7, #8]
 8016280:	607a      	str	r2, [r7, #4]
    int written = -1;
 8016282:	f04f 33ff 	mov.w	r3, #4294967295
 8016286:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size(value);
 8016288:	68f8      	ldr	r0, [r7, #12]
 801628a:	f7ff ffdb 	bl	8016244 <json_serialization_size>
 801628e:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 8016290:	693b      	ldr	r3, [r7, #16]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d003      	beq.n	801629e <json_serialize_to_buffer+0x28>
 8016296:	687a      	ldr	r2, [r7, #4]
 8016298:	693b      	ldr	r3, [r7, #16]
 801629a:	429a      	cmp	r2, r3
 801629c:	d202      	bcs.n	80162a4 <json_serialize_to_buffer+0x2e>
        return JSONFailure;
 801629e:	f04f 33ff 	mov.w	r3, #4294967295
 80162a2:	e00f      	b.n	80162c4 <json_serialize_to_buffer+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, PARSON_FALSE, NULL);
 80162a4:	2300      	movs	r3, #0
 80162a6:	9300      	str	r3, [sp, #0]
 80162a8:	2300      	movs	r3, #0
 80162aa:	2200      	movs	r2, #0
 80162ac:	68b9      	ldr	r1, [r7, #8]
 80162ae:	68f8      	ldr	r0, [r7, #12]
 80162b0:	f7fe fbe8 	bl	8014a84 <json_serialize_to_buffer_r>
 80162b4:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 80162b6:	697b      	ldr	r3, [r7, #20]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	da02      	bge.n	80162c2 <json_serialize_to_buffer+0x4c>
        return JSONFailure;
 80162bc:	f04f 33ff 	mov.w	r3, #4294967295
 80162c0:	e000      	b.n	80162c4 <json_serialize_to_buffer+0x4e>
    }
    return JSONSuccess;
 80162c2:	2300      	movs	r3, #0
}
 80162c4:	4618      	mov	r0, r3
 80162c6:	3718      	adds	r7, #24
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bd80      	pop	{r7, pc}

080162cc <json_serialize_to_string>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string(const JSON_Value *value) {
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b086      	sub	sp, #24
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 80162d4:	f04f 33ff 	mov.w	r3, #4294967295
 80162d8:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size(value);
 80162da:	6878      	ldr	r0, [r7, #4]
 80162dc:	f7ff ffb2 	bl	8016244 <json_serialization_size>
 80162e0:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 80162e2:	2300      	movs	r3, #0
 80162e4:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 80162e6:	693b      	ldr	r3, [r7, #16]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d101      	bne.n	80162f0 <json_serialize_to_string+0x24>
        return NULL;
 80162ec:	2300      	movs	r3, #0
 80162ee:	e018      	b.n	8016322 <json_serialize_to_string+0x56>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 80162f0:	4b0e      	ldr	r3, [pc, #56]	@ (801632c <json_serialize_to_string+0x60>)
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	6938      	ldr	r0, [r7, #16]
 80162f6:	4798      	blx	r3
 80162f8:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d101      	bne.n	8016304 <json_serialize_to_string+0x38>
        return NULL;
 8016300:	2300      	movs	r3, #0
 8016302:	e00e      	b.n	8016322 <json_serialize_to_string+0x56>
    }
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 8016304:	693a      	ldr	r2, [r7, #16]
 8016306:	68f9      	ldr	r1, [r7, #12]
 8016308:	6878      	ldr	r0, [r7, #4]
 801630a:	f7ff ffb4 	bl	8016276 <json_serialize_to_buffer>
 801630e:	6178      	str	r0, [r7, #20]
    if (serialization_result != JSONSuccess) {
 8016310:	697b      	ldr	r3, [r7, #20]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d004      	beq.n	8016320 <json_serialize_to_string+0x54>
        json_free_serialized_string(buf);
 8016316:	68f8      	ldr	r0, [r7, #12]
 8016318:	f000 f880 	bl	801641c <json_free_serialized_string>
        return NULL;
 801631c:	2300      	movs	r3, #0
 801631e:	e000      	b.n	8016322 <json_serialize_to_string+0x56>
    }
    return buf;
 8016320:	68fb      	ldr	r3, [r7, #12]
}
 8016322:	4618      	mov	r0, r3
 8016324:	3718      	adds	r7, #24
 8016326:	46bd      	mov	sp, r7
 8016328:	bd80      	pop	{r7, pc}
 801632a:	bf00      	nop
 801632c:	20000894 	.word	0x20000894

08016330 <json_serialization_size_pretty>:

size_t json_serialization_size_pretty(const JSON_Value *value) {
 8016330:	b580      	push	{r7, lr}
 8016332:	b096      	sub	sp, #88	@ 0x58
 8016334:	af02      	add	r7, sp, #8
 8016336:	6078      	str	r0, [r7, #4]
    char num_buf[PARSON_NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, PARSON_TRUE, num_buf);
 8016338:	f107 030c 	add.w	r3, r7, #12
 801633c:	9300      	str	r3, [sp, #0]
 801633e:	2301      	movs	r3, #1
 8016340:	2200      	movs	r2, #0
 8016342:	2100      	movs	r1, #0
 8016344:	6878      	ldr	r0, [r7, #4]
 8016346:	f7fe fb9d 	bl	8014a84 <json_serialize_to_buffer_r>
 801634a:	64f8      	str	r0, [r7, #76]	@ 0x4c
    return res < 0 ? 0 : (size_t)(res) + 1;
 801634c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801634e:	2b00      	cmp	r3, #0
 8016350:	db02      	blt.n	8016358 <json_serialization_size_pretty+0x28>
 8016352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016354:	3301      	adds	r3, #1
 8016356:	e000      	b.n	801635a <json_serialization_size_pretty+0x2a>
 8016358:	2300      	movs	r3, #0
}
 801635a:	4618      	mov	r0, r3
 801635c:	3750      	adds	r7, #80	@ 0x50
 801635e:	46bd      	mov	sp, r7
 8016360:	bd80      	pop	{r7, pc}

08016362 <json_serialize_to_buffer_pretty>:

JSON_Status json_serialize_to_buffer_pretty(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 8016362:	b580      	push	{r7, lr}
 8016364:	b088      	sub	sp, #32
 8016366:	af02      	add	r7, sp, #8
 8016368:	60f8      	str	r0, [r7, #12]
 801636a:	60b9      	str	r1, [r7, #8]
 801636c:	607a      	str	r2, [r7, #4]
    int written = -1;
 801636e:	f04f 33ff 	mov.w	r3, #4294967295
 8016372:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size_pretty(value);
 8016374:	68f8      	ldr	r0, [r7, #12]
 8016376:	f7ff ffdb 	bl	8016330 <json_serialization_size_pretty>
 801637a:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 801637c:	693b      	ldr	r3, [r7, #16]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d003      	beq.n	801638a <json_serialize_to_buffer_pretty+0x28>
 8016382:	687a      	ldr	r2, [r7, #4]
 8016384:	693b      	ldr	r3, [r7, #16]
 8016386:	429a      	cmp	r2, r3
 8016388:	d202      	bcs.n	8016390 <json_serialize_to_buffer_pretty+0x2e>
        return JSONFailure;
 801638a:	f04f 33ff 	mov.w	r3, #4294967295
 801638e:	e00f      	b.n	80163b0 <json_serialize_to_buffer_pretty+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, PARSON_TRUE, NULL);
 8016390:	2300      	movs	r3, #0
 8016392:	9300      	str	r3, [sp, #0]
 8016394:	2301      	movs	r3, #1
 8016396:	2200      	movs	r2, #0
 8016398:	68b9      	ldr	r1, [r7, #8]
 801639a:	68f8      	ldr	r0, [r7, #12]
 801639c:	f7fe fb72 	bl	8014a84 <json_serialize_to_buffer_r>
 80163a0:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 80163a2:	697b      	ldr	r3, [r7, #20]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	da02      	bge.n	80163ae <json_serialize_to_buffer_pretty+0x4c>
        return JSONFailure;
 80163a8:	f04f 33ff 	mov.w	r3, #4294967295
 80163ac:	e000      	b.n	80163b0 <json_serialize_to_buffer_pretty+0x4e>
    }
    return JSONSuccess;
 80163ae:	2300      	movs	r3, #0
}
 80163b0:	4618      	mov	r0, r3
 80163b2:	3718      	adds	r7, #24
 80163b4:	46bd      	mov	sp, r7
 80163b6:	bd80      	pop	{r7, pc}

080163b8 <json_serialize_to_string_pretty>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string_pretty(const JSON_Value *value) {
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b086      	sub	sp, #24
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 80163c0:	f04f 33ff 	mov.w	r3, #4294967295
 80163c4:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size_pretty(value);
 80163c6:	6878      	ldr	r0, [r7, #4]
 80163c8:	f7ff ffb2 	bl	8016330 <json_serialization_size_pretty>
 80163cc:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 80163ce:	2300      	movs	r3, #0
 80163d0:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 80163d2:	693b      	ldr	r3, [r7, #16]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d101      	bne.n	80163dc <json_serialize_to_string_pretty+0x24>
        return NULL;
 80163d8:	2300      	movs	r3, #0
 80163da:	e018      	b.n	801640e <json_serialize_to_string_pretty+0x56>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 80163dc:	4b0e      	ldr	r3, [pc, #56]	@ (8016418 <json_serialize_to_string_pretty+0x60>)
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	6938      	ldr	r0, [r7, #16]
 80163e2:	4798      	blx	r3
 80163e4:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d101      	bne.n	80163f0 <json_serialize_to_string_pretty+0x38>
        return NULL;
 80163ec:	2300      	movs	r3, #0
 80163ee:	e00e      	b.n	801640e <json_serialize_to_string_pretty+0x56>
    }
    serialization_result = json_serialize_to_buffer_pretty(value, buf, buf_size_bytes);
 80163f0:	693a      	ldr	r2, [r7, #16]
 80163f2:	68f9      	ldr	r1, [r7, #12]
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	f7ff ffb4 	bl	8016362 <json_serialize_to_buffer_pretty>
 80163fa:	6178      	str	r0, [r7, #20]
    if (serialization_result != JSONSuccess) {
 80163fc:	697b      	ldr	r3, [r7, #20]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d004      	beq.n	801640c <json_serialize_to_string_pretty+0x54>
        json_free_serialized_string(buf);
 8016402:	68f8      	ldr	r0, [r7, #12]
 8016404:	f000 f80a 	bl	801641c <json_free_serialized_string>
        return NULL;
 8016408:	2300      	movs	r3, #0
 801640a:	e000      	b.n	801640e <json_serialize_to_string_pretty+0x56>
    }
    return buf;
 801640c:	68fb      	ldr	r3, [r7, #12]
}
 801640e:	4618      	mov	r0, r3
 8016410:	3718      	adds	r7, #24
 8016412:	46bd      	mov	sp, r7
 8016414:	bd80      	pop	{r7, pc}
 8016416:	bf00      	nop
 8016418:	20000894 	.word	0x20000894

0801641c <json_free_serialized_string>:

void json_free_serialized_string(char *string) {
 801641c:	b580      	push	{r7, lr}
 801641e:	b082      	sub	sp, #8
 8016420:	af00      	add	r7, sp, #0
 8016422:	6078      	str	r0, [r7, #4]
    parson_free(string);
 8016424:	4b03      	ldr	r3, [pc, #12]	@ (8016434 <json_free_serialized_string+0x18>)
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	6878      	ldr	r0, [r7, #4]
 801642a:	4798      	blx	r3
}
 801642c:	bf00      	nop
 801642e:	3708      	adds	r7, #8
 8016430:	46bd      	mov	sp, r7
 8016432:	bd80      	pop	{r7, pc}
 8016434:	20000898 	.word	0x20000898

08016438 <json_array_append_value>:
    }
    array->count = 0;
    return JSONSuccess;
}

JSON_Status json_array_append_value(JSON_Array *array, JSON_Value *value) {
 8016438:	b580      	push	{r7, lr}
 801643a:	b082      	sub	sp, #8
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
 8016440:	6039      	str	r1, [r7, #0]
    if (array == NULL || value == NULL || value->parent != NULL) {
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d006      	beq.n	8016456 <json_array_append_value+0x1e>
 8016448:	683b      	ldr	r3, [r7, #0]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d003      	beq.n	8016456 <json_array_append_value+0x1e>
 801644e:	683b      	ldr	r3, [r7, #0]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d002      	beq.n	801645c <json_array_append_value+0x24>
        return JSONFailure;
 8016456:	f04f 33ff 	mov.w	r3, #4294967295
 801645a:	e004      	b.n	8016466 <json_array_append_value+0x2e>
    }
    return json_array_add(array, value);
 801645c:	6839      	ldr	r1, [r7, #0]
 801645e:	6878      	ldr	r0, [r7, #4]
 8016460:	f7fd fcb2 	bl	8013dc8 <json_array_add>
 8016464:	4603      	mov	r3, r0
}
 8016466:	4618      	mov	r0, r3
 8016468:	3708      	adds	r7, #8
 801646a:	46bd      	mov	sp, r7
 801646c:	bd80      	pop	{r7, pc}

0801646e <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 801646e:	b580      	push	{r7, lr}
 8016470:	b08e      	sub	sp, #56	@ 0x38
 8016472:	af02      	add	r7, sp, #8
 8016474:	60f8      	str	r0, [r7, #12]
 8016476:	60b9      	str	r1, [r7, #8]
 8016478:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 801647a:	2300      	movs	r3, #0
 801647c:	62bb      	str	r3, [r7, #40]	@ 0x28
    parson_bool_t found = PARSON_FALSE;
 801647e:	2300      	movs	r3, #0
 8016480:	617b      	str	r3, [r7, #20]
    size_t cell_ix = 0;
 8016482:	2300      	movs	r3, #0
 8016484:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t item_ix = 0;
 8016486:	2300      	movs	r3, #0
 8016488:	627b      	str	r3, [r7, #36]	@ 0x24
    JSON_Value *old_value = NULL;
 801648a:	2300      	movs	r3, #0
 801648c:	623b      	str	r3, [r7, #32]
    char *key_copy = NULL;
 801648e:	2300      	movs	r3, #0
 8016490:	61fb      	str	r3, [r7, #28]

    if (!object || !name || !value || value->parent) {
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d009      	beq.n	80164ac <json_object_set_value+0x3e>
 8016498:	68bb      	ldr	r3, [r7, #8]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d006      	beq.n	80164ac <json_object_set_value+0x3e>
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d003      	beq.n	80164ac <json_object_set_value+0x3e>
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d002      	beq.n	80164b2 <json_object_set_value+0x44>
        return JSONFailure;
 80164ac:	f04f 33ff 	mov.w	r3, #4294967295
 80164b0:	e095      	b.n	80165de <json_object_set_value+0x170>
    }
    hash = hash_string(name, strlen(name));
 80164b2:	68b8      	ldr	r0, [r7, #8]
 80164b4:	f7e9 feea 	bl	800028c <strlen>
 80164b8:	4603      	mov	r3, r0
 80164ba:	4619      	mov	r1, r3
 80164bc:	68b8      	ldr	r0, [r7, #8]
 80164be:	f7fc ffe1 	bl	8013484 <hash_string>
 80164c2:	62b8      	str	r0, [r7, #40]	@ 0x28
    found = PARSON_FALSE;
 80164c4:	2300      	movs	r3, #0
 80164c6:	617b      	str	r3, [r7, #20]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 80164c8:	68b8      	ldr	r0, [r7, #8]
 80164ca:	f7e9 fedf 	bl	800028c <strlen>
 80164ce:	4602      	mov	r2, r0
 80164d0:	f107 0314 	add.w	r3, r7, #20
 80164d4:	9300      	str	r3, [sp, #0]
 80164d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164d8:	68b9      	ldr	r1, [r7, #8]
 80164da:	68f8      	ldr	r0, [r7, #12]
 80164dc:	f7fd f9b3 	bl	8013846 <json_object_get_cell_ix>
 80164e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (found) {
 80164e2:	697b      	ldr	r3, [r7, #20]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d01f      	beq.n	8016528 <json_object_set_value+0xba>
        item_ix = object->cells[cell_ix];
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	685a      	ldr	r2, [r3, #4]
 80164ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164ee:	009b      	lsls	r3, r3, #2
 80164f0:	4413      	add	r3, r2
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	627b      	str	r3, [r7, #36]	@ 0x24
        old_value = object->values[item_ix];
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	691a      	ldr	r2, [r3, #16]
 80164fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164fc:	009b      	lsls	r3, r3, #2
 80164fe:	4413      	add	r3, r2
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	623b      	str	r3, [r7, #32]
        json_value_free(old_value);
 8016504:	6a38      	ldr	r0, [r7, #32]
 8016506:	f7ff fd3f 	bl	8015f88 <json_value_free>
        object->values[item_ix] = value;
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	691a      	ldr	r2, [r3, #16]
 801650e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016510:	009b      	lsls	r3, r3, #2
 8016512:	4413      	add	r3, r2
 8016514:	687a      	ldr	r2, [r7, #4]
 8016516:	601a      	str	r2, [r3, #0]
        value->parent = json_object_get_wrapping_value(object);
 8016518:	68f8      	ldr	r0, [r7, #12]
 801651a:	f7ff fc02 	bl	8015d22 <json_object_get_wrapping_value>
 801651e:	4602      	mov	r2, r0
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	601a      	str	r2, [r3, #0]
        return JSONSuccess;
 8016524:	2300      	movs	r3, #0
 8016526:	e05a      	b.n	80165de <json_object_set_value+0x170>
    }
    if (object->count >= object->item_capacity) {
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	699a      	ldr	r2, [r3, #24]
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	69db      	ldr	r3, [r3, #28]
 8016530:	429a      	cmp	r2, r3
 8016532:	d316      	bcc.n	8016562 <json_object_set_value+0xf4>
        JSON_Status res = json_object_grow_and_rehash(object);
 8016534:	68f8      	ldr	r0, [r7, #12]
 8016536:	f7fd f91b 	bl	8013770 <json_object_grow_and_rehash>
 801653a:	61b8      	str	r0, [r7, #24]
        if (res != JSONSuccess) {
 801653c:	69bb      	ldr	r3, [r7, #24]
 801653e:	2b00      	cmp	r3, #0
 8016540:	d002      	beq.n	8016548 <json_object_set_value+0xda>
            return JSONFailure;
 8016542:	f04f 33ff 	mov.w	r3, #4294967295
 8016546:	e04a      	b.n	80165de <json_object_set_value+0x170>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8016548:	68b8      	ldr	r0, [r7, #8]
 801654a:	f7e9 fe9f 	bl	800028c <strlen>
 801654e:	4602      	mov	r2, r0
 8016550:	f107 0314 	add.w	r3, r7, #20
 8016554:	9300      	str	r3, [sp, #0]
 8016556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016558:	68b9      	ldr	r1, [r7, #8]
 801655a:	68f8      	ldr	r0, [r7, #12]
 801655c:	f7fd f973 	bl	8013846 <json_object_get_cell_ix>
 8016560:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    key_copy = parson_strdup(name);
 8016562:	68b8      	ldr	r0, [r7, #8]
 8016564:	f7fc fd94 	bl	8013090 <parson_strdup>
 8016568:	61f8      	str	r0, [r7, #28]
    if (!key_copy) {
 801656a:	69fb      	ldr	r3, [r7, #28]
 801656c:	2b00      	cmp	r3, #0
 801656e:	d102      	bne.n	8016576 <json_object_set_value+0x108>
        return JSONFailure;
 8016570:	f04f 33ff 	mov.w	r3, #4294967295
 8016574:	e033      	b.n	80165de <json_object_set_value+0x170>
    }
    object->names[object->count] = key_copy;
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	68da      	ldr	r2, [r3, #12]
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	699b      	ldr	r3, [r3, #24]
 801657e:	009b      	lsls	r3, r3, #2
 8016580:	4413      	add	r3, r2
 8016582:	69fa      	ldr	r2, [r7, #28]
 8016584:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	685a      	ldr	r2, [r3, #4]
 801658a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801658c:	009b      	lsls	r3, r3, #2
 801658e:	4413      	add	r3, r2
 8016590:	68fa      	ldr	r2, [r7, #12]
 8016592:	6992      	ldr	r2, [r2, #24]
 8016594:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	691a      	ldr	r2, [r3, #16]
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	699b      	ldr	r3, [r3, #24]
 801659e:	009b      	lsls	r3, r3, #2
 80165a0:	4413      	add	r3, r2
 80165a2:	687a      	ldr	r2, [r7, #4]
 80165a4:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	695a      	ldr	r2, [r3, #20]
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	699b      	ldr	r3, [r3, #24]
 80165ae:	009b      	lsls	r3, r3, #2
 80165b0:	4413      	add	r3, r2
 80165b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80165b4:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	689a      	ldr	r2, [r3, #8]
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	699b      	ldr	r3, [r3, #24]
 80165be:	009b      	lsls	r3, r3, #2
 80165c0:	4413      	add	r3, r2
 80165c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80165c4:	601a      	str	r2, [r3, #0]
    object->count++;
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	699b      	ldr	r3, [r3, #24]
 80165ca:	1c5a      	adds	r2, r3, #1
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 80165d0:	68f8      	ldr	r0, [r7, #12]
 80165d2:	f7ff fba6 	bl	8015d22 <json_object_get_wrapping_value>
 80165d6:	4602      	mov	r2, r0
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 80165dc:	2300      	movs	r3, #0
}
 80165de:	4618      	mov	r0, r3
 80165e0:	3730      	adds	r7, #48	@ 0x30
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bd80      	pop	{r7, pc}
	...

080165e8 <json_object_dotset_value>:
        json_value_free(value);
    }
    return status;
}

JSON_Status json_object_dotset_value(JSON_Object *object, const char *name, JSON_Value *value) {
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b08c      	sub	sp, #48	@ 0x30
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	60f8      	str	r0, [r7, #12]
 80165f0:	60b9      	str	r1, [r7, #8]
 80165f2:	607a      	str	r2, [r7, #4]
    const char *dot_pos = NULL;
 80165f4:	2300      	movs	r3, #0
 80165f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    JSON_Value *temp_value = NULL, *new_value = NULL;
 80165f8:	2300      	movs	r3, #0
 80165fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80165fc:	2300      	movs	r3, #0
 80165fe:	627b      	str	r3, [r7, #36]	@ 0x24
    JSON_Object *temp_object = NULL, *new_object = NULL;
 8016600:	2300      	movs	r3, #0
 8016602:	623b      	str	r3, [r7, #32]
 8016604:	2300      	movs	r3, #0
 8016606:	61fb      	str	r3, [r7, #28]
    JSON_Status status = JSONFailure;
 8016608:	f04f 33ff 	mov.w	r3, #4294967295
 801660c:	61bb      	str	r3, [r7, #24]
    size_t name_len = 0;
 801660e:	2300      	movs	r3, #0
 8016610:	617b      	str	r3, [r7, #20]
    char *name_copy = NULL;
 8016612:	2300      	movs	r3, #0
 8016614:	613b      	str	r3, [r7, #16]
    
    if (object == NULL || name == NULL || value == NULL) {
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d005      	beq.n	8016628 <json_object_dotset_value+0x40>
 801661c:	68bb      	ldr	r3, [r7, #8]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d002      	beq.n	8016628 <json_object_dotset_value+0x40>
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d102      	bne.n	801662e <json_object_dotset_value+0x46>
        return JSONFailure;
 8016628:	f04f 33ff 	mov.w	r3, #4294967295
 801662c:	e07f      	b.n	801672e <json_object_dotset_value+0x146>
    }
    dot_pos = strchr(name, '.');
 801662e:	212e      	movs	r1, #46	@ 0x2e
 8016630:	68b8      	ldr	r0, [r7, #8]
 8016632:	f008 f80c 	bl	801e64e <strchr>
 8016636:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (dot_pos == NULL) {
 8016638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801663a:	2b00      	cmp	r3, #0
 801663c:	d106      	bne.n	801664c <json_object_dotset_value+0x64>
        return json_object_set_value(object, name, value);
 801663e:	687a      	ldr	r2, [r7, #4]
 8016640:	68b9      	ldr	r1, [r7, #8]
 8016642:	68f8      	ldr	r0, [r7, #12]
 8016644:	f7ff ff13 	bl	801646e <json_object_set_value>
 8016648:	4603      	mov	r3, r0
 801664a:	e070      	b.n	801672e <json_object_dotset_value+0x146>
    }
    name_len = dot_pos - name;
 801664c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801664e:	68bb      	ldr	r3, [r7, #8]
 8016650:	1ad3      	subs	r3, r2, r3
 8016652:	617b      	str	r3, [r7, #20]
    temp_value = json_object_getn_value(object, name, name_len);
 8016654:	697a      	ldr	r2, [r7, #20]
 8016656:	68b9      	ldr	r1, [r7, #8]
 8016658:	68f8      	ldr	r0, [r7, #12]
 801665a:	f7fd f9ec 	bl	8013a36 <json_object_getn_value>
 801665e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (temp_value) {
 8016660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016662:	2b00      	cmp	r3, #0
 8016664:	d015      	beq.n	8016692 <json_object_dotset_value+0xaa>
        /* Don't overwrite existing non-object (unlike json_object_set_value, but it shouldn't be changed at this point) */
        if (json_value_get_type(temp_value) != JSONObject) {
 8016666:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016668:	f7ff fbe1 	bl	8015e2e <json_value_get_type>
 801666c:	4603      	mov	r3, r0
 801666e:	2b04      	cmp	r3, #4
 8016670:	d002      	beq.n	8016678 <json_object_dotset_value+0x90>
            return JSONFailure;
 8016672:	f04f 33ff 	mov.w	r3, #4294967295
 8016676:	e05a      	b.n	801672e <json_object_dotset_value+0x146>
        }
        temp_object = json_value_get_object(temp_value);
 8016678:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801667a:	f7ff fbea 	bl	8015e52 <json_value_get_object>
 801667e:	6238      	str	r0, [r7, #32]
        return json_object_dotset_value(temp_object, dot_pos + 1, value);
 8016680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016682:	3301      	adds	r3, #1
 8016684:	687a      	ldr	r2, [r7, #4]
 8016686:	4619      	mov	r1, r3
 8016688:	6a38      	ldr	r0, [r7, #32]
 801668a:	f7ff ffad 	bl	80165e8 <json_object_dotset_value>
 801668e:	4603      	mov	r3, r0
 8016690:	e04d      	b.n	801672e <json_object_dotset_value+0x146>
    }
    new_value = json_value_init_object();
 8016692:	f7ff fca7 	bl	8015fe4 <json_value_init_object>
 8016696:	6278      	str	r0, [r7, #36]	@ 0x24
    if (new_value == NULL) {
 8016698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801669a:	2b00      	cmp	r3, #0
 801669c:	d102      	bne.n	80166a4 <json_object_dotset_value+0xbc>
        return JSONFailure;
 801669e:	f04f 33ff 	mov.w	r3, #4294967295
 80166a2:	e044      	b.n	801672e <json_object_dotset_value+0x146>
    }
    new_object = json_value_get_object(new_value);
 80166a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80166a6:	f7ff fbd4 	bl	8015e52 <json_value_get_object>
 80166aa:	61f8      	str	r0, [r7, #28]
    status = json_object_dotset_value(new_object, dot_pos + 1, value);
 80166ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166ae:	3301      	adds	r3, #1
 80166b0:	687a      	ldr	r2, [r7, #4]
 80166b2:	4619      	mov	r1, r3
 80166b4:	69f8      	ldr	r0, [r7, #28]
 80166b6:	f7ff ff97 	bl	80165e8 <json_object_dotset_value>
 80166ba:	61b8      	str	r0, [r7, #24]
    if (status != JSONSuccess) {
 80166bc:	69bb      	ldr	r3, [r7, #24]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d005      	beq.n	80166ce <json_object_dotset_value+0xe6>
        json_value_free(new_value);
 80166c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80166c4:	f7ff fc60 	bl	8015f88 <json_value_free>
        return JSONFailure;
 80166c8:	f04f 33ff 	mov.w	r3, #4294967295
 80166cc:	e02f      	b.n	801672e <json_object_dotset_value+0x146>
    }
    name_copy = parson_strndup(name, name_len);
 80166ce:	6979      	ldr	r1, [r7, #20]
 80166d0:	68b8      	ldr	r0, [r7, #8]
 80166d2:	f7fc fcbb 	bl	801304c <parson_strndup>
 80166d6:	6138      	str	r0, [r7, #16]
    if (!name_copy) {
 80166d8:	693b      	ldr	r3, [r7, #16]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d10c      	bne.n	80166f8 <json_object_dotset_value+0x110>
        json_object_dotremove_internal(new_object, dot_pos + 1, 0);
 80166de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166e0:	3301      	adds	r3, #1
 80166e2:	2200      	movs	r2, #0
 80166e4:	4619      	mov	r1, r3
 80166e6:	69f8      	ldr	r0, [r7, #28]
 80166e8:	f7fd fafc 	bl	8013ce4 <json_object_dotremove_internal>
        json_value_free(new_value);
 80166ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80166ee:	f7ff fc4b 	bl	8015f88 <json_value_free>
        return JSONFailure;
 80166f2:	f04f 33ff 	mov.w	r3, #4294967295
 80166f6:	e01a      	b.n	801672e <json_object_dotset_value+0x146>
    }
    status = json_object_add(object, name_copy, new_value);
 80166f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166fa:	6939      	ldr	r1, [r7, #16]
 80166fc:	68f8      	ldr	r0, [r7, #12]
 80166fe:	f7fd f90c 	bl	801391a <json_object_add>
 8016702:	61b8      	str	r0, [r7, #24]
    if (status != JSONSuccess) {
 8016704:	69bb      	ldr	r3, [r7, #24]
 8016706:	2b00      	cmp	r3, #0
 8016708:	d010      	beq.n	801672c <json_object_dotset_value+0x144>
        parson_free(name_copy);
 801670a:	4b0b      	ldr	r3, [pc, #44]	@ (8016738 <json_object_dotset_value+0x150>)
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	6938      	ldr	r0, [r7, #16]
 8016710:	4798      	blx	r3
        json_object_dotremove_internal(new_object, dot_pos + 1, 0);
 8016712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016714:	3301      	adds	r3, #1
 8016716:	2200      	movs	r2, #0
 8016718:	4619      	mov	r1, r3
 801671a:	69f8      	ldr	r0, [r7, #28]
 801671c:	f7fd fae2 	bl	8013ce4 <json_object_dotremove_internal>
        json_value_free(new_value);
 8016720:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016722:	f7ff fc31 	bl	8015f88 <json_value_free>
        return JSONFailure;
 8016726:	f04f 33ff 	mov.w	r3, #4294967295
 801672a:	e000      	b.n	801672e <json_object_dotset_value+0x146>
    }
    return JSONSuccess;
 801672c:	2300      	movs	r3, #0
}
 801672e:	4618      	mov	r0, r3
 8016730:	3730      	adds	r7, #48	@ 0x30
 8016732:	46bd      	mov	sp, r7
 8016734:	bd80      	pop	{r7, pc}
 8016736:	bf00      	nop
 8016738:	20000898 	.word	0x20000898

0801673c <json_object_dotset_string>:

JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {
 801673c:	b580      	push	{r7, lr}
 801673e:	b086      	sub	sp, #24
 8016740:	af00      	add	r7, sp, #0
 8016742:	60f8      	str	r0, [r7, #12]
 8016744:	60b9      	str	r1, [r7, #8]
 8016746:	607a      	str	r2, [r7, #4]
    JSON_Value *value = json_value_init_string(string);
 8016748:	6878      	ldr	r0, [r7, #4]
 801674a:	f7ff fca3 	bl	8016094 <json_value_init_string>
 801674e:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 8016750:	697b      	ldr	r3, [r7, #20]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d102      	bne.n	801675c <json_object_dotset_string+0x20>
        return JSONFailure;
 8016756:	f04f 33ff 	mov.w	r3, #4294967295
 801675a:	e00e      	b.n	801677a <json_object_dotset_string+0x3e>
    }
    if (json_object_dotset_value(object, name, value) != JSONSuccess) {
 801675c:	697a      	ldr	r2, [r7, #20]
 801675e:	68b9      	ldr	r1, [r7, #8]
 8016760:	68f8      	ldr	r0, [r7, #12]
 8016762:	f7ff ff41 	bl	80165e8 <json_object_dotset_value>
 8016766:	4603      	mov	r3, r0
 8016768:	2b00      	cmp	r3, #0
 801676a:	d005      	beq.n	8016778 <json_object_dotset_string+0x3c>
        json_value_free(value);
 801676c:	6978      	ldr	r0, [r7, #20]
 801676e:	f7ff fc0b 	bl	8015f88 <json_value_free>
        return JSONFailure;
 8016772:	f04f 33ff 	mov.w	r3, #4294967295
 8016776:	e000      	b.n	801677a <json_object_dotset_string+0x3e>
    }
    return JSONSuccess;
 8016778:	2300      	movs	r3, #0
}
 801677a:	4618      	mov	r0, r3
 801677c:	3718      	adds	r7, #24
 801677e:	46bd      	mov	sp, r7
 8016780:	bd80      	pop	{r7, pc}

08016782 <json_object_dotset_number>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_dotset_number(JSON_Object *object, const char *name, double number) {
 8016782:	b580      	push	{r7, lr}
 8016784:	b086      	sub	sp, #24
 8016786:	af00      	add	r7, sp, #0
 8016788:	60f8      	str	r0, [r7, #12]
 801678a:	60b9      	str	r1, [r7, #8]
 801678c:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 8016790:	ed97 0b00 	vldr	d0, [r7]
 8016794:	f7ff fcc6 	bl	8016124 <json_value_init_number>
 8016798:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801679a:	697b      	ldr	r3, [r7, #20]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d102      	bne.n	80167a6 <json_object_dotset_number+0x24>
        return JSONFailure;
 80167a0:	f04f 33ff 	mov.w	r3, #4294967295
 80167a4:	e00e      	b.n	80167c4 <json_object_dotset_number+0x42>
    }
    if (json_object_dotset_value(object, name, value) != JSONSuccess) {
 80167a6:	697a      	ldr	r2, [r7, #20]
 80167a8:	68b9      	ldr	r1, [r7, #8]
 80167aa:	68f8      	ldr	r0, [r7, #12]
 80167ac:	f7ff ff1c 	bl	80165e8 <json_object_dotset_value>
 80167b0:	4603      	mov	r3, r0
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d005      	beq.n	80167c2 <json_object_dotset_number+0x40>
        json_value_free(value);
 80167b6:	6978      	ldr	r0, [r7, #20]
 80167b8:	f7ff fbe6 	bl	8015f88 <json_value_free>
        return JSONFailure;
 80167bc:	f04f 33ff 	mov.w	r3, #4294967295
 80167c0:	e000      	b.n	80167c4 <json_object_dotset_number+0x42>
    }
    return JSONSuccess;
 80167c2:	2300      	movs	r3, #0
}
 80167c4:	4618      	mov	r0, r3
 80167c6:	3718      	adds	r7, #24
 80167c8:	46bd      	mov	sp, r7
 80167ca:	bd80      	pop	{r7, pc}

080167cc <json_object_dotset_boolean>:

JSON_Status json_object_dotset_boolean(JSON_Object *object, const char *name, int boolean) {
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b086      	sub	sp, #24
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	60f8      	str	r0, [r7, #12]
 80167d4:	60b9      	str	r1, [r7, #8]
 80167d6:	607a      	str	r2, [r7, #4]
    JSON_Value *value = json_value_init_boolean(boolean);
 80167d8:	6878      	ldr	r0, [r7, #4]
 80167da:	f7ff fcf5 	bl	80161c8 <json_value_init_boolean>
 80167de:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 80167e0:	697b      	ldr	r3, [r7, #20]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d102      	bne.n	80167ec <json_object_dotset_boolean+0x20>
        return JSONFailure;
 80167e6:	f04f 33ff 	mov.w	r3, #4294967295
 80167ea:	e00e      	b.n	801680a <json_object_dotset_boolean+0x3e>
    }
    if (json_object_dotset_value(object, name, value) != JSONSuccess) {
 80167ec:	697a      	ldr	r2, [r7, #20]
 80167ee:	68b9      	ldr	r1, [r7, #8]
 80167f0:	68f8      	ldr	r0, [r7, #12]
 80167f2:	f7ff fef9 	bl	80165e8 <json_object_dotset_value>
 80167f6:	4603      	mov	r3, r0
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d005      	beq.n	8016808 <json_object_dotset_boolean+0x3c>
        json_value_free(value);
 80167fc:	6978      	ldr	r0, [r7, #20]
 80167fe:	f7ff fbc3 	bl	8015f88 <json_value_free>
        return JSONFailure;
 8016802:	f04f 33ff 	mov.w	r3, #4294967295
 8016806:	e000      	b.n	801680a <json_object_dotset_boolean+0x3e>
    }
    return JSONSuccess;
 8016808:	2300      	movs	r3, #0
}
 801680a:	4618      	mov	r0, r3
 801680c:	3718      	adds	r7, #24
 801680e:	46bd      	mov	sp, r7
 8016810:	bd80      	pop	{r7, pc}

08016812 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016812:	b580      	push	{r7, lr}
 8016814:	b084      	sub	sp, #16
 8016816:	af00      	add	r7, sp, #0
 8016818:	6078      	str	r0, [r7, #4]
 801681a:	460b      	mov	r3, r1
 801681c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801681e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8016822:	f7eb ffbf 	bl	80027a4 <USBD_static_malloc>
 8016826:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d105      	bne.n	801683a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	2200      	movs	r2, #0
 8016832:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8016836:	2302      	movs	r3, #2
 8016838:	e066      	b.n	8016908 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	68fa      	ldr	r2, [r7, #12]
 801683e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	7c1b      	ldrb	r3, [r3, #16]
 8016846:	2b00      	cmp	r3, #0
 8016848:	d119      	bne.n	801687e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801684a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801684e:	2202      	movs	r2, #2
 8016850:	2181      	movs	r1, #129	@ 0x81
 8016852:	6878      	ldr	r0, [r7, #4]
 8016854:	f7eb fe69 	bl	800252a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	2201      	movs	r2, #1
 801685c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801685e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016862:	2202      	movs	r2, #2
 8016864:	2101      	movs	r1, #1
 8016866:	6878      	ldr	r0, [r7, #4]
 8016868:	f7eb fe5f 	bl	800252a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	2201      	movs	r2, #1
 8016870:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	2210      	movs	r2, #16
 8016878:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 801687c:	e016      	b.n	80168ac <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801687e:	2340      	movs	r3, #64	@ 0x40
 8016880:	2202      	movs	r2, #2
 8016882:	2181      	movs	r1, #129	@ 0x81
 8016884:	6878      	ldr	r0, [r7, #4]
 8016886:	f7eb fe50 	bl	800252a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	2201      	movs	r2, #1
 801688e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8016890:	2340      	movs	r3, #64	@ 0x40
 8016892:	2202      	movs	r2, #2
 8016894:	2101      	movs	r1, #1
 8016896:	6878      	ldr	r0, [r7, #4]
 8016898:	f7eb fe47 	bl	800252a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2201      	movs	r2, #1
 80168a0:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2210      	movs	r2, #16
 80168a8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80168ac:	2308      	movs	r3, #8
 80168ae:	2203      	movs	r2, #3
 80168b0:	2182      	movs	r1, #130	@ 0x82
 80168b2:	6878      	ldr	r0, [r7, #4]
 80168b4:	f7eb fe39 	bl	800252a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	2201      	movs	r2, #1
 80168bc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	2200      	movs	r2, #0
 80168ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	2200      	movs	r2, #0
 80168d6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	7c1b      	ldrb	r3, [r3, #16]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d109      	bne.n	80168f6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80168e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80168ec:	2101      	movs	r1, #1
 80168ee:	6878      	ldr	r0, [r7, #4]
 80168f0:	f7eb ff0a 	bl	8002708 <USBD_LL_PrepareReceive>
 80168f4:	e007      	b.n	8016906 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80168fc:	2340      	movs	r3, #64	@ 0x40
 80168fe:	2101      	movs	r1, #1
 8016900:	6878      	ldr	r0, [r7, #4]
 8016902:	f7eb ff01 	bl	8002708 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016906:	2300      	movs	r3, #0
}
 8016908:	4618      	mov	r0, r3
 801690a:	3710      	adds	r7, #16
 801690c:	46bd      	mov	sp, r7
 801690e:	bd80      	pop	{r7, pc}

08016910 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b082      	sub	sp, #8
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
 8016918:	460b      	mov	r3, r1
 801691a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801691c:	2181      	movs	r1, #129	@ 0x81
 801691e:	6878      	ldr	r0, [r7, #4]
 8016920:	f7eb fe29 	bl	8002576 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	2200      	movs	r2, #0
 8016928:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801692a:	2101      	movs	r1, #1
 801692c:	6878      	ldr	r0, [r7, #4]
 801692e:	f7eb fe22 	bl	8002576 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	2200      	movs	r2, #0
 8016936:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801693a:	2182      	movs	r1, #130	@ 0x82
 801693c:	6878      	ldr	r0, [r7, #4]
 801693e:	f7eb fe1a 	bl	8002576 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	2200      	movs	r2, #0
 8016946:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	2200      	movs	r2, #0
 801694e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016958:	2b00      	cmp	r3, #0
 801695a:	d00e      	beq.n	801697a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8016962:	685b      	ldr	r3, [r3, #4]
 8016964:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801696c:	4618      	mov	r0, r3
 801696e:	f7eb ff27 	bl	80027c0 <USBD_static_free>
    pdev->pClassData = NULL;
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	2200      	movs	r2, #0
 8016976:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 801697a:	2300      	movs	r3, #0
}
 801697c:	4618      	mov	r0, r3
 801697e:	3708      	adds	r7, #8
 8016980:	46bd      	mov	sp, r7
 8016982:	bd80      	pop	{r7, pc}

08016984 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b086      	sub	sp, #24
 8016988:	af00      	add	r7, sp, #0
 801698a:	6078      	str	r0, [r7, #4]
 801698c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016994:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8016996:	2300      	movs	r3, #0
 8016998:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801699a:	2300      	movs	r3, #0
 801699c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801699e:	2300      	movs	r3, #0
 80169a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80169a2:	693b      	ldr	r3, [r7, #16]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d101      	bne.n	80169ac <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80169a8:	2303      	movs	r3, #3
 80169aa:	e0af      	b.n	8016b0c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80169ac:	683b      	ldr	r3, [r7, #0]
 80169ae:	781b      	ldrb	r3, [r3, #0]
 80169b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d03f      	beq.n	8016a38 <USBD_CDC_Setup+0xb4>
 80169b8:	2b20      	cmp	r3, #32
 80169ba:	f040 809f 	bne.w	8016afc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80169be:	683b      	ldr	r3, [r7, #0]
 80169c0:	88db      	ldrh	r3, [r3, #6]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d02e      	beq.n	8016a24 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80169c6:	683b      	ldr	r3, [r7, #0]
 80169c8:	781b      	ldrb	r3, [r3, #0]
 80169ca:	b25b      	sxtb	r3, r3
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	da16      	bge.n	80169fe <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80169d6:	689b      	ldr	r3, [r3, #8]
 80169d8:	683a      	ldr	r2, [r7, #0]
 80169da:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80169dc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80169de:	683a      	ldr	r2, [r7, #0]
 80169e0:	88d2      	ldrh	r2, [r2, #6]
 80169e2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80169e4:	683b      	ldr	r3, [r7, #0]
 80169e6:	88db      	ldrh	r3, [r3, #6]
 80169e8:	2b07      	cmp	r3, #7
 80169ea:	bf28      	it	cs
 80169ec:	2307      	movcs	r3, #7
 80169ee:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80169f0:	693b      	ldr	r3, [r7, #16]
 80169f2:	89fa      	ldrh	r2, [r7, #14]
 80169f4:	4619      	mov	r1, r3
 80169f6:	6878      	ldr	r0, [r7, #4]
 80169f8:	f001 fb17 	bl	801802a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80169fc:	e085      	b.n	8016b0a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80169fe:	683b      	ldr	r3, [r7, #0]
 8016a00:	785a      	ldrb	r2, [r3, #1]
 8016a02:	693b      	ldr	r3, [r7, #16]
 8016a04:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8016a08:	683b      	ldr	r3, [r7, #0]
 8016a0a:	88db      	ldrh	r3, [r3, #6]
 8016a0c:	b2da      	uxtb	r2, r3
 8016a0e:	693b      	ldr	r3, [r7, #16]
 8016a10:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8016a14:	6939      	ldr	r1, [r7, #16]
 8016a16:	683b      	ldr	r3, [r7, #0]
 8016a18:	88db      	ldrh	r3, [r3, #6]
 8016a1a:	461a      	mov	r2, r3
 8016a1c:	6878      	ldr	r0, [r7, #4]
 8016a1e:	f001 fb30 	bl	8018082 <USBD_CtlPrepareRx>
      break;
 8016a22:	e072      	b.n	8016b0a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8016a2a:	689b      	ldr	r3, [r3, #8]
 8016a2c:	683a      	ldr	r2, [r7, #0]
 8016a2e:	7850      	ldrb	r0, [r2, #1]
 8016a30:	2200      	movs	r2, #0
 8016a32:	6839      	ldr	r1, [r7, #0]
 8016a34:	4798      	blx	r3
      break;
 8016a36:	e068      	b.n	8016b0a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016a38:	683b      	ldr	r3, [r7, #0]
 8016a3a:	785b      	ldrb	r3, [r3, #1]
 8016a3c:	2b0b      	cmp	r3, #11
 8016a3e:	d852      	bhi.n	8016ae6 <USBD_CDC_Setup+0x162>
 8016a40:	a201      	add	r2, pc, #4	@ (adr r2, 8016a48 <USBD_CDC_Setup+0xc4>)
 8016a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a46:	bf00      	nop
 8016a48:	08016a79 	.word	0x08016a79
 8016a4c:	08016af5 	.word	0x08016af5
 8016a50:	08016ae7 	.word	0x08016ae7
 8016a54:	08016ae7 	.word	0x08016ae7
 8016a58:	08016ae7 	.word	0x08016ae7
 8016a5c:	08016ae7 	.word	0x08016ae7
 8016a60:	08016ae7 	.word	0x08016ae7
 8016a64:	08016ae7 	.word	0x08016ae7
 8016a68:	08016ae7 	.word	0x08016ae7
 8016a6c:	08016ae7 	.word	0x08016ae7
 8016a70:	08016aa3 	.word	0x08016aa3
 8016a74:	08016acd 	.word	0x08016acd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a7e:	b2db      	uxtb	r3, r3
 8016a80:	2b03      	cmp	r3, #3
 8016a82:	d107      	bne.n	8016a94 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8016a84:	f107 030a 	add.w	r3, r7, #10
 8016a88:	2202      	movs	r2, #2
 8016a8a:	4619      	mov	r1, r3
 8016a8c:	6878      	ldr	r0, [r7, #4]
 8016a8e:	f001 facc 	bl	801802a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016a92:	e032      	b.n	8016afa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8016a94:	6839      	ldr	r1, [r7, #0]
 8016a96:	6878      	ldr	r0, [r7, #4]
 8016a98:	f001 fa56 	bl	8017f48 <USBD_CtlError>
            ret = USBD_FAIL;
 8016a9c:	2303      	movs	r3, #3
 8016a9e:	75fb      	strb	r3, [r7, #23]
          break;
 8016aa0:	e02b      	b.n	8016afa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016aa8:	b2db      	uxtb	r3, r3
 8016aaa:	2b03      	cmp	r3, #3
 8016aac:	d107      	bne.n	8016abe <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8016aae:	f107 030d 	add.w	r3, r7, #13
 8016ab2:	2201      	movs	r2, #1
 8016ab4:	4619      	mov	r1, r3
 8016ab6:	6878      	ldr	r0, [r7, #4]
 8016ab8:	f001 fab7 	bl	801802a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016abc:	e01d      	b.n	8016afa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8016abe:	6839      	ldr	r1, [r7, #0]
 8016ac0:	6878      	ldr	r0, [r7, #4]
 8016ac2:	f001 fa41 	bl	8017f48 <USBD_CtlError>
            ret = USBD_FAIL;
 8016ac6:	2303      	movs	r3, #3
 8016ac8:	75fb      	strb	r3, [r7, #23]
          break;
 8016aca:	e016      	b.n	8016afa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016ad2:	b2db      	uxtb	r3, r3
 8016ad4:	2b03      	cmp	r3, #3
 8016ad6:	d00f      	beq.n	8016af8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8016ad8:	6839      	ldr	r1, [r7, #0]
 8016ada:	6878      	ldr	r0, [r7, #4]
 8016adc:	f001 fa34 	bl	8017f48 <USBD_CtlError>
            ret = USBD_FAIL;
 8016ae0:	2303      	movs	r3, #3
 8016ae2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8016ae4:	e008      	b.n	8016af8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8016ae6:	6839      	ldr	r1, [r7, #0]
 8016ae8:	6878      	ldr	r0, [r7, #4]
 8016aea:	f001 fa2d 	bl	8017f48 <USBD_CtlError>
          ret = USBD_FAIL;
 8016aee:	2303      	movs	r3, #3
 8016af0:	75fb      	strb	r3, [r7, #23]
          break;
 8016af2:	e002      	b.n	8016afa <USBD_CDC_Setup+0x176>
          break;
 8016af4:	bf00      	nop
 8016af6:	e008      	b.n	8016b0a <USBD_CDC_Setup+0x186>
          break;
 8016af8:	bf00      	nop
      }
      break;
 8016afa:	e006      	b.n	8016b0a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8016afc:	6839      	ldr	r1, [r7, #0]
 8016afe:	6878      	ldr	r0, [r7, #4]
 8016b00:	f001 fa22 	bl	8017f48 <USBD_CtlError>
      ret = USBD_FAIL;
 8016b04:	2303      	movs	r3, #3
 8016b06:	75fb      	strb	r3, [r7, #23]
      break;
 8016b08:	bf00      	nop
  }

  return (uint8_t)ret;
 8016b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	3718      	adds	r7, #24
 8016b10:	46bd      	mov	sp, r7
 8016b12:	bd80      	pop	{r7, pc}

08016b14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b084      	sub	sp, #16
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6078      	str	r0, [r7, #4]
 8016b1c:	460b      	mov	r3, r1
 8016b1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8016b26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d101      	bne.n	8016b36 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016b32:	2303      	movs	r3, #3
 8016b34:	e04f      	b.n	8016bd6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016b3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8016b3e:	78fa      	ldrb	r2, [r7, #3]
 8016b40:	6879      	ldr	r1, [r7, #4]
 8016b42:	4613      	mov	r3, r2
 8016b44:	009b      	lsls	r3, r3, #2
 8016b46:	4413      	add	r3, r2
 8016b48:	009b      	lsls	r3, r3, #2
 8016b4a:	440b      	add	r3, r1
 8016b4c:	3318      	adds	r3, #24
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d029      	beq.n	8016ba8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8016b54:	78fa      	ldrb	r2, [r7, #3]
 8016b56:	6879      	ldr	r1, [r7, #4]
 8016b58:	4613      	mov	r3, r2
 8016b5a:	009b      	lsls	r3, r3, #2
 8016b5c:	4413      	add	r3, r2
 8016b5e:	009b      	lsls	r3, r3, #2
 8016b60:	440b      	add	r3, r1
 8016b62:	3318      	adds	r3, #24
 8016b64:	681a      	ldr	r2, [r3, #0]
 8016b66:	78f9      	ldrb	r1, [r7, #3]
 8016b68:	68f8      	ldr	r0, [r7, #12]
 8016b6a:	460b      	mov	r3, r1
 8016b6c:	00db      	lsls	r3, r3, #3
 8016b6e:	440b      	add	r3, r1
 8016b70:	009b      	lsls	r3, r3, #2
 8016b72:	4403      	add	r3, r0
 8016b74:	3344      	adds	r3, #68	@ 0x44
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	fbb2 f1f3 	udiv	r1, r2, r3
 8016b7c:	fb01 f303 	mul.w	r3, r1, r3
 8016b80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d110      	bne.n	8016ba8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8016b86:	78fa      	ldrb	r2, [r7, #3]
 8016b88:	6879      	ldr	r1, [r7, #4]
 8016b8a:	4613      	mov	r3, r2
 8016b8c:	009b      	lsls	r3, r3, #2
 8016b8e:	4413      	add	r3, r2
 8016b90:	009b      	lsls	r3, r3, #2
 8016b92:	440b      	add	r3, r1
 8016b94:	3318      	adds	r3, #24
 8016b96:	2200      	movs	r2, #0
 8016b98:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8016b9a:	78f9      	ldrb	r1, [r7, #3]
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	6878      	ldr	r0, [r7, #4]
 8016ba2:	f7eb fd90 	bl	80026c6 <USBD_LL_Transmit>
 8016ba6:	e015      	b.n	8016bd4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8016ba8:	68bb      	ldr	r3, [r7, #8]
 8016baa:	2200      	movs	r2, #0
 8016bac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8016bb6:	691b      	ldr	r3, [r3, #16]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d00b      	beq.n	8016bd4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8016bc2:	691b      	ldr	r3, [r3, #16]
 8016bc4:	68ba      	ldr	r2, [r7, #8]
 8016bc6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8016bca:	68ba      	ldr	r2, [r7, #8]
 8016bcc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8016bd0:	78fa      	ldrb	r2, [r7, #3]
 8016bd2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016bd4:	2300      	movs	r3, #0
}
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	3710      	adds	r7, #16
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	bd80      	pop	{r7, pc}

08016bde <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016bde:	b580      	push	{r7, lr}
 8016be0:	b084      	sub	sp, #16
 8016be2:	af00      	add	r7, sp, #0
 8016be4:	6078      	str	r0, [r7, #4]
 8016be6:	460b      	mov	r3, r1
 8016be8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016bf0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d101      	bne.n	8016c00 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016bfc:	2303      	movs	r3, #3
 8016bfe:	e015      	b.n	8016c2c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016c00:	78fb      	ldrb	r3, [r7, #3]
 8016c02:	4619      	mov	r1, r3
 8016c04:	6878      	ldr	r0, [r7, #4]
 8016c06:	f7eb fda0 	bl	800274a <USBD_LL_GetRxDataSize>
 8016c0a:	4602      	mov	r2, r0
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8016c18:	68db      	ldr	r3, [r3, #12]
 8016c1a:	68fa      	ldr	r2, [r7, #12]
 8016c1c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8016c20:	68fa      	ldr	r2, [r7, #12]
 8016c22:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8016c26:	4611      	mov	r1, r2
 8016c28:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8016c2a:	2300      	movs	r3, #0
}
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	3710      	adds	r7, #16
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd80      	pop	{r7, pc}

08016c34 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b084      	sub	sp, #16
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016c42:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d101      	bne.n	8016c4e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8016c4a:	2303      	movs	r3, #3
 8016c4c:	e01a      	b.n	8016c84 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d014      	beq.n	8016c82 <USBD_CDC_EP0_RxReady+0x4e>
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8016c5e:	2bff      	cmp	r3, #255	@ 0xff
 8016c60:	d00f      	beq.n	8016c82 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8016c68:	689b      	ldr	r3, [r3, #8]
 8016c6a:	68fa      	ldr	r2, [r7, #12]
 8016c6c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8016c70:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8016c72:	68fa      	ldr	r2, [r7, #12]
 8016c74:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016c78:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	22ff      	movs	r2, #255	@ 0xff
 8016c7e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8016c82:	2300      	movs	r3, #0
}
 8016c84:	4618      	mov	r0, r3
 8016c86:	3710      	adds	r7, #16
 8016c88:	46bd      	mov	sp, r7
 8016c8a:	bd80      	pop	{r7, pc}

08016c8c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016c8c:	b480      	push	{r7}
 8016c8e:	b083      	sub	sp, #12
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	2243      	movs	r2, #67	@ 0x43
 8016c98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8016c9a:	4b03      	ldr	r3, [pc, #12]	@ (8016ca8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	370c      	adds	r7, #12
 8016ca0:	46bd      	mov	sp, r7
 8016ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca6:	4770      	bx	lr
 8016ca8:	20000928 	.word	0x20000928

08016cac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016cac:	b480      	push	{r7}
 8016cae:	b083      	sub	sp, #12
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	2243      	movs	r2, #67	@ 0x43
 8016cb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8016cba:	4b03      	ldr	r3, [pc, #12]	@ (8016cc8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	370c      	adds	r7, #12
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc6:	4770      	bx	lr
 8016cc8:	200008e4 	.word	0x200008e4

08016ccc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016ccc:	b480      	push	{r7}
 8016cce:	b083      	sub	sp, #12
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	2243      	movs	r2, #67	@ 0x43
 8016cd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8016cda:	4b03      	ldr	r3, [pc, #12]	@ (8016ce8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8016cdc:	4618      	mov	r0, r3
 8016cde:	370c      	adds	r7, #12
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce6:	4770      	bx	lr
 8016ce8:	2000096c 	.word	0x2000096c

08016cec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016cec:	b480      	push	{r7}
 8016cee:	b083      	sub	sp, #12
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	220a      	movs	r2, #10
 8016cf8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8016cfa:	4b03      	ldr	r3, [pc, #12]	@ (8016d08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	370c      	adds	r7, #12
 8016d00:	46bd      	mov	sp, r7
 8016d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d06:	4770      	bx	lr
 8016d08:	200008a0 	.word	0x200008a0

08016d0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016d0c:	b480      	push	{r7}
 8016d0e:	b083      	sub	sp, #12
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
 8016d14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8016d16:	683b      	ldr	r3, [r7, #0]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d101      	bne.n	8016d20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016d1c:	2303      	movs	r3, #3
 8016d1e:	e004      	b.n	8016d2a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	683a      	ldr	r2, [r7, #0]
 8016d24:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8016d28:	2300      	movs	r3, #0
}
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	370c      	adds	r7, #12
 8016d2e:	46bd      	mov	sp, r7
 8016d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d34:	4770      	bx	lr

08016d36 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8016d36:	b480      	push	{r7}
 8016d38:	b087      	sub	sp, #28
 8016d3a:	af00      	add	r7, sp, #0
 8016d3c:	60f8      	str	r0, [r7, #12]
 8016d3e:	60b9      	str	r1, [r7, #8]
 8016d40:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016d48:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8016d4a:	697b      	ldr	r3, [r7, #20]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d101      	bne.n	8016d54 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8016d50:	2303      	movs	r3, #3
 8016d52:	e008      	b.n	8016d66 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8016d54:	697b      	ldr	r3, [r7, #20]
 8016d56:	68ba      	ldr	r2, [r7, #8]
 8016d58:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8016d5c:	697b      	ldr	r3, [r7, #20]
 8016d5e:	687a      	ldr	r2, [r7, #4]
 8016d60:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8016d64:	2300      	movs	r3, #0
}
 8016d66:	4618      	mov	r0, r3
 8016d68:	371c      	adds	r7, #28
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d70:	4770      	bx	lr

08016d72 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8016d72:	b480      	push	{r7}
 8016d74:	b085      	sub	sp, #20
 8016d76:	af00      	add	r7, sp, #0
 8016d78:	6078      	str	r0, [r7, #4]
 8016d7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016d82:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d101      	bne.n	8016d8e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8016d8a:	2303      	movs	r3, #3
 8016d8c:	e004      	b.n	8016d98 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	683a      	ldr	r2, [r7, #0]
 8016d92:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8016d96:	2300      	movs	r3, #0
}
 8016d98:	4618      	mov	r0, r3
 8016d9a:	3714      	adds	r7, #20
 8016d9c:	46bd      	mov	sp, r7
 8016d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da2:	4770      	bx	lr

08016da4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8016da4:	b580      	push	{r7, lr}
 8016da6:	b084      	sub	sp, #16
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016db2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8016db4:	2301      	movs	r3, #1
 8016db6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d101      	bne.n	8016dc6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016dc2:	2303      	movs	r3, #3
 8016dc4:	e01a      	b.n	8016dfc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8016dc6:	68bb      	ldr	r3, [r7, #8]
 8016dc8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d114      	bne.n	8016dfa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8016dd0:	68bb      	ldr	r3, [r7, #8]
 8016dd2:	2201      	movs	r2, #1
 8016dd4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8016dd8:	68bb      	ldr	r3, [r7, #8]
 8016dda:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8016de2:	68bb      	ldr	r3, [r7, #8]
 8016de4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8016de8:	68bb      	ldr	r3, [r7, #8]
 8016dea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8016dee:	2181      	movs	r1, #129	@ 0x81
 8016df0:	6878      	ldr	r0, [r7, #4]
 8016df2:	f7eb fc68 	bl	80026c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8016df6:	2300      	movs	r3, #0
 8016df8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8016dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	3710      	adds	r7, #16
 8016e00:	46bd      	mov	sp, r7
 8016e02:	bd80      	pop	{r7, pc}

08016e04 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b084      	sub	sp, #16
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016e12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d101      	bne.n	8016e22 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8016e1e:	2303      	movs	r3, #3
 8016e20:	e016      	b.n	8016e50 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	7c1b      	ldrb	r3, [r3, #16]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d109      	bne.n	8016e3e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016e30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016e34:	2101      	movs	r1, #1
 8016e36:	6878      	ldr	r0, [r7, #4]
 8016e38:	f7eb fc66 	bl	8002708 <USBD_LL_PrepareReceive>
 8016e3c:	e007      	b.n	8016e4e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016e44:	2340      	movs	r3, #64	@ 0x40
 8016e46:	2101      	movs	r1, #1
 8016e48:	6878      	ldr	r0, [r7, #4]
 8016e4a:	f7eb fc5d 	bl	8002708 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016e4e:	2300      	movs	r3, #0
}
 8016e50:	4618      	mov	r0, r3
 8016e52:	3710      	adds	r7, #16
 8016e54:	46bd      	mov	sp, r7
 8016e56:	bd80      	pop	{r7, pc}

08016e58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b086      	sub	sp, #24
 8016e5c:	af00      	add	r7, sp, #0
 8016e5e:	60f8      	str	r0, [r7, #12]
 8016e60:	60b9      	str	r1, [r7, #8]
 8016e62:	4613      	mov	r3, r2
 8016e64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d101      	bne.n	8016e70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8016e6c:	2303      	movs	r3, #3
 8016e6e:	e01f      	b.n	8016eb0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	2200      	movs	r2, #0
 8016e74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	2200      	movs	r2, #0
 8016e84:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016e88:	68bb      	ldr	r3, [r7, #8]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d003      	beq.n	8016e96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	68ba      	ldr	r2, [r7, #8]
 8016e92:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	2201      	movs	r2, #1
 8016e9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	79fa      	ldrb	r2, [r7, #7]
 8016ea2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016ea4:	68f8      	ldr	r0, [r7, #12]
 8016ea6:	f7eb fabd 	bl	8002424 <USBD_LL_Init>
 8016eaa:	4603      	mov	r3, r0
 8016eac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8016eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	3718      	adds	r7, #24
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	bd80      	pop	{r7, pc}

08016eb8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b084      	sub	sp, #16
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	6078      	str	r0, [r7, #4]
 8016ec0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016ec6:	683b      	ldr	r3, [r7, #0]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d101      	bne.n	8016ed0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8016ecc:	2303      	movs	r3, #3
 8016ece:	e016      	b.n	8016efe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	683a      	ldr	r2, [r7, #0]
 8016ed4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d00b      	beq.n	8016efc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016eec:	f107 020e 	add.w	r2, r7, #14
 8016ef0:	4610      	mov	r0, r2
 8016ef2:	4798      	blx	r3
 8016ef4:	4602      	mov	r2, r0
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8016efc:	2300      	movs	r3, #0
}
 8016efe:	4618      	mov	r0, r3
 8016f00:	3710      	adds	r7, #16
 8016f02:	46bd      	mov	sp, r7
 8016f04:	bd80      	pop	{r7, pc}

08016f06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016f06:	b580      	push	{r7, lr}
 8016f08:	b082      	sub	sp, #8
 8016f0a:	af00      	add	r7, sp, #0
 8016f0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016f0e:	6878      	ldr	r0, [r7, #4]
 8016f10:	f7eb faf0 	bl	80024f4 <USBD_LL_Start>
 8016f14:	4603      	mov	r3, r0
}
 8016f16:	4618      	mov	r0, r3
 8016f18:	3708      	adds	r7, #8
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	bd80      	pop	{r7, pc}

08016f1e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8016f1e:	b480      	push	{r7}
 8016f20:	b083      	sub	sp, #12
 8016f22:	af00      	add	r7, sp, #0
 8016f24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016f26:	2300      	movs	r3, #0
}
 8016f28:	4618      	mov	r0, r3
 8016f2a:	370c      	adds	r7, #12
 8016f2c:	46bd      	mov	sp, r7
 8016f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f32:	4770      	bx	lr

08016f34 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b084      	sub	sp, #16
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	6078      	str	r0, [r7, #4]
 8016f3c:	460b      	mov	r3, r1
 8016f3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8016f40:	2303      	movs	r3, #3
 8016f42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d009      	beq.n	8016f62 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	78fa      	ldrb	r2, [r7, #3]
 8016f58:	4611      	mov	r1, r2
 8016f5a:	6878      	ldr	r0, [r7, #4]
 8016f5c:	4798      	blx	r3
 8016f5e:	4603      	mov	r3, r0
 8016f60:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8016f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f64:	4618      	mov	r0, r3
 8016f66:	3710      	adds	r7, #16
 8016f68:	46bd      	mov	sp, r7
 8016f6a:	bd80      	pop	{r7, pc}

08016f6c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b082      	sub	sp, #8
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	6078      	str	r0, [r7, #4]
 8016f74:	460b      	mov	r3, r1
 8016f76:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d007      	beq.n	8016f92 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016f88:	685b      	ldr	r3, [r3, #4]
 8016f8a:	78fa      	ldrb	r2, [r7, #3]
 8016f8c:	4611      	mov	r1, r2
 8016f8e:	6878      	ldr	r0, [r7, #4]
 8016f90:	4798      	blx	r3
  }

  return USBD_OK;
 8016f92:	2300      	movs	r3, #0
}
 8016f94:	4618      	mov	r0, r3
 8016f96:	3708      	adds	r7, #8
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	bd80      	pop	{r7, pc}

08016f9c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	b084      	sub	sp, #16
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	6078      	str	r0, [r7, #4]
 8016fa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016fac:	6839      	ldr	r1, [r7, #0]
 8016fae:	4618      	mov	r0, r3
 8016fb0:	f000 ff90 	bl	8017ed4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	2201      	movs	r2, #1
 8016fb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8016fc2:	461a      	mov	r2, r3
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016fd0:	f003 031f 	and.w	r3, r3, #31
 8016fd4:	2b02      	cmp	r3, #2
 8016fd6:	d01a      	beq.n	801700e <USBD_LL_SetupStage+0x72>
 8016fd8:	2b02      	cmp	r3, #2
 8016fda:	d822      	bhi.n	8017022 <USBD_LL_SetupStage+0x86>
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d002      	beq.n	8016fe6 <USBD_LL_SetupStage+0x4a>
 8016fe0:	2b01      	cmp	r3, #1
 8016fe2:	d00a      	beq.n	8016ffa <USBD_LL_SetupStage+0x5e>
 8016fe4:	e01d      	b.n	8017022 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016fec:	4619      	mov	r1, r3
 8016fee:	6878      	ldr	r0, [r7, #4]
 8016ff0:	f000 fa62 	bl	80174b8 <USBD_StdDevReq>
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8016ff8:	e020      	b.n	801703c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017000:	4619      	mov	r1, r3
 8017002:	6878      	ldr	r0, [r7, #4]
 8017004:	f000 fac6 	bl	8017594 <USBD_StdItfReq>
 8017008:	4603      	mov	r3, r0
 801700a:	73fb      	strb	r3, [r7, #15]
      break;
 801700c:	e016      	b.n	801703c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017014:	4619      	mov	r1, r3
 8017016:	6878      	ldr	r0, [r7, #4]
 8017018:	f000 fb05 	bl	8017626 <USBD_StdEPReq>
 801701c:	4603      	mov	r3, r0
 801701e:	73fb      	strb	r3, [r7, #15]
      break;
 8017020:	e00c      	b.n	801703c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017028:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801702c:	b2db      	uxtb	r3, r3
 801702e:	4619      	mov	r1, r3
 8017030:	6878      	ldr	r0, [r7, #4]
 8017032:	f7eb fabf 	bl	80025b4 <USBD_LL_StallEP>
 8017036:	4603      	mov	r3, r0
 8017038:	73fb      	strb	r3, [r7, #15]
      break;
 801703a:	bf00      	nop
  }

  return ret;
 801703c:	7bfb      	ldrb	r3, [r7, #15]
}
 801703e:	4618      	mov	r0, r3
 8017040:	3710      	adds	r7, #16
 8017042:	46bd      	mov	sp, r7
 8017044:	bd80      	pop	{r7, pc}

08017046 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017046:	b580      	push	{r7, lr}
 8017048:	b086      	sub	sp, #24
 801704a:	af00      	add	r7, sp, #0
 801704c:	60f8      	str	r0, [r7, #12]
 801704e:	460b      	mov	r3, r1
 8017050:	607a      	str	r2, [r7, #4]
 8017052:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8017054:	7afb      	ldrb	r3, [r7, #11]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d138      	bne.n	80170cc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8017060:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8017068:	2b03      	cmp	r3, #3
 801706a:	d14a      	bne.n	8017102 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801706c:	693b      	ldr	r3, [r7, #16]
 801706e:	689a      	ldr	r2, [r3, #8]
 8017070:	693b      	ldr	r3, [r7, #16]
 8017072:	68db      	ldr	r3, [r3, #12]
 8017074:	429a      	cmp	r2, r3
 8017076:	d913      	bls.n	80170a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017078:	693b      	ldr	r3, [r7, #16]
 801707a:	689a      	ldr	r2, [r3, #8]
 801707c:	693b      	ldr	r3, [r7, #16]
 801707e:	68db      	ldr	r3, [r3, #12]
 8017080:	1ad2      	subs	r2, r2, r3
 8017082:	693b      	ldr	r3, [r7, #16]
 8017084:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8017086:	693b      	ldr	r3, [r7, #16]
 8017088:	68da      	ldr	r2, [r3, #12]
 801708a:	693b      	ldr	r3, [r7, #16]
 801708c:	689b      	ldr	r3, [r3, #8]
 801708e:	4293      	cmp	r3, r2
 8017090:	bf28      	it	cs
 8017092:	4613      	movcs	r3, r2
 8017094:	461a      	mov	r2, r3
 8017096:	6879      	ldr	r1, [r7, #4]
 8017098:	68f8      	ldr	r0, [r7, #12]
 801709a:	f001 f80f 	bl	80180bc <USBD_CtlContinueRx>
 801709e:	e030      	b.n	8017102 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80170a6:	b2db      	uxtb	r3, r3
 80170a8:	2b03      	cmp	r3, #3
 80170aa:	d10b      	bne.n	80170c4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80170b2:	691b      	ldr	r3, [r3, #16]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d005      	beq.n	80170c4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80170be:	691b      	ldr	r3, [r3, #16]
 80170c0:	68f8      	ldr	r0, [r7, #12]
 80170c2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80170c4:	68f8      	ldr	r0, [r7, #12]
 80170c6:	f001 f80a 	bl	80180de <USBD_CtlSendStatus>
 80170ca:	e01a      	b.n	8017102 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80170d2:	b2db      	uxtb	r3, r3
 80170d4:	2b03      	cmp	r3, #3
 80170d6:	d114      	bne.n	8017102 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80170de:	699b      	ldr	r3, [r3, #24]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d00e      	beq.n	8017102 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80170ea:	699b      	ldr	r3, [r3, #24]
 80170ec:	7afa      	ldrb	r2, [r7, #11]
 80170ee:	4611      	mov	r1, r2
 80170f0:	68f8      	ldr	r0, [r7, #12]
 80170f2:	4798      	blx	r3
 80170f4:	4603      	mov	r3, r0
 80170f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80170f8:	7dfb      	ldrb	r3, [r7, #23]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d001      	beq.n	8017102 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80170fe:	7dfb      	ldrb	r3, [r7, #23]
 8017100:	e000      	b.n	8017104 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8017102:	2300      	movs	r3, #0
}
 8017104:	4618      	mov	r0, r3
 8017106:	3718      	adds	r7, #24
 8017108:	46bd      	mov	sp, r7
 801710a:	bd80      	pop	{r7, pc}

0801710c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801710c:	b580      	push	{r7, lr}
 801710e:	b086      	sub	sp, #24
 8017110:	af00      	add	r7, sp, #0
 8017112:	60f8      	str	r0, [r7, #12]
 8017114:	460b      	mov	r3, r1
 8017116:	607a      	str	r2, [r7, #4]
 8017118:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801711a:	7afb      	ldrb	r3, [r7, #11]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d16b      	bne.n	80171f8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	3314      	adds	r3, #20
 8017124:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801712c:	2b02      	cmp	r3, #2
 801712e:	d156      	bne.n	80171de <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8017130:	693b      	ldr	r3, [r7, #16]
 8017132:	689a      	ldr	r2, [r3, #8]
 8017134:	693b      	ldr	r3, [r7, #16]
 8017136:	68db      	ldr	r3, [r3, #12]
 8017138:	429a      	cmp	r2, r3
 801713a:	d914      	bls.n	8017166 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801713c:	693b      	ldr	r3, [r7, #16]
 801713e:	689a      	ldr	r2, [r3, #8]
 8017140:	693b      	ldr	r3, [r7, #16]
 8017142:	68db      	ldr	r3, [r3, #12]
 8017144:	1ad2      	subs	r2, r2, r3
 8017146:	693b      	ldr	r3, [r7, #16]
 8017148:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801714a:	693b      	ldr	r3, [r7, #16]
 801714c:	689b      	ldr	r3, [r3, #8]
 801714e:	461a      	mov	r2, r3
 8017150:	6879      	ldr	r1, [r7, #4]
 8017152:	68f8      	ldr	r0, [r7, #12]
 8017154:	f000 ff84 	bl	8018060 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017158:	2300      	movs	r3, #0
 801715a:	2200      	movs	r2, #0
 801715c:	2100      	movs	r1, #0
 801715e:	68f8      	ldr	r0, [r7, #12]
 8017160:	f7eb fad2 	bl	8002708 <USBD_LL_PrepareReceive>
 8017164:	e03b      	b.n	80171de <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017166:	693b      	ldr	r3, [r7, #16]
 8017168:	68da      	ldr	r2, [r3, #12]
 801716a:	693b      	ldr	r3, [r7, #16]
 801716c:	689b      	ldr	r3, [r3, #8]
 801716e:	429a      	cmp	r2, r3
 8017170:	d11c      	bne.n	80171ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8017172:	693b      	ldr	r3, [r7, #16]
 8017174:	685a      	ldr	r2, [r3, #4]
 8017176:	693b      	ldr	r3, [r7, #16]
 8017178:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801717a:	429a      	cmp	r2, r3
 801717c:	d316      	bcc.n	80171ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801717e:	693b      	ldr	r3, [r7, #16]
 8017180:	685a      	ldr	r2, [r3, #4]
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8017188:	429a      	cmp	r2, r3
 801718a:	d20f      	bcs.n	80171ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801718c:	2200      	movs	r2, #0
 801718e:	2100      	movs	r1, #0
 8017190:	68f8      	ldr	r0, [r7, #12]
 8017192:	f000 ff65 	bl	8018060 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	2200      	movs	r2, #0
 801719a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801719e:	2300      	movs	r3, #0
 80171a0:	2200      	movs	r2, #0
 80171a2:	2100      	movs	r1, #0
 80171a4:	68f8      	ldr	r0, [r7, #12]
 80171a6:	f7eb faaf 	bl	8002708 <USBD_LL_PrepareReceive>
 80171aa:	e018      	b.n	80171de <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80171b2:	b2db      	uxtb	r3, r3
 80171b4:	2b03      	cmp	r3, #3
 80171b6:	d10b      	bne.n	80171d0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80171be:	68db      	ldr	r3, [r3, #12]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d005      	beq.n	80171d0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80171ca:	68db      	ldr	r3, [r3, #12]
 80171cc:	68f8      	ldr	r0, [r7, #12]
 80171ce:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80171d0:	2180      	movs	r1, #128	@ 0x80
 80171d2:	68f8      	ldr	r0, [r7, #12]
 80171d4:	f7eb f9ee 	bl	80025b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80171d8:	68f8      	ldr	r0, [r7, #12]
 80171da:	f000 ff93 	bl	8018104 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80171e4:	2b01      	cmp	r3, #1
 80171e6:	d122      	bne.n	801722e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80171e8:	68f8      	ldr	r0, [r7, #12]
 80171ea:	f7ff fe98 	bl	8016f1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	2200      	movs	r2, #0
 80171f2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80171f6:	e01a      	b.n	801722e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80171fe:	b2db      	uxtb	r3, r3
 8017200:	2b03      	cmp	r3, #3
 8017202:	d114      	bne.n	801722e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801720a:	695b      	ldr	r3, [r3, #20]
 801720c:	2b00      	cmp	r3, #0
 801720e:	d00e      	beq.n	801722e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017216:	695b      	ldr	r3, [r3, #20]
 8017218:	7afa      	ldrb	r2, [r7, #11]
 801721a:	4611      	mov	r1, r2
 801721c:	68f8      	ldr	r0, [r7, #12]
 801721e:	4798      	blx	r3
 8017220:	4603      	mov	r3, r0
 8017222:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8017224:	7dfb      	ldrb	r3, [r7, #23]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d001      	beq.n	801722e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801722a:	7dfb      	ldrb	r3, [r7, #23]
 801722c:	e000      	b.n	8017230 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801722e:	2300      	movs	r3, #0
}
 8017230:	4618      	mov	r0, r3
 8017232:	3718      	adds	r7, #24
 8017234:	46bd      	mov	sp, r7
 8017236:	bd80      	pop	{r7, pc}

08017238 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8017238:	b580      	push	{r7, lr}
 801723a:	b082      	sub	sp, #8
 801723c:	af00      	add	r7, sp, #0
 801723e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	2201      	movs	r2, #1
 8017244:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	2200      	movs	r2, #0
 801724c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	2200      	movs	r2, #0
 8017254:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	2200      	movs	r2, #0
 801725a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017264:	2b00      	cmp	r3, #0
 8017266:	d101      	bne.n	801726c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8017268:	2303      	movs	r3, #3
 801726a:	e02f      	b.n	80172cc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8017272:	2b00      	cmp	r3, #0
 8017274:	d00f      	beq.n	8017296 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801727c:	685b      	ldr	r3, [r3, #4]
 801727e:	2b00      	cmp	r3, #0
 8017280:	d009      	beq.n	8017296 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017288:	685b      	ldr	r3, [r3, #4]
 801728a:	687a      	ldr	r2, [r7, #4]
 801728c:	6852      	ldr	r2, [r2, #4]
 801728e:	b2d2      	uxtb	r2, r2
 8017290:	4611      	mov	r1, r2
 8017292:	6878      	ldr	r0, [r7, #4]
 8017294:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017296:	2340      	movs	r3, #64	@ 0x40
 8017298:	2200      	movs	r2, #0
 801729a:	2100      	movs	r1, #0
 801729c:	6878      	ldr	r0, [r7, #4]
 801729e:	f7eb f944 	bl	800252a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	2201      	movs	r2, #1
 80172a6:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	2240      	movs	r2, #64	@ 0x40
 80172ae:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80172b2:	2340      	movs	r3, #64	@ 0x40
 80172b4:	2200      	movs	r2, #0
 80172b6:	2180      	movs	r1, #128	@ 0x80
 80172b8:	6878      	ldr	r0, [r7, #4]
 80172ba:	f7eb f936 	bl	800252a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	2201      	movs	r2, #1
 80172c2:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	2240      	movs	r2, #64	@ 0x40
 80172c8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80172ca:	2300      	movs	r3, #0
}
 80172cc:	4618      	mov	r0, r3
 80172ce:	3708      	adds	r7, #8
 80172d0:	46bd      	mov	sp, r7
 80172d2:	bd80      	pop	{r7, pc}

080172d4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80172d4:	b480      	push	{r7}
 80172d6:	b083      	sub	sp, #12
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
 80172dc:	460b      	mov	r3, r1
 80172de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	78fa      	ldrb	r2, [r7, #3]
 80172e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80172e6:	2300      	movs	r3, #0
}
 80172e8:	4618      	mov	r0, r3
 80172ea:	370c      	adds	r7, #12
 80172ec:	46bd      	mov	sp, r7
 80172ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172f2:	4770      	bx	lr

080172f4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80172f4:	b480      	push	{r7}
 80172f6:	b083      	sub	sp, #12
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017302:	b2da      	uxtb	r2, r3
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	2204      	movs	r2, #4
 801730e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8017312:	2300      	movs	r3, #0
}
 8017314:	4618      	mov	r0, r3
 8017316:	370c      	adds	r7, #12
 8017318:	46bd      	mov	sp, r7
 801731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801731e:	4770      	bx	lr

08017320 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8017320:	b480      	push	{r7}
 8017322:	b083      	sub	sp, #12
 8017324:	af00      	add	r7, sp, #0
 8017326:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801732e:	b2db      	uxtb	r3, r3
 8017330:	2b04      	cmp	r3, #4
 8017332:	d106      	bne.n	8017342 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801733a:	b2da      	uxtb	r2, r3
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8017342:	2300      	movs	r3, #0
}
 8017344:	4618      	mov	r0, r3
 8017346:	370c      	adds	r7, #12
 8017348:	46bd      	mov	sp, r7
 801734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734e:	4770      	bx	lr

08017350 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b082      	sub	sp, #8
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801735e:	2b00      	cmp	r3, #0
 8017360:	d101      	bne.n	8017366 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8017362:	2303      	movs	r3, #3
 8017364:	e012      	b.n	801738c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801736c:	b2db      	uxtb	r3, r3
 801736e:	2b03      	cmp	r3, #3
 8017370:	d10b      	bne.n	801738a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017378:	69db      	ldr	r3, [r3, #28]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d005      	beq.n	801738a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017384:	69db      	ldr	r3, [r3, #28]
 8017386:	6878      	ldr	r0, [r7, #4]
 8017388:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801738a:	2300      	movs	r3, #0
}
 801738c:	4618      	mov	r0, r3
 801738e:	3708      	adds	r7, #8
 8017390:	46bd      	mov	sp, r7
 8017392:	bd80      	pop	{r7, pc}

08017394 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b082      	sub	sp, #8
 8017398:	af00      	add	r7, sp, #0
 801739a:	6078      	str	r0, [r7, #4]
 801739c:	460b      	mov	r3, r1
 801739e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d101      	bne.n	80173ae <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80173aa:	2303      	movs	r3, #3
 80173ac:	e014      	b.n	80173d8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80173b4:	b2db      	uxtb	r3, r3
 80173b6:	2b03      	cmp	r3, #3
 80173b8:	d10d      	bne.n	80173d6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80173c0:	6a1b      	ldr	r3, [r3, #32]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d007      	beq.n	80173d6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80173cc:	6a1b      	ldr	r3, [r3, #32]
 80173ce:	78fa      	ldrb	r2, [r7, #3]
 80173d0:	4611      	mov	r1, r2
 80173d2:	6878      	ldr	r0, [r7, #4]
 80173d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80173d6:	2300      	movs	r3, #0
}
 80173d8:	4618      	mov	r0, r3
 80173da:	3708      	adds	r7, #8
 80173dc:	46bd      	mov	sp, r7
 80173de:	bd80      	pop	{r7, pc}

080173e0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b082      	sub	sp, #8
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	6078      	str	r0, [r7, #4]
 80173e8:	460b      	mov	r3, r1
 80173ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d101      	bne.n	80173fa <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80173f6:	2303      	movs	r3, #3
 80173f8:	e014      	b.n	8017424 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017400:	b2db      	uxtb	r3, r3
 8017402:	2b03      	cmp	r3, #3
 8017404:	d10d      	bne.n	8017422 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801740c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801740e:	2b00      	cmp	r3, #0
 8017410:	d007      	beq.n	8017422 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801741a:	78fa      	ldrb	r2, [r7, #3]
 801741c:	4611      	mov	r1, r2
 801741e:	6878      	ldr	r0, [r7, #4]
 8017420:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017422:	2300      	movs	r3, #0
}
 8017424:	4618      	mov	r0, r3
 8017426:	3708      	adds	r7, #8
 8017428:	46bd      	mov	sp, r7
 801742a:	bd80      	pop	{r7, pc}

0801742c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801742c:	b480      	push	{r7}
 801742e:	b083      	sub	sp, #12
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017434:	2300      	movs	r3, #0
}
 8017436:	4618      	mov	r0, r3
 8017438:	370c      	adds	r7, #12
 801743a:	46bd      	mov	sp, r7
 801743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017440:	4770      	bx	lr

08017442 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8017442:	b580      	push	{r7, lr}
 8017444:	b082      	sub	sp, #8
 8017446:	af00      	add	r7, sp, #0
 8017448:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	2201      	movs	r2, #1
 801744e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017458:	2b00      	cmp	r3, #0
 801745a:	d009      	beq.n	8017470 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017462:	685b      	ldr	r3, [r3, #4]
 8017464:	687a      	ldr	r2, [r7, #4]
 8017466:	6852      	ldr	r2, [r2, #4]
 8017468:	b2d2      	uxtb	r2, r2
 801746a:	4611      	mov	r1, r2
 801746c:	6878      	ldr	r0, [r7, #4]
 801746e:	4798      	blx	r3
  }

  return USBD_OK;
 8017470:	2300      	movs	r3, #0
}
 8017472:	4618      	mov	r0, r3
 8017474:	3708      	adds	r7, #8
 8017476:	46bd      	mov	sp, r7
 8017478:	bd80      	pop	{r7, pc}

0801747a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801747a:	b480      	push	{r7}
 801747c:	b087      	sub	sp, #28
 801747e:	af00      	add	r7, sp, #0
 8017480:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8017486:	697b      	ldr	r3, [r7, #20]
 8017488:	781b      	ldrb	r3, [r3, #0]
 801748a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801748c:	697b      	ldr	r3, [r7, #20]
 801748e:	3301      	adds	r3, #1
 8017490:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8017492:	697b      	ldr	r3, [r7, #20]
 8017494:	781b      	ldrb	r3, [r3, #0]
 8017496:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8017498:	8a3b      	ldrh	r3, [r7, #16]
 801749a:	021b      	lsls	r3, r3, #8
 801749c:	b21a      	sxth	r2, r3
 801749e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80174a2:	4313      	orrs	r3, r2
 80174a4:	b21b      	sxth	r3, r3
 80174a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80174a8:	89fb      	ldrh	r3, [r7, #14]
}
 80174aa:	4618      	mov	r0, r3
 80174ac:	371c      	adds	r7, #28
 80174ae:	46bd      	mov	sp, r7
 80174b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b4:	4770      	bx	lr
	...

080174b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b084      	sub	sp, #16
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6078      	str	r0, [r7, #4]
 80174c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80174c2:	2300      	movs	r3, #0
 80174c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80174c6:	683b      	ldr	r3, [r7, #0]
 80174c8:	781b      	ldrb	r3, [r3, #0]
 80174ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80174ce:	2b40      	cmp	r3, #64	@ 0x40
 80174d0:	d005      	beq.n	80174de <USBD_StdDevReq+0x26>
 80174d2:	2b40      	cmp	r3, #64	@ 0x40
 80174d4:	d853      	bhi.n	801757e <USBD_StdDevReq+0xc6>
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d00b      	beq.n	80174f2 <USBD_StdDevReq+0x3a>
 80174da:	2b20      	cmp	r3, #32
 80174dc:	d14f      	bne.n	801757e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80174e4:	689b      	ldr	r3, [r3, #8]
 80174e6:	6839      	ldr	r1, [r7, #0]
 80174e8:	6878      	ldr	r0, [r7, #4]
 80174ea:	4798      	blx	r3
 80174ec:	4603      	mov	r3, r0
 80174ee:	73fb      	strb	r3, [r7, #15]
      break;
 80174f0:	e04a      	b.n	8017588 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80174f2:	683b      	ldr	r3, [r7, #0]
 80174f4:	785b      	ldrb	r3, [r3, #1]
 80174f6:	2b09      	cmp	r3, #9
 80174f8:	d83b      	bhi.n	8017572 <USBD_StdDevReq+0xba>
 80174fa:	a201      	add	r2, pc, #4	@ (adr r2, 8017500 <USBD_StdDevReq+0x48>)
 80174fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017500:	08017555 	.word	0x08017555
 8017504:	08017569 	.word	0x08017569
 8017508:	08017573 	.word	0x08017573
 801750c:	0801755f 	.word	0x0801755f
 8017510:	08017573 	.word	0x08017573
 8017514:	08017533 	.word	0x08017533
 8017518:	08017529 	.word	0x08017529
 801751c:	08017573 	.word	0x08017573
 8017520:	0801754b 	.word	0x0801754b
 8017524:	0801753d 	.word	0x0801753d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8017528:	6839      	ldr	r1, [r7, #0]
 801752a:	6878      	ldr	r0, [r7, #4]
 801752c:	f000 f9de 	bl	80178ec <USBD_GetDescriptor>
          break;
 8017530:	e024      	b.n	801757c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8017532:	6839      	ldr	r1, [r7, #0]
 8017534:	6878      	ldr	r0, [r7, #4]
 8017536:	f000 fb43 	bl	8017bc0 <USBD_SetAddress>
          break;
 801753a:	e01f      	b.n	801757c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801753c:	6839      	ldr	r1, [r7, #0]
 801753e:	6878      	ldr	r0, [r7, #4]
 8017540:	f000 fb82 	bl	8017c48 <USBD_SetConfig>
 8017544:	4603      	mov	r3, r0
 8017546:	73fb      	strb	r3, [r7, #15]
          break;
 8017548:	e018      	b.n	801757c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801754a:	6839      	ldr	r1, [r7, #0]
 801754c:	6878      	ldr	r0, [r7, #4]
 801754e:	f000 fc21 	bl	8017d94 <USBD_GetConfig>
          break;
 8017552:	e013      	b.n	801757c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8017554:	6839      	ldr	r1, [r7, #0]
 8017556:	6878      	ldr	r0, [r7, #4]
 8017558:	f000 fc52 	bl	8017e00 <USBD_GetStatus>
          break;
 801755c:	e00e      	b.n	801757c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801755e:	6839      	ldr	r1, [r7, #0]
 8017560:	6878      	ldr	r0, [r7, #4]
 8017562:	f000 fc81 	bl	8017e68 <USBD_SetFeature>
          break;
 8017566:	e009      	b.n	801757c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8017568:	6839      	ldr	r1, [r7, #0]
 801756a:	6878      	ldr	r0, [r7, #4]
 801756c:	f000 fc90 	bl	8017e90 <USBD_ClrFeature>
          break;
 8017570:	e004      	b.n	801757c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8017572:	6839      	ldr	r1, [r7, #0]
 8017574:	6878      	ldr	r0, [r7, #4]
 8017576:	f000 fce7 	bl	8017f48 <USBD_CtlError>
          break;
 801757a:	bf00      	nop
      }
      break;
 801757c:	e004      	b.n	8017588 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801757e:	6839      	ldr	r1, [r7, #0]
 8017580:	6878      	ldr	r0, [r7, #4]
 8017582:	f000 fce1 	bl	8017f48 <USBD_CtlError>
      break;
 8017586:	bf00      	nop
  }

  return ret;
 8017588:	7bfb      	ldrb	r3, [r7, #15]
}
 801758a:	4618      	mov	r0, r3
 801758c:	3710      	adds	r7, #16
 801758e:	46bd      	mov	sp, r7
 8017590:	bd80      	pop	{r7, pc}
 8017592:	bf00      	nop

08017594 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017594:	b580      	push	{r7, lr}
 8017596:	b084      	sub	sp, #16
 8017598:	af00      	add	r7, sp, #0
 801759a:	6078      	str	r0, [r7, #4]
 801759c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801759e:	2300      	movs	r3, #0
 80175a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80175a2:	683b      	ldr	r3, [r7, #0]
 80175a4:	781b      	ldrb	r3, [r3, #0]
 80175a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80175aa:	2b40      	cmp	r3, #64	@ 0x40
 80175ac:	d005      	beq.n	80175ba <USBD_StdItfReq+0x26>
 80175ae:	2b40      	cmp	r3, #64	@ 0x40
 80175b0:	d82f      	bhi.n	8017612 <USBD_StdItfReq+0x7e>
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d001      	beq.n	80175ba <USBD_StdItfReq+0x26>
 80175b6:	2b20      	cmp	r3, #32
 80175b8:	d12b      	bne.n	8017612 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80175c0:	b2db      	uxtb	r3, r3
 80175c2:	3b01      	subs	r3, #1
 80175c4:	2b02      	cmp	r3, #2
 80175c6:	d81d      	bhi.n	8017604 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80175c8:	683b      	ldr	r3, [r7, #0]
 80175ca:	889b      	ldrh	r3, [r3, #4]
 80175cc:	b2db      	uxtb	r3, r3
 80175ce:	2b01      	cmp	r3, #1
 80175d0:	d813      	bhi.n	80175fa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80175d8:	689b      	ldr	r3, [r3, #8]
 80175da:	6839      	ldr	r1, [r7, #0]
 80175dc:	6878      	ldr	r0, [r7, #4]
 80175de:	4798      	blx	r3
 80175e0:	4603      	mov	r3, r0
 80175e2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80175e4:	683b      	ldr	r3, [r7, #0]
 80175e6:	88db      	ldrh	r3, [r3, #6]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d110      	bne.n	801760e <USBD_StdItfReq+0x7a>
 80175ec:	7bfb      	ldrb	r3, [r7, #15]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d10d      	bne.n	801760e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80175f2:	6878      	ldr	r0, [r7, #4]
 80175f4:	f000 fd73 	bl	80180de <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80175f8:	e009      	b.n	801760e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80175fa:	6839      	ldr	r1, [r7, #0]
 80175fc:	6878      	ldr	r0, [r7, #4]
 80175fe:	f000 fca3 	bl	8017f48 <USBD_CtlError>
          break;
 8017602:	e004      	b.n	801760e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8017604:	6839      	ldr	r1, [r7, #0]
 8017606:	6878      	ldr	r0, [r7, #4]
 8017608:	f000 fc9e 	bl	8017f48 <USBD_CtlError>
          break;
 801760c:	e000      	b.n	8017610 <USBD_StdItfReq+0x7c>
          break;
 801760e:	bf00      	nop
      }
      break;
 8017610:	e004      	b.n	801761c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8017612:	6839      	ldr	r1, [r7, #0]
 8017614:	6878      	ldr	r0, [r7, #4]
 8017616:	f000 fc97 	bl	8017f48 <USBD_CtlError>
      break;
 801761a:	bf00      	nop
  }

  return ret;
 801761c:	7bfb      	ldrb	r3, [r7, #15]
}
 801761e:	4618      	mov	r0, r3
 8017620:	3710      	adds	r7, #16
 8017622:	46bd      	mov	sp, r7
 8017624:	bd80      	pop	{r7, pc}

08017626 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017626:	b580      	push	{r7, lr}
 8017628:	b084      	sub	sp, #16
 801762a:	af00      	add	r7, sp, #0
 801762c:	6078      	str	r0, [r7, #4]
 801762e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8017630:	2300      	movs	r3, #0
 8017632:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8017634:	683b      	ldr	r3, [r7, #0]
 8017636:	889b      	ldrh	r3, [r3, #4]
 8017638:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801763a:	683b      	ldr	r3, [r7, #0]
 801763c:	781b      	ldrb	r3, [r3, #0]
 801763e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017642:	2b40      	cmp	r3, #64	@ 0x40
 8017644:	d007      	beq.n	8017656 <USBD_StdEPReq+0x30>
 8017646:	2b40      	cmp	r3, #64	@ 0x40
 8017648:	f200 8145 	bhi.w	80178d6 <USBD_StdEPReq+0x2b0>
 801764c:	2b00      	cmp	r3, #0
 801764e:	d00c      	beq.n	801766a <USBD_StdEPReq+0x44>
 8017650:	2b20      	cmp	r3, #32
 8017652:	f040 8140 	bne.w	80178d6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801765c:	689b      	ldr	r3, [r3, #8]
 801765e:	6839      	ldr	r1, [r7, #0]
 8017660:	6878      	ldr	r0, [r7, #4]
 8017662:	4798      	blx	r3
 8017664:	4603      	mov	r3, r0
 8017666:	73fb      	strb	r3, [r7, #15]
      break;
 8017668:	e13a      	b.n	80178e0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801766a:	683b      	ldr	r3, [r7, #0]
 801766c:	785b      	ldrb	r3, [r3, #1]
 801766e:	2b03      	cmp	r3, #3
 8017670:	d007      	beq.n	8017682 <USBD_StdEPReq+0x5c>
 8017672:	2b03      	cmp	r3, #3
 8017674:	f300 8129 	bgt.w	80178ca <USBD_StdEPReq+0x2a4>
 8017678:	2b00      	cmp	r3, #0
 801767a:	d07f      	beq.n	801777c <USBD_StdEPReq+0x156>
 801767c:	2b01      	cmp	r3, #1
 801767e:	d03c      	beq.n	80176fa <USBD_StdEPReq+0xd4>
 8017680:	e123      	b.n	80178ca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017688:	b2db      	uxtb	r3, r3
 801768a:	2b02      	cmp	r3, #2
 801768c:	d002      	beq.n	8017694 <USBD_StdEPReq+0x6e>
 801768e:	2b03      	cmp	r3, #3
 8017690:	d016      	beq.n	80176c0 <USBD_StdEPReq+0x9a>
 8017692:	e02c      	b.n	80176ee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017694:	7bbb      	ldrb	r3, [r7, #14]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d00d      	beq.n	80176b6 <USBD_StdEPReq+0x90>
 801769a:	7bbb      	ldrb	r3, [r7, #14]
 801769c:	2b80      	cmp	r3, #128	@ 0x80
 801769e:	d00a      	beq.n	80176b6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80176a0:	7bbb      	ldrb	r3, [r7, #14]
 80176a2:	4619      	mov	r1, r3
 80176a4:	6878      	ldr	r0, [r7, #4]
 80176a6:	f7ea ff85 	bl	80025b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80176aa:	2180      	movs	r1, #128	@ 0x80
 80176ac:	6878      	ldr	r0, [r7, #4]
 80176ae:	f7ea ff81 	bl	80025b4 <USBD_LL_StallEP>
 80176b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80176b4:	e020      	b.n	80176f8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80176b6:	6839      	ldr	r1, [r7, #0]
 80176b8:	6878      	ldr	r0, [r7, #4]
 80176ba:	f000 fc45 	bl	8017f48 <USBD_CtlError>
              break;
 80176be:	e01b      	b.n	80176f8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80176c0:	683b      	ldr	r3, [r7, #0]
 80176c2:	885b      	ldrh	r3, [r3, #2]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d10e      	bne.n	80176e6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80176c8:	7bbb      	ldrb	r3, [r7, #14]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d00b      	beq.n	80176e6 <USBD_StdEPReq+0xc0>
 80176ce:	7bbb      	ldrb	r3, [r7, #14]
 80176d0:	2b80      	cmp	r3, #128	@ 0x80
 80176d2:	d008      	beq.n	80176e6 <USBD_StdEPReq+0xc0>
 80176d4:	683b      	ldr	r3, [r7, #0]
 80176d6:	88db      	ldrh	r3, [r3, #6]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d104      	bne.n	80176e6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80176dc:	7bbb      	ldrb	r3, [r7, #14]
 80176de:	4619      	mov	r1, r3
 80176e0:	6878      	ldr	r0, [r7, #4]
 80176e2:	f7ea ff67 	bl	80025b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80176e6:	6878      	ldr	r0, [r7, #4]
 80176e8:	f000 fcf9 	bl	80180de <USBD_CtlSendStatus>

              break;
 80176ec:	e004      	b.n	80176f8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80176ee:	6839      	ldr	r1, [r7, #0]
 80176f0:	6878      	ldr	r0, [r7, #4]
 80176f2:	f000 fc29 	bl	8017f48 <USBD_CtlError>
              break;
 80176f6:	bf00      	nop
          }
          break;
 80176f8:	e0ec      	b.n	80178d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017700:	b2db      	uxtb	r3, r3
 8017702:	2b02      	cmp	r3, #2
 8017704:	d002      	beq.n	801770c <USBD_StdEPReq+0xe6>
 8017706:	2b03      	cmp	r3, #3
 8017708:	d016      	beq.n	8017738 <USBD_StdEPReq+0x112>
 801770a:	e030      	b.n	801776e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801770c:	7bbb      	ldrb	r3, [r7, #14]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d00d      	beq.n	801772e <USBD_StdEPReq+0x108>
 8017712:	7bbb      	ldrb	r3, [r7, #14]
 8017714:	2b80      	cmp	r3, #128	@ 0x80
 8017716:	d00a      	beq.n	801772e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017718:	7bbb      	ldrb	r3, [r7, #14]
 801771a:	4619      	mov	r1, r3
 801771c:	6878      	ldr	r0, [r7, #4]
 801771e:	f7ea ff49 	bl	80025b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017722:	2180      	movs	r1, #128	@ 0x80
 8017724:	6878      	ldr	r0, [r7, #4]
 8017726:	f7ea ff45 	bl	80025b4 <USBD_LL_StallEP>
 801772a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801772c:	e025      	b.n	801777a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801772e:	6839      	ldr	r1, [r7, #0]
 8017730:	6878      	ldr	r0, [r7, #4]
 8017732:	f000 fc09 	bl	8017f48 <USBD_CtlError>
              break;
 8017736:	e020      	b.n	801777a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017738:	683b      	ldr	r3, [r7, #0]
 801773a:	885b      	ldrh	r3, [r3, #2]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d11b      	bne.n	8017778 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017740:	7bbb      	ldrb	r3, [r7, #14]
 8017742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017746:	2b00      	cmp	r3, #0
 8017748:	d004      	beq.n	8017754 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801774a:	7bbb      	ldrb	r3, [r7, #14]
 801774c:	4619      	mov	r1, r3
 801774e:	6878      	ldr	r0, [r7, #4]
 8017750:	f7ea ff4f 	bl	80025f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8017754:	6878      	ldr	r0, [r7, #4]
 8017756:	f000 fcc2 	bl	80180de <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017760:	689b      	ldr	r3, [r3, #8]
 8017762:	6839      	ldr	r1, [r7, #0]
 8017764:	6878      	ldr	r0, [r7, #4]
 8017766:	4798      	blx	r3
 8017768:	4603      	mov	r3, r0
 801776a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801776c:	e004      	b.n	8017778 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801776e:	6839      	ldr	r1, [r7, #0]
 8017770:	6878      	ldr	r0, [r7, #4]
 8017772:	f000 fbe9 	bl	8017f48 <USBD_CtlError>
              break;
 8017776:	e000      	b.n	801777a <USBD_StdEPReq+0x154>
              break;
 8017778:	bf00      	nop
          }
          break;
 801777a:	e0ab      	b.n	80178d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017782:	b2db      	uxtb	r3, r3
 8017784:	2b02      	cmp	r3, #2
 8017786:	d002      	beq.n	801778e <USBD_StdEPReq+0x168>
 8017788:	2b03      	cmp	r3, #3
 801778a:	d032      	beq.n	80177f2 <USBD_StdEPReq+0x1cc>
 801778c:	e097      	b.n	80178be <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801778e:	7bbb      	ldrb	r3, [r7, #14]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d007      	beq.n	80177a4 <USBD_StdEPReq+0x17e>
 8017794:	7bbb      	ldrb	r3, [r7, #14]
 8017796:	2b80      	cmp	r3, #128	@ 0x80
 8017798:	d004      	beq.n	80177a4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801779a:	6839      	ldr	r1, [r7, #0]
 801779c:	6878      	ldr	r0, [r7, #4]
 801779e:	f000 fbd3 	bl	8017f48 <USBD_CtlError>
                break;
 80177a2:	e091      	b.n	80178c8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80177a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	da0b      	bge.n	80177c4 <USBD_StdEPReq+0x19e>
 80177ac:	7bbb      	ldrb	r3, [r7, #14]
 80177ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80177b2:	4613      	mov	r3, r2
 80177b4:	009b      	lsls	r3, r3, #2
 80177b6:	4413      	add	r3, r2
 80177b8:	009b      	lsls	r3, r3, #2
 80177ba:	3310      	adds	r3, #16
 80177bc:	687a      	ldr	r2, [r7, #4]
 80177be:	4413      	add	r3, r2
 80177c0:	3304      	adds	r3, #4
 80177c2:	e00b      	b.n	80177dc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80177c4:	7bbb      	ldrb	r3, [r7, #14]
 80177c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80177ca:	4613      	mov	r3, r2
 80177cc:	009b      	lsls	r3, r3, #2
 80177ce:	4413      	add	r3, r2
 80177d0:	009b      	lsls	r3, r3, #2
 80177d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80177d6:	687a      	ldr	r2, [r7, #4]
 80177d8:	4413      	add	r3, r2
 80177da:	3304      	adds	r3, #4
 80177dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80177de:	68bb      	ldr	r3, [r7, #8]
 80177e0:	2200      	movs	r2, #0
 80177e2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80177e4:	68bb      	ldr	r3, [r7, #8]
 80177e6:	2202      	movs	r2, #2
 80177e8:	4619      	mov	r1, r3
 80177ea:	6878      	ldr	r0, [r7, #4]
 80177ec:	f000 fc1d 	bl	801802a <USBD_CtlSendData>
              break;
 80177f0:	e06a      	b.n	80178c8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80177f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	da11      	bge.n	801781e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80177fa:	7bbb      	ldrb	r3, [r7, #14]
 80177fc:	f003 020f 	and.w	r2, r3, #15
 8017800:	6879      	ldr	r1, [r7, #4]
 8017802:	4613      	mov	r3, r2
 8017804:	009b      	lsls	r3, r3, #2
 8017806:	4413      	add	r3, r2
 8017808:	009b      	lsls	r3, r3, #2
 801780a:	440b      	add	r3, r1
 801780c:	3324      	adds	r3, #36	@ 0x24
 801780e:	881b      	ldrh	r3, [r3, #0]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d117      	bne.n	8017844 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8017814:	6839      	ldr	r1, [r7, #0]
 8017816:	6878      	ldr	r0, [r7, #4]
 8017818:	f000 fb96 	bl	8017f48 <USBD_CtlError>
                  break;
 801781c:	e054      	b.n	80178c8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801781e:	7bbb      	ldrb	r3, [r7, #14]
 8017820:	f003 020f 	and.w	r2, r3, #15
 8017824:	6879      	ldr	r1, [r7, #4]
 8017826:	4613      	mov	r3, r2
 8017828:	009b      	lsls	r3, r3, #2
 801782a:	4413      	add	r3, r2
 801782c:	009b      	lsls	r3, r3, #2
 801782e:	440b      	add	r3, r1
 8017830:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017834:	881b      	ldrh	r3, [r3, #0]
 8017836:	2b00      	cmp	r3, #0
 8017838:	d104      	bne.n	8017844 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801783a:	6839      	ldr	r1, [r7, #0]
 801783c:	6878      	ldr	r0, [r7, #4]
 801783e:	f000 fb83 	bl	8017f48 <USBD_CtlError>
                  break;
 8017842:	e041      	b.n	80178c8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017844:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017848:	2b00      	cmp	r3, #0
 801784a:	da0b      	bge.n	8017864 <USBD_StdEPReq+0x23e>
 801784c:	7bbb      	ldrb	r3, [r7, #14]
 801784e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017852:	4613      	mov	r3, r2
 8017854:	009b      	lsls	r3, r3, #2
 8017856:	4413      	add	r3, r2
 8017858:	009b      	lsls	r3, r3, #2
 801785a:	3310      	adds	r3, #16
 801785c:	687a      	ldr	r2, [r7, #4]
 801785e:	4413      	add	r3, r2
 8017860:	3304      	adds	r3, #4
 8017862:	e00b      	b.n	801787c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017864:	7bbb      	ldrb	r3, [r7, #14]
 8017866:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801786a:	4613      	mov	r3, r2
 801786c:	009b      	lsls	r3, r3, #2
 801786e:	4413      	add	r3, r2
 8017870:	009b      	lsls	r3, r3, #2
 8017872:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017876:	687a      	ldr	r2, [r7, #4]
 8017878:	4413      	add	r3, r2
 801787a:	3304      	adds	r3, #4
 801787c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801787e:	7bbb      	ldrb	r3, [r7, #14]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d002      	beq.n	801788a <USBD_StdEPReq+0x264>
 8017884:	7bbb      	ldrb	r3, [r7, #14]
 8017886:	2b80      	cmp	r3, #128	@ 0x80
 8017888:	d103      	bne.n	8017892 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801788a:	68bb      	ldr	r3, [r7, #8]
 801788c:	2200      	movs	r2, #0
 801788e:	601a      	str	r2, [r3, #0]
 8017890:	e00e      	b.n	80178b0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017892:	7bbb      	ldrb	r3, [r7, #14]
 8017894:	4619      	mov	r1, r3
 8017896:	6878      	ldr	r0, [r7, #4]
 8017898:	f7ea feca 	bl	8002630 <USBD_LL_IsStallEP>
 801789c:	4603      	mov	r3, r0
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d003      	beq.n	80178aa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80178a2:	68bb      	ldr	r3, [r7, #8]
 80178a4:	2201      	movs	r2, #1
 80178a6:	601a      	str	r2, [r3, #0]
 80178a8:	e002      	b.n	80178b0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80178aa:	68bb      	ldr	r3, [r7, #8]
 80178ac:	2200      	movs	r2, #0
 80178ae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80178b0:	68bb      	ldr	r3, [r7, #8]
 80178b2:	2202      	movs	r2, #2
 80178b4:	4619      	mov	r1, r3
 80178b6:	6878      	ldr	r0, [r7, #4]
 80178b8:	f000 fbb7 	bl	801802a <USBD_CtlSendData>
              break;
 80178bc:	e004      	b.n	80178c8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80178be:	6839      	ldr	r1, [r7, #0]
 80178c0:	6878      	ldr	r0, [r7, #4]
 80178c2:	f000 fb41 	bl	8017f48 <USBD_CtlError>
              break;
 80178c6:	bf00      	nop
          }
          break;
 80178c8:	e004      	b.n	80178d4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80178ca:	6839      	ldr	r1, [r7, #0]
 80178cc:	6878      	ldr	r0, [r7, #4]
 80178ce:	f000 fb3b 	bl	8017f48 <USBD_CtlError>
          break;
 80178d2:	bf00      	nop
      }
      break;
 80178d4:	e004      	b.n	80178e0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80178d6:	6839      	ldr	r1, [r7, #0]
 80178d8:	6878      	ldr	r0, [r7, #4]
 80178da:	f000 fb35 	bl	8017f48 <USBD_CtlError>
      break;
 80178de:	bf00      	nop
  }

  return ret;
 80178e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80178e2:	4618      	mov	r0, r3
 80178e4:	3710      	adds	r7, #16
 80178e6:	46bd      	mov	sp, r7
 80178e8:	bd80      	pop	{r7, pc}
	...

080178ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	b084      	sub	sp, #16
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	6078      	str	r0, [r7, #4]
 80178f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80178f6:	2300      	movs	r3, #0
 80178f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80178fa:	2300      	movs	r3, #0
 80178fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80178fe:	2300      	movs	r3, #0
 8017900:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8017902:	683b      	ldr	r3, [r7, #0]
 8017904:	885b      	ldrh	r3, [r3, #2]
 8017906:	0a1b      	lsrs	r3, r3, #8
 8017908:	b29b      	uxth	r3, r3
 801790a:	3b01      	subs	r3, #1
 801790c:	2b06      	cmp	r3, #6
 801790e:	f200 8128 	bhi.w	8017b62 <USBD_GetDescriptor+0x276>
 8017912:	a201      	add	r2, pc, #4	@ (adr r2, 8017918 <USBD_GetDescriptor+0x2c>)
 8017914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017918:	08017935 	.word	0x08017935
 801791c:	0801794d 	.word	0x0801794d
 8017920:	0801798d 	.word	0x0801798d
 8017924:	08017b63 	.word	0x08017b63
 8017928:	08017b63 	.word	0x08017b63
 801792c:	08017b03 	.word	0x08017b03
 8017930:	08017b2f 	.word	0x08017b2f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	687a      	ldr	r2, [r7, #4]
 801793e:	7c12      	ldrb	r2, [r2, #16]
 8017940:	f107 0108 	add.w	r1, r7, #8
 8017944:	4610      	mov	r0, r2
 8017946:	4798      	blx	r3
 8017948:	60f8      	str	r0, [r7, #12]
      break;
 801794a:	e112      	b.n	8017b72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	7c1b      	ldrb	r3, [r3, #16]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d10d      	bne.n	8017970 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801795a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801795c:	f107 0208 	add.w	r2, r7, #8
 8017960:	4610      	mov	r0, r2
 8017962:	4798      	blx	r3
 8017964:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	3301      	adds	r3, #1
 801796a:	2202      	movs	r2, #2
 801796c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801796e:	e100      	b.n	8017b72 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017978:	f107 0208 	add.w	r2, r7, #8
 801797c:	4610      	mov	r0, r2
 801797e:	4798      	blx	r3
 8017980:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	3301      	adds	r3, #1
 8017986:	2202      	movs	r2, #2
 8017988:	701a      	strb	r2, [r3, #0]
      break;
 801798a:	e0f2      	b.n	8017b72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801798c:	683b      	ldr	r3, [r7, #0]
 801798e:	885b      	ldrh	r3, [r3, #2]
 8017990:	b2db      	uxtb	r3, r3
 8017992:	2b05      	cmp	r3, #5
 8017994:	f200 80ac 	bhi.w	8017af0 <USBD_GetDescriptor+0x204>
 8017998:	a201      	add	r2, pc, #4	@ (adr r2, 80179a0 <USBD_GetDescriptor+0xb4>)
 801799a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801799e:	bf00      	nop
 80179a0:	080179b9 	.word	0x080179b9
 80179a4:	080179ed 	.word	0x080179ed
 80179a8:	08017a21 	.word	0x08017a21
 80179ac:	08017a55 	.word	0x08017a55
 80179b0:	08017a89 	.word	0x08017a89
 80179b4:	08017abd 	.word	0x08017abd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80179be:	685b      	ldr	r3, [r3, #4]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d00b      	beq.n	80179dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80179ca:	685b      	ldr	r3, [r3, #4]
 80179cc:	687a      	ldr	r2, [r7, #4]
 80179ce:	7c12      	ldrb	r2, [r2, #16]
 80179d0:	f107 0108 	add.w	r1, r7, #8
 80179d4:	4610      	mov	r0, r2
 80179d6:	4798      	blx	r3
 80179d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80179da:	e091      	b.n	8017b00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80179dc:	6839      	ldr	r1, [r7, #0]
 80179de:	6878      	ldr	r0, [r7, #4]
 80179e0:	f000 fab2 	bl	8017f48 <USBD_CtlError>
            err++;
 80179e4:	7afb      	ldrb	r3, [r7, #11]
 80179e6:	3301      	adds	r3, #1
 80179e8:	72fb      	strb	r3, [r7, #11]
          break;
 80179ea:	e089      	b.n	8017b00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80179f2:	689b      	ldr	r3, [r3, #8]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d00b      	beq.n	8017a10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80179fe:	689b      	ldr	r3, [r3, #8]
 8017a00:	687a      	ldr	r2, [r7, #4]
 8017a02:	7c12      	ldrb	r2, [r2, #16]
 8017a04:	f107 0108 	add.w	r1, r7, #8
 8017a08:	4610      	mov	r0, r2
 8017a0a:	4798      	blx	r3
 8017a0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017a0e:	e077      	b.n	8017b00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017a10:	6839      	ldr	r1, [r7, #0]
 8017a12:	6878      	ldr	r0, [r7, #4]
 8017a14:	f000 fa98 	bl	8017f48 <USBD_CtlError>
            err++;
 8017a18:	7afb      	ldrb	r3, [r7, #11]
 8017a1a:	3301      	adds	r3, #1
 8017a1c:	72fb      	strb	r3, [r7, #11]
          break;
 8017a1e:	e06f      	b.n	8017b00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017a26:	68db      	ldr	r3, [r3, #12]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d00b      	beq.n	8017a44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017a32:	68db      	ldr	r3, [r3, #12]
 8017a34:	687a      	ldr	r2, [r7, #4]
 8017a36:	7c12      	ldrb	r2, [r2, #16]
 8017a38:	f107 0108 	add.w	r1, r7, #8
 8017a3c:	4610      	mov	r0, r2
 8017a3e:	4798      	blx	r3
 8017a40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017a42:	e05d      	b.n	8017b00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017a44:	6839      	ldr	r1, [r7, #0]
 8017a46:	6878      	ldr	r0, [r7, #4]
 8017a48:	f000 fa7e 	bl	8017f48 <USBD_CtlError>
            err++;
 8017a4c:	7afb      	ldrb	r3, [r7, #11]
 8017a4e:	3301      	adds	r3, #1
 8017a50:	72fb      	strb	r3, [r7, #11]
          break;
 8017a52:	e055      	b.n	8017b00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017a5a:	691b      	ldr	r3, [r3, #16]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d00b      	beq.n	8017a78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017a66:	691b      	ldr	r3, [r3, #16]
 8017a68:	687a      	ldr	r2, [r7, #4]
 8017a6a:	7c12      	ldrb	r2, [r2, #16]
 8017a6c:	f107 0108 	add.w	r1, r7, #8
 8017a70:	4610      	mov	r0, r2
 8017a72:	4798      	blx	r3
 8017a74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017a76:	e043      	b.n	8017b00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017a78:	6839      	ldr	r1, [r7, #0]
 8017a7a:	6878      	ldr	r0, [r7, #4]
 8017a7c:	f000 fa64 	bl	8017f48 <USBD_CtlError>
            err++;
 8017a80:	7afb      	ldrb	r3, [r7, #11]
 8017a82:	3301      	adds	r3, #1
 8017a84:	72fb      	strb	r3, [r7, #11]
          break;
 8017a86:	e03b      	b.n	8017b00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017a8e:	695b      	ldr	r3, [r3, #20]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d00b      	beq.n	8017aac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017a9a:	695b      	ldr	r3, [r3, #20]
 8017a9c:	687a      	ldr	r2, [r7, #4]
 8017a9e:	7c12      	ldrb	r2, [r2, #16]
 8017aa0:	f107 0108 	add.w	r1, r7, #8
 8017aa4:	4610      	mov	r0, r2
 8017aa6:	4798      	blx	r3
 8017aa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017aaa:	e029      	b.n	8017b00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017aac:	6839      	ldr	r1, [r7, #0]
 8017aae:	6878      	ldr	r0, [r7, #4]
 8017ab0:	f000 fa4a 	bl	8017f48 <USBD_CtlError>
            err++;
 8017ab4:	7afb      	ldrb	r3, [r7, #11]
 8017ab6:	3301      	adds	r3, #1
 8017ab8:	72fb      	strb	r3, [r7, #11]
          break;
 8017aba:	e021      	b.n	8017b00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017ac2:	699b      	ldr	r3, [r3, #24]
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d00b      	beq.n	8017ae0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017ace:	699b      	ldr	r3, [r3, #24]
 8017ad0:	687a      	ldr	r2, [r7, #4]
 8017ad2:	7c12      	ldrb	r2, [r2, #16]
 8017ad4:	f107 0108 	add.w	r1, r7, #8
 8017ad8:	4610      	mov	r0, r2
 8017ada:	4798      	blx	r3
 8017adc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017ade:	e00f      	b.n	8017b00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017ae0:	6839      	ldr	r1, [r7, #0]
 8017ae2:	6878      	ldr	r0, [r7, #4]
 8017ae4:	f000 fa30 	bl	8017f48 <USBD_CtlError>
            err++;
 8017ae8:	7afb      	ldrb	r3, [r7, #11]
 8017aea:	3301      	adds	r3, #1
 8017aec:	72fb      	strb	r3, [r7, #11]
          break;
 8017aee:	e007      	b.n	8017b00 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017af0:	6839      	ldr	r1, [r7, #0]
 8017af2:	6878      	ldr	r0, [r7, #4]
 8017af4:	f000 fa28 	bl	8017f48 <USBD_CtlError>
          err++;
 8017af8:	7afb      	ldrb	r3, [r7, #11]
 8017afa:	3301      	adds	r3, #1
 8017afc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8017afe:	bf00      	nop
      }
      break;
 8017b00:	e037      	b.n	8017b72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	7c1b      	ldrb	r3, [r3, #16]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d109      	bne.n	8017b1e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017b12:	f107 0208 	add.w	r2, r7, #8
 8017b16:	4610      	mov	r0, r2
 8017b18:	4798      	blx	r3
 8017b1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017b1c:	e029      	b.n	8017b72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8017b1e:	6839      	ldr	r1, [r7, #0]
 8017b20:	6878      	ldr	r0, [r7, #4]
 8017b22:	f000 fa11 	bl	8017f48 <USBD_CtlError>
        err++;
 8017b26:	7afb      	ldrb	r3, [r7, #11]
 8017b28:	3301      	adds	r3, #1
 8017b2a:	72fb      	strb	r3, [r7, #11]
      break;
 8017b2c:	e021      	b.n	8017b72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	7c1b      	ldrb	r3, [r3, #16]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d10d      	bne.n	8017b52 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017b3e:	f107 0208 	add.w	r2, r7, #8
 8017b42:	4610      	mov	r0, r2
 8017b44:	4798      	blx	r3
 8017b46:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	3301      	adds	r3, #1
 8017b4c:	2207      	movs	r2, #7
 8017b4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017b50:	e00f      	b.n	8017b72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8017b52:	6839      	ldr	r1, [r7, #0]
 8017b54:	6878      	ldr	r0, [r7, #4]
 8017b56:	f000 f9f7 	bl	8017f48 <USBD_CtlError>
        err++;
 8017b5a:	7afb      	ldrb	r3, [r7, #11]
 8017b5c:	3301      	adds	r3, #1
 8017b5e:	72fb      	strb	r3, [r7, #11]
      break;
 8017b60:	e007      	b.n	8017b72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8017b62:	6839      	ldr	r1, [r7, #0]
 8017b64:	6878      	ldr	r0, [r7, #4]
 8017b66:	f000 f9ef 	bl	8017f48 <USBD_CtlError>
      err++;
 8017b6a:	7afb      	ldrb	r3, [r7, #11]
 8017b6c:	3301      	adds	r3, #1
 8017b6e:	72fb      	strb	r3, [r7, #11]
      break;
 8017b70:	bf00      	nop
  }

  if (err != 0U)
 8017b72:	7afb      	ldrb	r3, [r7, #11]
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d11e      	bne.n	8017bb6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8017b78:	683b      	ldr	r3, [r7, #0]
 8017b7a:	88db      	ldrh	r3, [r3, #6]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d016      	beq.n	8017bae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8017b80:	893b      	ldrh	r3, [r7, #8]
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d00e      	beq.n	8017ba4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8017b86:	683b      	ldr	r3, [r7, #0]
 8017b88:	88da      	ldrh	r2, [r3, #6]
 8017b8a:	893b      	ldrh	r3, [r7, #8]
 8017b8c:	4293      	cmp	r3, r2
 8017b8e:	bf28      	it	cs
 8017b90:	4613      	movcs	r3, r2
 8017b92:	b29b      	uxth	r3, r3
 8017b94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017b96:	893b      	ldrh	r3, [r7, #8]
 8017b98:	461a      	mov	r2, r3
 8017b9a:	68f9      	ldr	r1, [r7, #12]
 8017b9c:	6878      	ldr	r0, [r7, #4]
 8017b9e:	f000 fa44 	bl	801802a <USBD_CtlSendData>
 8017ba2:	e009      	b.n	8017bb8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017ba4:	6839      	ldr	r1, [r7, #0]
 8017ba6:	6878      	ldr	r0, [r7, #4]
 8017ba8:	f000 f9ce 	bl	8017f48 <USBD_CtlError>
 8017bac:	e004      	b.n	8017bb8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8017bae:	6878      	ldr	r0, [r7, #4]
 8017bb0:	f000 fa95 	bl	80180de <USBD_CtlSendStatus>
 8017bb4:	e000      	b.n	8017bb8 <USBD_GetDescriptor+0x2cc>
    return;
 8017bb6:	bf00      	nop
  }
}
 8017bb8:	3710      	adds	r7, #16
 8017bba:	46bd      	mov	sp, r7
 8017bbc:	bd80      	pop	{r7, pc}
 8017bbe:	bf00      	nop

08017bc0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b084      	sub	sp, #16
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	6078      	str	r0, [r7, #4]
 8017bc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017bca:	683b      	ldr	r3, [r7, #0]
 8017bcc:	889b      	ldrh	r3, [r3, #4]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d131      	bne.n	8017c36 <USBD_SetAddress+0x76>
 8017bd2:	683b      	ldr	r3, [r7, #0]
 8017bd4:	88db      	ldrh	r3, [r3, #6]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d12d      	bne.n	8017c36 <USBD_SetAddress+0x76>
 8017bda:	683b      	ldr	r3, [r7, #0]
 8017bdc:	885b      	ldrh	r3, [r3, #2]
 8017bde:	2b7f      	cmp	r3, #127	@ 0x7f
 8017be0:	d829      	bhi.n	8017c36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017be2:	683b      	ldr	r3, [r7, #0]
 8017be4:	885b      	ldrh	r3, [r3, #2]
 8017be6:	b2db      	uxtb	r3, r3
 8017be8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017bec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017bf4:	b2db      	uxtb	r3, r3
 8017bf6:	2b03      	cmp	r3, #3
 8017bf8:	d104      	bne.n	8017c04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017bfa:	6839      	ldr	r1, [r7, #0]
 8017bfc:	6878      	ldr	r0, [r7, #4]
 8017bfe:	f000 f9a3 	bl	8017f48 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017c02:	e01d      	b.n	8017c40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	7bfa      	ldrb	r2, [r7, #15]
 8017c08:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017c0c:	7bfb      	ldrb	r3, [r7, #15]
 8017c0e:	4619      	mov	r1, r3
 8017c10:	6878      	ldr	r0, [r7, #4]
 8017c12:	f7ea fd39 	bl	8002688 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8017c16:	6878      	ldr	r0, [r7, #4]
 8017c18:	f000 fa61 	bl	80180de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017c1c:	7bfb      	ldrb	r3, [r7, #15]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d004      	beq.n	8017c2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	2202      	movs	r2, #2
 8017c26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017c2a:	e009      	b.n	8017c40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	2201      	movs	r2, #1
 8017c30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017c34:	e004      	b.n	8017c40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017c36:	6839      	ldr	r1, [r7, #0]
 8017c38:	6878      	ldr	r0, [r7, #4]
 8017c3a:	f000 f985 	bl	8017f48 <USBD_CtlError>
  }
}
 8017c3e:	bf00      	nop
 8017c40:	bf00      	nop
 8017c42:	3710      	adds	r7, #16
 8017c44:	46bd      	mov	sp, r7
 8017c46:	bd80      	pop	{r7, pc}

08017c48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017c48:	b580      	push	{r7, lr}
 8017c4a:	b084      	sub	sp, #16
 8017c4c:	af00      	add	r7, sp, #0
 8017c4e:	6078      	str	r0, [r7, #4]
 8017c50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017c52:	2300      	movs	r3, #0
 8017c54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017c56:	683b      	ldr	r3, [r7, #0]
 8017c58:	885b      	ldrh	r3, [r3, #2]
 8017c5a:	b2da      	uxtb	r2, r3
 8017c5c:	4b4c      	ldr	r3, [pc, #304]	@ (8017d90 <USBD_SetConfig+0x148>)
 8017c5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017c60:	4b4b      	ldr	r3, [pc, #300]	@ (8017d90 <USBD_SetConfig+0x148>)
 8017c62:	781b      	ldrb	r3, [r3, #0]
 8017c64:	2b01      	cmp	r3, #1
 8017c66:	d905      	bls.n	8017c74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017c68:	6839      	ldr	r1, [r7, #0]
 8017c6a:	6878      	ldr	r0, [r7, #4]
 8017c6c:	f000 f96c 	bl	8017f48 <USBD_CtlError>
    return USBD_FAIL;
 8017c70:	2303      	movs	r3, #3
 8017c72:	e088      	b.n	8017d86 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017c7a:	b2db      	uxtb	r3, r3
 8017c7c:	2b02      	cmp	r3, #2
 8017c7e:	d002      	beq.n	8017c86 <USBD_SetConfig+0x3e>
 8017c80:	2b03      	cmp	r3, #3
 8017c82:	d025      	beq.n	8017cd0 <USBD_SetConfig+0x88>
 8017c84:	e071      	b.n	8017d6a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017c86:	4b42      	ldr	r3, [pc, #264]	@ (8017d90 <USBD_SetConfig+0x148>)
 8017c88:	781b      	ldrb	r3, [r3, #0]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d01c      	beq.n	8017cc8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8017c8e:	4b40      	ldr	r3, [pc, #256]	@ (8017d90 <USBD_SetConfig+0x148>)
 8017c90:	781b      	ldrb	r3, [r3, #0]
 8017c92:	461a      	mov	r2, r3
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017c98:	4b3d      	ldr	r3, [pc, #244]	@ (8017d90 <USBD_SetConfig+0x148>)
 8017c9a:	781b      	ldrb	r3, [r3, #0]
 8017c9c:	4619      	mov	r1, r3
 8017c9e:	6878      	ldr	r0, [r7, #4]
 8017ca0:	f7ff f948 	bl	8016f34 <USBD_SetClassConfig>
 8017ca4:	4603      	mov	r3, r0
 8017ca6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017ca8:	7bfb      	ldrb	r3, [r7, #15]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d004      	beq.n	8017cb8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8017cae:	6839      	ldr	r1, [r7, #0]
 8017cb0:	6878      	ldr	r0, [r7, #4]
 8017cb2:	f000 f949 	bl	8017f48 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017cb6:	e065      	b.n	8017d84 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8017cb8:	6878      	ldr	r0, [r7, #4]
 8017cba:	f000 fa10 	bl	80180de <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	2203      	movs	r2, #3
 8017cc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017cc6:	e05d      	b.n	8017d84 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8017cc8:	6878      	ldr	r0, [r7, #4]
 8017cca:	f000 fa08 	bl	80180de <USBD_CtlSendStatus>
      break;
 8017cce:	e059      	b.n	8017d84 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8017d90 <USBD_SetConfig+0x148>)
 8017cd2:	781b      	ldrb	r3, [r3, #0]
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d112      	bne.n	8017cfe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	2202      	movs	r2, #2
 8017cdc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8017ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8017d90 <USBD_SetConfig+0x148>)
 8017ce2:	781b      	ldrb	r3, [r3, #0]
 8017ce4:	461a      	mov	r2, r3
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017cea:	4b29      	ldr	r3, [pc, #164]	@ (8017d90 <USBD_SetConfig+0x148>)
 8017cec:	781b      	ldrb	r3, [r3, #0]
 8017cee:	4619      	mov	r1, r3
 8017cf0:	6878      	ldr	r0, [r7, #4]
 8017cf2:	f7ff f93b 	bl	8016f6c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017cf6:	6878      	ldr	r0, [r7, #4]
 8017cf8:	f000 f9f1 	bl	80180de <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017cfc:	e042      	b.n	8017d84 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8017cfe:	4b24      	ldr	r3, [pc, #144]	@ (8017d90 <USBD_SetConfig+0x148>)
 8017d00:	781b      	ldrb	r3, [r3, #0]
 8017d02:	461a      	mov	r2, r3
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	685b      	ldr	r3, [r3, #4]
 8017d08:	429a      	cmp	r2, r3
 8017d0a:	d02a      	beq.n	8017d62 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	685b      	ldr	r3, [r3, #4]
 8017d10:	b2db      	uxtb	r3, r3
 8017d12:	4619      	mov	r1, r3
 8017d14:	6878      	ldr	r0, [r7, #4]
 8017d16:	f7ff f929 	bl	8016f6c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8017d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8017d90 <USBD_SetConfig+0x148>)
 8017d1c:	781b      	ldrb	r3, [r3, #0]
 8017d1e:	461a      	mov	r2, r3
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017d24:	4b1a      	ldr	r3, [pc, #104]	@ (8017d90 <USBD_SetConfig+0x148>)
 8017d26:	781b      	ldrb	r3, [r3, #0]
 8017d28:	4619      	mov	r1, r3
 8017d2a:	6878      	ldr	r0, [r7, #4]
 8017d2c:	f7ff f902 	bl	8016f34 <USBD_SetClassConfig>
 8017d30:	4603      	mov	r3, r0
 8017d32:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017d34:	7bfb      	ldrb	r3, [r7, #15]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d00f      	beq.n	8017d5a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8017d3a:	6839      	ldr	r1, [r7, #0]
 8017d3c:	6878      	ldr	r0, [r7, #4]
 8017d3e:	f000 f903 	bl	8017f48 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	685b      	ldr	r3, [r3, #4]
 8017d46:	b2db      	uxtb	r3, r3
 8017d48:	4619      	mov	r1, r3
 8017d4a:	6878      	ldr	r0, [r7, #4]
 8017d4c:	f7ff f90e 	bl	8016f6c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	2202      	movs	r2, #2
 8017d54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017d58:	e014      	b.n	8017d84 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8017d5a:	6878      	ldr	r0, [r7, #4]
 8017d5c:	f000 f9bf 	bl	80180de <USBD_CtlSendStatus>
      break;
 8017d60:	e010      	b.n	8017d84 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8017d62:	6878      	ldr	r0, [r7, #4]
 8017d64:	f000 f9bb 	bl	80180de <USBD_CtlSendStatus>
      break;
 8017d68:	e00c      	b.n	8017d84 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8017d6a:	6839      	ldr	r1, [r7, #0]
 8017d6c:	6878      	ldr	r0, [r7, #4]
 8017d6e:	f000 f8eb 	bl	8017f48 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017d72:	4b07      	ldr	r3, [pc, #28]	@ (8017d90 <USBD_SetConfig+0x148>)
 8017d74:	781b      	ldrb	r3, [r3, #0]
 8017d76:	4619      	mov	r1, r3
 8017d78:	6878      	ldr	r0, [r7, #4]
 8017d7a:	f7ff f8f7 	bl	8016f6c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017d7e:	2303      	movs	r3, #3
 8017d80:	73fb      	strb	r3, [r7, #15]
      break;
 8017d82:	bf00      	nop
  }

  return ret;
 8017d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d86:	4618      	mov	r0, r3
 8017d88:	3710      	adds	r7, #16
 8017d8a:	46bd      	mov	sp, r7
 8017d8c:	bd80      	pop	{r7, pc}
 8017d8e:	bf00      	nop
 8017d90:	20045814 	.word	0x20045814

08017d94 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017d94:	b580      	push	{r7, lr}
 8017d96:	b082      	sub	sp, #8
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	6078      	str	r0, [r7, #4]
 8017d9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017d9e:	683b      	ldr	r3, [r7, #0]
 8017da0:	88db      	ldrh	r3, [r3, #6]
 8017da2:	2b01      	cmp	r3, #1
 8017da4:	d004      	beq.n	8017db0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017da6:	6839      	ldr	r1, [r7, #0]
 8017da8:	6878      	ldr	r0, [r7, #4]
 8017daa:	f000 f8cd 	bl	8017f48 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017dae:	e023      	b.n	8017df8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017db6:	b2db      	uxtb	r3, r3
 8017db8:	2b02      	cmp	r3, #2
 8017dba:	dc02      	bgt.n	8017dc2 <USBD_GetConfig+0x2e>
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	dc03      	bgt.n	8017dc8 <USBD_GetConfig+0x34>
 8017dc0:	e015      	b.n	8017dee <USBD_GetConfig+0x5a>
 8017dc2:	2b03      	cmp	r3, #3
 8017dc4:	d00b      	beq.n	8017dde <USBD_GetConfig+0x4a>
 8017dc6:	e012      	b.n	8017dee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	2200      	movs	r2, #0
 8017dcc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	3308      	adds	r3, #8
 8017dd2:	2201      	movs	r2, #1
 8017dd4:	4619      	mov	r1, r3
 8017dd6:	6878      	ldr	r0, [r7, #4]
 8017dd8:	f000 f927 	bl	801802a <USBD_CtlSendData>
        break;
 8017ddc:	e00c      	b.n	8017df8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	3304      	adds	r3, #4
 8017de2:	2201      	movs	r2, #1
 8017de4:	4619      	mov	r1, r3
 8017de6:	6878      	ldr	r0, [r7, #4]
 8017de8:	f000 f91f 	bl	801802a <USBD_CtlSendData>
        break;
 8017dec:	e004      	b.n	8017df8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017dee:	6839      	ldr	r1, [r7, #0]
 8017df0:	6878      	ldr	r0, [r7, #4]
 8017df2:	f000 f8a9 	bl	8017f48 <USBD_CtlError>
        break;
 8017df6:	bf00      	nop
}
 8017df8:	bf00      	nop
 8017dfa:	3708      	adds	r7, #8
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	bd80      	pop	{r7, pc}

08017e00 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017e00:	b580      	push	{r7, lr}
 8017e02:	b082      	sub	sp, #8
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	6078      	str	r0, [r7, #4]
 8017e08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017e10:	b2db      	uxtb	r3, r3
 8017e12:	3b01      	subs	r3, #1
 8017e14:	2b02      	cmp	r3, #2
 8017e16:	d81e      	bhi.n	8017e56 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017e18:	683b      	ldr	r3, [r7, #0]
 8017e1a:	88db      	ldrh	r3, [r3, #6]
 8017e1c:	2b02      	cmp	r3, #2
 8017e1e:	d004      	beq.n	8017e2a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017e20:	6839      	ldr	r1, [r7, #0]
 8017e22:	6878      	ldr	r0, [r7, #4]
 8017e24:	f000 f890 	bl	8017f48 <USBD_CtlError>
        break;
 8017e28:	e01a      	b.n	8017e60 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	2201      	movs	r2, #1
 8017e2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d005      	beq.n	8017e46 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	68db      	ldr	r3, [r3, #12]
 8017e3e:	f043 0202 	orr.w	r2, r3, #2
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	330c      	adds	r3, #12
 8017e4a:	2202      	movs	r2, #2
 8017e4c:	4619      	mov	r1, r3
 8017e4e:	6878      	ldr	r0, [r7, #4]
 8017e50:	f000 f8eb 	bl	801802a <USBD_CtlSendData>
      break;
 8017e54:	e004      	b.n	8017e60 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017e56:	6839      	ldr	r1, [r7, #0]
 8017e58:	6878      	ldr	r0, [r7, #4]
 8017e5a:	f000 f875 	bl	8017f48 <USBD_CtlError>
      break;
 8017e5e:	bf00      	nop
  }
}
 8017e60:	bf00      	nop
 8017e62:	3708      	adds	r7, #8
 8017e64:	46bd      	mov	sp, r7
 8017e66:	bd80      	pop	{r7, pc}

08017e68 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b082      	sub	sp, #8
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
 8017e70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017e72:	683b      	ldr	r3, [r7, #0]
 8017e74:	885b      	ldrh	r3, [r3, #2]
 8017e76:	2b01      	cmp	r3, #1
 8017e78:	d106      	bne.n	8017e88 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	2201      	movs	r2, #1
 8017e7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017e82:	6878      	ldr	r0, [r7, #4]
 8017e84:	f000 f92b 	bl	80180de <USBD_CtlSendStatus>
  }
}
 8017e88:	bf00      	nop
 8017e8a:	3708      	adds	r7, #8
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	bd80      	pop	{r7, pc}

08017e90 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017e90:	b580      	push	{r7, lr}
 8017e92:	b082      	sub	sp, #8
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	6078      	str	r0, [r7, #4]
 8017e98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017ea0:	b2db      	uxtb	r3, r3
 8017ea2:	3b01      	subs	r3, #1
 8017ea4:	2b02      	cmp	r3, #2
 8017ea6:	d80b      	bhi.n	8017ec0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017ea8:	683b      	ldr	r3, [r7, #0]
 8017eaa:	885b      	ldrh	r3, [r3, #2]
 8017eac:	2b01      	cmp	r3, #1
 8017eae:	d10c      	bne.n	8017eca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	2200      	movs	r2, #0
 8017eb4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017eb8:	6878      	ldr	r0, [r7, #4]
 8017eba:	f000 f910 	bl	80180de <USBD_CtlSendStatus>
      }
      break;
 8017ebe:	e004      	b.n	8017eca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017ec0:	6839      	ldr	r1, [r7, #0]
 8017ec2:	6878      	ldr	r0, [r7, #4]
 8017ec4:	f000 f840 	bl	8017f48 <USBD_CtlError>
      break;
 8017ec8:	e000      	b.n	8017ecc <USBD_ClrFeature+0x3c>
      break;
 8017eca:	bf00      	nop
  }
}
 8017ecc:	bf00      	nop
 8017ece:	3708      	adds	r7, #8
 8017ed0:	46bd      	mov	sp, r7
 8017ed2:	bd80      	pop	{r7, pc}

08017ed4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017ed4:	b580      	push	{r7, lr}
 8017ed6:	b084      	sub	sp, #16
 8017ed8:	af00      	add	r7, sp, #0
 8017eda:	6078      	str	r0, [r7, #4]
 8017edc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017ede:	683b      	ldr	r3, [r7, #0]
 8017ee0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	781a      	ldrb	r2, [r3, #0]
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	3301      	adds	r3, #1
 8017eee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	781a      	ldrb	r2, [r3, #0]
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	3301      	adds	r3, #1
 8017efc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017efe:	68f8      	ldr	r0, [r7, #12]
 8017f00:	f7ff fabb 	bl	801747a <SWAPBYTE>
 8017f04:	4603      	mov	r3, r0
 8017f06:	461a      	mov	r2, r3
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	3301      	adds	r3, #1
 8017f10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	3301      	adds	r3, #1
 8017f16:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017f18:	68f8      	ldr	r0, [r7, #12]
 8017f1a:	f7ff faae 	bl	801747a <SWAPBYTE>
 8017f1e:	4603      	mov	r3, r0
 8017f20:	461a      	mov	r2, r3
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	3301      	adds	r3, #1
 8017f2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	3301      	adds	r3, #1
 8017f30:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017f32:	68f8      	ldr	r0, [r7, #12]
 8017f34:	f7ff faa1 	bl	801747a <SWAPBYTE>
 8017f38:	4603      	mov	r3, r0
 8017f3a:	461a      	mov	r2, r3
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	80da      	strh	r2, [r3, #6]
}
 8017f40:	bf00      	nop
 8017f42:	3710      	adds	r7, #16
 8017f44:	46bd      	mov	sp, r7
 8017f46:	bd80      	pop	{r7, pc}

08017f48 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017f48:	b580      	push	{r7, lr}
 8017f4a:	b082      	sub	sp, #8
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	6078      	str	r0, [r7, #4]
 8017f50:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017f52:	2180      	movs	r1, #128	@ 0x80
 8017f54:	6878      	ldr	r0, [r7, #4]
 8017f56:	f7ea fb2d 	bl	80025b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017f5a:	2100      	movs	r1, #0
 8017f5c:	6878      	ldr	r0, [r7, #4]
 8017f5e:	f7ea fb29 	bl	80025b4 <USBD_LL_StallEP>
}
 8017f62:	bf00      	nop
 8017f64:	3708      	adds	r7, #8
 8017f66:	46bd      	mov	sp, r7
 8017f68:	bd80      	pop	{r7, pc}

08017f6a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017f6a:	b580      	push	{r7, lr}
 8017f6c:	b086      	sub	sp, #24
 8017f6e:	af00      	add	r7, sp, #0
 8017f70:	60f8      	str	r0, [r7, #12]
 8017f72:	60b9      	str	r1, [r7, #8]
 8017f74:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017f76:	2300      	movs	r3, #0
 8017f78:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d036      	beq.n	8017fee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017f84:	6938      	ldr	r0, [r7, #16]
 8017f86:	f000 f836 	bl	8017ff6 <USBD_GetLen>
 8017f8a:	4603      	mov	r3, r0
 8017f8c:	3301      	adds	r3, #1
 8017f8e:	b29b      	uxth	r3, r3
 8017f90:	005b      	lsls	r3, r3, #1
 8017f92:	b29a      	uxth	r2, r3
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017f98:	7dfb      	ldrb	r3, [r7, #23]
 8017f9a:	68ba      	ldr	r2, [r7, #8]
 8017f9c:	4413      	add	r3, r2
 8017f9e:	687a      	ldr	r2, [r7, #4]
 8017fa0:	7812      	ldrb	r2, [r2, #0]
 8017fa2:	701a      	strb	r2, [r3, #0]
  idx++;
 8017fa4:	7dfb      	ldrb	r3, [r7, #23]
 8017fa6:	3301      	adds	r3, #1
 8017fa8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017faa:	7dfb      	ldrb	r3, [r7, #23]
 8017fac:	68ba      	ldr	r2, [r7, #8]
 8017fae:	4413      	add	r3, r2
 8017fb0:	2203      	movs	r2, #3
 8017fb2:	701a      	strb	r2, [r3, #0]
  idx++;
 8017fb4:	7dfb      	ldrb	r3, [r7, #23]
 8017fb6:	3301      	adds	r3, #1
 8017fb8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017fba:	e013      	b.n	8017fe4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017fbc:	7dfb      	ldrb	r3, [r7, #23]
 8017fbe:	68ba      	ldr	r2, [r7, #8]
 8017fc0:	4413      	add	r3, r2
 8017fc2:	693a      	ldr	r2, [r7, #16]
 8017fc4:	7812      	ldrb	r2, [r2, #0]
 8017fc6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017fc8:	693b      	ldr	r3, [r7, #16]
 8017fca:	3301      	adds	r3, #1
 8017fcc:	613b      	str	r3, [r7, #16]
    idx++;
 8017fce:	7dfb      	ldrb	r3, [r7, #23]
 8017fd0:	3301      	adds	r3, #1
 8017fd2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017fd4:	7dfb      	ldrb	r3, [r7, #23]
 8017fd6:	68ba      	ldr	r2, [r7, #8]
 8017fd8:	4413      	add	r3, r2
 8017fda:	2200      	movs	r2, #0
 8017fdc:	701a      	strb	r2, [r3, #0]
    idx++;
 8017fde:	7dfb      	ldrb	r3, [r7, #23]
 8017fe0:	3301      	adds	r3, #1
 8017fe2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017fe4:	693b      	ldr	r3, [r7, #16]
 8017fe6:	781b      	ldrb	r3, [r3, #0]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d1e7      	bne.n	8017fbc <USBD_GetString+0x52>
 8017fec:	e000      	b.n	8017ff0 <USBD_GetString+0x86>
    return;
 8017fee:	bf00      	nop
  }
}
 8017ff0:	3718      	adds	r7, #24
 8017ff2:	46bd      	mov	sp, r7
 8017ff4:	bd80      	pop	{r7, pc}

08017ff6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017ff6:	b480      	push	{r7}
 8017ff8:	b085      	sub	sp, #20
 8017ffa:	af00      	add	r7, sp, #0
 8017ffc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017ffe:	2300      	movs	r3, #0
 8018000:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8018006:	e005      	b.n	8018014 <USBD_GetLen+0x1e>
  {
    len++;
 8018008:	7bfb      	ldrb	r3, [r7, #15]
 801800a:	3301      	adds	r3, #1
 801800c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801800e:	68bb      	ldr	r3, [r7, #8]
 8018010:	3301      	adds	r3, #1
 8018012:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8018014:	68bb      	ldr	r3, [r7, #8]
 8018016:	781b      	ldrb	r3, [r3, #0]
 8018018:	2b00      	cmp	r3, #0
 801801a:	d1f5      	bne.n	8018008 <USBD_GetLen+0x12>
  }

  return len;
 801801c:	7bfb      	ldrb	r3, [r7, #15]
}
 801801e:	4618      	mov	r0, r3
 8018020:	3714      	adds	r7, #20
 8018022:	46bd      	mov	sp, r7
 8018024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018028:	4770      	bx	lr

0801802a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801802a:	b580      	push	{r7, lr}
 801802c:	b084      	sub	sp, #16
 801802e:	af00      	add	r7, sp, #0
 8018030:	60f8      	str	r0, [r7, #12]
 8018032:	60b9      	str	r1, [r7, #8]
 8018034:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8018036:	68fb      	ldr	r3, [r7, #12]
 8018038:	2202      	movs	r2, #2
 801803a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	687a      	ldr	r2, [r7, #4]
 8018042:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	687a      	ldr	r2, [r7, #4]
 8018048:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	68ba      	ldr	r2, [r7, #8]
 801804e:	2100      	movs	r1, #0
 8018050:	68f8      	ldr	r0, [r7, #12]
 8018052:	f7ea fb38 	bl	80026c6 <USBD_LL_Transmit>

  return USBD_OK;
 8018056:	2300      	movs	r3, #0
}
 8018058:	4618      	mov	r0, r3
 801805a:	3710      	adds	r7, #16
 801805c:	46bd      	mov	sp, r7
 801805e:	bd80      	pop	{r7, pc}

08018060 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8018060:	b580      	push	{r7, lr}
 8018062:	b084      	sub	sp, #16
 8018064:	af00      	add	r7, sp, #0
 8018066:	60f8      	str	r0, [r7, #12]
 8018068:	60b9      	str	r1, [r7, #8]
 801806a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	68ba      	ldr	r2, [r7, #8]
 8018070:	2100      	movs	r1, #0
 8018072:	68f8      	ldr	r0, [r7, #12]
 8018074:	f7ea fb27 	bl	80026c6 <USBD_LL_Transmit>

  return USBD_OK;
 8018078:	2300      	movs	r3, #0
}
 801807a:	4618      	mov	r0, r3
 801807c:	3710      	adds	r7, #16
 801807e:	46bd      	mov	sp, r7
 8018080:	bd80      	pop	{r7, pc}

08018082 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8018082:	b580      	push	{r7, lr}
 8018084:	b084      	sub	sp, #16
 8018086:	af00      	add	r7, sp, #0
 8018088:	60f8      	str	r0, [r7, #12]
 801808a:	60b9      	str	r1, [r7, #8]
 801808c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	2203      	movs	r2, #3
 8018092:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	687a      	ldr	r2, [r7, #4]
 801809a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	687a      	ldr	r2, [r7, #4]
 80180a2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	68ba      	ldr	r2, [r7, #8]
 80180aa:	2100      	movs	r1, #0
 80180ac:	68f8      	ldr	r0, [r7, #12]
 80180ae:	f7ea fb2b 	bl	8002708 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80180b2:	2300      	movs	r3, #0
}
 80180b4:	4618      	mov	r0, r3
 80180b6:	3710      	adds	r7, #16
 80180b8:	46bd      	mov	sp, r7
 80180ba:	bd80      	pop	{r7, pc}

080180bc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80180bc:	b580      	push	{r7, lr}
 80180be:	b084      	sub	sp, #16
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	60f8      	str	r0, [r7, #12]
 80180c4:	60b9      	str	r1, [r7, #8]
 80180c6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	68ba      	ldr	r2, [r7, #8]
 80180cc:	2100      	movs	r1, #0
 80180ce:	68f8      	ldr	r0, [r7, #12]
 80180d0:	f7ea fb1a 	bl	8002708 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80180d4:	2300      	movs	r3, #0
}
 80180d6:	4618      	mov	r0, r3
 80180d8:	3710      	adds	r7, #16
 80180da:	46bd      	mov	sp, r7
 80180dc:	bd80      	pop	{r7, pc}

080180de <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80180de:	b580      	push	{r7, lr}
 80180e0:	b082      	sub	sp, #8
 80180e2:	af00      	add	r7, sp, #0
 80180e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	2204      	movs	r2, #4
 80180ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80180ee:	2300      	movs	r3, #0
 80180f0:	2200      	movs	r2, #0
 80180f2:	2100      	movs	r1, #0
 80180f4:	6878      	ldr	r0, [r7, #4]
 80180f6:	f7ea fae6 	bl	80026c6 <USBD_LL_Transmit>

  return USBD_OK;
 80180fa:	2300      	movs	r3, #0
}
 80180fc:	4618      	mov	r0, r3
 80180fe:	3708      	adds	r7, #8
 8018100:	46bd      	mov	sp, r7
 8018102:	bd80      	pop	{r7, pc}

08018104 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8018104:	b580      	push	{r7, lr}
 8018106:	b082      	sub	sp, #8
 8018108:	af00      	add	r7, sp, #0
 801810a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	2205      	movs	r2, #5
 8018110:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018114:	2300      	movs	r3, #0
 8018116:	2200      	movs	r2, #0
 8018118:	2100      	movs	r1, #0
 801811a:	6878      	ldr	r0, [r7, #4]
 801811c:	f7ea faf4 	bl	8002708 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018120:	2300      	movs	r3, #0
}
 8018122:	4618      	mov	r0, r3
 8018124:	3708      	adds	r7, #8
 8018126:	46bd      	mov	sp, r7
 8018128:	bd80      	pop	{r7, pc}
	...

0801812c <arm_mean_f32>:
 801812c:	b430      	push	{r4, r5}
 801812e:	088d      	lsrs	r5, r1, #2
 8018130:	d037      	beq.n	80181a2 <arm_mean_f32+0x76>
 8018132:	f100 0310 	add.w	r3, r0, #16
 8018136:	462c      	mov	r4, r5
 8018138:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 80181a8 <arm_mean_f32+0x7c>
 801813c:	ed13 7a04 	vldr	s14, [r3, #-16]
 8018140:	3c01      	subs	r4, #1
 8018142:	ed13 6a03 	vldr	s12, [r3, #-12]
 8018146:	f103 0310 	add.w	r3, r3, #16
 801814a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801814e:	ed53 6a06 	vldr	s13, [r3, #-24]	@ 0xffffffe8
 8018152:	ed13 7a05 	vldr	s14, [r3, #-20]	@ 0xffffffec
 8018156:	ee77 7a86 	vadd.f32	s15, s15, s12
 801815a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801815e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018162:	d1eb      	bne.n	801813c <arm_mean_f32+0x10>
 8018164:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8018168:	f011 0303 	ands.w	r3, r1, #3
 801816c:	d00f      	beq.n	801818e <arm_mean_f32+0x62>
 801816e:	ed90 7a00 	vldr	s14, [r0]
 8018172:	3b01      	subs	r3, #1
 8018174:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018178:	d009      	beq.n	801818e <arm_mean_f32+0x62>
 801817a:	ed90 7a01 	vldr	s14, [r0, #4]
 801817e:	2b01      	cmp	r3, #1
 8018180:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018184:	d003      	beq.n	801818e <arm_mean_f32+0x62>
 8018186:	ed90 7a02 	vldr	s14, [r0, #8]
 801818a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801818e:	ee07 1a10 	vmov	s14, r1
 8018192:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8018196:	bc30      	pop	{r4, r5}
 8018198:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801819c:	edc2 6a00 	vstr	s13, [r2]
 80181a0:	4770      	bx	lr
 80181a2:	eddf 7a01 	vldr	s15, [pc, #4]	@ 80181a8 <arm_mean_f32+0x7c>
 80181a6:	e7df      	b.n	8018168 <arm_mean_f32+0x3c>
 80181a8:	00000000 	.word	0x00000000

080181ac <arm_max_f32>:
 80181ac:	f101 3cff 	add.w	ip, r1, #4294967295
 80181b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181b2:	4607      	mov	r7, r0
 80181b4:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 80181b8:	ecf7 7a01 	vldmia	r7!, {s15}
 80181bc:	d05c      	beq.n	8018278 <arm_max_f32+0xcc>
 80181be:	2400      	movs	r4, #0
 80181c0:	3014      	adds	r0, #20
 80181c2:	ea4f 068e 	mov.w	r6, lr, lsl #2
 80181c6:	4625      	mov	r5, r4
 80181c8:	ed10 7a04 	vldr	s14, [r0, #-16]
 80181cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80181d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181d4:	d502      	bpl.n	80181dc <arm_max_f32+0x30>
 80181d6:	eef0 7a47 	vmov.f32	s15, s14
 80181da:	1c65      	adds	r5, r4, #1
 80181dc:	ed10 7a03 	vldr	s14, [r0, #-12]
 80181e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80181e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181e8:	d502      	bpl.n	80181f0 <arm_max_f32+0x44>
 80181ea:	eef0 7a47 	vmov.f32	s15, s14
 80181ee:	1ca5      	adds	r5, r4, #2
 80181f0:	ed10 7a02 	vldr	s14, [r0, #-8]
 80181f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80181f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181fc:	d502      	bpl.n	8018204 <arm_max_f32+0x58>
 80181fe:	eef0 7a47 	vmov.f32	s15, s14
 8018202:	1ce5      	adds	r5, r4, #3
 8018204:	ed10 7a01 	vldr	s14, [r0, #-4]
 8018208:	3404      	adds	r4, #4
 801820a:	3010      	adds	r0, #16
 801820c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018214:	d502      	bpl.n	801821c <arm_max_f32+0x70>
 8018216:	eef0 7a47 	vmov.f32	s15, s14
 801821a:	4625      	mov	r5, r4
 801821c:	42a6      	cmp	r6, r4
 801821e:	d1d3      	bne.n	80181c8 <arm_max_f32+0x1c>
 8018220:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8018224:	f01c 0003 	ands.w	r0, ip, #3
 8018228:	d01e      	beq.n	8018268 <arm_max_f32+0xbc>
 801822a:	ed97 7a00 	vldr	s14, [r7]
 801822e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018236:	dc1b      	bgt.n	8018270 <arm_max_f32+0xc4>
 8018238:	3801      	subs	r0, #1
 801823a:	d015      	beq.n	8018268 <arm_max_f32+0xbc>
 801823c:	ed97 7a01 	vldr	s14, [r7, #4]
 8018240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018248:	d502      	bpl.n	8018250 <arm_max_f32+0xa4>
 801824a:	eef0 7a47 	vmov.f32	s15, s14
 801824e:	1a0d      	subs	r5, r1, r0
 8018250:	2801      	cmp	r0, #1
 8018252:	d009      	beq.n	8018268 <arm_max_f32+0xbc>
 8018254:	ed97 7a02 	vldr	s14, [r7, #8]
 8018258:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801825c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018260:	dd02      	ble.n	8018268 <arm_max_f32+0xbc>
 8018262:	eef0 7a47 	vmov.f32	s15, s14
 8018266:	4665      	mov	r5, ip
 8018268:	edc2 7a00 	vstr	s15, [r2]
 801826c:	601d      	str	r5, [r3, #0]
 801826e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018270:	eef0 7a47 	vmov.f32	s15, s14
 8018274:	1a0d      	subs	r5, r1, r0
 8018276:	e7df      	b.n	8018238 <arm_max_f32+0x8c>
 8018278:	4675      	mov	r5, lr
 801827a:	e7d3      	b.n	8018224 <arm_max_f32+0x78>

0801827c <arm_rfft_32_fast_init_f32>:
 801827c:	b180      	cbz	r0, 80182a0 <arm_rfft_32_fast_init_f32+0x24>
 801827e:	4603      	mov	r3, r0
 8018280:	2220      	movs	r2, #32
 8018282:	2010      	movs	r0, #16
 8018284:	4908      	ldr	r1, [pc, #32]	@ (80182a8 <arm_rfft_32_fast_init_f32+0x2c>)
 8018286:	b430      	push	{r4, r5}
 8018288:	2514      	movs	r5, #20
 801828a:	4c08      	ldr	r4, [pc, #32]	@ (80182ac <arm_rfft_32_fast_init_f32+0x30>)
 801828c:	821a      	strh	r2, [r3, #16]
 801828e:	4a08      	ldr	r2, [pc, #32]	@ (80182b0 <arm_rfft_32_fast_init_f32+0x34>)
 8018290:	8018      	strh	r0, [r3, #0]
 8018292:	2000      	movs	r0, #0
 8018294:	819d      	strh	r5, [r3, #12]
 8018296:	615a      	str	r2, [r3, #20]
 8018298:	e9c3 1401 	strd	r1, r4, [r3, #4]
 801829c:	bc30      	pop	{r4, r5}
 801829e:	4770      	bx	lr
 80182a0:	f04f 30ff 	mov.w	r0, #4294967295
 80182a4:	4770      	bx	lr
 80182a6:	bf00      	nop
 80182a8:	0806cc48 	.word	0x0806cc48
 80182ac:	0804c90c 	.word	0x0804c90c
 80182b0:	0807d9c8 	.word	0x0807d9c8

080182b4 <arm_rfft_64_fast_init_f32>:
 80182b4:	b180      	cbz	r0, 80182d8 <arm_rfft_64_fast_init_f32+0x24>
 80182b6:	4603      	mov	r3, r0
 80182b8:	2240      	movs	r2, #64	@ 0x40
 80182ba:	2020      	movs	r0, #32
 80182bc:	4908      	ldr	r1, [pc, #32]	@ (80182e0 <arm_rfft_64_fast_init_f32+0x2c>)
 80182be:	b430      	push	{r4, r5}
 80182c0:	2530      	movs	r5, #48	@ 0x30
 80182c2:	4c08      	ldr	r4, [pc, #32]	@ (80182e4 <arm_rfft_64_fast_init_f32+0x30>)
 80182c4:	821a      	strh	r2, [r3, #16]
 80182c6:	4a08      	ldr	r2, [pc, #32]	@ (80182e8 <arm_rfft_64_fast_init_f32+0x34>)
 80182c8:	8018      	strh	r0, [r3, #0]
 80182ca:	2000      	movs	r0, #0
 80182cc:	819d      	strh	r5, [r3, #12]
 80182ce:	615a      	str	r2, [r3, #20]
 80182d0:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80182d4:	bc30      	pop	{r4, r5}
 80182d6:	4770      	bx	lr
 80182d8:	f04f 30ff 	mov.w	r0, #4294967295
 80182dc:	4770      	bx	lr
 80182de:	bf00      	nop
 80182e0:	080714c8 	.word	0x080714c8
 80182e4:	0804ea64 	.word	0x0804ea64
 80182e8:	08082248 	.word	0x08082248

080182ec <arm_rfft_256_fast_init_f32>:
 80182ec:	b188      	cbz	r0, 8018312 <arm_rfft_256_fast_init_f32+0x26>
 80182ee:	4603      	mov	r3, r0
 80182f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80182f4:	2080      	movs	r0, #128	@ 0x80
 80182f6:	4908      	ldr	r1, [pc, #32]	@ (8018318 <arm_rfft_256_fast_init_f32+0x2c>)
 80182f8:	b430      	push	{r4, r5}
 80182fa:	25d0      	movs	r5, #208	@ 0xd0
 80182fc:	4c07      	ldr	r4, [pc, #28]	@ (801831c <arm_rfft_256_fast_init_f32+0x30>)
 80182fe:	821a      	strh	r2, [r3, #16]
 8018300:	4a07      	ldr	r2, [pc, #28]	@ (8018320 <arm_rfft_256_fast_init_f32+0x34>)
 8018302:	8018      	strh	r0, [r3, #0]
 8018304:	2000      	movs	r0, #0
 8018306:	819d      	strh	r5, [r3, #12]
 8018308:	615a      	str	r2, [r3, #20]
 801830a:	e9c3 1401 	strd	r1, r4, [r3, #4]
 801830e:	bc30      	pop	{r4, r5}
 8018310:	4770      	bx	lr
 8018312:	f04f 30ff 	mov.w	r0, #4294967295
 8018316:	4770      	bx	lr
 8018318:	0806c848 	.word	0x0806c848
 801831c:	0804c76c 	.word	0x0804c76c
 8018320:	0807d5c8 	.word	0x0807d5c8

08018324 <arm_rfft_512_fast_init_f32>:
 8018324:	b198      	cbz	r0, 801834e <arm_rfft_512_fast_init_f32+0x2a>
 8018326:	4603      	mov	r3, r0
 8018328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801832c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8018330:	4908      	ldr	r1, [pc, #32]	@ (8018354 <arm_rfft_512_fast_init_f32+0x30>)
 8018332:	b430      	push	{r4, r5}
 8018334:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 8018338:	4c07      	ldr	r4, [pc, #28]	@ (8018358 <arm_rfft_512_fast_init_f32+0x34>)
 801833a:	821a      	strh	r2, [r3, #16]
 801833c:	4a07      	ldr	r2, [pc, #28]	@ (801835c <arm_rfft_512_fast_init_f32+0x38>)
 801833e:	8018      	strh	r0, [r3, #0]
 8018340:	2000      	movs	r0, #0
 8018342:	819d      	strh	r5, [r3, #12]
 8018344:	615a      	str	r2, [r3, #20]
 8018346:	e9c3 1401 	strd	r1, r4, [r3, #4]
 801834a:	bc30      	pop	{r4, r5}
 801834c:	4770      	bx	lr
 801834e:	f04f 30ff 	mov.w	r0, #4294967295
 8018352:	4770      	bx	lr
 8018354:	08070cc8 	.word	0x08070cc8
 8018358:	0804e6f4 	.word	0x0804e6f4
 801835c:	08081a48 	.word	0x08081a48

08018360 <arm_rfft_1024_fast_init_f32>:
 8018360:	b198      	cbz	r0, 801838a <arm_rfft_1024_fast_init_f32+0x2a>
 8018362:	4603      	mov	r3, r0
 8018364:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018368:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801836c:	4908      	ldr	r1, [pc, #32]	@ (8018390 <arm_rfft_1024_fast_init_f32+0x30>)
 801836e:	b430      	push	{r4, r5}
 8018370:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 8018374:	4c07      	ldr	r4, [pc, #28]	@ (8018394 <arm_rfft_1024_fast_init_f32+0x34>)
 8018376:	821a      	strh	r2, [r3, #16]
 8018378:	4a07      	ldr	r2, [pc, #28]	@ (8018398 <arm_rfft_1024_fast_init_f32+0x38>)
 801837a:	8018      	strh	r0, [r3, #0]
 801837c:	2000      	movs	r0, #0
 801837e:	819d      	strh	r5, [r3, #12]
 8018380:	615a      	str	r2, [r3, #20]
 8018382:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8018386:	bc30      	pop	{r4, r5}
 8018388:	4770      	bx	lr
 801838a:	f04f 30ff 	mov.w	r0, #4294967295
 801838e:	4770      	bx	lr
 8018390:	080795c8 	.word	0x080795c8
 8018394:	0804eac4 	.word	0x0804eac4
 8018398:	0807a5c8 	.word	0x0807a5c8

0801839c <arm_rfft_2048_fast_init_f32>:
 801839c:	b198      	cbz	r0, 80183c6 <arm_rfft_2048_fast_init_f32+0x2a>
 801839e:	4603      	mov	r3, r0
 80183a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80183a4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80183a8:	4908      	ldr	r1, [pc, #32]	@ (80183cc <arm_rfft_2048_fast_init_f32+0x30>)
 80183aa:	b430      	push	{r4, r5}
 80183ac:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 80183b0:	4c07      	ldr	r4, [pc, #28]	@ (80183d0 <arm_rfft_2048_fast_init_f32+0x34>)
 80183b2:	821a      	strh	r2, [r3, #16]
 80183b4:	4a07      	ldr	r2, [pc, #28]	@ (80183d4 <arm_rfft_2048_fast_init_f32+0x38>)
 80183b6:	8018      	strh	r0, [r3, #0]
 80183b8:	2000      	movs	r0, #0
 80183ba:	819d      	strh	r5, [r3, #12]
 80183bc:	615a      	str	r2, [r3, #20]
 80183be:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80183c2:	bc30      	pop	{r4, r5}
 80183c4:	4770      	bx	lr
 80183c6:	f04f 30ff 	mov.w	r0, #4294967295
 80183ca:	4770      	bx	lr
 80183cc:	0806a848 	.word	0x0806a848
 80183d0:	0804b95c 	.word	0x0804b95c
 80183d4:	0807b5c8 	.word	0x0807b5c8

080183d8 <arm_rfft_4096_fast_init_f32>:
 80183d8:	b198      	cbz	r0, 8018402 <arm_rfft_4096_fast_init_f32+0x2a>
 80183da:	4603      	mov	r3, r0
 80183dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80183e0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80183e4:	4908      	ldr	r1, [pc, #32]	@ (8018408 <arm_rfft_4096_fast_init_f32+0x30>)
 80183e6:	b430      	push	{r4, r5}
 80183e8:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 80183ec:	4c07      	ldr	r4, [pc, #28]	@ (801840c <arm_rfft_4096_fast_init_f32+0x34>)
 80183ee:	821a      	strh	r2, [r3, #16]
 80183f0:	4a07      	ldr	r2, [pc, #28]	@ (8018410 <arm_rfft_4096_fast_init_f32+0x38>)
 80183f2:	8018      	strh	r0, [r3, #0]
 80183f4:	2000      	movs	r0, #0
 80183f6:	819d      	strh	r5, [r3, #12]
 80183f8:	615a      	str	r2, [r3, #20]
 80183fa:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80183fe:	bc30      	pop	{r4, r5}
 8018400:	4770      	bx	lr
 8018402:	f04f 30ff 	mov.w	r0, #4294967295
 8018406:	4770      	bx	lr
 8018408:	0806ccc8 	.word	0x0806ccc8
 801840c:	0804c934 	.word	0x0804c934
 8018410:	0807da48 	.word	0x0807da48

08018414 <arm_rfft_fast_init_f32>:
 8018414:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8018418:	d01f      	beq.n	801845a <arm_rfft_fast_init_f32+0x46>
 801841a:	d90b      	bls.n	8018434 <arm_rfft_fast_init_f32+0x20>
 801841c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8018420:	d019      	beq.n	8018456 <arm_rfft_fast_init_f32+0x42>
 8018422:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8018426:	d012      	beq.n	801844e <arm_rfft_fast_init_f32+0x3a>
 8018428:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801842c:	d00d      	beq.n	801844a <arm_rfft_fast_init_f32+0x36>
 801842e:	f04f 30ff 	mov.w	r0, #4294967295
 8018432:	4770      	bx	lr
 8018434:	2940      	cmp	r1, #64	@ 0x40
 8018436:	d00c      	beq.n	8018452 <arm_rfft_fast_init_f32+0x3e>
 8018438:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 801843c:	d003      	beq.n	8018446 <arm_rfft_fast_init_f32+0x32>
 801843e:	2920      	cmp	r1, #32
 8018440:	d1f5      	bne.n	801842e <arm_rfft_fast_init_f32+0x1a>
 8018442:	4b07      	ldr	r3, [pc, #28]	@ (8018460 <arm_rfft_fast_init_f32+0x4c>)
 8018444:	4718      	bx	r3
 8018446:	4b07      	ldr	r3, [pc, #28]	@ (8018464 <arm_rfft_fast_init_f32+0x50>)
 8018448:	4718      	bx	r3
 801844a:	4b07      	ldr	r3, [pc, #28]	@ (8018468 <arm_rfft_fast_init_f32+0x54>)
 801844c:	4718      	bx	r3
 801844e:	4b07      	ldr	r3, [pc, #28]	@ (801846c <arm_rfft_fast_init_f32+0x58>)
 8018450:	4718      	bx	r3
 8018452:	4b07      	ldr	r3, [pc, #28]	@ (8018470 <arm_rfft_fast_init_f32+0x5c>)
 8018454:	e7f6      	b.n	8018444 <arm_rfft_fast_init_f32+0x30>
 8018456:	4b07      	ldr	r3, [pc, #28]	@ (8018474 <arm_rfft_fast_init_f32+0x60>)
 8018458:	e7f4      	b.n	8018444 <arm_rfft_fast_init_f32+0x30>
 801845a:	4b07      	ldr	r3, [pc, #28]	@ (8018478 <arm_rfft_fast_init_f32+0x64>)
 801845c:	e7f2      	b.n	8018444 <arm_rfft_fast_init_f32+0x30>
 801845e:	bf00      	nop
 8018460:	0801827d 	.word	0x0801827d
 8018464:	080182ed 	.word	0x080182ed
 8018468:	08018361 	.word	0x08018361
 801846c:	080183d9 	.word	0x080183d9
 8018470:	080182b5 	.word	0x080182b5
 8018474:	0801839d 	.word	0x0801839d
 8018478:	08018325 	.word	0x08018325

0801847c <stage_rfft_f32>:
 801847c:	b470      	push	{r4, r5, r6}
 801847e:	edd1 7a00 	vldr	s15, [r1]
 8018482:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8018486:	ed91 7a01 	vldr	s14, [r1, #4]
 801848a:	f101 0510 	add.w	r5, r1, #16
 801848e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018492:	8806      	ldrh	r6, [r0, #0]
 8018494:	ee37 7a07 	vadd.f32	s14, s14, s14
 8018498:	6943      	ldr	r3, [r0, #20]
 801849a:	1e70      	subs	r0, r6, #1
 801849c:	eeb0 4a46 	vmov.f32	s8, s12
 80184a0:	f102 0410 	add.w	r4, r2, #16
 80184a4:	3310      	adds	r3, #16
 80184a6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80184aa:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80184ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80184b2:	3908      	subs	r1, #8
 80184b4:	ee26 7a86 	vmul.f32	s14, s13, s12
 80184b8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80184bc:	ed82 7a00 	vstr	s14, [r2]
 80184c0:	edc2 7a01 	vstr	s15, [r2, #4]
 80184c4:	ed15 6a02 	vldr	s12, [r5, #-8]
 80184c8:	3801      	subs	r0, #1
 80184ca:	ed91 7a02 	vldr	s14, [r1, #8]
 80184ce:	f105 0508 	add.w	r5, r5, #8
 80184d2:	ed53 6a02 	vldr	s13, [r3, #-8]
 80184d6:	f1a1 0108 	sub.w	r1, r1, #8
 80184da:	ee77 5a46 	vsub.f32	s11, s14, s12
 80184de:	edd1 4a05 	vldr	s9, [r1, #20]
 80184e2:	ed55 7a03 	vldr	s15, [r5, #-12]
 80184e6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80184ea:	ed13 6a01 	vldr	s12, [r3, #-4]
 80184ee:	f104 0408 	add.w	r4, r4, #8
 80184f2:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80184f6:	f103 0308 	add.w	r3, r3, #8
 80184fa:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80184fe:	ee66 5a25 	vmul.f32	s11, s12, s11
 8018502:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8018506:	ee37 7a23 	vadd.f32	s14, s14, s7
 801850a:	ee66 6a85 	vmul.f32	s13, s13, s10
 801850e:	ee26 6a05 	vmul.f32	s12, s12, s10
 8018512:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8018516:	ee37 7a06 	vadd.f32	s14, s14, s12
 801851a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801851e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018522:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018526:	ed04 7a04 	vstr	s14, [r4, #-16]
 801852a:	ed44 7a03 	vstr	s15, [r4, #-12]
 801852e:	d1c9      	bne.n	80184c4 <stage_rfft_f32+0x48>
 8018530:	bc70      	pop	{r4, r5, r6}
 8018532:	4770      	bx	lr

08018534 <merge_rfft_f32>:
 8018534:	b410      	push	{r4}
 8018536:	edd1 7a00 	vldr	s15, [r1]
 801853a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801853e:	edd1 6a01 	vldr	s13, [r1, #4]
 8018542:	8804      	ldrh	r4, [r0, #0]
 8018544:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018548:	6940      	ldr	r0, [r0, #20]
 801854a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801854e:	3c01      	subs	r4, #1
 8018550:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018554:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018558:	ed82 7a00 	vstr	s14, [r2]
 801855c:	edc2 7a01 	vstr	s15, [r2, #4]
 8018560:	b3dc      	cbz	r4, 80185da <merge_rfft_f32+0xa6>
 8018562:	00e3      	lsls	r3, r4, #3
 8018564:	3010      	adds	r0, #16
 8018566:	3210      	adds	r2, #16
 8018568:	3b08      	subs	r3, #8
 801856a:	440b      	add	r3, r1
 801856c:	3110      	adds	r1, #16
 801856e:	ed11 6a02 	vldr	s12, [r1, #-8]
 8018572:	3c01      	subs	r4, #1
 8018574:	ed93 7a02 	vldr	s14, [r3, #8]
 8018578:	f101 0108 	add.w	r1, r1, #8
 801857c:	ed50 6a02 	vldr	s13, [r0, #-8]
 8018580:	f1a3 0308 	sub.w	r3, r3, #8
 8018584:	ee76 5a47 	vsub.f32	s11, s12, s14
 8018588:	edd3 4a05 	vldr	s9, [r3, #20]
 801858c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8018590:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018594:	ed10 6a01 	vldr	s12, [r0, #-4]
 8018598:	f102 0208 	add.w	r2, r2, #8
 801859c:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80185a0:	f100 0008 	add.w	r0, r0, #8
 80185a4:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80185a8:	ee66 5a25 	vmul.f32	s11, s12, s11
 80185ac:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80185b0:	ee37 7a63 	vsub.f32	s14, s14, s7
 80185b4:	ee66 6a85 	vmul.f32	s13, s13, s10
 80185b8:	ee26 6a05 	vmul.f32	s12, s12, s10
 80185bc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80185c0:	ee37 7a46 	vsub.f32	s14, s14, s12
 80185c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80185c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80185cc:	ee67 7a84 	vmul.f32	s15, s15, s8
 80185d0:	ed02 7a04 	vstr	s14, [r2, #-16]
 80185d4:	ed42 7a03 	vstr	s15, [r2, #-12]
 80185d8:	d1c9      	bne.n	801856e <merge_rfft_f32+0x3a>
 80185da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80185de:	4770      	bx	lr

080185e0 <arm_rfft_fast_f32>:
 80185e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185e4:	8a05      	ldrh	r5, [r0, #16]
 80185e6:	4604      	mov	r4, r0
 80185e8:	4617      	mov	r7, r2
 80185ea:	461e      	mov	r6, r3
 80185ec:	086d      	lsrs	r5, r5, #1
 80185ee:	8005      	strh	r5, [r0, #0]
 80185f0:	b14b      	cbz	r3, 8018606 <arm_rfft_fast_f32+0x26>
 80185f2:	f7ff ff9f 	bl	8018534 <merge_rfft_f32>
 80185f6:	4632      	mov	r2, r6
 80185f8:	4639      	mov	r1, r7
 80185fa:	4620      	mov	r0, r4
 80185fc:	2301      	movs	r3, #1
 80185fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018602:	f000 bb35 	b.w	8018c70 <arm_cfft_f32>
 8018606:	4688      	mov	r8, r1
 8018608:	461a      	mov	r2, r3
 801860a:	2301      	movs	r3, #1
 801860c:	f000 fb30 	bl	8018c70 <arm_cfft_f32>
 8018610:	463a      	mov	r2, r7
 8018612:	4641      	mov	r1, r8
 8018614:	4620      	mov	r0, r4
 8018616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801861a:	f7ff bf2f 	b.w	801847c <stage_rfft_f32>
 801861e:	bf00      	nop

08018620 <arm_cfft_radix8by2_f32>:
 8018620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018624:	4607      	mov	r7, r0
 8018626:	4608      	mov	r0, r1
 8018628:	ed2d 8b06 	vpush	{d8-d10}
 801862c:	f8b7 c000 	ldrh.w	ip, [r7]
 8018630:	687a      	ldr	r2, [r7, #4]
 8018632:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8018636:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 801863a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801863e:	f000 80ac 	beq.w	801879a <arm_cfft_radix8by2_f32+0x17a>
 8018642:	008c      	lsls	r4, r1, #2
 8018644:	f100 0310 	add.w	r3, r0, #16
 8018648:	3210      	adds	r2, #16
 801864a:	f108 0610 	add.w	r6, r8, #16
 801864e:	3410      	adds	r4, #16
 8018650:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8018654:	1905      	adds	r5, r0, r4
 8018656:	4444      	add	r4, r8
 8018658:	ed16 7a04 	vldr	s14, [r6, #-16]
 801865c:	3310      	adds	r3, #16
 801865e:	ed53 4a08 	vldr	s9, [r3, #-32]	@ 0xffffffe0
 8018662:	3510      	adds	r5, #16
 8018664:	ed56 0a03 	vldr	s1, [r6, #-12]
 8018668:	3210      	adds	r2, #16
 801866a:	ee74 9a87 	vadd.f32	s19, s9, s14
 801866e:	ed56 7a02 	vldr	s15, [r6, #-8]
 8018672:	ed56 2a01 	vldr	s5, [r6, #-4]
 8018676:	ee74 4ac7 	vsub.f32	s9, s9, s14
 801867a:	ed54 5a04 	vldr	s11, [r4, #-16]
 801867e:	3610      	adds	r6, #16
 8018680:	ed14 5a03 	vldr	s10, [r4, #-12]
 8018684:	3410      	adds	r4, #16
 8018686:	ed14 3a06 	vldr	s6, [r4, #-24]	@ 0xffffffe8
 801868a:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 801868e:	ed55 6a08 	vldr	s13, [r5, #-32]	@ 0xffffffe0
 8018692:	ed55 3a06 	vldr	s7, [r5, #-24]	@ 0xffffffe8
 8018696:	ed15 4a05 	vldr	s8, [r5, #-20]	@ 0xffffffec
 801869a:	ee36 9aa5 	vadd.f32	s18, s13, s11
 801869e:	ed14 6a05 	vldr	s12, [r4, #-20]	@ 0xffffffec
 80186a2:	ee33 8a83 	vadd.f32	s16, s7, s6
 80186a6:	ed13 7a07 	vldr	s14, [r3, #-28]	@ 0xffffffe4
 80186aa:	ee75 5ae6 	vsub.f32	s11, s11, s13
 80186ae:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 80186b2:	ee34 0a06 	vadd.f32	s0, s8, s12
 80186b6:	ed15 1a07 	vldr	s2, [r5, #-28]	@ 0xffffffe4
 80186ba:	ee77 aa20 	vadd.f32	s21, s14, s1
 80186be:	ed43 9a08 	vstr	s19, [r3, #-32]	@ 0xffffffe0
 80186c2:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80186c6:	ee72 9a22 	vadd.f32	s19, s4, s5
 80186ca:	ee71 8a05 	vadd.f32	s17, s2, s10
 80186ce:	ed43 aa07 	vstr	s21, [r3, #-28]	@ 0xffffffe4
 80186d2:	ee37 7a60 	vsub.f32	s14, s14, s1
 80186d6:	ed03 aa06 	vstr	s20, [r3, #-24]	@ 0xffffffe8
 80186da:	ee35 5a41 	vsub.f32	s10, s10, s2
 80186de:	ed43 9a05 	vstr	s19, [r3, #-20]	@ 0xffffffec
 80186e2:	ee36 6a44 	vsub.f32	s12, s12, s8
 80186e6:	ed05 9a08 	vstr	s18, [r5, #-32]	@ 0xffffffe0
 80186ea:	ed45 8a07 	vstr	s17, [r5, #-28]	@ 0xffffffe4
 80186ee:	ee71 1ae7 	vsub.f32	s3, s3, s15
 80186f2:	ed05 8a06 	vstr	s16, [r5, #-24]	@ 0xffffffe8
 80186f6:	ee72 7a62 	vsub.f32	s15, s4, s5
 80186fa:	ed05 0a05 	vstr	s0, [r5, #-20]	@ 0xffffffec
 80186fe:	ee73 2a63 	vsub.f32	s5, s6, s7
 8018702:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 8018706:	4563      	cmp	r3, ip
 8018708:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 801870c:	ee24 3a84 	vmul.f32	s6, s9, s8
 8018710:	ee27 2a26 	vmul.f32	s4, s14, s13
 8018714:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8018718:	ee65 3aa6 	vmul.f32	s7, s11, s13
 801871c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018720:	ee65 5a84 	vmul.f32	s11, s11, s8
 8018724:	ee65 6a26 	vmul.f32	s13, s10, s13
 8018728:	ee25 5a04 	vmul.f32	s10, s10, s8
 801872c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8018730:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018734:	ee33 4a02 	vadd.f32	s8, s6, s4
 8018738:	ee33 5ac5 	vsub.f32	s10, s7, s10
 801873c:	ed06 7a07 	vstr	s14, [r6, #-28]	@ 0xffffffe4
 8018740:	ed06 4a08 	vstr	s8, [r6, #-32]	@ 0xffffffe0
 8018744:	ed04 5a08 	vstr	s10, [r4, #-32]	@ 0xffffffe0
 8018748:	ed44 6a07 	vstr	s13, [r4, #-28]	@ 0xffffffe4
 801874c:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 8018750:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8018754:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8018758:	ee27 4a87 	vmul.f32	s8, s15, s14
 801875c:	ee61 5a87 	vmul.f32	s11, s3, s14
 8018760:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018764:	ee22 5a87 	vmul.f32	s10, s5, s14
 8018768:	ee26 7a07 	vmul.f32	s14, s12, s14
 801876c:	ee26 6a26 	vmul.f32	s12, s12, s13
 8018770:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8018774:	ee74 4a84 	vadd.f32	s9, s9, s8
 8018778:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801877c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8018780:	ee37 7a26 	vadd.f32	s14, s14, s13
 8018784:	ed46 4a06 	vstr	s9, [r6, #-24]	@ 0xffffffe8
 8018788:	ed46 7a05 	vstr	s15, [r6, #-20]	@ 0xffffffec
 801878c:	ed04 6a06 	vstr	s12, [r4, #-24]	@ 0xffffffe8
 8018790:	ed04 7a05 	vstr	s14, [r4, #-20]	@ 0xffffffec
 8018794:	f47f af60 	bne.w	8018658 <arm_cfft_radix8by2_f32+0x38>
 8018798:	687a      	ldr	r2, [r7, #4]
 801879a:	b28c      	uxth	r4, r1
 801879c:	2302      	movs	r3, #2
 801879e:	4621      	mov	r1, r4
 80187a0:	f000 fe44 	bl	801942c <arm_radix8_butterfly_f32>
 80187a4:	4621      	mov	r1, r4
 80187a6:	687a      	ldr	r2, [r7, #4]
 80187a8:	4640      	mov	r0, r8
 80187aa:	2302      	movs	r3, #2
 80187ac:	ecbd 8b06 	vpop	{d8-d10}
 80187b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80187b4:	f000 be3a 	b.w	801942c <arm_radix8_butterfly_f32>

080187b8 <arm_cfft_radix8by4_f32>:
 80187b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187bc:	ed2d 8b04 	vpush	{d8-d9}
 80187c0:	8804      	ldrh	r4, [r0, #0]
 80187c2:	b08d      	sub	sp, #52	@ 0x34
 80187c4:	6842      	ldr	r2, [r0, #4]
 80187c6:	460d      	mov	r5, r1
 80187c8:	0864      	lsrs	r4, r4, #1
 80187ca:	edd1 7a00 	vldr	s15, [r1]
 80187ce:	edd1 5a01 	vldr	s11, [r1, #4]
 80187d2:	00a3      	lsls	r3, r4, #2
 80187d4:	18ce      	adds	r6, r1, r3
 80187d6:	18f7      	adds	r7, r6, r3
 80187d8:	ed96 7a00 	vldr	s14, [r6]
 80187dc:	ed96 4a01 	vldr	s8, [r6, #4]
 80187e0:	ed97 6a00 	vldr	s12, [r7]
 80187e4:	edd7 4a01 	vldr	s9, [r7, #4]
 80187e8:	ee77 6a86 	vadd.f32	s13, s15, s12
 80187ec:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80187f0:	ee35 6aa4 	vadd.f32	s12, s11, s9
 80187f4:	ee77 2a26 	vadd.f32	s5, s14, s13
 80187f8:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80187fc:	ee74 3a27 	vadd.f32	s7, s8, s15
 8018800:	ee76 4a44 	vsub.f32	s9, s12, s8
 8018804:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8018808:	ee77 7ac4 	vsub.f32	s15, s15, s8
 801880c:	ee35 4ac7 	vsub.f32	s8, s11, s14
 8018810:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018814:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8018818:	0860      	lsrs	r0, r4, #1
 801881a:	f102 0408 	add.w	r4, r2, #8
 801881e:	9405      	str	r4, [sp, #20]
 8018820:	f102 0410 	add.w	r4, r2, #16
 8018824:	9009      	str	r0, [sp, #36]	@ 0x24
 8018826:	f1a0 0902 	sub.w	r9, r0, #2
 801882a:	9403      	str	r4, [sp, #12]
 801882c:	18fc      	adds	r4, r7, r3
 801882e:	f102 0018 	add.w	r0, r2, #24
 8018832:	ed94 5a00 	vldr	s10, [r4]
 8018836:	ed94 3a01 	vldr	s6, [r4, #4]
 801883a:	ee72 2a85 	vadd.f32	s5, s5, s10
 801883e:	9004      	str	r0, [sp, #16]
 8018840:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8018844:	4620      	mov	r0, r4
 8018846:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801884a:	9408      	str	r4, [sp, #32]
 801884c:	ee12 ca90 	vmov	ip, s5
 8018850:	ee74 5ac3 	vsub.f32	s11, s9, s6
 8018854:	ee77 7a83 	vadd.f32	s15, s15, s6
 8018858:	f845 cb08 	str.w	ip, [r5], #8
 801885c:	ee13 ca90 	vmov	ip, s7
 8018860:	ed96 2a01 	vldr	s4, [r6, #4]
 8018864:	ee74 4a05 	vadd.f32	s9, s8, s10
 8018868:	edd4 2a01 	vldr	s5, [r4, #4]
 801886c:	ee37 7a45 	vsub.f32	s14, s14, s10
 8018870:	ee36 6a02 	vadd.f32	s12, s12, s4
 8018874:	9500      	str	r5, [sp, #0]
 8018876:	460d      	mov	r5, r1
 8018878:	ee36 6a22 	vadd.f32	s12, s12, s5
 801887c:	ed81 6a01 	vstr	s12, [r1, #4]
 8018880:	4631      	mov	r1, r6
 8018882:	f841 cb08 	str.w	ip, [r1], #8
 8018886:	ee16 ca90 	vmov	ip, s13
 801888a:	9106      	str	r1, [sp, #24]
 801888c:	4639      	mov	r1, r7
 801888e:	edc6 4a01 	vstr	s9, [r6, #4]
 8018892:	f841 cb08 	str.w	ip, [r1], #8
 8018896:	9102      	str	r1, [sp, #8]
 8018898:	ee17 1a90 	vmov	r1, s15
 801889c:	edc7 5a01 	vstr	s11, [r7, #4]
 80188a0:	f840 1b08 	str.w	r1, [r0], #8
 80188a4:	ea5f 0159 	movs.w	r1, r9, lsr #1
 80188a8:	9001      	str	r0, [sp, #4]
 80188aa:	ed84 7a01 	vstr	s14, [r4, #4]
 80188ae:	9107      	str	r1, [sp, #28]
 80188b0:	f000 8135 	beq.w	8018b1e <arm_cfft_radix8by4_f32+0x366>
 80188b4:	3b0c      	subs	r3, #12
 80188b6:	f102 0920 	add.w	r9, r2, #32
 80188ba:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 80188be:	4622      	mov	r2, r4
 80188c0:	468b      	mov	fp, r1
 80188c2:	f105 0e10 	add.w	lr, r5, #16
 80188c6:	4423      	add	r3, r4
 80188c8:	f1a6 0c0c 	sub.w	ip, r6, #12
 80188cc:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80188d0:	f106 0010 	add.w	r0, r6, #16
 80188d4:	f1a7 010c 	sub.w	r1, r7, #12
 80188d8:	f107 0510 	add.w	r5, r7, #16
 80188dc:	3c0c      	subs	r4, #12
 80188de:	3210      	adds	r2, #16
 80188e0:	ed15 7a02 	vldr	s14, [r5, #-8]
 80188e4:	f1bb 0b01 	subs.w	fp, fp, #1
 80188e8:	ed5e 7a02 	vldr	s15, [lr, #-8]
 80188ec:	f1ac 0c08 	sub.w	ip, ip, #8
 80188f0:	ed50 6a02 	vldr	s13, [r0, #-8]
 80188f4:	f10e 0e08 	add.w	lr, lr, #8
 80188f8:	ee77 1a87 	vadd.f32	s3, s15, s14
 80188fc:	ed52 4a02 	vldr	s9, [r2, #-8]
 8018900:	ed55 5a01 	vldr	s11, [r5, #-4]
 8018904:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018908:	ed1e 7a03 	vldr	s14, [lr, #-12]
 801890c:	f10a 0a08 	add.w	sl, sl, #8
 8018910:	ee36 6aa1 	vadd.f32	s12, s13, s3
 8018914:	ed10 3a01 	vldr	s6, [r0, #-4]
 8018918:	ee37 4a25 	vadd.f32	s8, s14, s11
 801891c:	ed52 3a01 	vldr	s7, [r2, #-4]
 8018920:	ee37 7a65 	vsub.f32	s14, s14, s11
 8018924:	f100 0008 	add.w	r0, r0, #8
 8018928:	ee36 6a24 	vadd.f32	s12, s12, s9
 801892c:	f1a1 0108 	sub.w	r1, r1, #8
 8018930:	ee73 2a27 	vadd.f32	s5, s6, s15
 8018934:	f109 0910 	add.w	r9, r9, #16
 8018938:	ee77 7ac3 	vsub.f32	s15, s15, s6
 801893c:	f105 0508 	add.w	r5, r5, #8
 8018940:	ed0e 6a04 	vstr	s12, [lr, #-16]
 8018944:	ee37 5a66 	vsub.f32	s10, s14, s13
 8018948:	ed50 5a03 	vldr	s11, [r0, #-12]
 801894c:	ee71 1ae6 	vsub.f32	s3, s3, s13
 8018950:	ed12 6a01 	vldr	s12, [r2, #-4]
 8018954:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018958:	ee74 5a25 	vadd.f32	s11, s8, s11
 801895c:	f1a4 0408 	sub.w	r4, r4, #8
 8018960:	ee34 4a43 	vsub.f32	s8, s8, s6
 8018964:	f108 0818 	add.w	r8, r8, #24
 8018968:	ee32 0ae3 	vsub.f32	s0, s5, s7
 801896c:	f102 0208 	add.w	r2, r2, #8
 8018970:	ee75 5a86 	vadd.f32	s11, s11, s12
 8018974:	f1a3 0308 	sub.w	r3, r3, #8
 8018978:	ee34 6a63 	vsub.f32	s12, s8, s7
 801897c:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8018980:	ed4e 5a03 	vstr	s11, [lr, #-12]
 8018984:	ee35 5a24 	vadd.f32	s10, s10, s9
 8018988:	ed94 4a04 	vldr	s8, [r4, #16]
 801898c:	ee71 1ae4 	vsub.f32	s3, s3, s9
 8018990:	ed9c 3a04 	vldr	s6, [ip, #16]
 8018994:	ee37 7a64 	vsub.f32	s14, s14, s9
 8018998:	edd1 7a04 	vldr	s15, [r1, #16]
 801899c:	ee73 6a04 	vadd.f32	s13, s6, s8
 80189a0:	ed93 8a04 	vldr	s16, [r3, #16]
 80189a4:	edd4 5a03 	vldr	s11, [r4, #12]
 80189a8:	ee33 3a44 	vsub.f32	s6, s6, s8
 80189ac:	ed9c 2a03 	vldr	s4, [ip, #12]
 80189b0:	ee77 8ac8 	vsub.f32	s17, s15, s16
 80189b4:	ee77 0aa6 	vadd.f32	s1, s15, s13
 80189b8:	ed91 1a03 	vldr	s2, [r1, #12]
 80189bc:	ee32 4a25 	vadd.f32	s8, s4, s11
 80189c0:	edd3 2a03 	vldr	s5, [r3, #12]
 80189c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80189c8:	ee70 0a88 	vadd.f32	s1, s1, s16
 80189cc:	ee73 4a41 	vsub.f32	s9, s6, s2
 80189d0:	ee32 2a65 	vsub.f32	s4, s4, s11
 80189d4:	edcc 0a04 	vstr	s1, [ip, #16]
 80189d8:	ee74 0a41 	vsub.f32	s1, s8, s2
 80189dc:	edd1 6a03 	vldr	s13, [r1, #12]
 80189e0:	ee74 4aa2 	vadd.f32	s9, s9, s5
 80189e4:	ed93 9a03 	vldr	s18, [r3, #12]
 80189e8:	ee78 5a82 	vadd.f32	s11, s17, s4
 80189ec:	ee34 4a26 	vadd.f32	s8, s8, s13
 80189f0:	ee70 0ae2 	vsub.f32	s1, s1, s5
 80189f4:	ee72 2ac1 	vsub.f32	s5, s5, s2
 80189f8:	ee34 4a09 	vadd.f32	s8, s8, s18
 80189fc:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8018a00:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8018a04:	ed8c 4a03 	vstr	s8, [ip, #12]
 8018a08:	ee38 2ac2 	vsub.f32	s4, s17, s4
 8018a0c:	ed1a 1a03 	vldr	s2, [sl, #-12]
 8018a10:	ed1a 4a04 	vldr	s8, [sl, #-16]
 8018a14:	ee60 2a01 	vmul.f32	s5, s0, s2
 8018a18:	ee64 6a81 	vmul.f32	s13, s9, s2
 8018a1c:	ee20 8a04 	vmul.f32	s16, s0, s8
 8018a20:	ee64 4a84 	vmul.f32	s9, s9, s8
 8018a24:	ee25 0a01 	vmul.f32	s0, s10, s2
 8018a28:	ee25 5a04 	vmul.f32	s10, s10, s8
 8018a2c:	ee25 4a84 	vmul.f32	s8, s11, s8
 8018a30:	ee65 5a81 	vmul.f32	s11, s11, s2
 8018a34:	ee35 5a62 	vsub.f32	s10, s10, s5
 8018a38:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8018a3c:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8018a40:	ee38 1a00 	vadd.f32	s2, s16, s0
 8018a44:	ed00 5a03 	vstr	s10, [r0, #-12]
 8018a48:	ed00 1a04 	vstr	s2, [r0, #-16]
 8018a4c:	ed81 4a04 	vstr	s8, [r1, #16]
 8018a50:	edc1 5a03 	vstr	s11, [r1, #12]
 8018a54:	ed19 5a08 	vldr	s10, [r9, #-32]	@ 0xffffffe0
 8018a58:	ed59 5a07 	vldr	s11, [r9, #-28]	@ 0xffffffe4
 8018a5c:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 8018a60:	ee66 2a25 	vmul.f32	s5, s12, s11
 8018a64:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8018a68:	ee21 4a85 	vmul.f32	s8, s3, s10
 8018a6c:	ee60 7a85 	vmul.f32	s15, s1, s10
 8018a70:	ee61 1aa5 	vmul.f32	s3, s3, s11
 8018a74:	ee26 6a05 	vmul.f32	s12, s12, s10
 8018a78:	ee60 5aa5 	vmul.f32	s11, s1, s11
 8018a7c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8018a80:	ee34 5a22 	vadd.f32	s10, s8, s5
 8018a84:	ee36 6a61 	vsub.f32	s12, s12, s3
 8018a88:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8018a8c:	ed05 5a04 	vstr	s10, [r5, #-16]
 8018a90:	ed05 6a03 	vstr	s12, [r5, #-12]
 8018a94:	edc4 5a04 	vstr	s11, [r4, #16]
 8018a98:	edc4 6a03 	vstr	s13, [r4, #12]
 8018a9c:	ed58 2a0c 	vldr	s5, [r8, #-48]	@ 0xffffffd0
 8018aa0:	ed58 7a0b 	vldr	s15, [r8, #-44]	@ 0xffffffd4
 8018aa4:	ee23 6aa2 	vmul.f32	s12, s7, s5
 8018aa8:	ee67 5a27 	vmul.f32	s11, s14, s15
 8018aac:	ee63 6a27 	vmul.f32	s13, s6, s15
 8018ab0:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8018ab4:	ee27 7a22 	vmul.f32	s14, s14, s5
 8018ab8:	ee62 7a27 	vmul.f32	s15, s4, s15
 8018abc:	ee23 3a22 	vmul.f32	s6, s6, s5
 8018ac0:	ee22 2a22 	vmul.f32	s4, s4, s5
 8018ac4:	ee36 6a25 	vadd.f32	s12, s12, s11
 8018ac8:	ee37 7a63 	vsub.f32	s14, s14, s7
 8018acc:	ee36 2ac2 	vsub.f32	s4, s13, s4
 8018ad0:	ee77 7a83 	vadd.f32	s15, s15, s6
 8018ad4:	ed02 6a04 	vstr	s12, [r2, #-16]
 8018ad8:	ed02 7a03 	vstr	s14, [r2, #-12]
 8018adc:	ed83 2a04 	vstr	s4, [r3, #16]
 8018ae0:	edc3 7a03 	vstr	s15, [r3, #12]
 8018ae4:	f47f aefc 	bne.w	80188e0 <arm_cfft_radix8by4_f32+0x128>
 8018ae8:	9907      	ldr	r1, [sp, #28]
 8018aea:	9803      	ldr	r0, [sp, #12]
 8018aec:	00cb      	lsls	r3, r1, #3
 8018aee:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8018af2:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8018af6:	9103      	str	r1, [sp, #12]
 8018af8:	9900      	ldr	r1, [sp, #0]
 8018afa:	4419      	add	r1, r3
 8018afc:	9100      	str	r1, [sp, #0]
 8018afe:	9905      	ldr	r1, [sp, #20]
 8018b00:	4419      	add	r1, r3
 8018b02:	9105      	str	r1, [sp, #20]
 8018b04:	9906      	ldr	r1, [sp, #24]
 8018b06:	4419      	add	r1, r3
 8018b08:	9106      	str	r1, [sp, #24]
 8018b0a:	9902      	ldr	r1, [sp, #8]
 8018b0c:	4419      	add	r1, r3
 8018b0e:	9102      	str	r1, [sp, #8]
 8018b10:	9901      	ldr	r1, [sp, #4]
 8018b12:	4419      	add	r1, r3
 8018b14:	9b04      	ldr	r3, [sp, #16]
 8018b16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018b1a:	9101      	str	r1, [sp, #4]
 8018b1c:	9304      	str	r3, [sp, #16]
 8018b1e:	9b00      	ldr	r3, [sp, #0]
 8018b20:	9902      	ldr	r1, [sp, #8]
 8018b22:	ed93 7a00 	vldr	s14, [r3]
 8018b26:	edd1 7a00 	vldr	s15, [r1]
 8018b2a:	9a06      	ldr	r2, [sp, #24]
 8018b2c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8018b30:	9d01      	ldr	r5, [sp, #4]
 8018b32:	edd2 6a00 	vldr	s13, [r2]
 8018b36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018b3a:	9b02      	ldr	r3, [sp, #8]
 8018b3c:	ee76 3a86 	vadd.f32	s7, s13, s12
 8018b40:	ed95 3a00 	vldr	s6, [r5]
 8018b44:	ed93 5a01 	vldr	s10, [r3, #4]
 8018b48:	ee36 6a66 	vsub.f32	s12, s12, s13
 8018b4c:	9b00      	ldr	r3, [sp, #0]
 8018b4e:	ee73 3a83 	vadd.f32	s7, s7, s6
 8018b52:	edd5 2a01 	vldr	s5, [r5, #4]
 8018b56:	ed93 4a01 	vldr	s8, [r3, #4]
 8018b5a:	ee36 6a43 	vsub.f32	s12, s12, s6
 8018b5e:	9b00      	ldr	r3, [sp, #0]
 8018b60:	ee74 5a05 	vadd.f32	s11, s8, s10
 8018b64:	edd2 7a01 	vldr	s15, [r2, #4]
 8018b68:	edc3 3a00 	vstr	s7, [r3]
 8018b6c:	ee34 4a45 	vsub.f32	s8, s8, s10
 8018b70:	edd2 3a01 	vldr	s7, [r2, #4]
 8018b74:	ee77 4a87 	vadd.f32	s9, s15, s14
 8018b78:	ed95 2a01 	vldr	s4, [r5, #4]
 8018b7c:	ee75 3aa3 	vadd.f32	s7, s11, s7
 8018b80:	9d05      	ldr	r5, [sp, #20]
 8018b82:	ee34 5a66 	vsub.f32	s10, s8, s13
 8018b86:	9b00      	ldr	r3, [sp, #0]
 8018b88:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8018b8c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8018b90:	ee73 3a82 	vadd.f32	s7, s7, s4
 8018b94:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8018b96:	ee35 5a03 	vadd.f32	s10, s10, s6
 8018b9a:	4621      	mov	r1, r4
 8018b9c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8018ba0:	edc3 3a01 	vstr	s7, [r3, #4]
 8018ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018ba8:	edd5 3a00 	vldr	s7, [r5]
 8018bac:	ee76 6a84 	vadd.f32	s13, s13, s8
 8018bb0:	ed95 7a01 	vldr	s14, [r5, #4]
 8018bb4:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8018bb8:	ee24 4aa3 	vmul.f32	s8, s9, s7
 8018bbc:	2304      	movs	r3, #4
 8018bbe:	ee64 4a87 	vmul.f32	s9, s9, s14
 8018bc2:	ee25 7a07 	vmul.f32	s14, s10, s14
 8018bc6:	ee25 5a23 	vmul.f32	s10, s10, s7
 8018bca:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8018bce:	ee34 7a07 	vadd.f32	s14, s8, s14
 8018bd2:	ee35 5a64 	vsub.f32	s10, s10, s9
 8018bd6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8018bda:	ed82 7a00 	vstr	s14, [r2]
 8018bde:	ed82 5a01 	vstr	s10, [r2, #4]
 8018be2:	9a03      	ldr	r2, [sp, #12]
 8018be4:	edd2 4a01 	vldr	s9, [r2, #4]
 8018be8:	ed92 7a00 	vldr	s14, [r2]
 8018bec:	9a02      	ldr	r2, [sp, #8]
 8018bee:	ee26 5a07 	vmul.f32	s10, s12, s14
 8018bf2:	ee26 6a24 	vmul.f32	s12, s12, s9
 8018bf6:	ee25 7a87 	vmul.f32	s14, s11, s14
 8018bfa:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8018bfe:	ee37 6a46 	vsub.f32	s12, s14, s12
 8018c02:	ee75 5a25 	vadd.f32	s11, s10, s11
 8018c06:	edc2 5a00 	vstr	s11, [r2]
 8018c0a:	ed82 6a01 	vstr	s12, [r2, #4]
 8018c0e:	9a04      	ldr	r2, [sp, #16]
 8018c10:	9d01      	ldr	r5, [sp, #4]
 8018c12:	edd2 5a01 	vldr	s11, [r2, #4]
 8018c16:	ed92 7a00 	vldr	s14, [r2]
 8018c1a:	ee27 6a87 	vmul.f32	s12, s15, s14
 8018c1e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8018c22:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8018c26:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8018c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018c2e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018c32:	edc5 7a01 	vstr	s15, [r5, #4]
 8018c36:	edc5 6a00 	vstr	s13, [r5]
 8018c3a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8018c3c:	686a      	ldr	r2, [r5, #4]
 8018c3e:	f000 fbf5 	bl	801942c <arm_radix8_butterfly_f32>
 8018c42:	4630      	mov	r0, r6
 8018c44:	4621      	mov	r1, r4
 8018c46:	686a      	ldr	r2, [r5, #4]
 8018c48:	2304      	movs	r3, #4
 8018c4a:	f000 fbef 	bl	801942c <arm_radix8_butterfly_f32>
 8018c4e:	4638      	mov	r0, r7
 8018c50:	4621      	mov	r1, r4
 8018c52:	686a      	ldr	r2, [r5, #4]
 8018c54:	2304      	movs	r3, #4
 8018c56:	f000 fbe9 	bl	801942c <arm_radix8_butterfly_f32>
 8018c5a:	4621      	mov	r1, r4
 8018c5c:	686a      	ldr	r2, [r5, #4]
 8018c5e:	2304      	movs	r3, #4
 8018c60:	9808      	ldr	r0, [sp, #32]
 8018c62:	b00d      	add	sp, #52	@ 0x34
 8018c64:	ecbd 8b04 	vpop	{d8-d9}
 8018c68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c6c:	f000 bbde 	b.w	801942c <arm_radix8_butterfly_f32>

08018c70 <arm_cfft_f32>:
 8018c70:	2a01      	cmp	r2, #1
 8018c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c76:	4606      	mov	r6, r0
 8018c78:	4617      	mov	r7, r2
 8018c7a:	460c      	mov	r4, r1
 8018c7c:	4698      	mov	r8, r3
 8018c7e:	8805      	ldrh	r5, [r0, #0]
 8018c80:	d055      	beq.n	8018d2e <arm_cfft_f32+0xbe>
 8018c82:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8018c86:	d061      	beq.n	8018d4c <arm_cfft_f32+0xdc>
 8018c88:	d916      	bls.n	8018cb8 <arm_cfft_f32+0x48>
 8018c8a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8018c8e:	d01a      	beq.n	8018cc6 <arm_cfft_f32+0x56>
 8018c90:	d946      	bls.n	8018d20 <arm_cfft_f32+0xb0>
 8018c92:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8018c96:	d059      	beq.n	8018d4c <arm_cfft_f32+0xdc>
 8018c98:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8018c9c:	d105      	bne.n	8018caa <arm_cfft_f32+0x3a>
 8018c9e:	2301      	movs	r3, #1
 8018ca0:	6872      	ldr	r2, [r6, #4]
 8018ca2:	4629      	mov	r1, r5
 8018ca4:	4620      	mov	r0, r4
 8018ca6:	f000 fbc1 	bl	801942c <arm_radix8_butterfly_f32>
 8018caa:	f1b8 0f00 	cmp.w	r8, #0
 8018cae:	d111      	bne.n	8018cd4 <arm_cfft_f32+0x64>
 8018cb0:	2f01      	cmp	r7, #1
 8018cb2:	d016      	beq.n	8018ce2 <arm_cfft_f32+0x72>
 8018cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cb8:	2d20      	cmp	r5, #32
 8018cba:	d047      	beq.n	8018d4c <arm_cfft_f32+0xdc>
 8018cbc:	d934      	bls.n	8018d28 <arm_cfft_f32+0xb8>
 8018cbe:	2d40      	cmp	r5, #64	@ 0x40
 8018cc0:	d0ed      	beq.n	8018c9e <arm_cfft_f32+0x2e>
 8018cc2:	2d80      	cmp	r5, #128	@ 0x80
 8018cc4:	d1f1      	bne.n	8018caa <arm_cfft_f32+0x3a>
 8018cc6:	4621      	mov	r1, r4
 8018cc8:	4630      	mov	r0, r6
 8018cca:	f7ff fca9 	bl	8018620 <arm_cfft_radix8by2_f32>
 8018cce:	f1b8 0f00 	cmp.w	r8, #0
 8018cd2:	d0ed      	beq.n	8018cb0 <arm_cfft_f32+0x40>
 8018cd4:	68b2      	ldr	r2, [r6, #8]
 8018cd6:	4620      	mov	r0, r4
 8018cd8:	89b1      	ldrh	r1, [r6, #12]
 8018cda:	f000 f973 	bl	8018fc4 <arm_bitreversal_32>
 8018cde:	2f01      	cmp	r7, #1
 8018ce0:	d1e8      	bne.n	8018cb4 <arm_cfft_f32+0x44>
 8018ce2:	ee07 5a90 	vmov	s15, r5
 8018ce6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018cee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8018cf2:	2d00      	cmp	r5, #0
 8018cf4:	d0de      	beq.n	8018cb4 <arm_cfft_f32+0x44>
 8018cf6:	f104 0108 	add.w	r1, r4, #8
 8018cfa:	2300      	movs	r3, #0
 8018cfc:	ed11 7a02 	vldr	s14, [r1, #-8]
 8018d00:	3301      	adds	r3, #1
 8018d02:	ed51 7a01 	vldr	s15, [r1, #-4]
 8018d06:	3108      	adds	r1, #8
 8018d08:	429d      	cmp	r5, r3
 8018d0a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018d0e:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8018d12:	ed01 7a04 	vstr	s14, [r1, #-16]
 8018d16:	ed41 7a03 	vstr	s15, [r1, #-12]
 8018d1a:	d1ef      	bne.n	8018cfc <arm_cfft_f32+0x8c>
 8018d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d20:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8018d24:	d0bb      	beq.n	8018c9e <arm_cfft_f32+0x2e>
 8018d26:	e7c0      	b.n	8018caa <arm_cfft_f32+0x3a>
 8018d28:	2d10      	cmp	r5, #16
 8018d2a:	d0cc      	beq.n	8018cc6 <arm_cfft_f32+0x56>
 8018d2c:	e7bd      	b.n	8018caa <arm_cfft_f32+0x3a>
 8018d2e:	b195      	cbz	r5, 8018d56 <arm_cfft_f32+0xe6>
 8018d30:	f101 030c 	add.w	r3, r1, #12
 8018d34:	2200      	movs	r2, #0
 8018d36:	ed53 7a02 	vldr	s15, [r3, #-8]
 8018d3a:	3201      	adds	r2, #1
 8018d3c:	3308      	adds	r3, #8
 8018d3e:	eef1 7a67 	vneg.f32	s15, s15
 8018d42:	4295      	cmp	r5, r2
 8018d44:	ed43 7a04 	vstr	s15, [r3, #-16]
 8018d48:	d1f5      	bne.n	8018d36 <arm_cfft_f32+0xc6>
 8018d4a:	e79a      	b.n	8018c82 <arm_cfft_f32+0x12>
 8018d4c:	4621      	mov	r1, r4
 8018d4e:	4630      	mov	r0, r6
 8018d50:	f7ff fd32 	bl	80187b8 <arm_cfft_radix8by4_f32>
 8018d54:	e7a9      	b.n	8018caa <arm_cfft_f32+0x3a>
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d0ac      	beq.n	8018cb4 <arm_cfft_f32+0x44>
 8018d5a:	e7bb      	b.n	8018cd4 <arm_cfft_f32+0x64>

08018d5c <arm_dct4_init_f32>:
 8018d5c:	b570      	push	{r4, r5, r6, lr}
 8018d5e:	b082      	sub	sp, #8
 8018d60:	460c      	mov	r4, r1
 8018d62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018d66:	4611      	mov	r1, r2
 8018d68:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8018d6c:	ed80 0a01 	vstr	s0, [r0, #4]
 8018d70:	8003      	strh	r3, [r0, #0]
 8018d72:	8042      	strh	r2, [r0, #2]
 8018d74:	e9c0 4104 	strd	r4, r1, [r0, #16]
 8018d78:	d020      	beq.n	8018dbc <arm_dct4_init_f32+0x60>
 8018d7a:	d914      	bls.n	8018da6 <arm_dct4_init_f32+0x4a>
 8018d7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8018d80:	d022      	beq.n	8018dc8 <arm_dct4_init_f32+0x6c>
 8018d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8018d86:	d116      	bne.n	8018db6 <arm_dct4_init_f32+0x5a>
 8018d88:	4e12      	ldr	r6, [pc, #72]	@ (8018dd4 <arm_dct4_init_f32+0x78>)
 8018d8a:	2500      	movs	r5, #0
 8018d8c:	4a12      	ldr	r2, [pc, #72]	@ (8018dd8 <arm_dct4_init_f32+0x7c>)
 8018d8e:	e9c0 6202 	strd	r6, r2, [r0, #8]
 8018d92:	2601      	movs	r6, #1
 8018d94:	461a      	mov	r2, r3
 8018d96:	4620      	mov	r0, r4
 8018d98:	2300      	movs	r3, #0
 8018d9a:	9600      	str	r6, [sp, #0]
 8018d9c:	f000 fe08 	bl	80199b0 <arm_rfft_init_f32>
 8018da0:	4628      	mov	r0, r5
 8018da2:	b002      	add	sp, #8
 8018da4:	bd70      	pop	{r4, r5, r6, pc}
 8018da6:	2b80      	cmp	r3, #128	@ 0x80
 8018da8:	d105      	bne.n	8018db6 <arm_dct4_init_f32+0x5a>
 8018daa:	4e0c      	ldr	r6, [pc, #48]	@ (8018ddc <arm_dct4_init_f32+0x80>)
 8018dac:	2500      	movs	r5, #0
 8018dae:	4a0c      	ldr	r2, [pc, #48]	@ (8018de0 <arm_dct4_init_f32+0x84>)
 8018db0:	e9c0 6202 	strd	r6, r2, [r0, #8]
 8018db4:	e7ed      	b.n	8018d92 <arm_dct4_init_f32+0x36>
 8018db6:	f04f 35ff 	mov.w	r5, #4294967295
 8018dba:	e7ea      	b.n	8018d92 <arm_dct4_init_f32+0x36>
 8018dbc:	4e09      	ldr	r6, [pc, #36]	@ (8018de4 <arm_dct4_init_f32+0x88>)
 8018dbe:	2500      	movs	r5, #0
 8018dc0:	4a09      	ldr	r2, [pc, #36]	@ (8018de8 <arm_dct4_init_f32+0x8c>)
 8018dc2:	e9c0 6202 	strd	r6, r2, [r0, #8]
 8018dc6:	e7e4      	b.n	8018d92 <arm_dct4_init_f32+0x36>
 8018dc8:	4e08      	ldr	r6, [pc, #32]	@ (8018dec <arm_dct4_init_f32+0x90>)
 8018dca:	2500      	movs	r5, #0
 8018dcc:	4a08      	ldr	r2, [pc, #32]	@ (8018df0 <arm_dct4_init_f32+0x94>)
 8018dce:	e9c0 6202 	strd	r6, r2, [r0, #8]
 8018dd2:	e7de      	b.n	8018d92 <arm_dct4_init_f32+0x36>
 8018dd4:	0803b95c 	.word	0x0803b95c
 8018dd8:	08052044 	.word	0x08052044
 8018ddc:	0803655c 	.word	0x0803655c
 8018de0:	0804f644 	.word	0x0804f644
 8018de4:	0803a95c 	.word	0x0803a95c
 8018de8:	08051844 	.word	0x08051844
 8018dec:	0803695c 	.word	0x0803695c
 8018df0:	0804f844 	.word	0x0804f844

08018df4 <arm_dct4_f32>:
 8018df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018df8:	4617      	mov	r7, r2
 8018dfa:	4606      	mov	r6, r0
 8018dfc:	68c4      	ldr	r4, [r0, #12]
 8018dfe:	460d      	mov	r5, r1
 8018e00:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8018e04:	4611      	mov	r1, r2
 8018e06:	8802      	ldrh	r2, [r0, #0]
 8018e08:	4638      	mov	r0, r7
 8018e0a:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8018e0e:	f000 fa15 	bl	801923c <arm_scale_f32>
 8018e12:	4621      	mov	r1, r4
 8018e14:	8833      	ldrh	r3, [r6, #0]
 8018e16:	463a      	mov	r2, r7
 8018e18:	4638      	mov	r0, r7
 8018e1a:	f000 fa53 	bl	80192c4 <arm_mult_f32>
 8018e1e:	8832      	ldrh	r2, [r6, #0]
 8018e20:	8874      	ldrh	r4, [r6, #2]
 8018e22:	f105 0110 	add.w	r1, r5, #16
 8018e26:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8018e2a:	f107 0320 	add.w	r3, r7, #32
 8018e2e:	08a4      	lsrs	r4, r4, #2
 8018e30:	4608      	mov	r0, r1
 8018e32:	3a14      	subs	r2, #20
 8018e34:	f853 cc20 	ldr.w	ip, [r3, #-32]
 8018e38:	3c01      	subs	r4, #1
 8018e3a:	f100 0010 	add.w	r0, r0, #16
 8018e3e:	f103 0320 	add.w	r3, r3, #32
 8018e42:	f840 cc20 	str.w	ip, [r0, #-32]
 8018e46:	f1a2 0210 	sub.w	r2, r2, #16
 8018e4a:	f853 cc3c 	ldr.w	ip, [r3, #-60]
 8018e4e:	f8c2 c020 	str.w	ip, [r2, #32]
 8018e52:	f853 cc38 	ldr.w	ip, [r3, #-56]
 8018e56:	f840 cc1c 	str.w	ip, [r0, #-28]
 8018e5a:	f853 cc34 	ldr.w	ip, [r3, #-52]
 8018e5e:	f8c2 c01c 	str.w	ip, [r2, #28]
 8018e62:	f853 cc30 	ldr.w	ip, [r3, #-48]
 8018e66:	f840 cc18 	str.w	ip, [r0, #-24]
 8018e6a:	f853 cc2c 	ldr.w	ip, [r3, #-44]
 8018e6e:	f8c2 c018 	str.w	ip, [r2, #24]
 8018e72:	f853 cc28 	ldr.w	ip, [r3, #-40]
 8018e76:	f840 cc14 	str.w	ip, [r0, #-20]
 8018e7a:	f853 cc24 	ldr.w	ip, [r3, #-36]
 8018e7e:	f8c2 c014 	str.w	ip, [r2, #20]
 8018e82:	d1d7      	bne.n	8018e34 <arm_dct4_f32+0x40>
 8018e84:	8832      	ldrh	r2, [r6, #0]
 8018e86:	f107 0410 	add.w	r4, r7, #16
 8018e8a:	0892      	lsrs	r2, r2, #2
 8018e8c:	4623      	mov	r3, r4
 8018e8e:	f851 0c10 	ldr.w	r0, [r1, #-16]
 8018e92:	3a01      	subs	r2, #1
 8018e94:	f101 0110 	add.w	r1, r1, #16
 8018e98:	f103 0310 	add.w	r3, r3, #16
 8018e9c:	f843 0c20 	str.w	r0, [r3, #-32]
 8018ea0:	f851 0c1c 	ldr.w	r0, [r1, #-28]
 8018ea4:	f843 0c1c 	str.w	r0, [r3, #-28]
 8018ea8:	f851 0c18 	ldr.w	r0, [r1, #-24]
 8018eac:	f843 0c18 	str.w	r0, [r3, #-24]
 8018eb0:	f851 0c14 	ldr.w	r0, [r1, #-20]
 8018eb4:	f843 0c14 	str.w	r0, [r3, #-20]
 8018eb8:	d1e9      	bne.n	8018e8e <arm_dct4_f32+0x9a>
 8018eba:	462a      	mov	r2, r5
 8018ebc:	4639      	mov	r1, r7
 8018ebe:	6930      	ldr	r0, [r6, #16]
 8018ec0:	f000 fe30 	bl	8019b24 <arm_rfft_f32>
 8018ec4:	462a      	mov	r2, r5
 8018ec6:	4628      	mov	r0, r5
 8018ec8:	4641      	mov	r1, r8
 8018eca:	8833      	ldrh	r3, [r6, #0]
 8018ecc:	f000 f8a2 	bl	8019014 <arm_cmplx_mult_cmplx_f32>
 8018ed0:	4629      	mov	r1, r5
 8018ed2:	8830      	ldrh	r0, [r6, #0]
 8018ed4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8018ed8:	460b      	mov	r3, r1
 8018eda:	3528      	adds	r5, #40	@ 0x28
 8018edc:	3801      	subs	r0, #1
 8018ede:	3108      	adds	r1, #8
 8018ee0:	edd3 7a00 	vldr	s15, [r3]
 8018ee4:	463b      	mov	r3, r7
 8018ee6:	0880      	lsrs	r0, r0, #2
 8018ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018eec:	4602      	mov	r2, r0
 8018eee:	ee17 ca90 	vmov	ip, s15
 8018ef2:	f843 cb14 	str.w	ip, [r3], #20
 8018ef6:	ed15 7a08 	vldr	s14, [r5, #-32]	@ 0xffffffe0
 8018efa:	3a01      	subs	r2, #1
 8018efc:	f105 0520 	add.w	r5, r5, #32
 8018f00:	f103 0310 	add.w	r3, r3, #16
 8018f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018f08:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 8018f0c:	ed15 7a0e 	vldr	s14, [r5, #-56]	@ 0xffffffc8
 8018f10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018f14:	ed03 7a07 	vstr	s14, [r3, #-28]	@ 0xffffffe4
 8018f18:	ed55 7a0c 	vldr	s15, [r5, #-48]	@ 0xffffffd0
 8018f1c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8018f20:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 8018f24:	ed55 7a0a 	vldr	s15, [r5, #-40]	@ 0xffffffd8
 8018f28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018f2c:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8018f30:	d1e1      	bne.n	8018ef6 <arm_dct4_f32+0x102>
 8018f32:	8833      	ldrh	r3, [r6, #0]
 8018f34:	eb07 1700 	add.w	r7, r7, r0, lsl #4
 8018f38:	eb01 1540 	add.w	r5, r1, r0, lsl #5
 8018f3c:	1e5a      	subs	r2, r3, #1
 8018f3e:	3704      	adds	r7, #4
 8018f40:	f012 0203 	ands.w	r2, r2, #3
 8018f44:	d016      	beq.n	8018f74 <arm_dct4_f32+0x180>
 8018f46:	ed95 7a00 	vldr	s14, [r5]
 8018f4a:	3a01      	subs	r2, #1
 8018f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018f50:	edc7 7a00 	vstr	s15, [r7]
 8018f54:	d00d      	beq.n	8018f72 <arm_dct4_f32+0x17e>
 8018f56:	ed95 7a02 	vldr	s14, [r5, #8]
 8018f5a:	2a01      	cmp	r2, #1
 8018f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018f60:	edc7 7a01 	vstr	s15, [r7, #4]
 8018f64:	d005      	beq.n	8018f72 <arm_dct4_f32+0x17e>
 8018f66:	ed95 7a04 	vldr	s14, [r5, #16]
 8018f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018f6e:	edc7 7a02 	vstr	s15, [r7, #8]
 8018f72:	8833      	ldrh	r3, [r6, #0]
 8018f74:	089b      	lsrs	r3, r3, #2
 8018f76:	edd6 7a01 	vldr	s15, [r6, #4]
 8018f7a:	3b01      	subs	r3, #1
 8018f7c:	ed14 6a04 	vldr	s12, [r4, #-16]
 8018f80:	f104 0410 	add.w	r4, r4, #16
 8018f84:	ed54 6a07 	vldr	s13, [r4, #-28]	@ 0xffffffe4
 8018f88:	ee26 6a27 	vmul.f32	s12, s12, s15
 8018f8c:	ed14 7a06 	vldr	s14, [r4, #-24]	@ 0xffffffe8
 8018f90:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8018f94:	ed04 6a08 	vstr	s12, [r4, #-32]	@ 0xffffffe0
 8018f98:	ed96 6a01 	vldr	s12, [r6, #4]
 8018f9c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018fa0:	ed44 6a07 	vstr	s13, [r4, #-28]	@ 0xffffffe4
 8018fa4:	edd6 6a01 	vldr	s13, [r6, #4]
 8018fa8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018fac:	ed04 7a06 	vstr	s14, [r4, #-24]	@ 0xffffffe8
 8018fb0:	ed96 7a01 	vldr	s14, [r6, #4]
 8018fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018fb8:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8018fbc:	d1db      	bne.n	8018f76 <arm_dct4_f32+0x182>
 8018fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fc2:	bf00      	nop

08018fc4 <arm_bitreversal_32>:
 8018fc4:	b321      	cbz	r1, 8019010 <arm_bitreversal_32+0x4c>
 8018fc6:	f102 0c02 	add.w	ip, r2, #2
 8018fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fce:	4690      	mov	r8, r2
 8018fd0:	2500      	movs	r5, #0
 8018fd2:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 8018fd6:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 8018fda:	3502      	adds	r5, #2
 8018fdc:	08a4      	lsrs	r4, r4, #2
 8018fde:	089b      	lsrs	r3, r3, #2
 8018fe0:	428d      	cmp	r5, r1
 8018fe2:	ea4f 0784 	mov.w	r7, r4, lsl #2
 8018fe6:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 8018fea:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8018fee:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8018ff2:	f107 0704 	add.w	r7, r7, #4
 8018ff6:	f106 0604 	add.w	r6, r6, #4
 8018ffa:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8018ffe:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 8019002:	59c4      	ldr	r4, [r0, r7]
 8019004:	5983      	ldr	r3, [r0, r6]
 8019006:	51c3      	str	r3, [r0, r7]
 8019008:	5184      	str	r4, [r0, r6]
 801900a:	d3e2      	bcc.n	8018fd2 <arm_bitreversal_32+0xe>
 801900c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019010:	4770      	bx	lr
 8019012:	bf00      	nop

08019014 <arm_cmplx_mult_cmplx_f32>:
 8019014:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8019018:	b4f0      	push	{r4, r5, r6, r7}
 801901a:	d073      	beq.n	8019104 <arm_cmplx_mult_cmplx_f32+0xf0>
 801901c:	f100 0620 	add.w	r6, r0, #32
 8019020:	f101 0520 	add.w	r5, r1, #32
 8019024:	f102 0420 	add.w	r4, r2, #32
 8019028:	4667      	mov	r7, ip
 801902a:	ed55 5a07 	vldr	s11, [r5, #-28]	@ 0xffffffe4
 801902e:	3f01      	subs	r7, #1
 8019030:	ed56 7a08 	vldr	s15, [r6, #-32]	@ 0xffffffe0
 8019034:	f105 0520 	add.w	r5, r5, #32
 8019038:	ed15 7a10 	vldr	s14, [r5, #-64]	@ 0xffffffc0
 801903c:	f106 0620 	add.w	r6, r6, #32
 8019040:	ed56 6a0f 	vldr	s13, [r6, #-60]	@ 0xffffffc4
 8019044:	f104 0420 	add.w	r4, r4, #32
 8019048:	ee27 6a87 	vmul.f32	s12, s15, s14
 801904c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8019050:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019054:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8019058:	ee77 7a87 	vadd.f32	s15, s15, s14
 801905c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8019060:	ed44 7a0f 	vstr	s15, [r4, #-60]	@ 0xffffffc4
 8019064:	ed44 6a10 	vstr	s13, [r4, #-64]	@ 0xffffffc0
 8019068:	ed55 5a0d 	vldr	s11, [r5, #-52]	@ 0xffffffcc
 801906c:	ed56 7a0e 	vldr	s15, [r6, #-56]	@ 0xffffffc8
 8019070:	ed15 7a0e 	vldr	s14, [r5, #-56]	@ 0xffffffc8
 8019074:	ed56 6a0d 	vldr	s13, [r6, #-52]	@ 0xffffffcc
 8019078:	ee27 6a87 	vmul.f32	s12, s15, s14
 801907c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8019080:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019084:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8019088:	ee77 7a87 	vadd.f32	s15, s15, s14
 801908c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8019090:	ed44 7a0d 	vstr	s15, [r4, #-52]	@ 0xffffffcc
 8019094:	ed44 6a0e 	vstr	s13, [r4, #-56]	@ 0xffffffc8
 8019098:	ed55 5a0b 	vldr	s11, [r5, #-44]	@ 0xffffffd4
 801909c:	ed56 7a0c 	vldr	s15, [r6, #-48]	@ 0xffffffd0
 80190a0:	ed15 7a0c 	vldr	s14, [r5, #-48]	@ 0xffffffd0
 80190a4:	ed56 6a0b 	vldr	s13, [r6, #-44]	@ 0xffffffd4
 80190a8:	ee27 6a87 	vmul.f32	s12, s15, s14
 80190ac:	ee26 7a87 	vmul.f32	s14, s13, s14
 80190b0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80190b4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80190b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80190bc:	ee76 6a66 	vsub.f32	s13, s12, s13
 80190c0:	ed44 7a0b 	vstr	s15, [r4, #-44]	@ 0xffffffd4
 80190c4:	ed44 6a0c 	vstr	s13, [r4, #-48]	@ 0xffffffd0
 80190c8:	ed56 7a0a 	vldr	s15, [r6, #-40]	@ 0xffffffd8
 80190cc:	ed15 7a0a 	vldr	s14, [r5, #-40]	@ 0xffffffd8
 80190d0:	ed56 6a09 	vldr	s13, [r6, #-36]	@ 0xffffffdc
 80190d4:	ed55 5a09 	vldr	s11, [r5, #-36]	@ 0xffffffdc
 80190d8:	ee27 6a87 	vmul.f32	s12, s15, s14
 80190dc:	ee26 7a87 	vmul.f32	s14, s13, s14
 80190e0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80190e4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80190e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80190ec:	ee76 6a66 	vsub.f32	s13, s12, s13
 80190f0:	ed44 7a09 	vstr	s15, [r4, #-36]	@ 0xffffffdc
 80190f4:	ed44 6a0a 	vstr	s13, [r4, #-40]	@ 0xffffffd8
 80190f8:	d197      	bne.n	801902a <arm_cmplx_mult_cmplx_f32+0x16>
 80190fa:	ea4f 144c 	mov.w	r4, ip, lsl #5
 80190fe:	4420      	add	r0, r4
 8019100:	4421      	add	r1, r4
 8019102:	4422      	add	r2, r4
 8019104:	f013 0303 	ands.w	r3, r3, #3
 8019108:	d04b      	beq.n	80191a2 <arm_cmplx_mult_cmplx_f32+0x18e>
 801910a:	edd0 5a00 	vldr	s11, [r0]
 801910e:	3b01      	subs	r3, #1
 8019110:	edd1 7a00 	vldr	s15, [r1]
 8019114:	edd0 6a01 	vldr	s13, [r0, #4]
 8019118:	ed91 7a01 	vldr	s14, [r1, #4]
 801911c:	ee27 6aa5 	vmul.f32	s12, s15, s11
 8019120:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019124:	ee67 6a26 	vmul.f32	s13, s14, s13
 8019128:	ee27 7a25 	vmul.f32	s14, s14, s11
 801912c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8019130:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019134:	edc2 6a00 	vstr	s13, [r2]
 8019138:	edc2 7a01 	vstr	s15, [r2, #4]
 801913c:	d031      	beq.n	80191a2 <arm_cmplx_mult_cmplx_f32+0x18e>
 801913e:	edd0 7a02 	vldr	s15, [r0, #8]
 8019142:	2b01      	cmp	r3, #1
 8019144:	ed91 7a02 	vldr	s14, [r1, #8]
 8019148:	edd0 6a03 	vldr	s13, [r0, #12]
 801914c:	edd1 5a03 	vldr	s11, [r1, #12]
 8019150:	ee27 6a87 	vmul.f32	s12, s15, s14
 8019154:	ee26 7a87 	vmul.f32	s14, s13, s14
 8019158:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801915c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8019160:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019164:	ee76 6a66 	vsub.f32	s13, s12, s13
 8019168:	edc2 7a03 	vstr	s15, [r2, #12]
 801916c:	edc2 6a02 	vstr	s13, [r2, #8]
 8019170:	d017      	beq.n	80191a2 <arm_cmplx_mult_cmplx_f32+0x18e>
 8019172:	edd0 7a04 	vldr	s15, [r0, #16]
 8019176:	ed91 7a04 	vldr	s14, [r1, #16]
 801917a:	edd0 6a05 	vldr	s13, [r0, #20]
 801917e:	edd1 5a05 	vldr	s11, [r1, #20]
 8019182:	ee27 6a87 	vmul.f32	s12, s15, s14
 8019186:	ee26 7a87 	vmul.f32	s14, s13, s14
 801918a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801918e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8019192:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019196:	ee76 6a66 	vsub.f32	s13, s12, s13
 801919a:	edc2 7a05 	vstr	s15, [r2, #20]
 801919e:	edc2 6a04 	vstr	s13, [r2, #16]
 80191a2:	bcf0      	pop	{r4, r5, r6, r7}
 80191a4:	4770      	bx	lr
 80191a6:	bf00      	nop

080191a8 <arm_cos_f32>:
 80191a8:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8019230 <arm_cos_f32+0x88>
 80191ac:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80191b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80191b4:	ee30 0a07 	vadd.f32	s0, s0, s14
 80191b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80191bc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80191c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191c4:	d504      	bpl.n	80191d0 <arm_cos_f32+0x28>
 80191c6:	ee17 3a90 	vmov	r3, s15
 80191ca:	3b01      	subs	r3, #1
 80191cc:	ee07 3a90 	vmov	s15, r3
 80191d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80191d4:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8019234 <arm_cos_f32+0x8c>
 80191d8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80191dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80191e0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80191e4:	ee17 3a10 	vmov	r3, s14
 80191e8:	b29b      	uxth	r3, r3
 80191ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80191ee:	d21a      	bcs.n	8019226 <arm_cos_f32+0x7e>
 80191f0:	ee07 3a10 	vmov	s14, r3
 80191f4:	1c59      	adds	r1, r3, #1
 80191f6:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 80191fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80191fe:	4a0e      	ldr	r2, [pc, #56]	@ (8019238 <arm_cos_f32+0x90>)
 8019200:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019204:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019208:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801920c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019210:	edd3 6a00 	vldr	s13, [r3]
 8019214:	ed92 7a00 	vldr	s14, [r2]
 8019218:	ee20 0a26 	vmul.f32	s0, s0, s13
 801921c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019220:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019224:	4770      	bx	lr
 8019226:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801922a:	2101      	movs	r1, #1
 801922c:	2300      	movs	r3, #0
 801922e:	e7e6      	b.n	80191fe <arm_cos_f32+0x56>
 8019230:	3e22f983 	.word	0x3e22f983
 8019234:	44000000 	.word	0x44000000
 8019238:	0806a044 	.word	0x0806a044

0801923c <arm_scale_f32>:
 801923c:	b470      	push	{r4, r5, r6}
 801923e:	0896      	lsrs	r6, r2, #2
 8019240:	d025      	beq.n	801928e <arm_scale_f32+0x52>
 8019242:	f100 0410 	add.w	r4, r0, #16
 8019246:	f101 0310 	add.w	r3, r1, #16
 801924a:	4635      	mov	r5, r6
 801924c:	ed54 7a04 	vldr	s15, [r4, #-16]
 8019250:	3d01      	subs	r5, #1
 8019252:	f104 0410 	add.w	r4, r4, #16
 8019256:	f103 0310 	add.w	r3, r3, #16
 801925a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801925e:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 8019262:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8019266:	ee67 7a80 	vmul.f32	s15, s15, s0
 801926a:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
 801926e:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 8019272:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019276:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 801927a:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 801927e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019282:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8019286:	d1e1      	bne.n	801924c <arm_scale_f32+0x10>
 8019288:	0136      	lsls	r6, r6, #4
 801928a:	4430      	add	r0, r6
 801928c:	4431      	add	r1, r6
 801928e:	f012 0203 	ands.w	r2, r2, #3
 8019292:	d015      	beq.n	80192c0 <arm_scale_f32+0x84>
 8019294:	edd0 7a00 	vldr	s15, [r0]
 8019298:	3a01      	subs	r2, #1
 801929a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801929e:	edc1 7a00 	vstr	s15, [r1]
 80192a2:	d00d      	beq.n	80192c0 <arm_scale_f32+0x84>
 80192a4:	edd0 7a01 	vldr	s15, [r0, #4]
 80192a8:	2a01      	cmp	r2, #1
 80192aa:	ee67 7a80 	vmul.f32	s15, s15, s0
 80192ae:	edc1 7a01 	vstr	s15, [r1, #4]
 80192b2:	d005      	beq.n	80192c0 <arm_scale_f32+0x84>
 80192b4:	edd0 7a02 	vldr	s15, [r0, #8]
 80192b8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80192bc:	ed81 0a02 	vstr	s0, [r1, #8]
 80192c0:	bc70      	pop	{r4, r5, r6}
 80192c2:	4770      	bx	lr

080192c4 <arm_mult_f32>:
 80192c4:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80192c8:	b4f0      	push	{r4, r5, r6, r7}
 80192ca:	d033      	beq.n	8019334 <arm_mult_f32+0x70>
 80192cc:	f100 0610 	add.w	r6, r0, #16
 80192d0:	f101 0510 	add.w	r5, r1, #16
 80192d4:	f102 0410 	add.w	r4, r2, #16
 80192d8:	4667      	mov	r7, ip
 80192da:	ed15 7a04 	vldr	s14, [r5, #-16]
 80192de:	3f01      	subs	r7, #1
 80192e0:	ed56 7a04 	vldr	s15, [r6, #-16]
 80192e4:	f105 0510 	add.w	r5, r5, #16
 80192e8:	f106 0610 	add.w	r6, r6, #16
 80192ec:	f104 0410 	add.w	r4, r4, #16
 80192f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80192f4:	ed44 7a08 	vstr	s15, [r4, #-32]	@ 0xffffffe0
 80192f8:	ed15 7a07 	vldr	s14, [r5, #-28]	@ 0xffffffe4
 80192fc:	ed56 7a07 	vldr	s15, [r6, #-28]	@ 0xffffffe4
 8019300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019304:	ed44 7a07 	vstr	s15, [r4, #-28]	@ 0xffffffe4
 8019308:	ed15 7a06 	vldr	s14, [r5, #-24]	@ 0xffffffe8
 801930c:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8019310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019314:	ed44 7a06 	vstr	s15, [r4, #-24]	@ 0xffffffe8
 8019318:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 801931c:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 8019320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019324:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8019328:	d1d7      	bne.n	80192da <arm_mult_f32+0x16>
 801932a:	ea4f 140c 	mov.w	r4, ip, lsl #4
 801932e:	4420      	add	r0, r4
 8019330:	4421      	add	r1, r4
 8019332:	4422      	add	r2, r4
 8019334:	f013 0303 	ands.w	r3, r3, #3
 8019338:	d01b      	beq.n	8019372 <arm_mult_f32+0xae>
 801933a:	edd1 7a00 	vldr	s15, [r1]
 801933e:	3b01      	subs	r3, #1
 8019340:	ed90 7a00 	vldr	s14, [r0]
 8019344:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019348:	edc2 7a00 	vstr	s15, [r2]
 801934c:	d011      	beq.n	8019372 <arm_mult_f32+0xae>
 801934e:	edd0 7a01 	vldr	s15, [r0, #4]
 8019352:	2b01      	cmp	r3, #1
 8019354:	ed91 7a01 	vldr	s14, [r1, #4]
 8019358:	ee67 7a87 	vmul.f32	s15, s15, s14
 801935c:	edc2 7a01 	vstr	s15, [r2, #4]
 8019360:	d007      	beq.n	8019372 <arm_mult_f32+0xae>
 8019362:	edd0 7a02 	vldr	s15, [r0, #8]
 8019366:	ed91 7a02 	vldr	s14, [r1, #8]
 801936a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801936e:	edc2 7a02 	vstr	s15, [r2, #8]
 8019372:	bcf0      	pop	{r4, r5, r6, r7}
 8019374:	4770      	bx	lr
 8019376:	bf00      	nop

08019378 <arm_add_f32>:
 8019378:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 801937c:	b4f0      	push	{r4, r5, r6, r7}
 801937e:	d033      	beq.n	80193e8 <arm_add_f32+0x70>
 8019380:	f100 0610 	add.w	r6, r0, #16
 8019384:	f101 0510 	add.w	r5, r1, #16
 8019388:	f102 0410 	add.w	r4, r2, #16
 801938c:	4667      	mov	r7, ip
 801938e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8019392:	3f01      	subs	r7, #1
 8019394:	ed56 7a04 	vldr	s15, [r6, #-16]
 8019398:	f105 0510 	add.w	r5, r5, #16
 801939c:	f106 0610 	add.w	r6, r6, #16
 80193a0:	f104 0410 	add.w	r4, r4, #16
 80193a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80193a8:	ed44 7a08 	vstr	s15, [r4, #-32]	@ 0xffffffe0
 80193ac:	ed15 7a07 	vldr	s14, [r5, #-28]	@ 0xffffffe4
 80193b0:	ed56 7a07 	vldr	s15, [r6, #-28]	@ 0xffffffe4
 80193b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80193b8:	ed44 7a07 	vstr	s15, [r4, #-28]	@ 0xffffffe4
 80193bc:	ed15 7a06 	vldr	s14, [r5, #-24]	@ 0xffffffe8
 80193c0:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 80193c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80193c8:	ed44 7a06 	vstr	s15, [r4, #-24]	@ 0xffffffe8
 80193cc:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 80193d0:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 80193d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80193d8:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 80193dc:	d1d7      	bne.n	801938e <arm_add_f32+0x16>
 80193de:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80193e2:	4420      	add	r0, r4
 80193e4:	4421      	add	r1, r4
 80193e6:	4422      	add	r2, r4
 80193e8:	f013 0303 	ands.w	r3, r3, #3
 80193ec:	d01b      	beq.n	8019426 <arm_add_f32+0xae>
 80193ee:	edd1 7a00 	vldr	s15, [r1]
 80193f2:	3b01      	subs	r3, #1
 80193f4:	ed90 7a00 	vldr	s14, [r0]
 80193f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80193fc:	edc2 7a00 	vstr	s15, [r2]
 8019400:	d011      	beq.n	8019426 <arm_add_f32+0xae>
 8019402:	edd0 7a01 	vldr	s15, [r0, #4]
 8019406:	2b01      	cmp	r3, #1
 8019408:	ed91 7a01 	vldr	s14, [r1, #4]
 801940c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019410:	edc2 7a01 	vstr	s15, [r2, #4]
 8019414:	d007      	beq.n	8019426 <arm_add_f32+0xae>
 8019416:	edd0 7a02 	vldr	s15, [r0, #8]
 801941a:	ed91 7a02 	vldr	s14, [r1, #8]
 801941e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019422:	edc2 7a02 	vstr	s15, [r2, #8]
 8019426:	bcf0      	pop	{r4, r5, r6, r7}
 8019428:	4770      	bx	lr
 801942a:	bf00      	nop

0801942c <arm_radix8_butterfly_f32>:
 801942c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019430:	ed2d 8b10 	vpush	{d8-d15}
 8019434:	b095      	sub	sp, #84	@ 0x54
 8019436:	468a      	mov	sl, r1
 8019438:	468b      	mov	fp, r1
 801943a:	eddf 8abb 	vldr	s17, [pc, #748]	@ 8019728 <arm_radix8_butterfly_f32+0x2fc>
 801943e:	9012      	str	r0, [sp, #72]	@ 0x48
 8019440:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8019444:	4603      	mov	r3, r0
 8019446:	3304      	adds	r3, #4
 8019448:	9313      	str	r3, [sp, #76]	@ 0x4c
 801944a:	ea4f 02db 	mov.w	r2, fp, lsr #3
 801944e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019450:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8019454:	f8dd c04c 	ldr.w	ip, [sp, #76]	@ 0x4c
 8019458:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801945c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801945e:	9303      	str	r3, [sp, #12]
 8019460:	0153      	lsls	r3, r2, #5
 8019462:	0114      	lsls	r4, r2, #4
 8019464:	eba9 0002 	sub.w	r0, r9, r2
 8019468:	18ce      	adds	r6, r1, r3
 801946a:	9302      	str	r3, [sp, #8]
 801946c:	0097      	lsls	r7, r2, #2
 801946e:	4613      	mov	r3, r2
 8019470:	eb06 0509 	add.w	r5, r6, r9
 8019474:	9004      	str	r0, [sp, #16]
 8019476:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 801947a:	1bd2      	subs	r2, r2, r7
 801947c:	eb05 0109 	add.w	r1, r5, r9
 8019480:	441f      	add	r7, r3
 8019482:	9405      	str	r4, [sp, #20]
 8019484:	f109 0004 	add.w	r0, r9, #4
 8019488:	9101      	str	r1, [sp, #4]
 801948a:	1d21      	adds	r1, r4, #4
 801948c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801948e:	f04f 0e00 	mov.w	lr, #0
 8019492:	9c01      	ldr	r4, [sp, #4]
 8019494:	4418      	add	r0, r3
 8019496:	4419      	add	r1, r3
 8019498:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801949c:	9b02      	ldr	r3, [sp, #8]
 801949e:	00fc      	lsls	r4, r7, #3
 80194a0:	18d7      	adds	r7, r2, r3
 80194a2:	9b04      	ldr	r3, [sp, #16]
 80194a4:	9406      	str	r4, [sp, #24]
 80194a6:	00db      	lsls	r3, r3, #3
 80194a8:	9c01      	ldr	r4, [sp, #4]
 80194aa:	9307      	str	r3, [sp, #28]
 80194ac:	ea4f 1308 	mov.w	r3, r8, lsl #4
 80194b0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80194b4:	9304      	str	r3, [sp, #16]
 80194b6:	9b03      	ldr	r3, [sp, #12]
 80194b8:	edd6 6a00 	vldr	s13, [r6]
 80194bc:	44de      	add	lr, fp
 80194be:	ed5c 7a01 	vldr	s15, [ip, #-4]
 80194c2:	ed94 7a00 	vldr	s14, [r4]
 80194c6:	45f2      	cmp	sl, lr
 80194c8:	ed10 6a01 	vldr	s12, [r0, #-4]
 80194cc:	ee37 2aa6 	vadd.f32	s4, s15, s13
 80194d0:	edd5 2a00 	vldr	s5, [r5]
 80194d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80194d8:	edd7 3a00 	vldr	s7, [r7]
 80194dc:	ed11 5a01 	vldr	s10, [r1, #-4]
 80194e0:	ee36 3a22 	vadd.f32	s6, s12, s5
 80194e4:	edd2 6a00 	vldr	s13, [r2]
 80194e8:	ee75 5a07 	vadd.f32	s11, s10, s14
 80194ec:	ee36 4aa3 	vadd.f32	s8, s13, s7
 80194f0:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80194f4:	ee72 4a25 	vadd.f32	s9, s4, s11
 80194f8:	ee73 3a04 	vadd.f32	s7, s6, s8
 80194fc:	ee35 5a47 	vsub.f32	s10, s10, s14
 8019500:	ee36 7a62 	vsub.f32	s14, s12, s5
 8019504:	ee32 2a65 	vsub.f32	s4, s4, s11
 8019508:	ee74 5aa3 	vadd.f32	s11, s9, s7
 801950c:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8019510:	ee37 6a66 	vsub.f32	s12, s14, s13
 8019514:	ed4c 5a01 	vstr	s11, [ip, #-4]
 8019518:	ee33 3a44 	vsub.f32	s6, s6, s8
 801951c:	edc6 4a00 	vstr	s9, [r6]
 8019520:	ee37 7a26 	vadd.f32	s14, s14, s13
 8019524:	ed97 4a01 	vldr	s8, [r7, #4]
 8019528:	ee66 6a28 	vmul.f32	s13, s12, s17
 801952c:	edd0 5a00 	vldr	s11, [r0]
 8019530:	ed95 6a01 	vldr	s12, [r5, #4]
 8019534:	ee27 7a28 	vmul.f32	s14, s14, s17
 8019538:	edd2 3a01 	vldr	s7, [r2, #4]
 801953c:	ee77 2aa6 	vadd.f32	s5, s15, s13
 8019540:	ee75 4ac6 	vsub.f32	s9, s11, s12
 8019544:	ed96 1a01 	vldr	s2, [r6, #4]
 8019548:	ee33 0ac4 	vsub.f32	s0, s7, s8
 801954c:	edd4 0a01 	vldr	s1, [r4, #4]
 8019550:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019554:	eddc 6a00 	vldr	s13, [ip]
 8019558:	ee75 5a86 	vadd.f32	s11, s11, s12
 801955c:	ed91 6a00 	vldr	s12, [r1]
 8019560:	ee73 3a84 	vadd.f32	s7, s7, s8
 8019564:	ee74 1a80 	vadd.f32	s3, s9, s0
 8019568:	ee36 4a81 	vadd.f32	s8, s13, s2
 801956c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8019570:	ee76 6ac1 	vsub.f32	s13, s13, s2
 8019574:	ee36 1a20 	vadd.f32	s2, s12, s1
 8019578:	ee61 1aa8 	vmul.f32	s3, s3, s17
 801957c:	ee36 6a60 	vsub.f32	s12, s12, s1
 8019580:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8019584:	ee75 0aa3 	vadd.f32	s1, s11, s7
 8019588:	ee75 5ae3 	vsub.f32	s11, s11, s7
 801958c:	ee74 3a01 	vadd.f32	s7, s8, s2
 8019590:	ee34 4a41 	vsub.f32	s8, s8, s2
 8019594:	ee36 1a21 	vadd.f32	s2, s12, s3
 8019598:	ee33 0aa0 	vadd.f32	s0, s7, s1
 801959c:	ee36 6a61 	vsub.f32	s12, s12, s3
 80195a0:	ee73 3ae0 	vsub.f32	s7, s7, s1
 80195a4:	ee76 1aa4 	vadd.f32	s3, s13, s9
 80195a8:	ed8c 0a00 	vstr	s0, [ip]
 80195ac:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80195b0:	449c      	add	ip, r3
 80195b2:	ee75 4a07 	vadd.f32	s9, s10, s14
 80195b6:	edc6 3a01 	vstr	s7, [r6, #4]
 80195ba:	ee35 7a47 	vsub.f32	s14, s10, s14
 80195be:	441e      	add	r6, r3
 80195c0:	ee32 5a25 	vadd.f32	s10, s4, s11
 80195c4:	ee72 5a65 	vsub.f32	s11, s4, s11
 80195c8:	ee72 3a81 	vadd.f32	s7, s5, s2
 80195cc:	ed01 5a01 	vstr	s10, [r1, #-4]
 80195d0:	ee34 2a43 	vsub.f32	s4, s8, s6
 80195d4:	edc4 5a00 	vstr	s11, [r4]
 80195d8:	ee37 5a86 	vadd.f32	s10, s15, s12
 80195dc:	ee71 5ae4 	vsub.f32	s11, s3, s9
 80195e0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80195e4:	ed81 2a00 	vstr	s4, [r1]
 80195e8:	ee36 6ac7 	vsub.f32	s12, s13, s14
 80195ec:	4419      	add	r1, r3
 80195ee:	ee33 4a04 	vadd.f32	s8, s6, s8
 80195f2:	ee72 2ac1 	vsub.f32	s5, s5, s2
 80195f6:	ee74 4aa1 	vadd.f32	s9, s9, s3
 80195fa:	ee37 7a26 	vadd.f32	s14, s14, s13
 80195fe:	ed84 4a01 	vstr	s8, [r4, #4]
 8019602:	ed40 3a01 	vstr	s7, [r0, #-4]
 8019606:	441c      	add	r4, r3
 8019608:	edc7 2a00 	vstr	s5, [r7]
 801960c:	ed85 5a00 	vstr	s10, [r5]
 8019610:	edc2 7a00 	vstr	s15, [r2]
 8019614:	edc0 5a00 	vstr	s11, [r0]
 8019618:	4418      	add	r0, r3
 801961a:	edc7 4a01 	vstr	s9, [r7, #4]
 801961e:	441f      	add	r7, r3
 8019620:	ed85 6a01 	vstr	s12, [r5, #4]
 8019624:	441d      	add	r5, r3
 8019626:	ed82 7a01 	vstr	s14, [r2, #4]
 801962a:	441a      	add	r2, r3
 801962c:	f63f af44 	bhi.w	80194b8 <arm_radix8_butterfly_f32+0x8c>
 8019630:	469c      	mov	ip, r3
 8019632:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019634:	2b07      	cmp	r3, #7
 8019636:	f240 81b6 	bls.w	80199a6 <arm_radix8_butterfly_f32+0x57a>
 801963a:	9a02      	ldr	r2, [sp, #8]
 801963c:	f109 0608 	add.w	r6, r9, #8
 8019640:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019642:	f108 0408 	add.w	r4, r8, #8
 8019646:	3208      	adds	r2, #8
 8019648:	9f06      	ldr	r7, [sp, #24]
 801964a:	9d04      	ldr	r5, [sp, #16]
 801964c:	189a      	adds	r2, r3, r2
 801964e:	3708      	adds	r7, #8
 8019650:	3508      	adds	r5, #8
 8019652:	9807      	ldr	r0, [sp, #28]
 8019654:	920c      	str	r2, [sp, #48]	@ 0x30
 8019656:	199a      	adds	r2, r3, r6
 8019658:	9905      	ldr	r1, [sp, #20]
 801965a:	3008      	adds	r0, #8
 801965c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801965e:	19da      	adds	r2, r3, r7
 8019660:	310c      	adds	r1, #12
 8019662:	920a      	str	r2, [sp, #40]	@ 0x28
 8019664:	195a      	adds	r2, r3, r5
 8019666:	9209      	str	r2, [sp, #36]	@ 0x24
 8019668:	191a      	adds	r2, r3, r4
 801966a:	9208      	str	r2, [sp, #32]
 801966c:	181a      	adds	r2, r3, r0
 801966e:	9207      	str	r2, [sp, #28]
 8019670:	185a      	adds	r2, r3, r1
 8019672:	330c      	adds	r3, #12
 8019674:	9205      	str	r2, [sp, #20]
 8019676:	9306      	str	r3, [sp, #24]
 8019678:	2301      	movs	r3, #1
 801967a:	9304      	str	r3, [sp, #16]
 801967c:	2300      	movs	r3, #0
 801967e:	930d      	str	r3, [sp, #52]	@ 0x34
 8019680:	4663      	mov	r3, ip
 8019682:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019684:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8019686:	f8dd c014 	ldr.w	ip, [sp, #20]
 801968a:	440a      	add	r2, r1
 801968c:	9f06      	ldr	r7, [sp, #24]
 801968e:	9e07      	ldr	r6, [sp, #28]
 8019690:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8019694:	920d      	str	r2, [sp, #52]	@ 0x34
 8019696:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 801969a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801969c:	9d08      	ldr	r5, [sp, #32]
 801969e:	4442      	add	r2, r8
 80196a0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80196a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80196a4:	eb02 0108 	add.w	r1, r2, r8
 80196a8:	ed92 ea00 	vldr	s28, [r2]
 80196ac:	eb01 0208 	add.w	r2, r1, r8
 80196b0:	edd1 da00 	vldr	s27, [r1]
 80196b4:	eb02 0108 	add.w	r1, r2, r8
 80196b8:	ed92 da00 	vldr	s26, [r2]
 80196bc:	eb01 0208 	add.w	r2, r1, r8
 80196c0:	edd1 ca00 	vldr	s25, [r1]
 80196c4:	eb02 0108 	add.w	r1, r2, r8
 80196c8:	ed92 ca00 	vldr	s24, [r2]
 80196cc:	eb01 0208 	add.w	r2, r1, r8
 80196d0:	edd1 ba00 	vldr	s23, [r1]
 80196d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80196d6:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 80196da:	ed92 ba00 	vldr	s22, [r2]
 80196de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80196e0:	eb0e 0908 	add.w	r9, lr, r8
 80196e4:	910e      	str	r1, [sp, #56]	@ 0x38
 80196e6:	9201      	str	r2, [sp, #4]
 80196e8:	eb09 0208 	add.w	r2, r9, r8
 80196ec:	ed99 aa01 	vldr	s20, [r9, #4]
 80196f0:	edde aa01 	vldr	s21, [lr, #4]
 80196f4:	eb02 0908 	add.w	r9, r2, r8
 80196f8:	edd2 9a01 	vldr	s19, [r2, #4]
 80196fc:	f8dd e010 	ldr.w	lr, [sp, #16]
 8019700:	eb09 0208 	add.w	r2, r9, r8
 8019704:	ed99 9a01 	vldr	s18, [r9, #4]
 8019708:	eb02 0908 	add.w	r9, r2, r8
 801970c:	ed92 8a01 	vldr	s16, [r2, #4]
 8019710:	9a01      	ldr	r2, [sp, #4]
 8019712:	edd9 7a01 	vldr	s15, [r9, #4]
 8019716:	44c8      	add	r8, r9
 8019718:	edcd 7a02 	vstr	s15, [sp, #8]
 801971c:	edd8 7a01 	vldr	s15, [r8, #4]
 8019720:	edcd 7a03 	vstr	s15, [sp, #12]
 8019724:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019726:	e001      	b.n	801972c <arm_radix8_butterfly_f32+0x300>
 8019728:	3f3504f3 	.word	0x3f3504f3
 801972c:	ed92 7a00 	vldr	s14, [r2]
 8019730:	44de      	add	lr, fp
 8019732:	ed17 1a01 	vldr	s2, [r7, #-4]
 8019736:	ed90 5a00 	vldr	s10, [r0]
 801973a:	45f2      	cmp	sl, lr
 801973c:	ed1c fa01 	vldr	s30, [ip, #-4]
 8019740:	ee31 3a07 	vadd.f32	s6, s2, s14
 8019744:	edd6 5a00 	vldr	s11, [r6]
 8019748:	ee31 1a47 	vsub.f32	s2, s2, s14
 801974c:	edd4 7a00 	vldr	s15, [r4]
 8019750:	ed95 7a00 	vldr	s14, [r5]
 8019754:	ed91 4a00 	vldr	s8, [r1]
 8019758:	ee3f 6a27 	vadd.f32	s12, s30, s15
 801975c:	ee77 6a25 	vadd.f32	s13, s14, s11
 8019760:	edd7 ea00 	vldr	s29, [r7]
 8019764:	ee74 fa05 	vadd.f32	s31, s8, s10
 8019768:	ee73 1a06 	vadd.f32	s3, s6, s12
 801976c:	ee34 4a45 	vsub.f32	s8, s8, s10
 8019770:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 8019774:	ee37 7a65 	vsub.f32	s14, s14, s11
 8019778:	ee33 3a46 	vsub.f32	s6, s6, s12
 801977c:	ee31 6a85 	vadd.f32	s12, s3, s10
 8019780:	ee7f 7a67 	vsub.f32	s15, s30, s15
 8019784:	ee34 fa07 	vadd.f32	s30, s8, s14
 8019788:	ed07 6a01 	vstr	s12, [r7, #-4]
 801978c:	ee34 4a47 	vsub.f32	s8, s8, s14
 8019790:	edd5 3a01 	vldr	s7, [r5, #4]
 8019794:	ee7f fae6 	vsub.f32	s31, s31, s13
 8019798:	ed90 7a01 	vldr	s14, [r0, #4]
 801979c:	ee2f fa28 	vmul.f32	s30, s30, s17
 80197a0:	edd1 5a01 	vldr	s11, [r1, #4]
 80197a4:	ee24 4a28 	vmul.f32	s8, s8, s17
 80197a8:	ed96 6a01 	vldr	s12, [r6, #4]
 80197ac:	ee31 5ac5 	vsub.f32	s10, s3, s10
 80197b0:	ee75 0ac7 	vsub.f32	s1, s11, s14
 80197b4:	edd2 6a01 	vldr	s13, [r2, #4]
 80197b8:	ee73 2ac6 	vsub.f32	s5, s7, s12
 80197bc:	edd4 4a01 	vldr	s9, [r4, #4]
 80197c0:	ee75 5a87 	vadd.f32	s11, s11, s14
 80197c4:	ed9c 7a00 	vldr	s14, [ip]
 80197c8:	ee37 2a8f 	vadd.f32	s4, s15, s30
 80197cc:	ee33 6a86 	vadd.f32	s12, s7, s12
 80197d0:	ee37 facf 	vsub.f32	s30, s15, s30
 80197d4:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 80197d8:	ee70 7ae2 	vsub.f32	s15, s1, s5
 80197dc:	ee7e eae6 	vsub.f32	s29, s29, s13
 80197e0:	ee70 2aa2 	vadd.f32	s5, s1, s5
 80197e4:	ee77 6a24 	vadd.f32	s13, s14, s9
 80197e8:	ee75 0a86 	vadd.f32	s1, s11, s12
 80197ec:	ee37 7a64 	vsub.f32	s14, s14, s9
 80197f0:	ee33 0aa6 	vadd.f32	s0, s7, s13
 80197f4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80197f8:	ee62 2aa8 	vmul.f32	s5, s5, s17
 80197fc:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8019800:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8019804:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 8019808:	ee77 4a22 	vadd.f32	s9, s14, s5
 801980c:	ee7e eae7 	vsub.f32	s29, s29, s15
 8019810:	ee77 7a62 	vsub.f32	s15, s14, s5
 8019814:	ee71 2a04 	vadd.f32	s5, s2, s8
 8019818:	ee31 7a44 	vsub.f32	s14, s2, s8
 801981c:	ee30 1a60 	vsub.f32	s2, s0, s1
 8019820:	ee73 1a06 	vadd.f32	s3, s6, s12
 8019824:	ee33 6a46 	vsub.f32	s12, s6, s12
 8019828:	ee33 3aef 	vsub.f32	s6, s7, s31
 801982c:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 8019830:	ee3e 4acf 	vsub.f32	s8, s29, s30
 8019834:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8019838:	ee72 5a25 	vadd.f32	s11, s4, s11
 801983c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8019840:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8019844:	ee77 2a27 	vadd.f32	s5, s14, s15
 8019848:	ee37 7a67 	vsub.f32	s14, s14, s15
 801984c:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 8019850:	ee2c fa85 	vmul.f32	s30, s25, s10
 8019854:	ee69 ea01 	vmul.f32	s29, s18, s2
 8019858:	ee29 5a05 	vmul.f32	s10, s18, s10
 801985c:	ee2c 1a81 	vmul.f32	s2, s25, s2
 8019860:	ee6d faa1 	vmul.f32	s31, s27, s3
 8019864:	ee70 0a20 	vadd.f32	s1, s0, s1
 8019868:	ee6a 1a21 	vmul.f32	s3, s20, s3
 801986c:	ee2a 0a03 	vmul.f32	s0, s20, s6
 8019870:	ee2d 3a83 	vmul.f32	s6, s27, s6
 8019874:	edc7 0a00 	vstr	s1, [r7]
 8019878:	ee7f ea2e 	vadd.f32	s29, s30, s29
 801987c:	441f      	add	r7, r3
 801987e:	ee2a faa3 	vmul.f32	s30, s21, s7
 8019882:	ee31 5a45 	vsub.f32	s10, s2, s10
 8019886:	ee6e 3a23 	vmul.f32	s7, s28, s7
 801988a:	edc2 ea00 	vstr	s29, [r2]
 801988e:	ee3f 0a80 	vadd.f32	s0, s31, s0
 8019892:	ee33 3a61 	vsub.f32	s6, s6, s3
 8019896:	ed82 5a01 	vstr	s10, [r2, #4]
 801989a:	ee6e 0a02 	vmul.f32	s1, s28, s4
 801989e:	edcd 3a01 	vstr	s7, [sp, #4]
 80198a2:	ed9d 5a03 	vldr	s10, [sp, #12]
 80198a6:	ee6b ea86 	vmul.f32	s29, s23, s12
 80198aa:	eddd 3a02 	vldr	s7, [sp, #8]
 80198ae:	ee6b fa24 	vmul.f32	s31, s22, s9
 80198b2:	ed0c 0a01 	vstr	s0, [ip, #-4]
 80198b6:	ee65 4a24 	vmul.f32	s9, s10, s9
 80198ba:	ed8c 3a00 	vstr	s6, [ip]
 80198be:	ee23 1aa6 	vmul.f32	s2, s7, s13
 80198c2:	ee23 6a86 	vmul.f32	s12, s7, s12
 80198c6:	eddd 3a01 	vldr	s7, [sp, #4]
 80198ca:	ee25 5a25 	vmul.f32	s10, s10, s11
 80198ce:	441a      	add	r2, r3
 80198d0:	ee2c 0a22 	vmul.f32	s0, s24, s5
 80198d4:	449c      	add	ip, r3
 80198d6:	ee68 1a04 	vmul.f32	s3, s16, s8
 80198da:	ee70 0a8f 	vadd.f32	s1, s1, s30
 80198de:	ee2d 3a07 	vmul.f32	s6, s26, s14
 80198e2:	ee29 faa7 	vmul.f32	s30, s19, s15
 80198e6:	ee2a 2a82 	vmul.f32	s4, s21, s4
 80198ea:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 80198ee:	ee6b 5a25 	vmul.f32	s11, s22, s11
 80198f2:	ee68 2a22 	vmul.f32	s5, s16, s5
 80198f6:	ee2c 4a04 	vmul.f32	s8, s24, s8
 80198fa:	ee29 7a87 	vmul.f32	s14, s19, s14
 80198fe:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8019902:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8019906:	ee7e ea81 	vadd.f32	s29, s29, s2
 801990a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801990e:	ee3f 5a85 	vadd.f32	s10, s31, s10
 8019912:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8019916:	edc4 ea00 	vstr	s29, [r4]
 801991a:	ee30 0a21 	vadd.f32	s0, s0, s3
 801991e:	ed84 6a01 	vstr	s12, [r4, #4]
 8019922:	ee74 2a62 	vsub.f32	s5, s8, s5
 8019926:	edc1 0a00 	vstr	s1, [r1]
 801992a:	ee33 3a0f 	vadd.f32	s6, s6, s30
 801992e:	edc1 3a01 	vstr	s7, [r1, #4]
 8019932:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8019936:	ed86 5a00 	vstr	s10, [r6]
 801993a:	edc6 4a01 	vstr	s9, [r6, #4]
 801993e:	4419      	add	r1, r3
 8019940:	ed80 0a00 	vstr	s0, [r0]
 8019944:	441c      	add	r4, r3
 8019946:	edc0 2a01 	vstr	s5, [r0, #4]
 801994a:	441e      	add	r6, r3
 801994c:	ed85 3a00 	vstr	s6, [r5]
 8019950:	4418      	add	r0, r3
 8019952:	ed85 7a01 	vstr	s14, [r5, #4]
 8019956:	441d      	add	r5, r3
 8019958:	f63f aee8 	bhi.w	801972c <arm_radix8_butterfly_f32+0x300>
 801995c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801995e:	9a04      	ldr	r2, [sp, #16]
 8019960:	3108      	adds	r1, #8
 8019962:	3201      	adds	r2, #1
 8019964:	910c      	str	r1, [sp, #48]	@ 0x30
 8019966:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019968:	9204      	str	r2, [sp, #16]
 801996a:	3108      	adds	r1, #8
 801996c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801996e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019970:	3108      	adds	r1, #8
 8019972:	910a      	str	r1, [sp, #40]	@ 0x28
 8019974:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019976:	3108      	adds	r1, #8
 8019978:	9109      	str	r1, [sp, #36]	@ 0x24
 801997a:	9908      	ldr	r1, [sp, #32]
 801997c:	3108      	adds	r1, #8
 801997e:	9108      	str	r1, [sp, #32]
 8019980:	9907      	ldr	r1, [sp, #28]
 8019982:	3108      	adds	r1, #8
 8019984:	9107      	str	r1, [sp, #28]
 8019986:	9906      	ldr	r1, [sp, #24]
 8019988:	3108      	adds	r1, #8
 801998a:	9106      	str	r1, [sp, #24]
 801998c:	9905      	ldr	r1, [sp, #20]
 801998e:	3108      	adds	r1, #8
 8019990:	9105      	str	r1, [sp, #20]
 8019992:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8019994:	4291      	cmp	r1, r2
 8019996:	f47f ae74 	bne.w	8019682 <arm_radix8_butterfly_f32+0x256>
 801999a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801999c:	468b      	mov	fp, r1
 801999e:	00db      	lsls	r3, r3, #3
 80199a0:	b29b      	uxth	r3, r3
 80199a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80199a4:	e551      	b.n	801944a <arm_radix8_butterfly_f32+0x1e>
 80199a6:	b015      	add	sp, #84	@ 0x54
 80199a8:	ecbd 8b10 	vpop	{d8-d15}
 80199ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080199b0 <arm_rfft_init_f32>:
 80199b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199b2:	b294      	uxth	r4, r2
 80199b4:	4f23      	ldr	r7, [pc, #140]	@ (8019a44 <arm_rfft_init_f32+0x94>)
 80199b6:	b2db      	uxtb	r3, r3
 80199b8:	4e23      	ldr	r6, [pc, #140]	@ (8019a48 <arm_rfft_init_f32+0x98>)
 80199ba:	f3c2 024e 	ubfx	r2, r2, #1, #15
 80199be:	460d      	mov	r5, r1
 80199c0:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 80199c4:	9906      	ldr	r1, [sp, #24]
 80199c6:	7183      	strb	r3, [r0, #6]
 80199c8:	6004      	str	r4, [r0, #0]
 80199ca:	71c1      	strb	r1, [r0, #7]
 80199cc:	8082      	strh	r2, [r0, #4]
 80199ce:	e9c0 7603 	strd	r7, r6, [r0, #12]
 80199d2:	d033      	beq.n	8019a3c <arm_rfft_init_f32+0x8c>
 80199d4:	d911      	bls.n	80199fa <arm_rfft_init_f32+0x4a>
 80199d6:	f5b4 6f00 	cmp.w	r4, #2048	@ 0x800
 80199da:	d026      	beq.n	8019a2a <arm_rfft_init_f32+0x7a>
 80199dc:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 80199e0:	d116      	bne.n	8019a10 <arm_rfft_init_f32+0x60>
 80199e2:	2101      	movs	r1, #1
 80199e4:	2400      	movs	r4, #0
 80199e6:	6081      	str	r1, [r0, #8]
 80199e8:	6145      	str	r5, [r0, #20]
 80199ea:	4611      	mov	r1, r2
 80199ec:	4628      	mov	r0, r5
 80199ee:	b9b3      	cbnz	r3, 8019a1e <arm_rfft_init_f32+0x6e>
 80199f0:	461a      	mov	r2, r3
 80199f2:	f000 f91b 	bl	8019c2c <arm_cfft_radix4_init_f32>
 80199f6:	4620      	mov	r0, r4
 80199f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199fa:	2c80      	cmp	r4, #128	@ 0x80
 80199fc:	d108      	bne.n	8019a10 <arm_rfft_init_f32+0x60>
 80199fe:	2140      	movs	r1, #64	@ 0x40
 8019a00:	6145      	str	r5, [r0, #20]
 8019a02:	2400      	movs	r4, #0
 8019a04:	6081      	str	r1, [r0, #8]
 8019a06:	4611      	mov	r1, r2
 8019a08:	4628      	mov	r0, r5
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d0f0      	beq.n	80199f0 <arm_rfft_init_f32+0x40>
 8019a0e:	e006      	b.n	8019a1e <arm_rfft_init_f32+0x6e>
 8019a10:	6145      	str	r5, [r0, #20]
 8019a12:	f04f 34ff 	mov.w	r4, #4294967295
 8019a16:	4611      	mov	r1, r2
 8019a18:	4628      	mov	r0, r5
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d0e8      	beq.n	80199f0 <arm_rfft_init_f32+0x40>
 8019a1e:	2300      	movs	r3, #0
 8019a20:	2201      	movs	r2, #1
 8019a22:	f000 f903 	bl	8019c2c <arm_cfft_radix4_init_f32>
 8019a26:	4620      	mov	r0, r4
 8019a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a2a:	2104      	movs	r1, #4
 8019a2c:	6145      	str	r5, [r0, #20]
 8019a2e:	2400      	movs	r4, #0
 8019a30:	6081      	str	r1, [r0, #8]
 8019a32:	4611      	mov	r1, r2
 8019a34:	4628      	mov	r0, r5
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d0da      	beq.n	80199f0 <arm_rfft_init_f32+0x40>
 8019a3a:	e7f0      	b.n	8019a1e <arm_rfft_init_f32+0x6e>
 8019a3c:	2110      	movs	r1, #16
 8019a3e:	2400      	movs	r4, #0
 8019a40:	6081      	str	r1, [r0, #8]
 8019a42:	e7d1      	b.n	80199e8 <arm_rfft_init_f32+0x38>
 8019a44:	0805a044 	.word	0x0805a044
 8019a48:	08062044 	.word	0x08062044

08019a4c <arm_split_rfft_f32>:
 8019a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a50:	e9dd c706 	ldrd	ip, r7, [sp, #24]
 8019a54:	010c      	lsls	r4, r1, #4
 8019a56:	00ff      	lsls	r7, r7, #3
 8019a58:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 8019a5c:	3901      	subs	r1, #1
 8019a5e:	443a      	add	r2, r7
 8019a60:	443b      	add	r3, r7
 8019a62:	d046      	beq.n	8019af2 <arm_split_rfft_f32+0xa6>
 8019a64:	3c0c      	subs	r4, #12
 8019a66:	f1ae 050c 	sub.w	r5, lr, #12
 8019a6a:	f100 0810 	add.w	r8, r0, #16
 8019a6e:	f10c 0610 	add.w	r6, ip, #16
 8019a72:	4464      	add	r4, ip
 8019a74:	4405      	add	r5, r0
 8019a76:	ed92 7a00 	vldr	s14, [r2]
 8019a7a:	3901      	subs	r1, #1
 8019a7c:	ed92 5a01 	vldr	s10, [r2, #4]
 8019a80:	f108 0808 	add.w	r8, r8, #8
 8019a84:	ed58 5a03 	vldr	s11, [r8, #-12]
 8019a88:	443a      	add	r2, r7
 8019a8a:	ed18 6a04 	vldr	s12, [r8, #-16]
 8019a8e:	f1a5 0508 	sub.w	r5, r5, #8
 8019a92:	ee65 7a87 	vmul.f32	s15, s11, s14
 8019a96:	edd5 4a04 	vldr	s9, [r5, #16]
 8019a9a:	ee66 3a05 	vmul.f32	s7, s12, s10
 8019a9e:	ed93 4a00 	vldr	s8, [r3]
 8019aa2:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8019aa6:	edd5 6a03 	vldr	s13, [r5, #12]
 8019aaa:	ee64 4a84 	vmul.f32	s9, s9, s8
 8019aae:	443b      	add	r3, r7
 8019ab0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019ab4:	f106 0608 	add.w	r6, r6, #8
 8019ab8:	ee26 6a07 	vmul.f32	s12, s12, s14
 8019abc:	f1a4 0408 	sub.w	r4, r4, #8
 8019ac0:	ee25 7a85 	vmul.f32	s14, s11, s10
 8019ac4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8019ac8:	ee26 5a85 	vmul.f32	s10, s13, s10
 8019acc:	ee36 6a47 	vsub.f32	s12, s12, s14
 8019ad0:	ee26 7a84 	vmul.f32	s14, s13, s8
 8019ad4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8019ad8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019adc:	eef1 6a67 	vneg.f32	s13, s15
 8019ae0:	ed46 7a03 	vstr	s15, [r6, #-12]
 8019ae4:	ed06 7a04 	vstr	s14, [r6, #-16]
 8019ae8:	edc4 6a04 	vstr	s13, [r4, #16]
 8019aec:	ed84 7a03 	vstr	s14, [r4, #12]
 8019af0:	d1c1      	bne.n	8019a76 <arm_split_rfft_f32+0x2a>
 8019af2:	ed90 7a01 	vldr	s14, [r0, #4]
 8019af6:	44e6      	add	lr, ip
 8019af8:	edd0 7a00 	vldr	s15, [r0]
 8019afc:	2300      	movs	r3, #0
 8019afe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019b02:	f8ce 3004 	str.w	r3, [lr, #4]
 8019b06:	edce 7a00 	vstr	s15, [lr]
 8019b0a:	edd0 7a00 	vldr	s15, [r0]
 8019b0e:	ed90 7a01 	vldr	s14, [r0, #4]
 8019b12:	f8cc 3004 	str.w	r3, [ip, #4]
 8019b16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019b1a:	edcc 7a00 	vstr	s15, [ip]
 8019b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b22:	bf00      	nop

08019b24 <arm_rfft_f32>:
 8019b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b28:	7983      	ldrb	r3, [r0, #6]
 8019b2a:	b082      	sub	sp, #8
 8019b2c:	4604      	mov	r4, r0
 8019b2e:	460f      	mov	r7, r1
 8019b30:	2b01      	cmp	r3, #1
 8019b32:	4616      	mov	r6, r2
 8019b34:	6945      	ldr	r5, [r0, #20]
 8019b36:	d014      	beq.n	8019b62 <arm_rfft_f32+0x3e>
 8019b38:	89ab      	ldrh	r3, [r5, #12]
 8019b3a:	4608      	mov	r0, r1
 8019b3c:	686a      	ldr	r2, [r5, #4]
 8019b3e:	8829      	ldrh	r1, [r5, #0]
 8019b40:	f000 f8d2 	bl	8019ce8 <arm_radix4_butterfly_f32>
 8019b44:	79e3      	ldrb	r3, [r4, #7]
 8019b46:	2b01      	cmp	r3, #1
 8019b48:	d069      	beq.n	8019c1e <arm_rfft_f32+0xfa>
 8019b4a:	68a3      	ldr	r3, [r4, #8]
 8019b4c:	4638      	mov	r0, r7
 8019b4e:	e9cd 6300 	strd	r6, r3, [sp]
 8019b52:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8019b56:	88a1      	ldrh	r1, [r4, #4]
 8019b58:	f7ff ff78 	bl	8019a4c <arm_split_rfft_f32>
 8019b5c:	b002      	add	sp, #8
 8019b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b62:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8019b66:	68c3      	ldr	r3, [r0, #12]
 8019b68:	ea4f 01cc 	mov.w	r1, ip, lsl #3
 8019b6c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8019b70:	6882      	ldr	r2, [r0, #8]
 8019b72:	f1bc 0f00 	cmp.w	ip, #0
 8019b76:	d03e      	beq.n	8019bf6 <arm_rfft_f32+0xd2>
 8019b78:	3904      	subs	r1, #4
 8019b7a:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8019b7e:	f107 0008 	add.w	r0, r7, #8
 8019b82:	f106 0208 	add.w	r2, r6, #8
 8019b86:	4439      	add	r1, r7
 8019b88:	ed93 7a01 	vldr	s14, [r3, #4]
 8019b8c:	f1bc 0c01 	subs.w	ip, ip, #1
 8019b90:	ed93 5a00 	vldr	s10, [r3]
 8019b94:	f100 0008 	add.w	r0, r0, #8
 8019b98:	ed50 7a03 	vldr	s15, [r0, #-12]
 8019b9c:	4443      	add	r3, r8
 8019b9e:	ed10 4a04 	vldr	s8, [r0, #-16]
 8019ba2:	f1a1 0108 	sub.w	r1, r1, #8
 8019ba6:	edd1 5a04 	vldr	s11, [r1, #16]
 8019baa:	ee25 6a27 	vmul.f32	s12, s10, s15
 8019bae:	ee64 3a47 	vnmul.f32	s7, s8, s14
 8019bb2:	edde 6a00 	vldr	s13, [lr]
 8019bb6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8019bba:	edd1 4a03 	vldr	s9, [r1, #12]
 8019bbe:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8019bc2:	44c6      	add	lr, r8
 8019bc4:	ee25 5a04 	vmul.f32	s10, s10, s8
 8019bc8:	f102 0208 	add.w	r2, r2, #8
 8019bcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019bd0:	ee36 6a23 	vadd.f32	s12, s12, s7
 8019bd4:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8019bd8:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019bdc:	ee36 6a65 	vsub.f32	s12, s12, s11
 8019be0:	ee27 7a24 	vmul.f32	s14, s14, s9
 8019be4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8019be8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019bec:	ed42 7a04 	vstr	s15, [r2, #-16]
 8019bf0:	ed02 7a03 	vstr	s14, [r2, #-12]
 8019bf4:	d1c8      	bne.n	8019b88 <arm_rfft_f32+0x64>
 8019bf6:	89ab      	ldrh	r3, [r5, #12]
 8019bf8:	4630      	mov	r0, r6
 8019bfa:	ed95 0a04 	vldr	s0, [r5, #16]
 8019bfe:	686a      	ldr	r2, [r5, #4]
 8019c00:	8829      	ldrh	r1, [r5, #0]
 8019c02:	f000 fa17 	bl	801a034 <arm_radix4_butterfly_inverse_f32>
 8019c06:	79e3      	ldrb	r3, [r4, #7]
 8019c08:	2b01      	cmp	r3, #1
 8019c0a:	d1a7      	bne.n	8019b5c <arm_rfft_f32+0x38>
 8019c0c:	4630      	mov	r0, r6
 8019c0e:	68ab      	ldr	r3, [r5, #8]
 8019c10:	89ea      	ldrh	r2, [r5, #14]
 8019c12:	8829      	ldrh	r1, [r5, #0]
 8019c14:	b002      	add	sp, #8
 8019c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019c1a:	f000 bbc7 	b.w	801a3ac <arm_bitreversal_f32>
 8019c1e:	68ab      	ldr	r3, [r5, #8]
 8019c20:	4638      	mov	r0, r7
 8019c22:	89ea      	ldrh	r2, [r5, #14]
 8019c24:	8829      	ldrh	r1, [r5, #0]
 8019c26:	f000 fbc1 	bl	801a3ac <arm_bitreversal_f32>
 8019c2a:	e78e      	b.n	8019b4a <arm_rfft_f32+0x26>

08019c2c <arm_cfft_radix4_init_f32>:
 8019c2c:	b410      	push	{r4}
 8019c2e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8019c32:	4604      	mov	r4, r0
 8019c34:	4826      	ldr	r0, [pc, #152]	@ (8019cd0 <arm_cfft_radix4_init_f32+0xa4>)
 8019c36:	70a2      	strb	r2, [r4, #2]
 8019c38:	70e3      	strb	r3, [r4, #3]
 8019c3a:	8021      	strh	r1, [r4, #0]
 8019c3c:	6060      	str	r0, [r4, #4]
 8019c3e:	d027      	beq.n	8019c90 <arm_cfft_radix4_init_f32+0x64>
 8019c40:	d911      	bls.n	8019c66 <arm_cfft_radix4_init_f32+0x3a>
 8019c42:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8019c46:	d02f      	beq.n	8019ca8 <arm_cfft_radix4_init_f32+0x7c>
 8019c48:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8019c4c:	d11b      	bne.n	8019c86 <arm_cfft_radix4_init_f32+0x5a>
 8019c4e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8019c52:	4a20      	ldr	r2, [pc, #128]	@ (8019cd4 <arm_cfft_radix4_init_f32+0xa8>)
 8019c54:	f04f 5366 	mov.w	r3, #964689920	@ 0x39800000
 8019c58:	2000      	movs	r0, #0
 8019c5a:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8019c5e:	6123      	str	r3, [r4, #16]
 8019c60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c64:	4770      	bx	lr
 8019c66:	2910      	cmp	r1, #16
 8019c68:	d028      	beq.n	8019cbc <arm_cfft_radix4_init_f32+0x90>
 8019c6a:	2940      	cmp	r1, #64	@ 0x40
 8019c6c:	d10b      	bne.n	8019c86 <arm_cfft_radix4_init_f32+0x5a>
 8019c6e:	f04f 5372 	mov.w	r3, #1015021568	@ 0x3c800000
 8019c72:	f04f 1140 	mov.w	r1, #4194368	@ 0x400040
 8019c76:	4a18      	ldr	r2, [pc, #96]	@ (8019cd8 <arm_cfft_radix4_init_f32+0xac>)
 8019c78:	2000      	movs	r0, #0
 8019c7a:	6123      	str	r3, [r4, #16]
 8019c7c:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8019c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c84:	4770      	bx	lr
 8019c86:	f04f 30ff 	mov.w	r0, #4294967295
 8019c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c8e:	4770      	bx	lr
 8019c90:	f04f 536e 	mov.w	r3, #998244352	@ 0x3b800000
 8019c94:	f04f 1110 	mov.w	r1, #1048592	@ 0x100010
 8019c98:	4a10      	ldr	r2, [pc, #64]	@ (8019cdc <arm_cfft_radix4_init_f32+0xb0>)
 8019c9a:	2000      	movs	r0, #0
 8019c9c:	6123      	str	r3, [r4, #16]
 8019c9e:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8019ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ca6:	4770      	bx	lr
 8019ca8:	f04f 1104 	mov.w	r1, #262148	@ 0x40004
 8019cac:	4a0c      	ldr	r2, [pc, #48]	@ (8019ce0 <arm_cfft_radix4_init_f32+0xb4>)
 8019cae:	f04f 536a 	mov.w	r3, #981467136	@ 0x3a800000
 8019cb2:	2000      	movs	r0, #0
 8019cb4:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8019cb8:	6123      	str	r3, [r4, #16]
 8019cba:	e7d1      	b.n	8019c60 <arm_cfft_radix4_init_f32+0x34>
 8019cbc:	f04f 2101 	mov.w	r1, #16777472	@ 0x1000100
 8019cc0:	4a08      	ldr	r2, [pc, #32]	@ (8019ce4 <arm_cfft_radix4_init_f32+0xb8>)
 8019cc2:	f04f 5376 	mov.w	r3, #1031798784	@ 0x3d800000
 8019cc6:	2000      	movs	r0, #0
 8019cc8:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8019ccc:	6123      	str	r3, [r4, #16]
 8019cce:	e7c7      	b.n	8019c60 <arm_cfft_radix4_init_f32+0x34>
 8019cd0:	080715c8 	.word	0x080715c8
 8019cd4:	0804ee44 	.word	0x0804ee44
 8019cd8:	0804eec2 	.word	0x0804eec2
 8019cdc:	0804ee62 	.word	0x0804ee62
 8019ce0:	0804ee4a 	.word	0x0804ee4a
 8019ce4:	0804f042 	.word	0x0804f042

08019ce8 <arm_radix4_butterfly_f32>:
 8019ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cec:	4684      	mov	ip, r0
 8019cee:	1d14      	adds	r4, r2, #4
 8019cf0:	088a      	lsrs	r2, r1, #2
 8019cf2:	468a      	mov	sl, r1
 8019cf4:	4626      	mov	r6, r4
 8019cf6:	4625      	mov	r5, r4
 8019cf8:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8019cfc:	4693      	mov	fp, r2
 8019cfe:	ed2d 8b06 	vpush	{d8-d10}
 8019d02:	b08d      	sub	sp, #52	@ 0x34
 8019d04:	9202      	str	r2, [sp, #8]
 8019d06:	4662      	mov	r2, ip
 8019d08:	9009      	str	r0, [sp, #36]	@ 0x24
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	444a      	add	r2, r9
 8019d0e:	9301      	str	r3, [sp, #4]
 8019d10:	eb00 0740 	add.w	r7, r0, r0, lsl #1
 8019d14:	4663      	mov	r3, ip
 8019d16:	eb02 0109 	add.w	r1, r2, r9
 8019d1a:	ea4f 1e00 	mov.w	lr, r0, lsl #4
 8019d1e:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 8019d22:	4690      	mov	r8, r2
 8019d24:	00ff      	lsls	r7, r7, #3
 8019d26:	eb01 0009 	add.w	r0, r1, r9
 8019d2a:	940a      	str	r4, [sp, #40]	@ 0x28
 8019d2c:	ed93 7a00 	vldr	s14, [r3]
 8019d30:	3308      	adds	r3, #8
 8019d32:	ed91 6a00 	vldr	s12, [r1]
 8019d36:	3208      	adds	r2, #8
 8019d38:	edd0 6a00 	vldr	s13, [r0]
 8019d3c:	3108      	adds	r1, #8
 8019d3e:	ed11 2a01 	vldr	s4, [r1, #-4]
 8019d42:	ee37 4a06 	vadd.f32	s8, s14, s12
 8019d46:	edd0 2a01 	vldr	s5, [r0, #4]
 8019d4a:	ee37 7a46 	vsub.f32	s14, s14, s12
 8019d4e:	ed52 7a02 	vldr	s15, [r2, #-8]
 8019d52:	3008      	adds	r0, #8
 8019d54:	ed13 6a01 	vldr	s12, [r3, #-4]
 8019d58:	ed52 5a01 	vldr	s11, [r2, #-4]
 8019d5c:	ee37 3aa6 	vadd.f32	s6, s15, s13
 8019d60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019d64:	edd4 3a00 	vldr	s7, [r4]
 8019d68:	ee35 5aa2 	vadd.f32	s10, s11, s5
 8019d6c:	ed54 4a01 	vldr	s9, [r4, #-4]
 8019d70:	ee76 6a02 	vadd.f32	s13, s12, s4
 8019d74:	4474      	add	r4, lr
 8019d76:	ee36 6a42 	vsub.f32	s12, s12, s4
 8019d7a:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8019d7e:	ee34 2a03 	vadd.f32	s4, s8, s6
 8019d82:	ee76 2a85 	vadd.f32	s5, s13, s10
 8019d86:	ee34 4a43 	vsub.f32	s8, s8, s6
 8019d8a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8019d8e:	ed03 2a02 	vstr	s4, [r3, #-8]
 8019d92:	ee37 3a25 	vadd.f32	s6, s14, s11
 8019d96:	ed43 2a01 	vstr	s5, [r3, #-4]
 8019d9a:	ee37 7a65 	vsub.f32	s14, s14, s11
 8019d9e:	ed15 2a01 	vldr	s4, [r5, #-4]
 8019da2:	ee76 5a67 	vsub.f32	s11, s12, s15
 8019da6:	ed95 5a00 	vldr	s10, [r5]
 8019daa:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019dae:	edd6 2a00 	vldr	s5, [r6]
 8019db2:	ed16 6a01 	vldr	s12, [r6, #-4]
 8019db6:	ee63 1a02 	vmul.f32	s3, s6, s4
 8019dba:	ee23 3a05 	vmul.f32	s6, s6, s10
 8019dbe:	4598      	cmp	r8, r3
 8019dc0:	ee25 5a85 	vmul.f32	s10, s11, s10
 8019dc4:	4465      	add	r5, ip
 8019dc6:	ee65 5a82 	vmul.f32	s11, s11, s4
 8019dca:	443e      	add	r6, r7
 8019dcc:	ee24 2a84 	vmul.f32	s4, s9, s8
 8019dd0:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8019dd4:	ee23 4a84 	vmul.f32	s8, s7, s8
 8019dd8:	ee63 6aa6 	vmul.f32	s13, s7, s13
 8019ddc:	ee67 3a06 	vmul.f32	s7, s14, s12
 8019de0:	ee27 6a86 	vmul.f32	s12, s15, s12
 8019de4:	ee27 7a22 	vmul.f32	s14, s14, s5
 8019de8:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8019dec:	ee35 5a21 	vadd.f32	s10, s10, s3
 8019df0:	ee75 5ac3 	vsub.f32	s11, s11, s6
 8019df4:	ee76 6a82 	vadd.f32	s13, s13, s4
 8019df8:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8019dfc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019e00:	ee36 7a47 	vsub.f32	s14, s12, s14
 8019e04:	ed42 6a02 	vstr	s13, [r2, #-8]
 8019e08:	ed42 4a01 	vstr	s9, [r2, #-4]
 8019e0c:	ed01 5a02 	vstr	s10, [r1, #-8]
 8019e10:	ed41 5a01 	vstr	s11, [r1, #-4]
 8019e14:	ed40 7a02 	vstr	s15, [r0, #-8]
 8019e18:	ed00 7a01 	vstr	s14, [r0, #-4]
 8019e1c:	d186      	bne.n	8019d2c <arm_radix4_butterfly_f32+0x44>
 8019e1e:	9b01      	ldr	r3, [sp, #4]
 8019e20:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019e24:	009b      	lsls	r3, r3, #2
 8019e26:	2a04      	cmp	r2, #4
 8019e28:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019e2a:	b29b      	uxth	r3, r3
 8019e2c:	9307      	str	r3, [sp, #28]
 8019e2e:	f240 80b5 	bls.w	8019f9c <arm_radix4_butterfly_f32+0x2b4>
 8019e32:	9807      	ldr	r0, [sp, #28]
 8019e34:	9208      	str	r2, [sp, #32]
 8019e36:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8019e3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8019e3c:	ea4f 029b 	mov.w	r2, fp, lsr #2
 8019e40:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8019e42:	00db      	lsls	r3, r3, #3
 8019e44:	46a0      	mov	r8, r4
 8019e46:	9202      	str	r2, [sp, #8]
 8019e48:	eb06 1c02 	add.w	ip, r6, r2, lsl #4
 8019e4c:	9306      	str	r3, [sp, #24]
 8019e4e:	00c3      	lsls	r3, r0, #3
 8019e50:	00d2      	lsls	r2, r2, #3
 8019e52:	46a6      	mov	lr, r4
 8019e54:	9305      	str	r3, [sp, #20]
 8019e56:	2700      	movs	r7, #0
 8019e58:	0103      	lsls	r3, r0, #4
 8019e5a:	9401      	str	r4, [sp, #4]
 8019e5c:	9203      	str	r2, [sp, #12]
 8019e5e:	9304      	str	r3, [sp, #16]
 8019e60:	9b01      	ldr	r3, [sp, #4]
 8019e62:	1d34      	adds	r4, r6, #4
 8019e64:	9a03      	ldr	r2, [sp, #12]
 8019e66:	4630      	mov	r0, r6
 8019e68:	ed13 0a01 	vldr	s0, [r3, #-4]
 8019e6c:	463d      	mov	r5, r7
 8019e6e:	1991      	adds	r1, r2, r6
 8019e70:	edd3 0a00 	vldr	s1, [r3]
 8019e74:	4462      	add	r2, ip
 8019e76:	ed1e 1a01 	vldr	s2, [lr, #-4]
 8019e7a:	edde 1a00 	vldr	s3, [lr]
 8019e7e:	4663      	mov	r3, ip
 8019e80:	ed18 2a01 	vldr	s4, [r8, #-4]
 8019e84:	edd8 2a00 	vldr	s5, [r8]
 8019e88:	ed14 7a01 	vldr	s14, [r4, #-4]
 8019e8c:	445d      	add	r5, fp
 8019e8e:	ed93 6a00 	vldr	s12, [r3]
 8019e92:	edd2 6a00 	vldr	s13, [r2]
 8019e96:	45aa      	cmp	sl, r5
 8019e98:	edd1 7a00 	vldr	s15, [r1]
 8019e9c:	ee77 3a06 	vadd.f32	s7, s14, s12
 8019ea0:	edd0 5a01 	vldr	s11, [r0, #4]
 8019ea4:	ee37 7a46 	vsub.f32	s14, s14, s12
 8019ea8:	ed91 5a01 	vldr	s10, [r1, #4]
 8019eac:	ee37 9aa6 	vadd.f32	s18, s15, s13
 8019eb0:	ed93 6a01 	vldr	s12, [r3, #4]
 8019eb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019eb8:	edd2 6a01 	vldr	s13, [r2, #4]
 8019ebc:	ee75 4a86 	vadd.f32	s9, s11, s12
 8019ec0:	ee75 8a26 	vadd.f32	s17, s10, s13
 8019ec4:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8019ec8:	ee35 5a66 	vsub.f32	s10, s10, s13
 8019ecc:	ee33 3ac9 	vsub.f32	s6, s7, s18
 8019ed0:	ee75 6ae7 	vsub.f32	s13, s11, s15
 8019ed4:	ee37 4a05 	vadd.f32	s8, s14, s10
 8019ed8:	ee34 6ae8 	vsub.f32	s12, s9, s17
 8019edc:	ee37 7a45 	vsub.f32	s14, s14, s10
 8019ee0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8019ee4:	ee61 aa03 	vmul.f32	s21, s2, s6
 8019ee8:	ee21 8a86 	vmul.f32	s16, s3, s12
 8019eec:	ee20 aa04 	vmul.f32	s20, s0, s8
 8019ef0:	ee20 5aa6 	vmul.f32	s10, s1, s13
 8019ef4:	ee62 9a07 	vmul.f32	s19, s4, s14
 8019ef8:	ee62 5aa7 	vmul.f32	s11, s5, s15
 8019efc:	ee21 3a83 	vmul.f32	s6, s3, s6
 8019f00:	ee21 6a06 	vmul.f32	s12, s2, s12
 8019f04:	ee20 4a84 	vmul.f32	s8, s1, s8
 8019f08:	ee60 6a26 	vmul.f32	s13, s0, s13
 8019f0c:	ee22 7a87 	vmul.f32	s14, s5, s14
 8019f10:	ee62 7a27 	vmul.f32	s15, s4, s15
 8019f14:	ee73 3a89 	vadd.f32	s7, s7, s18
 8019f18:	ee74 4aa8 	vadd.f32	s9, s9, s17
 8019f1c:	ee38 8a2a 	vadd.f32	s16, s16, s21
 8019f20:	ee36 6a43 	vsub.f32	s12, s12, s6
 8019f24:	ed44 3a01 	vstr	s7, [r4, #-4]
 8019f28:	ee35 5a0a 	vadd.f32	s10, s10, s20
 8019f2c:	edc0 4a01 	vstr	s9, [r0, #4]
 8019f30:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8019f34:	ed81 8a00 	vstr	s16, [r1]
 8019f38:	ee75 5aa9 	vadd.f32	s11, s11, s19
 8019f3c:	ed81 6a01 	vstr	s12, [r1, #4]
 8019f40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019f44:	ed83 5a00 	vstr	s10, [r3]
 8019f48:	edc3 6a01 	vstr	s13, [r3, #4]
 8019f4c:	444c      	add	r4, r9
 8019f4e:	edc2 5a00 	vstr	s11, [r2]
 8019f52:	4448      	add	r0, r9
 8019f54:	edc2 7a01 	vstr	s15, [r2, #4]
 8019f58:	4449      	add	r1, r9
 8019f5a:	444b      	add	r3, r9
 8019f5c:	444a      	add	r2, r9
 8019f5e:	d893      	bhi.n	8019e88 <arm_radix4_butterfly_f32+0x1a0>
 8019f60:	9b01      	ldr	r3, [sp, #4]
 8019f62:	3701      	adds	r7, #1
 8019f64:	9a05      	ldr	r2, [sp, #20]
 8019f66:	3608      	adds	r6, #8
 8019f68:	f10c 0c08 	add.w	ip, ip, #8
 8019f6c:	4413      	add	r3, r2
 8019f6e:	9301      	str	r3, [sp, #4]
 8019f70:	9b04      	ldr	r3, [sp, #16]
 8019f72:	449e      	add	lr, r3
 8019f74:	9b06      	ldr	r3, [sp, #24]
 8019f76:	4498      	add	r8, r3
 8019f78:	9b02      	ldr	r3, [sp, #8]
 8019f7a:	42bb      	cmp	r3, r7
 8019f7c:	f47f af70 	bne.w	8019e60 <arm_radix4_butterfly_f32+0x178>
 8019f80:	9a08      	ldr	r2, [sp, #32]
 8019f82:	469b      	mov	fp, r3
 8019f84:	9b07      	ldr	r3, [sp, #28]
 8019f86:	0892      	lsrs	r2, r2, #2
 8019f88:	009b      	lsls	r3, r3, #2
 8019f8a:	2a04      	cmp	r2, #4
 8019f8c:	9208      	str	r2, [sp, #32]
 8019f8e:	b29b      	uxth	r3, r3
 8019f90:	9307      	str	r3, [sp, #28]
 8019f92:	d903      	bls.n	8019f9c <arm_radix4_butterfly_f32+0x2b4>
 8019f94:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 8019f98:	4618      	mov	r0, r3
 8019f9a:	e74c      	b.n	8019e36 <arm_radix4_butterfly_f32+0x14e>
 8019f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019fa0:	3320      	adds	r3, #32
 8019fa2:	ed53 7a04 	vldr	s15, [r3, #-16]
 8019fa6:	3a01      	subs	r2, #1
 8019fa8:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 8019fac:	f103 0320 	add.w	r3, r3, #32
 8019fb0:	ed53 4a0a 	vldr	s9, [r3, #-40]	@ 0xffffffd8
 8019fb4:	ed53 5a09 	vldr	s11, [r3, #-36]	@ 0xffffffdc
 8019fb8:	ee37 5a27 	vadd.f32	s10, s14, s15
 8019fbc:	ed53 3a0b 	vldr	s7, [r3, #-44]	@ 0xffffffd4
 8019fc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019fc4:	ed53 6a0e 	vldr	s13, [r3, #-56]	@ 0xffffffc8
 8019fc8:	ed13 6a0d 	vldr	s12, [r3, #-52]	@ 0xffffffcc
 8019fcc:	ed53 7a0f 	vldr	s15, [r3, #-60]	@ 0xffffffc4
 8019fd0:	ee36 4aa4 	vadd.f32	s8, s13, s9
 8019fd4:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8019fd8:	ee76 4a65 	vsub.f32	s9, s12, s11
 8019fdc:	ee36 6a25 	vadd.f32	s12, s12, s11
 8019fe0:	ee77 5aa3 	vadd.f32	s11, s15, s7
 8019fe4:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8019fe8:	ee75 3a04 	vadd.f32	s7, s10, s8
 8019fec:	ee35 5a44 	vsub.f32	s10, s10, s8
 8019ff0:	ee37 4a24 	vadd.f32	s8, s14, s9
 8019ff4:	ee37 7a64 	vsub.f32	s14, s14, s9
 8019ff8:	ed43 3a10 	vstr	s7, [r3, #-64]	@ 0xffffffc0
 8019ffc:	ee75 4a86 	vadd.f32	s9, s11, s12
 801a000:	ed03 5a0e 	vstr	s10, [r3, #-56]	@ 0xffffffc8
 801a004:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801a008:	ed03 4a0c 	vstr	s8, [r3, #-48]	@ 0xffffffd0
 801a00c:	ee77 5ae6 	vsub.f32	s11, s15, s13
 801a010:	ed03 7a0a 	vstr	s14, [r3, #-40]	@ 0xffffffd8
 801a014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a018:	ed43 4a0f 	vstr	s9, [r3, #-60]	@ 0xffffffc4
 801a01c:	ed03 6a0d 	vstr	s12, [r3, #-52]	@ 0xffffffcc
 801a020:	ed43 5a0b 	vstr	s11, [r3, #-44]	@ 0xffffffd4
 801a024:	ed43 7a09 	vstr	s15, [r3, #-36]	@ 0xffffffdc
 801a028:	d1bb      	bne.n	8019fa2 <arm_radix4_butterfly_f32+0x2ba>
 801a02a:	b00d      	add	sp, #52	@ 0x34
 801a02c:	ecbd 8b06 	vpop	{d8-d10}
 801a030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a034 <arm_radix4_butterfly_inverse_f32>:
 801a034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a038:	468a      	mov	sl, r1
 801a03a:	1d11      	adds	r1, r2, #4
 801a03c:	461f      	mov	r7, r3
 801a03e:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
 801a042:	ea4f 029a 	mov.w	r2, sl, lsr #2
 801a046:	468c      	mov	ip, r1
 801a048:	460e      	mov	r6, r1
 801a04a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a04e:	4614      	mov	r4, r2
 801a050:	4665      	mov	r5, ip
 801a052:	ed2d 8b08 	vpush	{d8-d11}
 801a056:	b08d      	sub	sp, #52	@ 0x34
 801a058:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 801a05c:	46a3      	mov	fp, r4
 801a05e:	9202      	str	r2, [sp, #8]
 801a060:	0112      	lsls	r2, r2, #4
 801a062:	9301      	str	r3, [sp, #4]
 801a064:	4603      	mov	r3, r0
 801a066:	910a      	str	r1, [sp, #40]	@ 0x28
 801a068:	4410      	add	r0, r2
 801a06a:	ebc4 7144 	rsb	r1, r4, r4, lsl #29
 801a06e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a070:	4664      	mov	r4, ip
 801a072:	eb03 0809 	add.w	r8, r3, r9
 801a076:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801a07a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a07c:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 801a080:	440a      	add	r2, r1
 801a082:	00ff      	lsls	r7, r7, #3
 801a084:	ed91 7a00 	vldr	s14, [r1]
 801a088:	3308      	adds	r3, #8
 801a08a:	edd2 4a00 	vldr	s9, [r2]
 801a08e:	3108      	adds	r1, #8
 801a090:	ed53 7a02 	vldr	s15, [r3, #-8]
 801a094:	3008      	adds	r0, #8
 801a096:	ed50 6a02 	vldr	s13, [r0, #-8]
 801a09a:	ee37 3a24 	vadd.f32	s6, s14, s9
 801a09e:	ed10 2a01 	vldr	s4, [r0, #-4]
 801a0a2:	ee77 4a64 	vsub.f32	s9, s14, s9
 801a0a6:	edd2 2a01 	vldr	s5, [r2, #4]
 801a0aa:	ee37 5aa6 	vadd.f32	s10, s15, s13
 801a0ae:	ed13 7a01 	vldr	s14, [r3, #-4]
 801a0b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a0b6:	ed11 4a01 	vldr	s8, [r1, #-4]
 801a0ba:	3208      	adds	r2, #8
 801a0bc:	ee77 6a02 	vadd.f32	s13, s14, s4
 801a0c0:	ed54 3a01 	vldr	s7, [r4, #-4]
 801a0c4:	ee34 6a22 	vadd.f32	s12, s8, s5
 801a0c8:	edd4 5a00 	vldr	s11, [r4]
 801a0cc:	ee34 4a62 	vsub.f32	s8, s8, s5
 801a0d0:	4464      	add	r4, ip
 801a0d2:	ee37 7a42 	vsub.f32	s14, s14, s4
 801a0d6:	ee76 2a86 	vadd.f32	s5, s13, s12
 801a0da:	ee35 2a03 	vadd.f32	s4, s10, s6
 801a0de:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801a0e2:	ee35 5a43 	vsub.f32	s10, s10, s6
 801a0e6:	ed43 2a01 	vstr	s5, [r3, #-4]
 801a0ea:	ee37 6ac4 	vsub.f32	s12, s15, s8
 801a0ee:	ed03 2a02 	vstr	s4, [r3, #-8]
 801a0f2:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a0f6:	ed15 2a01 	vldr	s4, [r5, #-4]
 801a0fa:	ee34 4a87 	vadd.f32	s8, s9, s14
 801a0fe:	ed95 3a00 	vldr	s6, [r5]
 801a102:	ee37 7a64 	vsub.f32	s14, s14, s9
 801a106:	edd6 1a00 	vldr	s3, [r6]
 801a10a:	ed56 4a01 	vldr	s9, [r6, #-4]
 801a10e:	ee66 2a02 	vmul.f32	s5, s12, s4
 801a112:	ee26 6a03 	vmul.f32	s12, s12, s6
 801a116:	4598      	cmp	r8, r3
 801a118:	ee24 3a03 	vmul.f32	s6, s8, s6
 801a11c:	443d      	add	r5, r7
 801a11e:	ee24 4a02 	vmul.f32	s8, s8, s4
 801a122:	4476      	add	r6, lr
 801a124:	ee23 2a85 	vmul.f32	s4, s7, s10
 801a128:	ee63 3aa6 	vmul.f32	s7, s7, s13
 801a12c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801a130:	ee65 5a85 	vmul.f32	s11, s11, s10
 801a134:	ee27 5aa4 	vmul.f32	s10, s15, s9
 801a138:	ee67 4a24 	vmul.f32	s9, s14, s9
 801a13c:	ee67 7aa1 	vmul.f32	s15, s15, s3
 801a140:	ee27 7a21 	vmul.f32	s14, s14, s3
 801a144:	ee36 6a04 	vadd.f32	s12, s12, s8
 801a148:	ee32 3ac3 	vsub.f32	s6, s5, s6
 801a14c:	ee32 4a66 	vsub.f32	s8, s4, s13
 801a150:	ee35 7a47 	vsub.f32	s14, s10, s14
 801a154:	ee75 6aa3 	vadd.f32	s13, s11, s7
 801a158:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801a15c:	ed01 4a02 	vstr	s8, [r1, #-8]
 801a160:	ed41 6a01 	vstr	s13, [r1, #-4]
 801a164:	ed00 3a02 	vstr	s6, [r0, #-8]
 801a168:	ed00 6a01 	vstr	s12, [r0, #-4]
 801a16c:	ed02 7a02 	vstr	s14, [r2, #-8]
 801a170:	ed42 7a01 	vstr	s15, [r2, #-4]
 801a174:	d186      	bne.n	801a084 <arm_radix4_butterfly_inverse_f32+0x50>
 801a176:	9b01      	ldr	r3, [sp, #4]
 801a178:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a17c:	009b      	lsls	r3, r3, #2
 801a17e:	2a04      	cmp	r2, #4
 801a180:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a182:	b29b      	uxth	r3, r3
 801a184:	9307      	str	r3, [sp, #28]
 801a186:	f240 80b5 	bls.w	801a2f4 <arm_radix4_butterfly_inverse_f32+0x2c0>
 801a18a:	9807      	ldr	r0, [sp, #28]
 801a18c:	9208      	str	r2, [sp, #32]
 801a18e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801a192:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801a194:	ea4f 029b 	mov.w	r2, fp, lsr #2
 801a198:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801a19a:	00db      	lsls	r3, r3, #3
 801a19c:	46a0      	mov	r8, r4
 801a19e:	9202      	str	r2, [sp, #8]
 801a1a0:	eb06 1c02 	add.w	ip, r6, r2, lsl #4
 801a1a4:	9306      	str	r3, [sp, #24]
 801a1a6:	00c3      	lsls	r3, r0, #3
 801a1a8:	00d2      	lsls	r2, r2, #3
 801a1aa:	46a6      	mov	lr, r4
 801a1ac:	9305      	str	r3, [sp, #20]
 801a1ae:	2700      	movs	r7, #0
 801a1b0:	0103      	lsls	r3, r0, #4
 801a1b2:	9401      	str	r4, [sp, #4]
 801a1b4:	9203      	str	r2, [sp, #12]
 801a1b6:	9304      	str	r3, [sp, #16]
 801a1b8:	9b01      	ldr	r3, [sp, #4]
 801a1ba:	1d34      	adds	r4, r6, #4
 801a1bc:	9a03      	ldr	r2, [sp, #12]
 801a1be:	4630      	mov	r0, r6
 801a1c0:	ed13 1a01 	vldr	s2, [r3, #-4]
 801a1c4:	463d      	mov	r5, r7
 801a1c6:	1991      	adds	r1, r2, r6
 801a1c8:	edd3 1a00 	vldr	s3, [r3]
 801a1cc:	4462      	add	r2, ip
 801a1ce:	ed1e 2a01 	vldr	s4, [lr, #-4]
 801a1d2:	edde 2a00 	vldr	s5, [lr]
 801a1d6:	4663      	mov	r3, ip
 801a1d8:	ed18 3a01 	vldr	s6, [r8, #-4]
 801a1dc:	edd8 3a00 	vldr	s7, [r8]
 801a1e0:	ed54 7a01 	vldr	s15, [r4, #-4]
 801a1e4:	445d      	add	r5, fp
 801a1e6:	ed93 6a00 	vldr	s12, [r3]
 801a1ea:	edd2 6a00 	vldr	s13, [r2]
 801a1ee:	45aa      	cmp	sl, r5
 801a1f0:	edd1 5a00 	vldr	s11, [r1]
 801a1f4:	ee37 4a86 	vadd.f32	s8, s15, s12
 801a1f8:	ed90 7a01 	vldr	s14, [r0, #4]
 801a1fc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801a200:	ed91 5a01 	vldr	s10, [r1, #4]
 801a204:	ee35 9aa6 	vadd.f32	s18, s11, s13
 801a208:	ed93 6a01 	vldr	s12, [r3, #4]
 801a20c:	ee75 5ae6 	vsub.f32	s11, s11, s13
 801a210:	edd2 6a01 	vldr	s13, [r2, #4]
 801a214:	ee77 4a06 	vadd.f32	s9, s14, s12
 801a218:	ee75 9a26 	vadd.f32	s19, s10, s13
 801a21c:	ee37 7a46 	vsub.f32	s14, s14, s12
 801a220:	ee35 5a66 	vsub.f32	s10, s10, s13
 801a224:	ee34 6a49 	vsub.f32	s12, s8, s18
 801a228:	ee74 0ae9 	vsub.f32	s1, s9, s19
 801a22c:	ee77 6ac5 	vsub.f32	s13, s15, s10
 801a230:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a234:	ee35 5a87 	vadd.f32	s10, s11, s14
 801a238:	ee37 7a65 	vsub.f32	s14, s14, s11
 801a23c:	ee62 8a06 	vmul.f32	s17, s4, s12
 801a240:	ee22 baa0 	vmul.f32	s22, s5, s1
 801a244:	ee21 8a26 	vmul.f32	s16, s2, s13
 801a248:	ee61 aa85 	vmul.f32	s21, s3, s10
 801a24c:	ee63 5a27 	vmul.f32	s11, s6, s15
 801a250:	ee23 aa87 	vmul.f32	s20, s7, s14
 801a254:	ee34 4a09 	vadd.f32	s8, s8, s18
 801a258:	ee22 6a86 	vmul.f32	s12, s5, s12
 801a25c:	ee62 0a20 	vmul.f32	s1, s4, s1
 801a260:	ee61 6aa6 	vmul.f32	s13, s3, s13
 801a264:	ed04 4a01 	vstr	s8, [r4, #-4]
 801a268:	ee21 5a05 	vmul.f32	s10, s2, s10
 801a26c:	444c      	add	r4, r9
 801a26e:	ee63 7aa7 	vmul.f32	s15, s7, s15
 801a272:	ee23 7a07 	vmul.f32	s14, s6, s14
 801a276:	ee74 4aa9 	vadd.f32	s9, s9, s19
 801a27a:	ee78 8acb 	vsub.f32	s17, s17, s22
 801a27e:	ee36 6a20 	vadd.f32	s12, s12, s1
 801a282:	ee38 4a6a 	vsub.f32	s8, s16, s21
 801a286:	edc0 4a01 	vstr	s9, [r0, #4]
 801a28a:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a28e:	edc1 8a00 	vstr	s17, [r1]
 801a292:	ee75 5aca 	vsub.f32	s11, s11, s20
 801a296:	ed81 6a01 	vstr	s12, [r1, #4]
 801a29a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a29e:	ed83 4a00 	vstr	s8, [r3]
 801a2a2:	edc3 6a01 	vstr	s13, [r3, #4]
 801a2a6:	4448      	add	r0, r9
 801a2a8:	edc2 5a00 	vstr	s11, [r2]
 801a2ac:	4449      	add	r1, r9
 801a2ae:	edc2 7a01 	vstr	s15, [r2, #4]
 801a2b2:	444b      	add	r3, r9
 801a2b4:	444a      	add	r2, r9
 801a2b6:	d893      	bhi.n	801a1e0 <arm_radix4_butterfly_inverse_f32+0x1ac>
 801a2b8:	9b01      	ldr	r3, [sp, #4]
 801a2ba:	3701      	adds	r7, #1
 801a2bc:	9a05      	ldr	r2, [sp, #20]
 801a2be:	3608      	adds	r6, #8
 801a2c0:	f10c 0c08 	add.w	ip, ip, #8
 801a2c4:	4413      	add	r3, r2
 801a2c6:	9301      	str	r3, [sp, #4]
 801a2c8:	9b04      	ldr	r3, [sp, #16]
 801a2ca:	449e      	add	lr, r3
 801a2cc:	9b06      	ldr	r3, [sp, #24]
 801a2ce:	4498      	add	r8, r3
 801a2d0:	9b02      	ldr	r3, [sp, #8]
 801a2d2:	42bb      	cmp	r3, r7
 801a2d4:	f47f af70 	bne.w	801a1b8 <arm_radix4_butterfly_inverse_f32+0x184>
 801a2d8:	9a08      	ldr	r2, [sp, #32]
 801a2da:	469b      	mov	fp, r3
 801a2dc:	9b07      	ldr	r3, [sp, #28]
 801a2de:	0892      	lsrs	r2, r2, #2
 801a2e0:	009b      	lsls	r3, r3, #2
 801a2e2:	2a04      	cmp	r2, #4
 801a2e4:	9208      	str	r2, [sp, #32]
 801a2e6:	b29b      	uxth	r3, r3
 801a2e8:	9307      	str	r3, [sp, #28]
 801a2ea:	d903      	bls.n	801a2f4 <arm_radix4_butterfly_inverse_f32+0x2c0>
 801a2ec:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 801a2f0:	4618      	mov	r0, r3
 801a2f2:	e74c      	b.n	801a18e <arm_radix4_butterfly_inverse_f32+0x15a>
 801a2f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a2f8:	3320      	adds	r3, #32
 801a2fa:	ed53 7a04 	vldr	s15, [r3, #-16]
 801a2fe:	3a01      	subs	r2, #1
 801a300:	ed53 4a02 	vldr	s9, [r3, #-8]
 801a304:	f103 0320 	add.w	r3, r3, #32
 801a308:	ed13 7a10 	vldr	s14, [r3, #-64]	@ 0xffffffc0
 801a30c:	ed53 5a0e 	vldr	s11, [r3, #-56]	@ 0xffffffc8
 801a310:	ee37 6a27 	vadd.f32	s12, s14, s15
 801a314:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 801a318:	ee35 4aa4 	vadd.f32	s8, s11, s9
 801a31c:	ed53 3a0b 	vldr	s7, [r3, #-44]	@ 0xffffffd4
 801a320:	ed13 5a09 	vldr	s10, [r3, #-36]	@ 0xffffffdc
 801a324:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a328:	ed53 7a0f 	vldr	s15, [r3, #-60]	@ 0xffffffc4
 801a32c:	ee75 5ae4 	vsub.f32	s11, s11, s9
 801a330:	ee76 4ac5 	vsub.f32	s9, s13, s10
 801a334:	ee36 5a85 	vadd.f32	s10, s13, s10
 801a338:	ee77 6aa3 	vadd.f32	s13, s15, s7
 801a33c:	ee77 7ae3 	vsub.f32	s15, s15, s7
 801a340:	ee76 3a04 	vadd.f32	s7, s12, s8
 801a344:	ee36 6a44 	vsub.f32	s12, s12, s8
 801a348:	ee37 4a64 	vsub.f32	s8, s14, s9
 801a34c:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a350:	ee26 6a00 	vmul.f32	s12, s12, s0
 801a354:	ee76 4a85 	vadd.f32	s9, s13, s10
 801a358:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801a35c:	ee37 5aa5 	vadd.f32	s10, s15, s11
 801a360:	ed03 6a0e 	vstr	s12, [r3, #-56]	@ 0xffffffc8
 801a364:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801a368:	ee63 5a80 	vmul.f32	s11, s7, s0
 801a36c:	ee24 4a00 	vmul.f32	s8, s8, s0
 801a370:	ee27 7a00 	vmul.f32	s14, s14, s0
 801a374:	ed43 5a10 	vstr	s11, [r3, #-64]	@ 0xffffffc0
 801a378:	ee66 6a80 	vmul.f32	s13, s13, s0
 801a37c:	ee64 5a80 	vmul.f32	s11, s9, s0
 801a380:	ed03 4a0c 	vstr	s8, [r3, #-48]	@ 0xffffffd0
 801a384:	ee25 6a00 	vmul.f32	s12, s10, s0
 801a388:	ed03 7a0a 	vstr	s14, [r3, #-40]	@ 0xffffffd8
 801a38c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a390:	ed43 6a0d 	vstr	s13, [r3, #-52]	@ 0xffffffcc
 801a394:	ed43 5a0f 	vstr	s11, [r3, #-60]	@ 0xffffffc4
 801a398:	ed03 6a0b 	vstr	s12, [r3, #-44]	@ 0xffffffd4
 801a39c:	ed43 7a09 	vstr	s15, [r3, #-36]	@ 0xffffffdc
 801a3a0:	d1ab      	bne.n	801a2fa <arm_radix4_butterfly_inverse_f32+0x2c6>
 801a3a2:	b00d      	add	sp, #52	@ 0x34
 801a3a4:	ecbd 8b08 	vpop	{d8-d11}
 801a3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a3ac <arm_bitreversal_f32>:
 801a3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3b0:	0052      	lsls	r2, r2, #1
 801a3b2:	b085      	sub	sp, #20
 801a3b4:	084c      	lsrs	r4, r1, #1
 801a3b6:	2100      	movs	r1, #0
 801a3b8:	9201      	str	r2, [sp, #4]
 801a3ba:	1ea2      	subs	r2, r4, #2
 801a3bc:	9402      	str	r4, [sp, #8]
 801a3be:	f104 0e01 	add.w	lr, r4, #1
 801a3c2:	460c      	mov	r4, r1
 801a3c4:	9203      	str	r2, [sp, #12]
 801a3c6:	460a      	mov	r2, r1
 801a3c8:	1c4e      	adds	r6, r1, #1
 801a3ca:	9902      	ldr	r1, [sp, #8]
 801a3cc:	3402      	adds	r4, #2
 801a3ce:	440a      	add	r2, r1
 801a3d0:	00f6      	lsls	r6, r6, #3
 801a3d2:	b2a4      	uxth	r4, r4
 801a3d4:	00d2      	lsls	r2, r2, #3
 801a3d6:	1985      	adds	r5, r0, r6
 801a3d8:	3604      	adds	r6, #4
 801a3da:	1881      	adds	r1, r0, r2
 801a3dc:	f8d5 c000 	ldr.w	ip, [r5]
 801a3e0:	3204      	adds	r2, #4
 801a3e2:	4406      	add	r6, r0
 801a3e4:	680f      	ldr	r7, [r1, #0]
 801a3e6:	4402      	add	r2, r0
 801a3e8:	602f      	str	r7, [r5, #0]
 801a3ea:	eb04 050e 	add.w	r5, r4, lr
 801a3ee:	f8c1 c000 	str.w	ip, [r1]
 801a3f2:	00e7      	lsls	r7, r4, #3
 801a3f4:	00ed      	lsls	r5, r5, #3
 801a3f6:	f8d2 a000 	ldr.w	sl, [r2]
 801a3fa:	f8d6 9000 	ldr.w	r9, [r6]
 801a3fe:	eb00 0c07 	add.w	ip, r0, r7
 801a402:	eb00 0805 	add.w	r8, r0, r5
 801a406:	3504      	adds	r5, #4
 801a408:	f8c6 a000 	str.w	sl, [r6]
 801a40c:	3704      	adds	r7, #4
 801a40e:	1946      	adds	r6, r0, r5
 801a410:	9d01      	ldr	r5, [sp, #4]
 801a412:	f8c2 9000 	str.w	r9, [r2]
 801a416:	4621      	mov	r1, r4
 801a418:	881a      	ldrh	r2, [r3, #0]
 801a41a:	442b      	add	r3, r5
 801a41c:	9d03      	ldr	r5, [sp, #12]
 801a41e:	4407      	add	r7, r0
 801a420:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801a424:	42ac      	cmp	r4, r5
 801a426:	eb02 050e 	add.w	r5, r2, lr
 801a42a:	d82b      	bhi.n	801a484 <arm_bitreversal_f32+0xd8>
 801a42c:	00ed      	lsls	r5, r5, #3
 801a42e:	eb00 0a09 	add.w	sl, r0, r9
 801a432:	42a2      	cmp	r2, r4
 801a434:	f109 0904 	add.w	r9, r9, #4
 801a438:	eb00 0b05 	add.w	fp, r0, r5
 801a43c:	f105 0504 	add.w	r5, r5, #4
 801a440:	4481      	add	r9, r0
 801a442:	d9c1      	bls.n	801a3c8 <arm_bitreversal_f32+0x1c>
 801a444:	eddc 7a00 	vldr	s15, [ip]
 801a448:	4405      	add	r5, r0
 801a44a:	ed9a 7a00 	vldr	s14, [sl]
 801a44e:	ed8c 7a00 	vstr	s14, [ip]
 801a452:	edca 7a00 	vstr	s15, [sl]
 801a456:	f8d7 c000 	ldr.w	ip, [r7]
 801a45a:	f8d9 a000 	ldr.w	sl, [r9]
 801a45e:	f8c7 a000 	str.w	sl, [r7]
 801a462:	f8c9 c000 	str.w	ip, [r9]
 801a466:	f8d8 7000 	ldr.w	r7, [r8]
 801a46a:	f8db c000 	ldr.w	ip, [fp]
 801a46e:	f8c8 c000 	str.w	ip, [r8]
 801a472:	f8cb 7000 	str.w	r7, [fp]
 801a476:	6837      	ldr	r7, [r6, #0]
 801a478:	f8d5 c000 	ldr.w	ip, [r5]
 801a47c:	f8c6 c000 	str.w	ip, [r6]
 801a480:	602f      	str	r7, [r5, #0]
 801a482:	e7a1      	b.n	801a3c8 <arm_bitreversal_f32+0x1c>
 801a484:	b005      	add	sp, #20
 801a486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a48a:	bf00      	nop

0801a48c <ai_buffer_get_size>:
 801a48c:	b378      	cbz	r0, 801a4ee <ai_buffer_get_size+0x62>
 801a48e:	b410      	push	{r4}
 801a490:	6803      	ldr	r3, [r0, #0]
 801a492:	4a17      	ldr	r2, [pc, #92]	@ (801a4f0 <ai_buffer_get_size+0x64>)
 801a494:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 801a498:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801a49c:	4293      	cmp	r3, r2
 801a49e:	d01e      	beq.n	801a4de <ai_buffer_get_size+0x52>
 801a4a0:	6984      	ldr	r4, [r0, #24]
 801a4a2:	6862      	ldr	r2, [r4, #4]
 801a4a4:	7d03      	ldrb	r3, [r0, #20]
 801a4a6:	6941      	ldr	r1, [r0, #20]
 801a4a8:	f1a3 0301 	sub.w	r3, r3, #1
 801a4ac:	fab3 f383 	clz	r3, r3
 801a4b0:	095b      	lsrs	r3, r3, #5
 801a4b2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 801a4b6:	f3c1 2017 	ubfx	r0, r1, #8, #24
 801a4ba:	da0b      	bge.n	801a4d4 <ai_buffer_get_size+0x48>
 801a4bc:	2b01      	cmp	r3, #1
 801a4be:	d102      	bne.n	801a4c6 <ai_buffer_get_size+0x3a>
 801a4c0:	2802      	cmp	r0, #2
 801a4c2:	d007      	beq.n	801a4d4 <ai_buffer_get_size+0x48>
 801a4c4:	2302      	movs	r3, #2
 801a4c6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 801a4ca:	3301      	adds	r3, #1
 801a4cc:	4298      	cmp	r0, r3
 801a4ce:	fb01 f202 	mul.w	r2, r1, r2
 801a4d2:	d1f3      	bne.n	801a4bc <ai_buffer_get_size+0x30>
 801a4d4:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801a4d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a4dc:	4770      	bx	lr
 801a4de:	2900      	cmp	r1, #0
 801a4e0:	d0de      	beq.n	801a4a0 <ai_buffer_get_size+0x14>
 801a4e2:	6984      	ldr	r4, [r0, #24]
 801a4e4:	6863      	ldr	r3, [r4, #4]
 801a4e6:	331f      	adds	r3, #31
 801a4e8:	f023 021f 	bic.w	r2, r3, #31
 801a4ec:	e7da      	b.n	801a4a4 <ai_buffer_get_size+0x18>
 801a4ee:	4770      	bx	lr
 801a4f0:	000400c0 	.word	0x000400c0

0801a4f4 <ai_buffer_array_sane>:
 801a4f4:	b138      	cbz	r0, 801a506 <ai_buffer_array_sane+0x12>
 801a4f6:	6843      	ldr	r3, [r0, #4]
 801a4f8:	b123      	cbz	r3, 801a504 <ai_buffer_array_sane+0x10>
 801a4fa:	8840      	ldrh	r0, [r0, #2]
 801a4fc:	3800      	subs	r0, #0
 801a4fe:	bf18      	it	ne
 801a500:	2001      	movne	r0, #1
 801a502:	4770      	bx	lr
 801a504:	4618      	mov	r0, r3
 801a506:	4770      	bx	lr

0801a508 <ai_buffer_array_item_set_address>:
 801a508:	b150      	cbz	r0, 801a520 <ai_buffer_array_item_set_address+0x18>
 801a50a:	6843      	ldr	r3, [r0, #4]
 801a50c:	b14b      	cbz	r3, 801a522 <ai_buffer_array_item_set_address+0x1a>
 801a50e:	8840      	ldrh	r0, [r0, #2]
 801a510:	b900      	cbnz	r0, 801a514 <ai_buffer_array_item_set_address+0xc>
 801a512:	4770      	bx	lr
 801a514:	2001      	movs	r0, #1
 801a516:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801a51a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801a51e:	604a      	str	r2, [r1, #4]
 801a520:	4770      	bx	lr
 801a522:	4618      	mov	r0, r3
 801a524:	4770      	bx	lr
 801a526:	bf00      	nop

0801a528 <_ai_platform_acquire_crc>:
 801a528:	2001      	movs	r0, #1
 801a52a:	4770      	bx	lr

0801a52c <_ai_platform_release_crc>:
 801a52c:	4770      	bx	lr
 801a52e:	bf00      	nop

0801a530 <ai_platform_get_weights_map>:
 801a530:	2a00      	cmp	r2, #0
 801a532:	d037      	beq.n	801a5a4 <ai_platform_get_weights_map+0x74>
 801a534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a536:	4604      	mov	r4, r0
 801a538:	b1a0      	cbz	r0, 801a564 <ai_platform_get_weights_map+0x34>
 801a53a:	460f      	mov	r7, r1
 801a53c:	b191      	cbz	r1, 801a564 <ai_platform_get_weights_map+0x34>
 801a53e:	4b25      	ldr	r3, [pc, #148]	@ (801a5d4 <ai_platform_get_weights_map+0xa4>)
 801a540:	6810      	ldr	r0, [r2, #0]
 801a542:	4615      	mov	r5, r2
 801a544:	4298      	cmp	r0, r3
 801a546:	d00f      	beq.n	801a568 <ai_platform_get_weights_map+0x38>
 801a548:	6855      	ldr	r5, [r2, #4]
 801a54a:	b15d      	cbz	r5, 801a564 <ai_platform_get_weights_map+0x34>
 801a54c:	682e      	ldr	r6, [r5, #0]
 801a54e:	429e      	cmp	r6, r3
 801a550:	d02a      	beq.n	801a5a8 <ai_platform_get_weights_map+0x78>
 801a552:	f1a1 0001 	sub.w	r0, r1, #1
 801a556:	fab0 f080 	clz	r0, r0
 801a55a:	6025      	str	r5, [r4, #0]
 801a55c:	0940      	lsrs	r0, r0, #5
 801a55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a560:	42a7      	cmp	r7, r4
 801a562:	d034      	beq.n	801a5ce <ai_platform_get_weights_map+0x9e>
 801a564:	2000      	movs	r0, #0
 801a566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a568:	1d10      	adds	r0, r2, #4
 801a56a:	f7ff ffc3 	bl	801a4f4 <ai_buffer_array_sane>
 801a56e:	2800      	cmp	r0, #0
 801a570:	d0f8      	beq.n	801a564 <ai_platform_get_weights_map+0x34>
 801a572:	88eb      	ldrh	r3, [r5, #6]
 801a574:	429f      	cmp	r7, r3
 801a576:	d1f5      	bne.n	801a564 <ai_platform_get_weights_map+0x34>
 801a578:	f04f 0e00 	mov.w	lr, #0
 801a57c:	4670      	mov	r0, lr
 801a57e:	1f23      	subs	r3, r4, #4
 801a580:	68aa      	ldr	r2, [r5, #8]
 801a582:	eb02 0c0e 	add.w	ip, r2, lr
 801a586:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801a58a:	f10e 0e1c 	add.w	lr, lr, #28
 801a58e:	b124      	cbz	r4, 801a59a <ai_platform_get_weights_map+0x6a>
 801a590:	3001      	adds	r0, #1
 801a592:	4287      	cmp	r7, r0
 801a594:	f843 4f04 	str.w	r4, [r3, #4]!
 801a598:	d1f2      	bne.n	801a580 <ai_platform_get_weights_map+0x50>
 801a59a:	1a38      	subs	r0, r7, r0
 801a59c:	fab0 f080 	clz	r0, r0
 801a5a0:	0940      	lsrs	r0, r0, #5
 801a5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5a4:	2000      	movs	r0, #0
 801a5a6:	4770      	bx	lr
 801a5a8:	1f23      	subs	r3, r4, #4
 801a5aa:	4628      	mov	r0, r5
 801a5ac:	2400      	movs	r4, #0
 801a5ae:	e000      	b.n	801a5b2 <ai_platform_get_weights_map+0x82>
 801a5b0:	4614      	mov	r4, r2
 801a5b2:	f850 2f04 	ldr.w	r2, [r0, #4]!
 801a5b6:	42b2      	cmp	r2, r6
 801a5b8:	d0d2      	beq.n	801a560 <ai_platform_get_weights_map+0x30>
 801a5ba:	f843 2f04 	str.w	r2, [r3, #4]!
 801a5be:	1c62      	adds	r2, r4, #1
 801a5c0:	4297      	cmp	r7, r2
 801a5c2:	d1f5      	bne.n	801a5b0 <ai_platform_get_weights_map+0x80>
 801a5c4:	3402      	adds	r4, #2
 801a5c6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801a5ca:	42b3      	cmp	r3, r6
 801a5cc:	d1ca      	bne.n	801a564 <ai_platform_get_weights_map+0x34>
 801a5ce:	2001      	movs	r0, #1
 801a5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5d2:	bf00      	nop
 801a5d4:	a1facade 	.word	0xa1facade

0801a5d8 <ai_platform_get_activations_map>:
 801a5d8:	2a00      	cmp	r2, #0
 801a5da:	d038      	beq.n	801a64e <ai_platform_get_activations_map+0x76>
 801a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5de:	4604      	mov	r4, r0
 801a5e0:	b1a0      	cbz	r0, 801a60c <ai_platform_get_activations_map+0x34>
 801a5e2:	460f      	mov	r7, r1
 801a5e4:	b191      	cbz	r1, 801a60c <ai_platform_get_activations_map+0x34>
 801a5e6:	4b25      	ldr	r3, [pc, #148]	@ (801a67c <ai_platform_get_activations_map+0xa4>)
 801a5e8:	6810      	ldr	r0, [r2, #0]
 801a5ea:	4615      	mov	r5, r2
 801a5ec:	4298      	cmp	r0, r3
 801a5ee:	d00f      	beq.n	801a610 <ai_platform_get_activations_map+0x38>
 801a5f0:	6a15      	ldr	r5, [r2, #32]
 801a5f2:	b15d      	cbz	r5, 801a60c <ai_platform_get_activations_map+0x34>
 801a5f4:	682e      	ldr	r6, [r5, #0]
 801a5f6:	429e      	cmp	r6, r3
 801a5f8:	d02b      	beq.n	801a652 <ai_platform_get_activations_map+0x7a>
 801a5fa:	f1a1 0001 	sub.w	r0, r1, #1
 801a5fe:	fab0 f080 	clz	r0, r0
 801a602:	6025      	str	r5, [r4, #0]
 801a604:	0940      	lsrs	r0, r0, #5
 801a606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a608:	42a7      	cmp	r7, r4
 801a60a:	d035      	beq.n	801a678 <ai_platform_get_activations_map+0xa0>
 801a60c:	2000      	movs	r0, #0
 801a60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a610:	f102 000c 	add.w	r0, r2, #12
 801a614:	f7ff ff6e 	bl	801a4f4 <ai_buffer_array_sane>
 801a618:	2800      	cmp	r0, #0
 801a61a:	d0f7      	beq.n	801a60c <ai_platform_get_activations_map+0x34>
 801a61c:	89eb      	ldrh	r3, [r5, #14]
 801a61e:	429f      	cmp	r7, r3
 801a620:	d1f4      	bne.n	801a60c <ai_platform_get_activations_map+0x34>
 801a622:	f04f 0e00 	mov.w	lr, #0
 801a626:	4670      	mov	r0, lr
 801a628:	1f23      	subs	r3, r4, #4
 801a62a:	692a      	ldr	r2, [r5, #16]
 801a62c:	eb02 0c0e 	add.w	ip, r2, lr
 801a630:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801a634:	f10e 0e1c 	add.w	lr, lr, #28
 801a638:	b124      	cbz	r4, 801a644 <ai_platform_get_activations_map+0x6c>
 801a63a:	3001      	adds	r0, #1
 801a63c:	4287      	cmp	r7, r0
 801a63e:	f843 4f04 	str.w	r4, [r3, #4]!
 801a642:	d1f2      	bne.n	801a62a <ai_platform_get_activations_map+0x52>
 801a644:	1a38      	subs	r0, r7, r0
 801a646:	fab0 f080 	clz	r0, r0
 801a64a:	0940      	lsrs	r0, r0, #5
 801a64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a64e:	2000      	movs	r0, #0
 801a650:	4770      	bx	lr
 801a652:	1f23      	subs	r3, r4, #4
 801a654:	4628      	mov	r0, r5
 801a656:	2400      	movs	r4, #0
 801a658:	e000      	b.n	801a65c <ai_platform_get_activations_map+0x84>
 801a65a:	4614      	mov	r4, r2
 801a65c:	f850 2f04 	ldr.w	r2, [r0, #4]!
 801a660:	42b2      	cmp	r2, r6
 801a662:	d0d1      	beq.n	801a608 <ai_platform_get_activations_map+0x30>
 801a664:	f843 2f04 	str.w	r2, [r3, #4]!
 801a668:	1c62      	adds	r2, r4, #1
 801a66a:	4297      	cmp	r7, r2
 801a66c:	d1f5      	bne.n	801a65a <ai_platform_get_activations_map+0x82>
 801a66e:	3402      	adds	r4, #2
 801a670:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801a674:	42b3      	cmp	r3, r6
 801a676:	d1c9      	bne.n	801a60c <ai_platform_get_activations_map+0x34>
 801a678:	2001      	movs	r0, #1
 801a67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a67c:	a1facade 	.word	0xa1facade

0801a680 <ai_platform_bind_network_params>:
 801a680:	b1a0      	cbz	r0, 801a6ac <ai_platform_bind_network_params+0x2c>
 801a682:	b1b1      	cbz	r1, 801a6b2 <ai_platform_bind_network_params+0x32>
 801a684:	b1c2      	cbz	r2, 801a6b8 <ai_platform_bind_network_params+0x38>
 801a686:	4603      	mov	r3, r0
 801a688:	f04f 0c01 	mov.w	ip, #1
 801a68c:	b500      	push	{lr}
 801a68e:	480c      	ldr	r0, [pc, #48]	@ (801a6c0 <ai_platform_bind_network_params+0x40>)
 801a690:	f103 0e0c 	add.w	lr, r3, #12
 801a694:	f843 0b04 	str.w	r0, [r3], #4
 801a698:	c903      	ldmia	r1, {r0, r1}
 801a69a:	e883 0003 	stmia.w	r3, {r0, r1}
 801a69e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a6a2:	e88e 0003 	stmia.w	lr, {r0, r1}
 801a6a6:	4660      	mov	r0, ip
 801a6a8:	f85d fb04 	ldr.w	pc, [sp], #4
 801a6ac:	4684      	mov	ip, r0
 801a6ae:	4660      	mov	r0, ip
 801a6b0:	4770      	bx	lr
 801a6b2:	468c      	mov	ip, r1
 801a6b4:	4660      	mov	r0, ip
 801a6b6:	4770      	bx	lr
 801a6b8:	4694      	mov	ip, r2
 801a6ba:	4660      	mov	r0, ip
 801a6bc:	4770      	bx	lr
 801a6be:	bf00      	nop
 801a6c0:	a1facade 	.word	0xa1facade

0801a6c4 <ai_platform_network_get_error>:
 801a6c4:	b510      	push	{r4, lr}
 801a6c6:	b1e8      	cbz	r0, 801a704 <ai_platform_network_get_error+0x40>
 801a6c8:	4b3b      	ldr	r3, [pc, #236]	@ (801a7b8 <ai_platform_network_get_error+0xf4>)
 801a6ca:	6802      	ldr	r2, [r0, #0]
 801a6cc:	4604      	mov	r4, r0
 801a6ce:	429a      	cmp	r2, r3
 801a6d0:	d118      	bne.n	801a704 <ai_platform_network_get_error+0x40>
 801a6d2:	f7ff ff29 	bl	801a528 <_ai_platform_acquire_crc>
 801a6d6:	4b39      	ldr	r3, [pc, #228]	@ (801a7bc <ai_platform_network_get_error+0xf8>)
 801a6d8:	f020 5280 	bic.w	r2, r0, #268435456	@ 0x10000000
 801a6dc:	429a      	cmp	r2, r3
 801a6de:	d038      	beq.n	801a752 <ai_platform_network_get_error+0x8e>
 801a6e0:	2218      	movs	r2, #24
 801a6e2:	609a      	str	r2, [r3, #8]
 801a6e4:	689a      	ldr	r2, [r3, #8]
 801a6e6:	2a18      	cmp	r2, #24
 801a6e8:	d051      	beq.n	801a78e <ai_platform_network_get_error+0xca>
 801a6ea:	2301      	movs	r3, #1
 801a6ec:	4a34      	ldr	r2, [pc, #208]	@ (801a7c0 <ai_platform_network_get_error+0xfc>)
 801a6ee:	6093      	str	r3, [r2, #8]
 801a6f0:	6893      	ldr	r3, [r2, #8]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d1fc      	bne.n	801a6f0 <ai_platform_network_get_error+0x2c>
 801a6f6:	4933      	ldr	r1, [pc, #204]	@ (801a7c4 <ai_platform_network_get_error+0x100>)
 801a6f8:	4b33      	ldr	r3, [pc, #204]	@ (801a7c8 <ai_platform_network_get_error+0x104>)
 801a6fa:	6011      	str	r1, [r2, #0]
 801a6fc:	6812      	ldr	r2, [r2, #0]
 801a6fe:	429a      	cmp	r2, r3
 801a700:	d050      	beq.n	801a7a4 <ai_platform_network_get_error+0xe0>
 801a702:	e7fe      	b.n	801a702 <ai_platform_network_get_error+0x3e>
 801a704:	f7ff ff10 	bl	801a528 <_ai_platform_acquire_crc>
 801a708:	4b2c      	ldr	r3, [pc, #176]	@ (801a7bc <ai_platform_network_get_error+0xf8>)
 801a70a:	f020 5280 	bic.w	r2, r0, #268435456	@ 0x10000000
 801a70e:	429a      	cmp	r2, r3
 801a710:	d011      	beq.n	801a736 <ai_platform_network_get_error+0x72>
 801a712:	2218      	movs	r2, #24
 801a714:	609a      	str	r2, [r3, #8]
 801a716:	689a      	ldr	r2, [r3, #8]
 801a718:	2a18      	cmp	r2, #24
 801a71a:	d028      	beq.n	801a76e <ai_platform_network_get_error+0xaa>
 801a71c:	2301      	movs	r3, #1
 801a71e:	4a28      	ldr	r2, [pc, #160]	@ (801a7c0 <ai_platform_network_get_error+0xfc>)
 801a720:	6093      	str	r3, [r2, #8]
 801a722:	6893      	ldr	r3, [r2, #8]
 801a724:	2b00      	cmp	r3, #0
 801a726:	d1fc      	bne.n	801a722 <ai_platform_network_get_error+0x5e>
 801a728:	4926      	ldr	r1, [pc, #152]	@ (801a7c4 <ai_platform_network_get_error+0x100>)
 801a72a:	4b27      	ldr	r3, [pc, #156]	@ (801a7c8 <ai_platform_network_get_error+0x104>)
 801a72c:	6011      	str	r1, [r2, #0]
 801a72e:	6812      	ldr	r2, [r2, #0]
 801a730:	429a      	cmp	r2, r3
 801a732:	d027      	beq.n	801a784 <ai_platform_network_get_error+0xc0>
 801a734:	e7fe      	b.n	801a734 <ai_platform_network_get_error+0x70>
 801a736:	2301      	movs	r3, #1
 801a738:	f100 0208 	add.w	r2, r0, #8
 801a73c:	6083      	str	r3, [r0, #8]
 801a73e:	6813      	ldr	r3, [r2, #0]
 801a740:	2b00      	cmp	r3, #0
 801a742:	d1fc      	bne.n	801a73e <ai_platform_network_get_error+0x7a>
 801a744:	4a1f      	ldr	r2, [pc, #124]	@ (801a7c4 <ai_platform_network_get_error+0x100>)
 801a746:	4b20      	ldr	r3, [pc, #128]	@ (801a7c8 <ai_platform_network_get_error+0x104>)
 801a748:	6002      	str	r2, [r0, #0]
 801a74a:	6802      	ldr	r2, [r0, #0]
 801a74c:	429a      	cmp	r2, r3
 801a74e:	d019      	beq.n	801a784 <ai_platform_network_get_error+0xc0>
 801a750:	e7fe      	b.n	801a750 <ai_platform_network_get_error+0x8c>
 801a752:	2301      	movs	r3, #1
 801a754:	f100 0208 	add.w	r2, r0, #8
 801a758:	6083      	str	r3, [r0, #8]
 801a75a:	6813      	ldr	r3, [r2, #0]
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	d1fc      	bne.n	801a75a <ai_platform_network_get_error+0x96>
 801a760:	4a18      	ldr	r2, [pc, #96]	@ (801a7c4 <ai_platform_network_get_error+0x100>)
 801a762:	4b19      	ldr	r3, [pc, #100]	@ (801a7c8 <ai_platform_network_get_error+0x104>)
 801a764:	6002      	str	r2, [r0, #0]
 801a766:	6802      	ldr	r2, [r0, #0]
 801a768:	429a      	cmp	r2, r3
 801a76a:	d01b      	beq.n	801a7a4 <ai_platform_network_get_error+0xe0>
 801a76c:	e7fe      	b.n	801a76c <ai_platform_network_get_error+0xa8>
 801a76e:	2201      	movs	r2, #1
 801a770:	609a      	str	r2, [r3, #8]
 801a772:	689a      	ldr	r2, [r3, #8]
 801a774:	2a00      	cmp	r2, #0
 801a776:	d1fc      	bne.n	801a772 <ai_platform_network_get_error+0xae>
 801a778:	4912      	ldr	r1, [pc, #72]	@ (801a7c4 <ai_platform_network_get_error+0x100>)
 801a77a:	4a13      	ldr	r2, [pc, #76]	@ (801a7c8 <ai_platform_network_get_error+0x104>)
 801a77c:	6019      	str	r1, [r3, #0]
 801a77e:	681b      	ldr	r3, [r3, #0]
 801a780:	4293      	cmp	r3, r2
 801a782:	d117      	bne.n	801a7b4 <ai_platform_network_get_error+0xf0>
 801a784:	f7ff fed2 	bl	801a52c <_ai_platform_release_crc>
 801a788:	f241 0010 	movw	r0, #4112	@ 0x1010
 801a78c:	bd10      	pop	{r4, pc}
 801a78e:	2201      	movs	r2, #1
 801a790:	609a      	str	r2, [r3, #8]
 801a792:	689a      	ldr	r2, [r3, #8]
 801a794:	2a00      	cmp	r2, #0
 801a796:	d1fc      	bne.n	801a792 <ai_platform_network_get_error+0xce>
 801a798:	490a      	ldr	r1, [pc, #40]	@ (801a7c4 <ai_platform_network_get_error+0x100>)
 801a79a:	4a0b      	ldr	r2, [pc, #44]	@ (801a7c8 <ai_platform_network_get_error+0x104>)
 801a79c:	6019      	str	r1, [r3, #0]
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	4293      	cmp	r3, r2
 801a7a2:	d108      	bne.n	801a7b6 <ai_platform_network_get_error+0xf2>
 801a7a4:	f7ff fec2 	bl	801a52c <_ai_platform_release_crc>
 801a7a8:	f104 0010 	add.w	r0, r4, #16
 801a7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a7b0:	f000 bef8 	b.w	801b5a4 <core_get_error>
 801a7b4:	e7fe      	b.n	801a7b4 <ai_platform_network_get_error+0xf0>
 801a7b6:	e7fe      	b.n	801a7b6 <ai_platform_network_get_error+0xf2>
 801a7b8:	a1c00100 	.word	0xa1c00100
 801a7bc:	40023000 	.word	0x40023000
 801a7c0:	50023000 	.word	0x50023000
 801a7c4:	f407a5c2 	.word	0xf407a5c2
 801a7c8:	b5e8b5cd 	.word	0xb5e8b5cd

0801a7cc <ai_platform_network_set_error>:
 801a7cc:	b110      	cbz	r0, 801a7d4 <ai_platform_network_set_error+0x8>
 801a7ce:	3010      	adds	r0, #16
 801a7d0:	f000 beee 	b.w	801b5b0 <core_set_error>
 801a7d4:	4770      	bx	lr
 801a7d6:	bf00      	nop

0801a7d8 <ai_platform_inputs_get>:
 801a7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7dc:	b085      	sub	sp, #20
 801a7de:	9102      	str	r1, [sp, #8]
 801a7e0:	b1e8      	cbz	r0, 801a81e <ai_platform_inputs_get+0x46>
 801a7e2:	4b6e      	ldr	r3, [pc, #440]	@ (801a99c <ai_platform_inputs_get+0x1c4>)
 801a7e4:	6802      	ldr	r2, [r0, #0]
 801a7e6:	4607      	mov	r7, r0
 801a7e8:	429a      	cmp	r2, r3
 801a7ea:	d118      	bne.n	801a81e <ai_platform_inputs_get+0x46>
 801a7ec:	f7ff fe9c 	bl	801a528 <_ai_platform_acquire_crc>
 801a7f0:	4b6b      	ldr	r3, [pc, #428]	@ (801a9a0 <ai_platform_inputs_get+0x1c8>)
 801a7f2:	f020 5280 	bic.w	r2, r0, #268435456	@ 0x10000000
 801a7f6:	429a      	cmp	r2, r3
 801a7f8:	d038      	beq.n	801a86c <ai_platform_inputs_get+0x94>
 801a7fa:	2218      	movs	r2, #24
 801a7fc:	609a      	str	r2, [r3, #8]
 801a7fe:	689a      	ldr	r2, [r3, #8]
 801a800:	2a18      	cmp	r2, #24
 801a802:	d052      	beq.n	801a8aa <ai_platform_inputs_get+0xd2>
 801a804:	2301      	movs	r3, #1
 801a806:	4a67      	ldr	r2, [pc, #412]	@ (801a9a4 <ai_platform_inputs_get+0x1cc>)
 801a808:	6093      	str	r3, [r2, #8]
 801a80a:	6893      	ldr	r3, [r2, #8]
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d1fc      	bne.n	801a80a <ai_platform_inputs_get+0x32>
 801a810:	4b65      	ldr	r3, [pc, #404]	@ (801a9a8 <ai_platform_inputs_get+0x1d0>)
 801a812:	6013      	str	r3, [r2, #0]
 801a814:	6812      	ldr	r2, [r2, #0]
 801a816:	4b65      	ldr	r3, [pc, #404]	@ (801a9ac <ai_platform_inputs_get+0x1d4>)
 801a818:	429a      	cmp	r2, r3
 801a81a:	d051      	beq.n	801a8c0 <ai_platform_inputs_get+0xe8>
 801a81c:	e7fe      	b.n	801a81c <ai_platform_inputs_get+0x44>
 801a81e:	f7ff fe83 	bl	801a528 <_ai_platform_acquire_crc>
 801a822:	4b5f      	ldr	r3, [pc, #380]	@ (801a9a0 <ai_platform_inputs_get+0x1c8>)
 801a824:	f020 5280 	bic.w	r2, r0, #268435456	@ 0x10000000
 801a828:	429a      	cmp	r2, r3
 801a82a:	d011      	beq.n	801a850 <ai_platform_inputs_get+0x78>
 801a82c:	2218      	movs	r2, #24
 801a82e:	609a      	str	r2, [r3, #8]
 801a830:	689a      	ldr	r2, [r3, #8]
 801a832:	2a18      	cmp	r2, #24
 801a834:	d028      	beq.n	801a888 <ai_platform_inputs_get+0xb0>
 801a836:	2301      	movs	r3, #1
 801a838:	4a5a      	ldr	r2, [pc, #360]	@ (801a9a4 <ai_platform_inputs_get+0x1cc>)
 801a83a:	6093      	str	r3, [r2, #8]
 801a83c:	6893      	ldr	r3, [r2, #8]
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d1fc      	bne.n	801a83c <ai_platform_inputs_get+0x64>
 801a842:	4959      	ldr	r1, [pc, #356]	@ (801a9a8 <ai_platform_inputs_get+0x1d0>)
 801a844:	4b59      	ldr	r3, [pc, #356]	@ (801a9ac <ai_platform_inputs_get+0x1d4>)
 801a846:	6011      	str	r1, [r2, #0]
 801a848:	6812      	ldr	r2, [r2, #0]
 801a84a:	429a      	cmp	r2, r3
 801a84c:	d027      	beq.n	801a89e <ai_platform_inputs_get+0xc6>
 801a84e:	e7fe      	b.n	801a84e <ai_platform_inputs_get+0x76>
 801a850:	2301      	movs	r3, #1
 801a852:	f100 0208 	add.w	r2, r0, #8
 801a856:	6083      	str	r3, [r0, #8]
 801a858:	6813      	ldr	r3, [r2, #0]
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	d1fc      	bne.n	801a858 <ai_platform_inputs_get+0x80>
 801a85e:	4a52      	ldr	r2, [pc, #328]	@ (801a9a8 <ai_platform_inputs_get+0x1d0>)
 801a860:	4b52      	ldr	r3, [pc, #328]	@ (801a9ac <ai_platform_inputs_get+0x1d4>)
 801a862:	6002      	str	r2, [r0, #0]
 801a864:	6802      	ldr	r2, [r0, #0]
 801a866:	429a      	cmp	r2, r3
 801a868:	d019      	beq.n	801a89e <ai_platform_inputs_get+0xc6>
 801a86a:	e7fe      	b.n	801a86a <ai_platform_inputs_get+0x92>
 801a86c:	2301      	movs	r3, #1
 801a86e:	f100 0208 	add.w	r2, r0, #8
 801a872:	6083      	str	r3, [r0, #8]
 801a874:	6813      	ldr	r3, [r2, #0]
 801a876:	2b00      	cmp	r3, #0
 801a878:	d1fc      	bne.n	801a874 <ai_platform_inputs_get+0x9c>
 801a87a:	4a4b      	ldr	r2, [pc, #300]	@ (801a9a8 <ai_platform_inputs_get+0x1d0>)
 801a87c:	4b4b      	ldr	r3, [pc, #300]	@ (801a9ac <ai_platform_inputs_get+0x1d4>)
 801a87e:	6002      	str	r2, [r0, #0]
 801a880:	6802      	ldr	r2, [r0, #0]
 801a882:	429a      	cmp	r2, r3
 801a884:	d01c      	beq.n	801a8c0 <ai_platform_inputs_get+0xe8>
 801a886:	e7fe      	b.n	801a886 <ai_platform_inputs_get+0xae>
 801a888:	2201      	movs	r2, #1
 801a88a:	609a      	str	r2, [r3, #8]
 801a88c:	689a      	ldr	r2, [r3, #8]
 801a88e:	2a00      	cmp	r2, #0
 801a890:	d1fc      	bne.n	801a88c <ai_platform_inputs_get+0xb4>
 801a892:	4945      	ldr	r1, [pc, #276]	@ (801a9a8 <ai_platform_inputs_get+0x1d0>)
 801a894:	4a45      	ldr	r2, [pc, #276]	@ (801a9ac <ai_platform_inputs_get+0x1d4>)
 801a896:	6019      	str	r1, [r3, #0]
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	4293      	cmp	r3, r2
 801a89c:	d166      	bne.n	801a96c <ai_platform_inputs_get+0x194>
 801a89e:	f7ff fe45 	bl	801a52c <_ai_platform_release_crc>
 801a8a2:	2000      	movs	r0, #0
 801a8a4:	b005      	add	sp, #20
 801a8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8aa:	2201      	movs	r2, #1
 801a8ac:	609a      	str	r2, [r3, #8]
 801a8ae:	689a      	ldr	r2, [r3, #8]
 801a8b0:	2a00      	cmp	r2, #0
 801a8b2:	d1fc      	bne.n	801a8ae <ai_platform_inputs_get+0xd6>
 801a8b4:	4a3c      	ldr	r2, [pc, #240]	@ (801a9a8 <ai_platform_inputs_get+0x1d0>)
 801a8b6:	601a      	str	r2, [r3, #0]
 801a8b8:	681a      	ldr	r2, [r3, #0]
 801a8ba:	4b3c      	ldr	r3, [pc, #240]	@ (801a9ac <ai_platform_inputs_get+0x1d4>)
 801a8bc:	429a      	cmp	r2, r3
 801a8be:	d156      	bne.n	801a96e <ai_platform_inputs_get+0x196>
 801a8c0:	f7ff fe34 	bl	801a52c <_ai_platform_release_crc>
 801a8c4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d052      	beq.n	801a970 <ai_platform_inputs_get+0x198>
 801a8ca:	f8d7 a030 	ldr.w	sl, [r7, #48]	@ 0x30
 801a8ce:	f1ba 0f00 	cmp.w	sl, #0
 801a8d2:	d04d      	beq.n	801a970 <ai_platform_inputs_get+0x198>
 801a8d4:	f04f 0b00 	mov.w	fp, #0
 801a8d8:	9703      	str	r7, [sp, #12]
 801a8da:	465d      	mov	r5, fp
 801a8dc:	e016      	b.n	801a90c <ai_platform_inputs_get+0x134>
 801a8de:	2301      	movs	r3, #1
 801a8e0:	9901      	ldr	r1, [sp, #4]
 801a8e2:	507b      	str	r3, [r7, r1]
 801a8e4:	69b1      	ldr	r1, [r6, #24]
 801a8e6:	f04f 0301 	mov.w	r3, #1
 801a8ea:	6849      	ldr	r1, [r1, #4]
 801a8ec:	7523      	strb	r3, [r4, #20]
 801a8ee:	2300      	movs	r3, #0
 801a8f0:	60a2      	str	r2, [r4, #8]
 801a8f2:	6962      	ldr	r2, [r4, #20]
 801a8f4:	e9c4 0c00 	strd	r0, ip, [r4]
 801a8f8:	f369 221f 	bfi	r2, r9, #8, #24
 801a8fc:	6121      	str	r1, [r4, #16]
 801a8fe:	f8c4 8018 	str.w	r8, [r4, #24]
 801a902:	60e3      	str	r3, [r4, #12]
 801a904:	3501      	adds	r5, #1
 801a906:	f10b 0b1c 	add.w	fp, fp, #28
 801a90a:	6162      	str	r2, [r4, #20]
 801a90c:	f8ba 3000 	ldrh.w	r3, [sl]
 801a910:	b2aa      	uxth	r2, r5
 801a912:	42ab      	cmp	r3, r5
 801a914:	d93b      	bls.n	801a98e <ai_platform_inputs_get+0x1b6>
 801a916:	f8da 3004 	ldr.w	r3, [sl, #4]
 801a91a:	00e9      	lsls	r1, r5, #3
 801a91c:	9101      	str	r1, [sp, #4]
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d035      	beq.n	801a98e <ai_platform_inputs_get+0x1b6>
 801a922:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801a926:	2e00      	cmp	r6, #0
 801a928:	d031      	beq.n	801a98e <ai_platform_inputs_get+0x1b6>
 801a92a:	f8da 3008 	ldr.w	r3, [sl, #8]
 801a92e:	69b2      	ldr	r2, [r6, #24]
 801a930:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 801a934:	68b3      	ldr	r3, [r6, #8]
 801a936:	6810      	ldr	r0, [r2, #0]
 801a938:	f8d6 800c 	ldr.w	r8, [r6, #12]
 801a93c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 801a940:	f001 fce4 	bl	801c30c <ai_array_to_buffer_fmt>
 801a944:	69b1      	ldr	r1, [r6, #24]
 801a946:	eb07 02c5 	add.w	r2, r7, r5, lsl #3
 801a94a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 801a94e:	445c      	add	r4, fp
 801a950:	2a00      	cmp	r2, #0
 801a952:	d0c8      	beq.n	801a8e6 <ai_platform_inputs_get+0x10e>
 801a954:	2100      	movs	r1, #0
 801a956:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 801a95a:	6831      	ldr	r1, [r6, #0]
 801a95c:	6051      	str	r1, [r2, #4]
 801a95e:	b111      	cbz	r1, 801a966 <ai_platform_inputs_get+0x18e>
 801a960:	8849      	ldrh	r1, [r1, #2]
 801a962:	2900      	cmp	r1, #0
 801a964:	d1bb      	bne.n	801a8de <ai_platform_inputs_get+0x106>
 801a966:	2200      	movs	r2, #0
 801a968:	69b1      	ldr	r1, [r6, #24]
 801a96a:	e7bc      	b.n	801a8e6 <ai_platform_inputs_get+0x10e>
 801a96c:	e7fe      	b.n	801a96c <ai_platform_inputs_get+0x194>
 801a96e:	e7fe      	b.n	801a96e <ai_platform_inputs_get+0x196>
 801a970:	2218      	movs	r2, #24
 801a972:	2111      	movs	r1, #17
 801a974:	f107 0010 	add.w	r0, r7, #16
 801a978:	f000 fe1a 	bl	801b5b0 <core_set_error>
 801a97c:	2200      	movs	r2, #0
 801a97e:	4610      	mov	r0, r2
 801a980:	9b02      	ldr	r3, [sp, #8]
 801a982:	2b00      	cmp	r3, #0
 801a984:	d08e      	beq.n	801a8a4 <ai_platform_inputs_get+0xcc>
 801a986:	801a      	strh	r2, [r3, #0]
 801a988:	b005      	add	sp, #20
 801a98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a98e:	9f03      	ldr	r7, [sp, #12]
 801a990:	2a00      	cmp	r2, #0
 801a992:	d0ed      	beq.n	801a970 <ai_platform_inputs_get+0x198>
 801a994:	f8da 3008 	ldr.w	r3, [sl, #8]
 801a998:	6858      	ldr	r0, [r3, #4]
 801a99a:	e7f1      	b.n	801a980 <ai_platform_inputs_get+0x1a8>
 801a99c:	a1c00100 	.word	0xa1c00100
 801a9a0:	40023000 	.word	0x40023000
 801a9a4:	50023000 	.word	0x50023000
 801a9a8:	f407a5c2 	.word	0xf407a5c2
 801a9ac:	b5e8b5cd 	.word	0xb5e8b5cd

0801a9b0 <ai_platform_outputs_get>:
 801a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9b4:	b085      	sub	sp, #20
 801a9b6:	9102      	str	r1, [sp, #8]
 801a9b8:	b1e8      	cbz	r0, 801a9f6 <ai_platform_outputs_get+0x46>
 801a9ba:	4b6b      	ldr	r3, [pc, #428]	@ (801ab68 <ai_platform_outputs_get+0x1b8>)
 801a9bc:	6802      	ldr	r2, [r0, #0]
 801a9be:	4607      	mov	r7, r0
 801a9c0:	429a      	cmp	r2, r3
 801a9c2:	d118      	bne.n	801a9f6 <ai_platform_outputs_get+0x46>
 801a9c4:	f7ff fdb0 	bl	801a528 <_ai_platform_acquire_crc>
 801a9c8:	4b68      	ldr	r3, [pc, #416]	@ (801ab6c <ai_platform_outputs_get+0x1bc>)
 801a9ca:	f020 5280 	bic.w	r2, r0, #268435456	@ 0x10000000
 801a9ce:	429a      	cmp	r2, r3
 801a9d0:	d038      	beq.n	801aa44 <ai_platform_outputs_get+0x94>
 801a9d2:	2218      	movs	r2, #24
 801a9d4:	609a      	str	r2, [r3, #8]
 801a9d6:	689a      	ldr	r2, [r3, #8]
 801a9d8:	2a18      	cmp	r2, #24
 801a9da:	d052      	beq.n	801aa82 <ai_platform_outputs_get+0xd2>
 801a9dc:	2301      	movs	r3, #1
 801a9de:	4a64      	ldr	r2, [pc, #400]	@ (801ab70 <ai_platform_outputs_get+0x1c0>)
 801a9e0:	6093      	str	r3, [r2, #8]
 801a9e2:	6893      	ldr	r3, [r2, #8]
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d1fc      	bne.n	801a9e2 <ai_platform_outputs_get+0x32>
 801a9e8:	4b62      	ldr	r3, [pc, #392]	@ (801ab74 <ai_platform_outputs_get+0x1c4>)
 801a9ea:	6013      	str	r3, [r2, #0]
 801a9ec:	6812      	ldr	r2, [r2, #0]
 801a9ee:	4b62      	ldr	r3, [pc, #392]	@ (801ab78 <ai_platform_outputs_get+0x1c8>)
 801a9f0:	429a      	cmp	r2, r3
 801a9f2:	d051      	beq.n	801aa98 <ai_platform_outputs_get+0xe8>
 801a9f4:	e7fe      	b.n	801a9f4 <ai_platform_outputs_get+0x44>
 801a9f6:	f7ff fd97 	bl	801a528 <_ai_platform_acquire_crc>
 801a9fa:	4b5c      	ldr	r3, [pc, #368]	@ (801ab6c <ai_platform_outputs_get+0x1bc>)
 801a9fc:	f020 5280 	bic.w	r2, r0, #268435456	@ 0x10000000
 801aa00:	429a      	cmp	r2, r3
 801aa02:	d011      	beq.n	801aa28 <ai_platform_outputs_get+0x78>
 801aa04:	2218      	movs	r2, #24
 801aa06:	609a      	str	r2, [r3, #8]
 801aa08:	689a      	ldr	r2, [r3, #8]
 801aa0a:	2a18      	cmp	r2, #24
 801aa0c:	d028      	beq.n	801aa60 <ai_platform_outputs_get+0xb0>
 801aa0e:	2301      	movs	r3, #1
 801aa10:	4a57      	ldr	r2, [pc, #348]	@ (801ab70 <ai_platform_outputs_get+0x1c0>)
 801aa12:	6093      	str	r3, [r2, #8]
 801aa14:	6893      	ldr	r3, [r2, #8]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d1fc      	bne.n	801aa14 <ai_platform_outputs_get+0x64>
 801aa1a:	4956      	ldr	r1, [pc, #344]	@ (801ab74 <ai_platform_outputs_get+0x1c4>)
 801aa1c:	4b56      	ldr	r3, [pc, #344]	@ (801ab78 <ai_platform_outputs_get+0x1c8>)
 801aa1e:	6011      	str	r1, [r2, #0]
 801aa20:	6812      	ldr	r2, [r2, #0]
 801aa22:	429a      	cmp	r2, r3
 801aa24:	d027      	beq.n	801aa76 <ai_platform_outputs_get+0xc6>
 801aa26:	e7fe      	b.n	801aa26 <ai_platform_outputs_get+0x76>
 801aa28:	2301      	movs	r3, #1
 801aa2a:	f100 0208 	add.w	r2, r0, #8
 801aa2e:	6083      	str	r3, [r0, #8]
 801aa30:	6813      	ldr	r3, [r2, #0]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d1fc      	bne.n	801aa30 <ai_platform_outputs_get+0x80>
 801aa36:	4a4f      	ldr	r2, [pc, #316]	@ (801ab74 <ai_platform_outputs_get+0x1c4>)
 801aa38:	4b4f      	ldr	r3, [pc, #316]	@ (801ab78 <ai_platform_outputs_get+0x1c8>)
 801aa3a:	6002      	str	r2, [r0, #0]
 801aa3c:	6802      	ldr	r2, [r0, #0]
 801aa3e:	429a      	cmp	r2, r3
 801aa40:	d019      	beq.n	801aa76 <ai_platform_outputs_get+0xc6>
 801aa42:	e7fe      	b.n	801aa42 <ai_platform_outputs_get+0x92>
 801aa44:	2301      	movs	r3, #1
 801aa46:	f100 0208 	add.w	r2, r0, #8
 801aa4a:	6083      	str	r3, [r0, #8]
 801aa4c:	6813      	ldr	r3, [r2, #0]
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d1fc      	bne.n	801aa4c <ai_platform_outputs_get+0x9c>
 801aa52:	4a48      	ldr	r2, [pc, #288]	@ (801ab74 <ai_platform_outputs_get+0x1c4>)
 801aa54:	4b48      	ldr	r3, [pc, #288]	@ (801ab78 <ai_platform_outputs_get+0x1c8>)
 801aa56:	6002      	str	r2, [r0, #0]
 801aa58:	6802      	ldr	r2, [r0, #0]
 801aa5a:	429a      	cmp	r2, r3
 801aa5c:	d01c      	beq.n	801aa98 <ai_platform_outputs_get+0xe8>
 801aa5e:	e7fe      	b.n	801aa5e <ai_platform_outputs_get+0xae>
 801aa60:	2201      	movs	r2, #1
 801aa62:	609a      	str	r2, [r3, #8]
 801aa64:	689a      	ldr	r2, [r3, #8]
 801aa66:	2a00      	cmp	r2, #0
 801aa68:	d1fc      	bne.n	801aa64 <ai_platform_outputs_get+0xb4>
 801aa6a:	4942      	ldr	r1, [pc, #264]	@ (801ab74 <ai_platform_outputs_get+0x1c4>)
 801aa6c:	4a42      	ldr	r2, [pc, #264]	@ (801ab78 <ai_platform_outputs_get+0x1c8>)
 801aa6e:	6019      	str	r1, [r3, #0]
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	4293      	cmp	r3, r2
 801aa74:	d161      	bne.n	801ab3a <ai_platform_outputs_get+0x18a>
 801aa76:	f7ff fd59 	bl	801a52c <_ai_platform_release_crc>
 801aa7a:	2000      	movs	r0, #0
 801aa7c:	b005      	add	sp, #20
 801aa7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa82:	2201      	movs	r2, #1
 801aa84:	609a      	str	r2, [r3, #8]
 801aa86:	689a      	ldr	r2, [r3, #8]
 801aa88:	2a00      	cmp	r2, #0
 801aa8a:	d1fc      	bne.n	801aa86 <ai_platform_outputs_get+0xd6>
 801aa8c:	4a39      	ldr	r2, [pc, #228]	@ (801ab74 <ai_platform_outputs_get+0x1c4>)
 801aa8e:	601a      	str	r2, [r3, #0]
 801aa90:	681a      	ldr	r2, [r3, #0]
 801aa92:	4b39      	ldr	r3, [pc, #228]	@ (801ab78 <ai_platform_outputs_get+0x1c8>)
 801aa94:	429a      	cmp	r2, r3
 801aa96:	d151      	bne.n	801ab3c <ai_platform_outputs_get+0x18c>
 801aa98:	f7ff fd48 	bl	801a52c <_ai_platform_release_crc>
 801aa9c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801aa9e:	2b01      	cmp	r3, #1
 801aaa0:	d959      	bls.n	801ab56 <ai_platform_outputs_get+0x1a6>
 801aaa2:	f04f 0b00 	mov.w	fp, #0
 801aaa6:	f8d7 a030 	ldr.w	sl, [r7, #48]	@ 0x30
 801aaaa:	465d      	mov	r5, fp
 801aaac:	9703      	str	r7, [sp, #12]
 801aaae:	e016      	b.n	801aade <ai_platform_outputs_get+0x12e>
 801aab0:	2301      	movs	r3, #1
 801aab2:	9901      	ldr	r1, [sp, #4]
 801aab4:	507b      	str	r3, [r7, r1]
 801aab6:	69b1      	ldr	r1, [r6, #24]
 801aab8:	f04f 0301 	mov.w	r3, #1
 801aabc:	6849      	ldr	r1, [r1, #4]
 801aabe:	7523      	strb	r3, [r4, #20]
 801aac0:	2300      	movs	r3, #0
 801aac2:	60a2      	str	r2, [r4, #8]
 801aac4:	6962      	ldr	r2, [r4, #20]
 801aac6:	e9c4 0c00 	strd	r0, ip, [r4]
 801aaca:	f369 221f 	bfi	r2, r9, #8, #24
 801aace:	6121      	str	r1, [r4, #16]
 801aad0:	f8c4 8018 	str.w	r8, [r4, #24]
 801aad4:	60e3      	str	r3, [r4, #12]
 801aad6:	3501      	adds	r5, #1
 801aad8:	f10b 0b1c 	add.w	fp, fp, #28
 801aadc:	6162      	str	r2, [r4, #20]
 801aade:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801aae2:	b2aa      	uxth	r2, r5
 801aae4:	42ab      	cmp	r3, r5
 801aae6:	d92a      	bls.n	801ab3e <ai_platform_outputs_get+0x18e>
 801aae8:	f8da 3010 	ldr.w	r3, [sl, #16]
 801aaec:	00e9      	lsls	r1, r5, #3
 801aaee:	9101      	str	r1, [sp, #4]
 801aaf0:	b32b      	cbz	r3, 801ab3e <ai_platform_outputs_get+0x18e>
 801aaf2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801aaf6:	b316      	cbz	r6, 801ab3e <ai_platform_outputs_get+0x18e>
 801aaf8:	f8da 3014 	ldr.w	r3, [sl, #20]
 801aafc:	69b2      	ldr	r2, [r6, #24]
 801aafe:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 801ab02:	68b3      	ldr	r3, [r6, #8]
 801ab04:	6810      	ldr	r0, [r2, #0]
 801ab06:	f8d6 800c 	ldr.w	r8, [r6, #12]
 801ab0a:	f3c3 2917 	ubfx	r9, r3, #8, #24
 801ab0e:	f001 fbfd 	bl	801c30c <ai_array_to_buffer_fmt>
 801ab12:	69b1      	ldr	r1, [r6, #24]
 801ab14:	eb07 02c5 	add.w	r2, r7, r5, lsl #3
 801ab18:	f8d1 c008 	ldr.w	ip, [r1, #8]
 801ab1c:	445c      	add	r4, fp
 801ab1e:	2a00      	cmp	r2, #0
 801ab20:	d0ca      	beq.n	801aab8 <ai_platform_outputs_get+0x108>
 801ab22:	2100      	movs	r1, #0
 801ab24:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 801ab28:	6831      	ldr	r1, [r6, #0]
 801ab2a:	6051      	str	r1, [r2, #4]
 801ab2c:	b111      	cbz	r1, 801ab34 <ai_platform_outputs_get+0x184>
 801ab2e:	8849      	ldrh	r1, [r1, #2]
 801ab30:	2900      	cmp	r1, #0
 801ab32:	d1bd      	bne.n	801aab0 <ai_platform_outputs_get+0x100>
 801ab34:	2200      	movs	r2, #0
 801ab36:	69b1      	ldr	r1, [r6, #24]
 801ab38:	e7be      	b.n	801aab8 <ai_platform_outputs_get+0x108>
 801ab3a:	e7fe      	b.n	801ab3a <ai_platform_outputs_get+0x18a>
 801ab3c:	e7fe      	b.n	801ab3c <ai_platform_outputs_get+0x18c>
 801ab3e:	9f03      	ldr	r7, [sp, #12]
 801ab40:	b14a      	cbz	r2, 801ab56 <ai_platform_outputs_get+0x1a6>
 801ab42:	f8da 3014 	ldr.w	r3, [sl, #20]
 801ab46:	6858      	ldr	r0, [r3, #4]
 801ab48:	9b02      	ldr	r3, [sp, #8]
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d096      	beq.n	801aa7c <ai_platform_outputs_get+0xcc>
 801ab4e:	801a      	strh	r2, [r3, #0]
 801ab50:	b005      	add	sp, #20
 801ab52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab56:	2218      	movs	r2, #24
 801ab58:	2111      	movs	r1, #17
 801ab5a:	f107 0010 	add.w	r0, r7, #16
 801ab5e:	f000 fd27 	bl	801b5b0 <core_set_error>
 801ab62:	2200      	movs	r2, #0
 801ab64:	4610      	mov	r0, r2
 801ab66:	e7ef      	b.n	801ab48 <ai_platform_outputs_get+0x198>
 801ab68:	a1c00100 	.word	0xa1c00100
 801ab6c:	40023000 	.word	0x40023000
 801ab70:	50023000 	.word	0x50023000
 801ab74:	f407a5c2 	.word	0xf407a5c2
 801ab78:	b5e8b5cd 	.word	0xb5e8b5cd

0801ab7c <ai_platform_network_create>:
 801ab7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ab80:	b083      	sub	sp, #12
 801ab82:	4604      	mov	r4, r0
 801ab84:	4615      	mov	r5, r2
 801ab86:	461e      	mov	r6, r3
 801ab88:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801ab8c:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801ab90:	f7ff fcca 	bl	801a528 <_ai_platform_acquire_crc>
 801ab94:	2800      	cmp	r0, #0
 801ab96:	d038      	beq.n	801ac0a <ai_platform_network_create+0x8e>
 801ab98:	4b63      	ldr	r3, [pc, #396]	@ (801ad28 <ai_platform_network_create+0x1ac>)
 801ab9a:	4298      	cmp	r0, r3
 801ab9c:	d02d      	beq.n	801abfa <ai_platform_network_create+0x7e>
 801ab9e:	4a63      	ldr	r2, [pc, #396]	@ (801ad2c <ai_platform_network_create+0x1b0>)
 801aba0:	4290      	cmp	r0, r2
 801aba2:	d004      	beq.n	801abae <ai_platform_network_create+0x32>
 801aba4:	2218      	movs	r2, #24
 801aba6:	609a      	str	r2, [r3, #8]
 801aba8:	689b      	ldr	r3, [r3, #8]
 801abaa:	4293      	cmp	r3, r2
 801abac:	d025      	beq.n	801abfa <ai_platform_network_create+0x7e>
 801abae:	2318      	movs	r3, #24
 801abb0:	495f      	ldr	r1, [pc, #380]	@ (801ad30 <ai_platform_network_create+0x1b4>)
 801abb2:	600b      	str	r3, [r1, #0]
 801abb4:	680b      	ldr	r3, [r1, #0]
 801abb6:	2b18      	cmp	r3, #24
 801abb8:	d125      	bne.n	801ac06 <ai_platform_network_create+0x8a>
 801abba:	2301      	movs	r3, #1
 801abbc:	600b      	str	r3, [r1, #0]
 801abbe:	680b      	ldr	r3, [r1, #0]
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d1fc      	bne.n	801abbe <ai_platform_network_create+0x42>
 801abc4:	f7ff fcb2 	bl	801a52c <_ai_platform_release_crc>
 801abc8:	f7ff fcae 	bl	801a528 <_ai_platform_acquire_crc>
 801abcc:	4b56      	ldr	r3, [pc, #344]	@ (801ad28 <ai_platform_network_create+0x1ac>)
 801abce:	f020 5280 	bic.w	r2, r0, #268435456	@ 0x10000000
 801abd2:	429a      	cmp	r2, r3
 801abd4:	d01e      	beq.n	801ac14 <ai_platform_network_create+0x98>
 801abd6:	2218      	movs	r2, #24
 801abd8:	609a      	str	r2, [r3, #8]
 801abda:	689a      	ldr	r2, [r3, #8]
 801abdc:	2a18      	cmp	r2, #24
 801abde:	d027      	beq.n	801ac30 <ai_platform_network_create+0xb4>
 801abe0:	2301      	movs	r3, #1
 801abe2:	4a52      	ldr	r2, [pc, #328]	@ (801ad2c <ai_platform_network_create+0x1b0>)
 801abe4:	6093      	str	r3, [r2, #8]
 801abe6:	6893      	ldr	r3, [r2, #8]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d1fc      	bne.n	801abe6 <ai_platform_network_create+0x6a>
 801abec:	4b51      	ldr	r3, [pc, #324]	@ (801ad34 <ai_platform_network_create+0x1b8>)
 801abee:	6013      	str	r3, [r2, #0]
 801abf0:	6812      	ldr	r2, [r2, #0]
 801abf2:	4b51      	ldr	r3, [pc, #324]	@ (801ad38 <ai_platform_network_create+0x1bc>)
 801abf4:	429a      	cmp	r2, r3
 801abf6:	d026      	beq.n	801ac46 <ai_platform_network_create+0xca>
 801abf8:	e7fe      	b.n	801abf8 <ai_platform_network_create+0x7c>
 801abfa:	2318      	movs	r3, #24
 801abfc:	494f      	ldr	r1, [pc, #316]	@ (801ad3c <ai_platform_network_create+0x1c0>)
 801abfe:	600b      	str	r3, [r1, #0]
 801ac00:	680b      	ldr	r3, [r1, #0]
 801ac02:	2b18      	cmp	r3, #24
 801ac04:	d0d9      	beq.n	801abba <ai_platform_network_create+0x3e>
 801ac06:	f7ff fc91 	bl	801a52c <_ai_platform_release_crc>
 801ac0a:	f244 1033 	movw	r0, #16691	@ 0x4133
 801ac0e:	b003      	add	sp, #12
 801ac10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ac14:	2301      	movs	r3, #1
 801ac16:	6083      	str	r3, [r0, #8]
 801ac18:	f100 0308 	add.w	r3, r0, #8
 801ac1c:	6819      	ldr	r1, [r3, #0]
 801ac1e:	2900      	cmp	r1, #0
 801ac20:	d1fc      	bne.n	801ac1c <ai_platform_network_create+0xa0>
 801ac22:	4b44      	ldr	r3, [pc, #272]	@ (801ad34 <ai_platform_network_create+0x1b8>)
 801ac24:	6003      	str	r3, [r0, #0]
 801ac26:	6802      	ldr	r2, [r0, #0]
 801ac28:	4b43      	ldr	r3, [pc, #268]	@ (801ad38 <ai_platform_network_create+0x1bc>)
 801ac2a:	429a      	cmp	r2, r3
 801ac2c:	d00b      	beq.n	801ac46 <ai_platform_network_create+0xca>
 801ac2e:	e7fe      	b.n	801ac2e <ai_platform_network_create+0xb2>
 801ac30:	2201      	movs	r2, #1
 801ac32:	609a      	str	r2, [r3, #8]
 801ac34:	689a      	ldr	r2, [r3, #8]
 801ac36:	2a00      	cmp	r2, #0
 801ac38:	d1fc      	bne.n	801ac34 <ai_platform_network_create+0xb8>
 801ac3a:	4a3e      	ldr	r2, [pc, #248]	@ (801ad34 <ai_platform_network_create+0x1b8>)
 801ac3c:	601a      	str	r2, [r3, #0]
 801ac3e:	681a      	ldr	r2, [r3, #0]
 801ac40:	4b3d      	ldr	r3, [pc, #244]	@ (801ad38 <ai_platform_network_create+0x1bc>)
 801ac42:	429a      	cmp	r2, r3
 801ac44:	d122      	bne.n	801ac8c <ai_platform_network_create+0x110>
 801ac46:	f7ff fc71 	bl	801a52c <_ai_platform_release_crc>
 801ac4a:	2c00      	cmp	r4, #0
 801ac4c:	d031      	beq.n	801acb2 <ai_platform_network_create+0x136>
 801ac4e:	4b3c      	ldr	r3, [pc, #240]	@ (801ad40 <ai_platform_network_create+0x1c4>)
 801ac50:	602b      	str	r3, [r5, #0]
 801ac52:	6025      	str	r5, [r4, #0]
 801ac54:	f000 fca4 	bl	801b5a0 <core_init>
 801ac58:	b1c8      	cbz	r0, 801ac8e <ai_platform_network_create+0x112>
 801ac5a:	f7ff fc65 	bl	801a528 <_ai_platform_acquire_crc>
 801ac5e:	4b32      	ldr	r3, [pc, #200]	@ (801ad28 <ai_platform_network_create+0x1ac>)
 801ac60:	f020 5280 	bic.w	r2, r0, #268435456	@ 0x10000000
 801ac64:	429a      	cmp	r2, r3
 801ac66:	d027      	beq.n	801acb8 <ai_platform_network_create+0x13c>
 801ac68:	2218      	movs	r2, #24
 801ac6a:	609a      	str	r2, [r3, #8]
 801ac6c:	689a      	ldr	r2, [r3, #8]
 801ac6e:	2a18      	cmp	r2, #24
 801ac70:	d030      	beq.n	801acd4 <ai_platform_network_create+0x158>
 801ac72:	2301      	movs	r3, #1
 801ac74:	4a2d      	ldr	r2, [pc, #180]	@ (801ad2c <ai_platform_network_create+0x1b0>)
 801ac76:	6093      	str	r3, [r2, #8]
 801ac78:	6893      	ldr	r3, [r2, #8]
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d1fc      	bne.n	801ac78 <ai_platform_network_create+0xfc>
 801ac7e:	4b2d      	ldr	r3, [pc, #180]	@ (801ad34 <ai_platform_network_create+0x1b8>)
 801ac80:	6013      	str	r3, [r2, #0]
 801ac82:	6812      	ldr	r2, [r2, #0]
 801ac84:	4b2c      	ldr	r3, [pc, #176]	@ (801ad38 <ai_platform_network_create+0x1bc>)
 801ac86:	429a      	cmp	r2, r3
 801ac88:	d02f      	beq.n	801acea <ai_platform_network_create+0x16e>
 801ac8a:	e7fe      	b.n	801ac8a <ai_platform_network_create+0x10e>
 801ac8c:	e7fe      	b.n	801ac8c <ai_platform_network_create+0x110>
 801ac8e:	f04f 0930 	mov.w	r9, #48	@ 0x30
 801ac92:	2300      	movs	r3, #0
 801ac94:	6023      	str	r3, [r4, #0]
 801ac96:	2410      	movs	r4, #16
 801ac98:	4642      	mov	r2, r8
 801ac9a:	4639      	mov	r1, r7
 801ac9c:	4630      	mov	r0, r6
 801ac9e:	f001 fbd9 	bl	801c454 <ai_version_get>
 801aca2:	4603      	mov	r3, r0
 801aca4:	2000      	movs	r0, #0
 801aca6:	f369 0007 	bfi	r0, r9, #0, #8
 801acaa:	64ab      	str	r3, [r5, #72]	@ 0x48
 801acac:	f364 201f 	bfi	r0, r4, #8, #24
 801acb0:	e7ad      	b.n	801ac0e <ai_platform_network_create+0x92>
 801acb2:	f241 0010 	movw	r0, #4112	@ 0x1010
 801acb6:	e7aa      	b.n	801ac0e <ai_platform_network_create+0x92>
 801acb8:	2301      	movs	r3, #1
 801acba:	f100 0208 	add.w	r2, r0, #8
 801acbe:	6083      	str	r3, [r0, #8]
 801acc0:	6813      	ldr	r3, [r2, #0]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d1fc      	bne.n	801acc0 <ai_platform_network_create+0x144>
 801acc6:	4b1b      	ldr	r3, [pc, #108]	@ (801ad34 <ai_platform_network_create+0x1b8>)
 801acc8:	6003      	str	r3, [r0, #0]
 801acca:	6802      	ldr	r2, [r0, #0]
 801accc:	4b1a      	ldr	r3, [pc, #104]	@ (801ad38 <ai_platform_network_create+0x1bc>)
 801acce:	429a      	cmp	r2, r3
 801acd0:	d00b      	beq.n	801acea <ai_platform_network_create+0x16e>
 801acd2:	e7fe      	b.n	801acd2 <ai_platform_network_create+0x156>
 801acd4:	2201      	movs	r2, #1
 801acd6:	609a      	str	r2, [r3, #8]
 801acd8:	689a      	ldr	r2, [r3, #8]
 801acda:	2a00      	cmp	r2, #0
 801acdc:	d1fc      	bne.n	801acd8 <ai_platform_network_create+0x15c>
 801acde:	4a15      	ldr	r2, [pc, #84]	@ (801ad34 <ai_platform_network_create+0x1b8>)
 801ace0:	601a      	str	r2, [r3, #0]
 801ace2:	681a      	ldr	r2, [r3, #0]
 801ace4:	4b14      	ldr	r3, [pc, #80]	@ (801ad38 <ai_platform_network_create+0x1bc>)
 801ace6:	429a      	cmp	r2, r3
 801ace8:	d111      	bne.n	801ad0e <ai_platform_network_create+0x192>
 801acea:	f7ff fc1f 	bl	801a52c <_ai_platform_release_crc>
 801acee:	2200      	movs	r2, #0
 801acf0:	4639      	mov	r1, r7
 801acf2:	4630      	mov	r0, r6
 801acf4:	f001 fbae 	bl	801c454 <ai_version_get>
 801acf8:	2200      	movs	r2, #0
 801acfa:	4681      	mov	r9, r0
 801acfc:	2105      	movs	r1, #5
 801acfe:	2001      	movs	r0, #1
 801ad00:	f001 fba8 	bl	801c454 <ai_version_get>
 801ad04:	4581      	cmp	r9, r0
 801ad06:	d003      	beq.n	801ad10 <ai_platform_network_create+0x194>
 801ad08:	f04f 0901 	mov.w	r9, #1
 801ad0c:	e7c1      	b.n	801ac92 <ai_platform_network_create+0x116>
 801ad0e:	e7fe      	b.n	801ad0e <ai_platform_network_create+0x192>
 801ad10:	4b0c      	ldr	r3, [pc, #48]	@ (801ad44 <ai_platform_network_create+0x1c8>)
 801ad12:	a801      	add	r0, sp, #4
 801ad14:	9301      	str	r3, [sp, #4]
 801ad16:	f000 fc57 	bl	801b5c8 <ai_check_custom_types>
 801ad1a:	b110      	cbz	r0, 801ad22 <ai_platform_network_create+0x1a6>
 801ad1c:	2400      	movs	r4, #0
 801ad1e:	46a1      	mov	r9, r4
 801ad20:	e7ba      	b.n	801ac98 <ai_platform_network_create+0x11c>
 801ad22:	f04f 0902 	mov.w	r9, #2
 801ad26:	e7b4      	b.n	801ac92 <ai_platform_network_create+0x116>
 801ad28:	40023000 	.word	0x40023000
 801ad2c:	50023000 	.word	0x50023000
 801ad30:	50023008 	.word	0x50023008
 801ad34:	f407a5c2 	.word	0xf407a5c2
 801ad38:	b5e8b5cd 	.word	0xb5e8b5cd
 801ad3c:	40023008 	.word	0x40023008
 801ad40:	a1c00100 	.word	0xa1c00100
 801ad44:	84048403 	.word	0x84048403

0801ad48 <ai_platform_network_init>:
 801ad48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad4c:	b1f0      	cbz	r0, 801ad8c <ai_platform_network_init+0x44>
 801ad4e:	4b79      	ldr	r3, [pc, #484]	@ (801af34 <ai_platform_network_init+0x1ec>)
 801ad50:	6802      	ldr	r2, [r0, #0]
 801ad52:	4604      	mov	r4, r0
 801ad54:	429a      	cmp	r2, r3
 801ad56:	d119      	bne.n	801ad8c <ai_platform_network_init+0x44>
 801ad58:	460e      	mov	r6, r1
 801ad5a:	f7ff fbe5 	bl	801a528 <_ai_platform_acquire_crc>
 801ad5e:	4b76      	ldr	r3, [pc, #472]	@ (801af38 <ai_platform_network_init+0x1f0>)
 801ad60:	f020 5280 	bic.w	r2, r0, #268435456	@ 0x10000000
 801ad64:	429a      	cmp	r2, r3
 801ad66:	d038      	beq.n	801adda <ai_platform_network_init+0x92>
 801ad68:	2218      	movs	r2, #24
 801ad6a:	609a      	str	r2, [r3, #8]
 801ad6c:	689a      	ldr	r2, [r3, #8]
 801ad6e:	2a18      	cmp	r2, #24
 801ad70:	d052      	beq.n	801ae18 <ai_platform_network_init+0xd0>
 801ad72:	2301      	movs	r3, #1
 801ad74:	4a71      	ldr	r2, [pc, #452]	@ (801af3c <ai_platform_network_init+0x1f4>)
 801ad76:	6093      	str	r3, [r2, #8]
 801ad78:	6893      	ldr	r3, [r2, #8]
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d1fc      	bne.n	801ad78 <ai_platform_network_init+0x30>
 801ad7e:	4b70      	ldr	r3, [pc, #448]	@ (801af40 <ai_platform_network_init+0x1f8>)
 801ad80:	6013      	str	r3, [r2, #0]
 801ad82:	6812      	ldr	r2, [r2, #0]
 801ad84:	4b6f      	ldr	r3, [pc, #444]	@ (801af44 <ai_platform_network_init+0x1fc>)
 801ad86:	429a      	cmp	r2, r3
 801ad88:	d051      	beq.n	801ae2e <ai_platform_network_init+0xe6>
 801ad8a:	e7fe      	b.n	801ad8a <ai_platform_network_init+0x42>
 801ad8c:	f7ff fbcc 	bl	801a528 <_ai_platform_acquire_crc>
 801ad90:	4b69      	ldr	r3, [pc, #420]	@ (801af38 <ai_platform_network_init+0x1f0>)
 801ad92:	f020 5280 	bic.w	r2, r0, #268435456	@ 0x10000000
 801ad96:	429a      	cmp	r2, r3
 801ad98:	d011      	beq.n	801adbe <ai_platform_network_init+0x76>
 801ad9a:	2218      	movs	r2, #24
 801ad9c:	609a      	str	r2, [r3, #8]
 801ad9e:	689a      	ldr	r2, [r3, #8]
 801ada0:	2a18      	cmp	r2, #24
 801ada2:	d028      	beq.n	801adf6 <ai_platform_network_init+0xae>
 801ada4:	2301      	movs	r3, #1
 801ada6:	4a65      	ldr	r2, [pc, #404]	@ (801af3c <ai_platform_network_init+0x1f4>)
 801ada8:	6093      	str	r3, [r2, #8]
 801adaa:	6893      	ldr	r3, [r2, #8]
 801adac:	2b00      	cmp	r3, #0
 801adae:	d1fc      	bne.n	801adaa <ai_platform_network_init+0x62>
 801adb0:	4963      	ldr	r1, [pc, #396]	@ (801af40 <ai_platform_network_init+0x1f8>)
 801adb2:	4b64      	ldr	r3, [pc, #400]	@ (801af44 <ai_platform_network_init+0x1fc>)
 801adb4:	6011      	str	r1, [r2, #0]
 801adb6:	6812      	ldr	r2, [r2, #0]
 801adb8:	429a      	cmp	r2, r3
 801adba:	d027      	beq.n	801ae0c <ai_platform_network_init+0xc4>
 801adbc:	e7fe      	b.n	801adbc <ai_platform_network_init+0x74>
 801adbe:	2301      	movs	r3, #1
 801adc0:	f100 0208 	add.w	r2, r0, #8
 801adc4:	6083      	str	r3, [r0, #8]
 801adc6:	6813      	ldr	r3, [r2, #0]
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d1fc      	bne.n	801adc6 <ai_platform_network_init+0x7e>
 801adcc:	4a5c      	ldr	r2, [pc, #368]	@ (801af40 <ai_platform_network_init+0x1f8>)
 801adce:	4b5d      	ldr	r3, [pc, #372]	@ (801af44 <ai_platform_network_init+0x1fc>)
 801add0:	6002      	str	r2, [r0, #0]
 801add2:	6802      	ldr	r2, [r0, #0]
 801add4:	429a      	cmp	r2, r3
 801add6:	d019      	beq.n	801ae0c <ai_platform_network_init+0xc4>
 801add8:	e7fe      	b.n	801add8 <ai_platform_network_init+0x90>
 801adda:	2301      	movs	r3, #1
 801addc:	f100 0208 	add.w	r2, r0, #8
 801ade0:	6083      	str	r3, [r0, #8]
 801ade2:	6813      	ldr	r3, [r2, #0]
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	d1fc      	bne.n	801ade2 <ai_platform_network_init+0x9a>
 801ade8:	4a55      	ldr	r2, [pc, #340]	@ (801af40 <ai_platform_network_init+0x1f8>)
 801adea:	4b56      	ldr	r3, [pc, #344]	@ (801af44 <ai_platform_network_init+0x1fc>)
 801adec:	6002      	str	r2, [r0, #0]
 801adee:	6802      	ldr	r2, [r0, #0]
 801adf0:	429a      	cmp	r2, r3
 801adf2:	d01c      	beq.n	801ae2e <ai_platform_network_init+0xe6>
 801adf4:	e7fe      	b.n	801adf4 <ai_platform_network_init+0xac>
 801adf6:	2201      	movs	r2, #1
 801adf8:	609a      	str	r2, [r3, #8]
 801adfa:	689a      	ldr	r2, [r3, #8]
 801adfc:	2a00      	cmp	r2, #0
 801adfe:	d1fc      	bne.n	801adfa <ai_platform_network_init+0xb2>
 801ae00:	494f      	ldr	r1, [pc, #316]	@ (801af40 <ai_platform_network_init+0x1f8>)
 801ae02:	4a50      	ldr	r2, [pc, #320]	@ (801af44 <ai_platform_network_init+0x1fc>)
 801ae04:	6019      	str	r1, [r3, #0]
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	4293      	cmp	r3, r2
 801ae0a:	d12b      	bne.n	801ae64 <ai_platform_network_init+0x11c>
 801ae0c:	f7ff fb8e 	bl	801a52c <_ai_platform_release_crc>
 801ae10:	2600      	movs	r6, #0
 801ae12:	4630      	mov	r0, r6
 801ae14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae18:	2201      	movs	r2, #1
 801ae1a:	609a      	str	r2, [r3, #8]
 801ae1c:	689a      	ldr	r2, [r3, #8]
 801ae1e:	2a00      	cmp	r2, #0
 801ae20:	d1fc      	bne.n	801ae1c <ai_platform_network_init+0xd4>
 801ae22:	4a47      	ldr	r2, [pc, #284]	@ (801af40 <ai_platform_network_init+0x1f8>)
 801ae24:	601a      	str	r2, [r3, #0]
 801ae26:	681a      	ldr	r2, [r3, #0]
 801ae28:	4b46      	ldr	r3, [pc, #280]	@ (801af44 <ai_platform_network_init+0x1fc>)
 801ae2a:	429a      	cmp	r2, r3
 801ae2c:	d11b      	bne.n	801ae66 <ai_platform_network_init+0x11e>
 801ae2e:	f7ff fb7d 	bl	801a52c <_ai_platform_release_crc>
 801ae32:	2e00      	cmp	r6, #0
 801ae34:	d070      	beq.n	801af18 <ai_platform_network_init+0x1d0>
 801ae36:	4b44      	ldr	r3, [pc, #272]	@ (801af48 <ai_platform_network_init+0x200>)
 801ae38:	6832      	ldr	r2, [r6, #0]
 801ae3a:	429a      	cmp	r2, r3
 801ae3c:	d114      	bne.n	801ae68 <ai_platform_network_init+0x120>
 801ae3e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801ae42:	6933      	ldr	r3, [r6, #16]
 801ae44:	89b5      	ldrh	r5, [r6, #12]
 801ae46:	89f7      	ldrh	r7, [r6, #14]
 801ae48:	e9c4 2107 	strd	r2, r1, [r4, #28]
 801ae4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ae4e:	2303      	movs	r3, #3
 801ae50:	4626      	mov	r6, r4
 801ae52:	4620      	mov	r0, r4
 801ae54:	84e7      	strh	r7, [r4, #38]	@ 0x26
 801ae56:	84a5      	strh	r5, [r4, #36]	@ 0x24
 801ae58:	60e3      	str	r3, [r4, #12]
 801ae5a:	f000 fbdd 	bl	801b618 <ai_layers_init_all>
 801ae5e:	4630      	mov	r0, r6
 801ae60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae64:	e7fe      	b.n	801ae64 <ai_platform_network_init+0x11c>
 801ae66:	e7fe      	b.n	801ae66 <ai_platform_network_init+0x11e>
 801ae68:	4635      	mov	r5, r6
 801ae6a:	2101      	movs	r1, #1
 801ae6c:	4628      	mov	r0, r5
 801ae6e:	6876      	ldr	r6, [r6, #4]
 801ae70:	f7ff fb0c 	bl	801a48c <ai_buffer_get_size>
 801ae74:	4681      	mov	r9, r0
 801ae76:	f105 081c 	add.w	r8, r5, #28
 801ae7a:	2101      	movs	r1, #1
 801ae7c:	4640      	mov	r0, r8
 801ae7e:	6a2f      	ldr	r7, [r5, #32]
 801ae80:	f7ff fb04 	bl	801a48c <ai_buffer_get_size>
 801ae84:	f1b9 0f00 	cmp.w	r9, #0
 801ae88:	d024      	beq.n	801aed4 <ai_platform_network_init+0x18c>
 801ae8a:	2301      	movs	r3, #1
 801ae8c:	469e      	mov	lr, r3
 801ae8e:	bb28      	cbnz	r0, 801aedc <ai_platform_network_init+0x194>
 801ae90:	4680      	mov	r8, r0
 801ae92:	4607      	mov	r7, r0
 801ae94:	b36e      	cbz	r6, 801aef2 <ai_platform_network_init+0x1aa>
 801ae96:	8be2      	ldrh	r2, [r4, #30]
 801ae98:	4572      	cmp	r2, lr
 801ae9a:	d322      	bcc.n	801aee2 <ai_platform_network_init+0x19a>
 801ae9c:	b143      	cbz	r3, 801aeb0 <ai_platform_network_init+0x168>
 801ae9e:	46ac      	mov	ip, r5
 801aea0:	6a25      	ldr	r5, [r4, #32]
 801aea2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801aea6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801aea8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801aeac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801aeb0:	2500      	movs	r5, #0
 801aeb2:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 801aeb4:	f8a4 e01e 	strh.w	lr, [r4, #30]
 801aeb8:	42bb      	cmp	r3, r7
 801aeba:	83a5      	strh	r5, [r4, #28]
 801aebc:	d322      	bcc.n	801af04 <ai_platform_network_init+0x1bc>
 801aebe:	b34f      	cbz	r7, 801af14 <ai_platform_network_init+0x1cc>
 801aec0:	46c6      	mov	lr, r8
 801aec2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801aec4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aec8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801aeca:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801aece:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801aed2:	e7bc      	b.n	801ae4e <ai_platform_network_init+0x106>
 801aed4:	464b      	mov	r3, r9
 801aed6:	46ce      	mov	lr, r9
 801aed8:	464d      	mov	r5, r9
 801aeda:	e7d8      	b.n	801ae8e <ai_platform_network_init+0x146>
 801aedc:	b317      	cbz	r7, 801af24 <ai_platform_network_init+0x1dc>
 801aede:	2701      	movs	r7, #1
 801aee0:	e7d8      	b.n	801ae94 <ai_platform_network_init+0x14c>
 801aee2:	2212      	movs	r2, #18
 801aee4:	2116      	movs	r1, #22
 801aee6:	f104 0010 	add.w	r0, r4, #16
 801aeea:	f000 fb61 	bl	801b5b0 <core_set_error>
 801aeee:	2600      	movs	r6, #0
 801aef0:	e78f      	b.n	801ae12 <ai_platform_network_init+0xca>
 801aef2:	f1b9 0f00 	cmp.w	r9, #0
 801aef6:	d0ce      	beq.n	801ae96 <ai_platform_network_init+0x14e>
 801aef8:	2110      	movs	r1, #16
 801aefa:	2212      	movs	r2, #18
 801aefc:	1860      	adds	r0, r4, r1
 801aefe:	f000 fb57 	bl	801b5b0 <core_set_error>
 801af02:	e786      	b.n	801ae12 <ai_platform_network_init+0xca>
 801af04:	2213      	movs	r2, #19
 801af06:	2116      	movs	r1, #22
 801af08:	f104 0010 	add.w	r0, r4, #16
 801af0c:	f000 fb50 	bl	801b5b0 <core_set_error>
 801af10:	462e      	mov	r6, r5
 801af12:	e77e      	b.n	801ae12 <ai_platform_network_init+0xca>
 801af14:	463d      	mov	r5, r7
 801af16:	e79a      	b.n	801ae4e <ai_platform_network_init+0x106>
 801af18:	2110      	movs	r1, #16
 801af1a:	2211      	movs	r2, #17
 801af1c:	1860      	adds	r0, r4, r1
 801af1e:	f000 fb47 	bl	801b5b0 <core_set_error>
 801af22:	e776      	b.n	801ae12 <ai_platform_network_init+0xca>
 801af24:	2110      	movs	r1, #16
 801af26:	2213      	movs	r2, #19
 801af28:	1860      	adds	r0, r4, r1
 801af2a:	f000 fb41 	bl	801b5b0 <core_set_error>
 801af2e:	463e      	mov	r6, r7
 801af30:	e76f      	b.n	801ae12 <ai_platform_network_init+0xca>
 801af32:	bf00      	nop
 801af34:	a1c00100 	.word	0xa1c00100
 801af38:	40023000 	.word	0x40023000
 801af3c:	50023000 	.word	0x50023000
 801af40:	f407a5c2 	.word	0xf407a5c2
 801af44:	b5e8b5cd 	.word	0xb5e8b5cd
 801af48:	a1facade 	.word	0xa1facade

0801af4c <ai_platform_network_post_init>:
 801af4c:	b538      	push	{r3, r4, r5, lr}
 801af4e:	b1e8      	cbz	r0, 801af8c <ai_platform_network_post_init+0x40>
 801af50:	4b47      	ldr	r3, [pc, #284]	@ (801b070 <ai_platform_network_post_init+0x124>)
 801af52:	6802      	ldr	r2, [r0, #0]
 801af54:	4604      	mov	r4, r0
 801af56:	429a      	cmp	r2, r3
 801af58:	d118      	bne.n	801af8c <ai_platform_network_post_init+0x40>
 801af5a:	f7ff fae5 	bl	801a528 <_ai_platform_acquire_crc>
 801af5e:	4b45      	ldr	r3, [pc, #276]	@ (801b074 <ai_platform_network_post_init+0x128>)
 801af60:	f020 5280 	bic.w	r2, r0, #268435456	@ 0x10000000
 801af64:	429a      	cmp	r2, r3
 801af66:	d038      	beq.n	801afda <ai_platform_network_post_init+0x8e>
 801af68:	2218      	movs	r2, #24
 801af6a:	609a      	str	r2, [r3, #8]
 801af6c:	689a      	ldr	r2, [r3, #8]
 801af6e:	2a18      	cmp	r2, #24
 801af70:	d050      	beq.n	801b014 <ai_platform_network_post_init+0xc8>
 801af72:	2301      	movs	r3, #1
 801af74:	4a40      	ldr	r2, [pc, #256]	@ (801b078 <ai_platform_network_post_init+0x12c>)
 801af76:	6093      	str	r3, [r2, #8]
 801af78:	6893      	ldr	r3, [r2, #8]
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d1fc      	bne.n	801af78 <ai_platform_network_post_init+0x2c>
 801af7e:	493f      	ldr	r1, [pc, #252]	@ (801b07c <ai_platform_network_post_init+0x130>)
 801af80:	4b3f      	ldr	r3, [pc, #252]	@ (801b080 <ai_platform_network_post_init+0x134>)
 801af82:	6011      	str	r1, [r2, #0]
 801af84:	6812      	ldr	r2, [r2, #0]
 801af86:	429a      	cmp	r2, r3
 801af88:	d04f      	beq.n	801b02a <ai_platform_network_post_init+0xde>
 801af8a:	e7fe      	b.n	801af8a <ai_platform_network_post_init+0x3e>
 801af8c:	f7ff facc 	bl	801a528 <_ai_platform_acquire_crc>
 801af90:	4b38      	ldr	r3, [pc, #224]	@ (801b074 <ai_platform_network_post_init+0x128>)
 801af92:	f020 5280 	bic.w	r2, r0, #268435456	@ 0x10000000
 801af96:	429a      	cmp	r2, r3
 801af98:	d011      	beq.n	801afbe <ai_platform_network_post_init+0x72>
 801af9a:	2218      	movs	r2, #24
 801af9c:	609a      	str	r2, [r3, #8]
 801af9e:	689a      	ldr	r2, [r3, #8]
 801afa0:	2a18      	cmp	r2, #24
 801afa2:	d028      	beq.n	801aff6 <ai_platform_network_post_init+0xaa>
 801afa4:	2301      	movs	r3, #1
 801afa6:	4a34      	ldr	r2, [pc, #208]	@ (801b078 <ai_platform_network_post_init+0x12c>)
 801afa8:	6093      	str	r3, [r2, #8]
 801afaa:	6893      	ldr	r3, [r2, #8]
 801afac:	2b00      	cmp	r3, #0
 801afae:	d1fc      	bne.n	801afaa <ai_platform_network_post_init+0x5e>
 801afb0:	4932      	ldr	r1, [pc, #200]	@ (801b07c <ai_platform_network_post_init+0x130>)
 801afb2:	4b33      	ldr	r3, [pc, #204]	@ (801b080 <ai_platform_network_post_init+0x134>)
 801afb4:	6011      	str	r1, [r2, #0]
 801afb6:	6812      	ldr	r2, [r2, #0]
 801afb8:	429a      	cmp	r2, r3
 801afba:	d027      	beq.n	801b00c <ai_platform_network_post_init+0xc0>
 801afbc:	e7fe      	b.n	801afbc <ai_platform_network_post_init+0x70>
 801afbe:	2301      	movs	r3, #1
 801afc0:	f100 0208 	add.w	r2, r0, #8
 801afc4:	6083      	str	r3, [r0, #8]
 801afc6:	6813      	ldr	r3, [r2, #0]
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d1fc      	bne.n	801afc6 <ai_platform_network_post_init+0x7a>
 801afcc:	4a2b      	ldr	r2, [pc, #172]	@ (801b07c <ai_platform_network_post_init+0x130>)
 801afce:	4b2c      	ldr	r3, [pc, #176]	@ (801b080 <ai_platform_network_post_init+0x134>)
 801afd0:	6002      	str	r2, [r0, #0]
 801afd2:	6802      	ldr	r2, [r0, #0]
 801afd4:	429a      	cmp	r2, r3
 801afd6:	d019      	beq.n	801b00c <ai_platform_network_post_init+0xc0>
 801afd8:	e7fe      	b.n	801afd8 <ai_platform_network_post_init+0x8c>
 801afda:	2301      	movs	r3, #1
 801afdc:	f100 0208 	add.w	r2, r0, #8
 801afe0:	6083      	str	r3, [r0, #8]
 801afe2:	6813      	ldr	r3, [r2, #0]
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d1fc      	bne.n	801afe2 <ai_platform_network_post_init+0x96>
 801afe8:	4a24      	ldr	r2, [pc, #144]	@ (801b07c <ai_platform_network_post_init+0x130>)
 801afea:	4b25      	ldr	r3, [pc, #148]	@ (801b080 <ai_platform_network_post_init+0x134>)
 801afec:	6002      	str	r2, [r0, #0]
 801afee:	6802      	ldr	r2, [r0, #0]
 801aff0:	429a      	cmp	r2, r3
 801aff2:	d01a      	beq.n	801b02a <ai_platform_network_post_init+0xde>
 801aff4:	e7fe      	b.n	801aff4 <ai_platform_network_post_init+0xa8>
 801aff6:	2201      	movs	r2, #1
 801aff8:	609a      	str	r2, [r3, #8]
 801affa:	689a      	ldr	r2, [r3, #8]
 801affc:	2a00      	cmp	r2, #0
 801affe:	d1fc      	bne.n	801affa <ai_platform_network_post_init+0xae>
 801b000:	491e      	ldr	r1, [pc, #120]	@ (801b07c <ai_platform_network_post_init+0x130>)
 801b002:	4a1f      	ldr	r2, [pc, #124]	@ (801b080 <ai_platform_network_post_init+0x134>)
 801b004:	6019      	str	r1, [r3, #0]
 801b006:	681b      	ldr	r3, [r3, #0]
 801b008:	4293      	cmp	r3, r2
 801b00a:	d126      	bne.n	801b05a <ai_platform_network_post_init+0x10e>
 801b00c:	f7ff fa8e 	bl	801a52c <_ai_platform_release_crc>
 801b010:	2000      	movs	r0, #0
 801b012:	bd38      	pop	{r3, r4, r5, pc}
 801b014:	2201      	movs	r2, #1
 801b016:	609a      	str	r2, [r3, #8]
 801b018:	689a      	ldr	r2, [r3, #8]
 801b01a:	2a00      	cmp	r2, #0
 801b01c:	d1fc      	bne.n	801b018 <ai_platform_network_post_init+0xcc>
 801b01e:	4917      	ldr	r1, [pc, #92]	@ (801b07c <ai_platform_network_post_init+0x130>)
 801b020:	4a17      	ldr	r2, [pc, #92]	@ (801b080 <ai_platform_network_post_init+0x134>)
 801b022:	6019      	str	r1, [r3, #0]
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	4293      	cmp	r3, r2
 801b028:	d118      	bne.n	801b05c <ai_platform_network_post_init+0x110>
 801b02a:	f7ff fa7f 	bl	801a52c <_ai_platform_release_crc>
 801b02e:	68e3      	ldr	r3, [r4, #12]
 801b030:	f013 0502 	ands.w	r5, r3, #2
 801b034:	d015      	beq.n	801b062 <ai_platform_network_post_init+0x116>
 801b036:	4620      	mov	r0, r4
 801b038:	f000 fafc 	bl	801b634 <ai_layers_post_init_all>
 801b03c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801b03e:	b173      	cbz	r3, 801b05e <ai_platform_network_post_init+0x112>
 801b040:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 801b042:	b165      	cbz	r5, 801b05e <ai_platform_network_post_init+0x112>
 801b044:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	@ 0x3c
 801b048:	4629      	mov	r1, r5
 801b04a:	2000      	movs	r0, #0
 801b04c:	4798      	blx	r3
 801b04e:	692b      	ldr	r3, [r5, #16]
 801b050:	42ab      	cmp	r3, r5
 801b052:	d004      	beq.n	801b05e <ai_platform_network_post_init+0x112>
 801b054:	b11b      	cbz	r3, 801b05e <ai_platform_network_post_init+0x112>
 801b056:	461d      	mov	r5, r3
 801b058:	e7f3      	b.n	801b042 <ai_platform_network_post_init+0xf6>
 801b05a:	e7fe      	b.n	801b05a <ai_platform_network_post_init+0x10e>
 801b05c:	e7fe      	b.n	801b05c <ai_platform_network_post_init+0x110>
 801b05e:	2001      	movs	r0, #1
 801b060:	bd38      	pop	{r3, r4, r5, pc}
 801b062:	2210      	movs	r2, #16
 801b064:	2111      	movs	r1, #17
 801b066:	18a0      	adds	r0, r4, r2
 801b068:	f000 faa2 	bl	801b5b0 <core_set_error>
 801b06c:	4628      	mov	r0, r5
 801b06e:	bd38      	pop	{r3, r4, r5, pc}
 801b070:	a1c00100 	.word	0xa1c00100
 801b074:	40023000 	.word	0x40023000
 801b078:	50023000 	.word	0x50023000
 801b07c:	f407a5c2 	.word	0xf407a5c2
 801b080:	b5e8b5cd 	.word	0xb5e8b5cd

0801b084 <ai_platform_network_process>:
 801b084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b088:	4605      	mov	r5, r0
 801b08a:	460e      	mov	r6, r1
 801b08c:	4693      	mov	fp, r2
 801b08e:	b085      	sub	sp, #20
 801b090:	b120      	cbz	r0, 801b09c <ai_platform_network_process+0x18>
 801b092:	4bb2      	ldr	r3, [pc, #712]	@ (801b35c <ai_platform_network_process+0x2d8>)
 801b094:	6802      	ldr	r2, [r0, #0]
 801b096:	429a      	cmp	r2, r3
 801b098:	bf18      	it	ne
 801b09a:	2500      	movne	r5, #0
 801b09c:	f7ff fa44 	bl	801a528 <_ai_platform_acquire_crc>
 801b0a0:	4baf      	ldr	r3, [pc, #700]	@ (801b360 <ai_platform_network_process+0x2dc>)
 801b0a2:	f020 5280 	bic.w	r2, r0, #268435456	@ 0x10000000
 801b0a6:	429a      	cmp	r2, r3
 801b0a8:	d011      	beq.n	801b0ce <ai_platform_network_process+0x4a>
 801b0aa:	2218      	movs	r2, #24
 801b0ac:	609a      	str	r2, [r3, #8]
 801b0ae:	689a      	ldr	r2, [r3, #8]
 801b0b0:	2a18      	cmp	r2, #24
 801b0b2:	d01a      	beq.n	801b0ea <ai_platform_network_process+0x66>
 801b0b4:	2301      	movs	r3, #1
 801b0b6:	4aab      	ldr	r2, [pc, #684]	@ (801b364 <ai_platform_network_process+0x2e0>)
 801b0b8:	6093      	str	r3, [r2, #8]
 801b0ba:	6893      	ldr	r3, [r2, #8]
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d1fc      	bne.n	801b0ba <ai_platform_network_process+0x36>
 801b0c0:	4ba9      	ldr	r3, [pc, #676]	@ (801b368 <ai_platform_network_process+0x2e4>)
 801b0c2:	6013      	str	r3, [r2, #0]
 801b0c4:	6812      	ldr	r2, [r2, #0]
 801b0c6:	4ba9      	ldr	r3, [pc, #676]	@ (801b36c <ai_platform_network_process+0x2e8>)
 801b0c8:	429a      	cmp	r2, r3
 801b0ca:	d01a      	beq.n	801b102 <ai_platform_network_process+0x7e>
 801b0cc:	e7fe      	b.n	801b0cc <ai_platform_network_process+0x48>
 801b0ce:	2301      	movs	r3, #1
 801b0d0:	f100 0208 	add.w	r2, r0, #8
 801b0d4:	6083      	str	r3, [r0, #8]
 801b0d6:	6813      	ldr	r3, [r2, #0]
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d1fc      	bne.n	801b0d6 <ai_platform_network_process+0x52>
 801b0dc:	4ba2      	ldr	r3, [pc, #648]	@ (801b368 <ai_platform_network_process+0x2e4>)
 801b0de:	6003      	str	r3, [r0, #0]
 801b0e0:	6802      	ldr	r2, [r0, #0]
 801b0e2:	4ba2      	ldr	r3, [pc, #648]	@ (801b36c <ai_platform_network_process+0x2e8>)
 801b0e4:	429a      	cmp	r2, r3
 801b0e6:	d00c      	beq.n	801b102 <ai_platform_network_process+0x7e>
 801b0e8:	e7fe      	b.n	801b0e8 <ai_platform_network_process+0x64>
 801b0ea:	2201      	movs	r2, #1
 801b0ec:	609a      	str	r2, [r3, #8]
 801b0ee:	689a      	ldr	r2, [r3, #8]
 801b0f0:	2a00      	cmp	r2, #0
 801b0f2:	d1fc      	bne.n	801b0ee <ai_platform_network_process+0x6a>
 801b0f4:	4a9c      	ldr	r2, [pc, #624]	@ (801b368 <ai_platform_network_process+0x2e4>)
 801b0f6:	601a      	str	r2, [r3, #0]
 801b0f8:	681a      	ldr	r2, [r3, #0]
 801b0fa:	4b9c      	ldr	r3, [pc, #624]	@ (801b36c <ai_platform_network_process+0x2e8>)
 801b0fc:	429a      	cmp	r2, r3
 801b0fe:	f040 812b 	bne.w	801b358 <ai_platform_network_process+0x2d4>
 801b102:	f7ff fa13 	bl	801a52c <_ai_platform_release_crc>
 801b106:	2d00      	cmp	r5, #0
 801b108:	f000 8151 	beq.w	801b3ae <ai_platform_network_process+0x32a>
 801b10c:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 801b10e:	2b00      	cmp	r3, #0
 801b110:	f000 812e 	beq.w	801b370 <ai_platform_network_process+0x2ec>
 801b114:	2700      	movs	r7, #0
 801b116:	68eb      	ldr	r3, [r5, #12]
 801b118:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801b11c:	f003 0303 	and.w	r3, r3, #3
 801b120:	2b03      	cmp	r3, #3
 801b122:	616f      	str	r7, [r5, #20]
 801b124:	f040 813b 	bne.w	801b39e <ai_platform_network_process+0x31a>
 801b128:	2e00      	cmp	r6, #0
 801b12a:	f000 8127 	beq.w	801b37c <ai_platform_network_process+0x2f8>
 801b12e:	f1ba 0f00 	cmp.w	sl, #0
 801b132:	f000 8123 	beq.w	801b37c <ai_platform_network_process+0x2f8>
 801b136:	f8ba 3000 	ldrh.w	r3, [sl]
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	f000 811e 	beq.w	801b37c <ai_platform_network_process+0x2f8>
 801b140:	69b3      	ldr	r3, [r6, #24]
 801b142:	f8cd b00c 	str.w	fp, [sp, #12]
 801b146:	681b      	ldr	r3, [r3, #0]
 801b148:	e9cd 3501 	strd	r3, r5, [sp, #4]
 801b14c:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b150:	2b00      	cmp	r3, #0
 801b152:	d071      	beq.n	801b238 <ai_platform_network_process+0x1b4>
 801b154:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 801b158:	2c00      	cmp	r4, #0
 801b15a:	d06d      	beq.n	801b238 <ai_platform_network_process+0x1b4>
 801b15c:	f8da 3008 	ldr.w	r3, [sl, #8]
 801b160:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 801b164:	f8d3 9000 	ldr.w	r9, [r3]
 801b168:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 801b16c:	f000 81dc 	beq.w	801b528 <ai_platform_network_process+0x4a4>
 801b170:	69a3      	ldr	r3, [r4, #24]
 801b172:	2101      	movs	r1, #1
 801b174:	4630      	mov	r0, r6
 801b176:	685d      	ldr	r5, [r3, #4]
 801b178:	f7ff f988 	bl	801a48c <ai_buffer_get_size>
 801b17c:	4285      	cmp	r5, r0
 801b17e:	f0c0 8118 	bcc.w	801b3b2 <ai_platform_network_process+0x32e>
 801b182:	68e0      	ldr	r0, [r4, #12]
 801b184:	69b1      	ldr	r1, [r6, #24]
 801b186:	68c2      	ldr	r2, [r0, #12]
 801b188:	68cb      	ldr	r3, [r1, #12]
 801b18a:	429a      	cmp	r2, r3
 801b18c:	f040 8111 	bne.w	801b3b2 <ai_platform_network_process+0x32e>
 801b190:	6882      	ldr	r2, [r0, #8]
 801b192:	688b      	ldr	r3, [r1, #8]
 801b194:	429a      	cmp	r2, r3
 801b196:	f040 810c 	bne.w	801b3b2 <ai_platform_network_process+0x32e>
 801b19a:	6842      	ldr	r2, [r0, #4]
 801b19c:	684b      	ldr	r3, [r1, #4]
 801b19e:	429a      	cmp	r2, r3
 801b1a0:	f040 8107 	bne.w	801b3b2 <ai_platform_network_process+0x32e>
 801b1a4:	69a3      	ldr	r3, [r4, #24]
 801b1a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b1aa:	f001 f943 	bl	801c434 <ai_array_get_data_byte_size>
 801b1ae:	4605      	mov	r5, r0
 801b1b0:	4620      	mov	r0, r4
 801b1b2:	f001 f955 	bl	801c460 <get_tensor_byte_size>
 801b1b6:	4285      	cmp	r5, r0
 801b1b8:	f0c0 80fb 	bcc.w	801b3b2 <ai_platform_network_process+0x32e>
 801b1bc:	69a3      	ldr	r3, [r4, #24]
 801b1be:	6818      	ldr	r0, [r3, #0]
 801b1c0:	f001 f8a4 	bl	801c30c <ai_array_to_buffer_fmt>
 801b1c4:	6833      	ldr	r3, [r6, #0]
 801b1c6:	4058      	eors	r0, r3
 801b1c8:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 801b1cc:	f040 81b7 	bne.w	801b53e <ai_platform_network_process+0x4ba>
 801b1d0:	6873      	ldr	r3, [r6, #4]
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	f000 81aa 	beq.w	801b52c <ai_platform_network_process+0x4a8>
 801b1d8:	69b3      	ldr	r3, [r6, #24]
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	f000 819a 	beq.w	801b516 <ai_platform_network_process+0x492>
 801b1e2:	9a01      	ldr	r2, [sp, #4]
 801b1e4:	4620      	mov	r0, r4
 801b1e6:	429a      	cmp	r2, r3
 801b1e8:	bf38      	it	cc
 801b1ea:	461a      	movcc	r2, r3
 801b1ec:	9201      	str	r2, [sp, #4]
 801b1ee:	f001 f937 	bl	801c460 <get_tensor_byte_size>
 801b1f2:	f8c8 0008 	str.w	r0, [r8, #8]
 801b1f6:	69b3      	ldr	r3, [r6, #24]
 801b1f8:	3701      	adds	r7, #1
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	361c      	adds	r6, #28
 801b1fe:	fb00 f303 	mul.w	r3, r0, r3
 801b202:	f8c8 300c 	str.w	r3, [r8, #12]
 801b206:	f856 1c18 	ldr.w	r1, [r6, #-24]
 801b20a:	440b      	add	r3, r1
 801b20c:	f8c8 1004 	str.w	r1, [r8, #4]
 801b210:	f849 300b 	str.w	r3, [r9, fp]
 801b214:	69a0      	ldr	r0, [r4, #24]
 801b216:	6803      	ldr	r3, [r0, #0]
 801b218:	009a      	lsls	r2, r3, #2
 801b21a:	f100 80ba 	bmi.w	801b392 <ai_platform_network_process+0x30e>
 801b21e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801b222:	1a9b      	subs	r3, r3, r2
 801b224:	4419      	add	r1, r3
 801b226:	6081      	str	r1, [r0, #8]
 801b228:	69a3      	ldr	r3, [r4, #24]
 801b22a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801b22e:	60da      	str	r2, [r3, #12]
 801b230:	f8ba 3000 	ldrh.w	r3, [sl]
 801b234:	42bb      	cmp	r3, r7
 801b236:	d889      	bhi.n	801b14c <ai_platform_network_process+0xc8>
 801b238:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 801b23c:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 801b23e:	f1bb 0f00 	cmp.w	fp, #0
 801b242:	f000 8185 	beq.w	801b550 <ai_platform_network_process+0x4cc>
 801b246:	2a01      	cmp	r2, #1
 801b248:	f240 815d 	bls.w	801b506 <ai_platform_network_process+0x482>
 801b24c:	f8d5 9030 	ldr.w	r9, [r5, #48]	@ 0x30
 801b250:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801b254:	2b00      	cmp	r3, #0
 801b256:	f000 8156 	beq.w	801b506 <ai_platform_network_process+0x482>
 801b25a:	465e      	mov	r6, fp
 801b25c:	2700      	movs	r7, #0
 801b25e:	462c      	mov	r4, r5
 801b260:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b264:	2b00      	cmp	r3, #0
 801b266:	f000 80b2 	beq.w	801b3ce <ai_platform_network_process+0x34a>
 801b26a:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 801b26e:	2d00      	cmp	r5, #0
 801b270:	f000 80ad 	beq.w	801b3ce <ai_platform_network_process+0x34a>
 801b274:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801b278:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 801b27c:	f8d3 8000 	ldr.w	r8, [r3]
 801b280:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 801b284:	f000 8170 	beq.w	801b568 <ai_platform_network_process+0x4e4>
 801b288:	69ab      	ldr	r3, [r5, #24]
 801b28a:	2101      	movs	r1, #1
 801b28c:	685b      	ldr	r3, [r3, #4]
 801b28e:	4630      	mov	r0, r6
 801b290:	9302      	str	r3, [sp, #8]
 801b292:	f7ff f8fb 	bl	801a48c <ai_buffer_get_size>
 801b296:	9b02      	ldr	r3, [sp, #8]
 801b298:	4283      	cmp	r3, r0
 801b29a:	f0c0 8133 	bcc.w	801b504 <ai_platform_network_process+0x480>
 801b29e:	68e8      	ldr	r0, [r5, #12]
 801b2a0:	69b1      	ldr	r1, [r6, #24]
 801b2a2:	68c2      	ldr	r2, [r0, #12]
 801b2a4:	68cb      	ldr	r3, [r1, #12]
 801b2a6:	429a      	cmp	r2, r3
 801b2a8:	f040 812c 	bne.w	801b504 <ai_platform_network_process+0x480>
 801b2ac:	6882      	ldr	r2, [r0, #8]
 801b2ae:	688b      	ldr	r3, [r1, #8]
 801b2b0:	429a      	cmp	r2, r3
 801b2b2:	f040 8127 	bne.w	801b504 <ai_platform_network_process+0x480>
 801b2b6:	6842      	ldr	r2, [r0, #4]
 801b2b8:	684b      	ldr	r3, [r1, #4]
 801b2ba:	429a      	cmp	r2, r3
 801b2bc:	f040 8122 	bne.w	801b504 <ai_platform_network_process+0x480>
 801b2c0:	69ab      	ldr	r3, [r5, #24]
 801b2c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b2c6:	f001 f8b5 	bl	801c434 <ai_array_get_data_byte_size>
 801b2ca:	4603      	mov	r3, r0
 801b2cc:	4628      	mov	r0, r5
 801b2ce:	9302      	str	r3, [sp, #8]
 801b2d0:	f001 f8c6 	bl	801c460 <get_tensor_byte_size>
 801b2d4:	9b02      	ldr	r3, [sp, #8]
 801b2d6:	4283      	cmp	r3, r0
 801b2d8:	f0c0 8114 	bcc.w	801b504 <ai_platform_network_process+0x480>
 801b2dc:	69ab      	ldr	r3, [r5, #24]
 801b2de:	6818      	ldr	r0, [r3, #0]
 801b2e0:	f001 f814 	bl	801c30c <ai_array_to_buffer_fmt>
 801b2e4:	6833      	ldr	r3, [r6, #0]
 801b2e6:	4058      	eors	r0, r3
 801b2e8:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 801b2ec:	f040 8134 	bne.w	801b558 <ai_platform_network_process+0x4d4>
 801b2f0:	6873      	ldr	r3, [r6, #4]
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	f000 814b 	beq.w	801b58e <ai_platform_network_process+0x50a>
 801b2f8:	69b3      	ldr	r3, [r6, #24]
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	f000 813d 	beq.w	801b57c <ai_platform_network_process+0x4f8>
 801b302:	9a01      	ldr	r2, [sp, #4]
 801b304:	4628      	mov	r0, r5
 801b306:	429a      	cmp	r2, r3
 801b308:	bf38      	it	cc
 801b30a:	461a      	movcc	r2, r3
 801b30c:	9201      	str	r2, [sp, #4]
 801b30e:	f001 f8a7 	bl	801c460 <get_tensor_byte_size>
 801b312:	f8ca 0008 	str.w	r0, [sl, #8]
 801b316:	69b3      	ldr	r3, [r6, #24]
 801b318:	3701      	adds	r7, #1
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	361c      	adds	r6, #28
 801b31e:	fb00 f303 	mul.w	r3, r0, r3
 801b322:	f8ca 300c 	str.w	r3, [sl, #12]
 801b326:	f856 1c18 	ldr.w	r1, [r6, #-24]
 801b32a:	440b      	add	r3, r1
 801b32c:	f8ca 1004 	str.w	r1, [sl, #4]
 801b330:	f848 300b 	str.w	r3, [r8, fp]
 801b334:	69a8      	ldr	r0, [r5, #24]
 801b336:	6803      	ldr	r3, [r0, #0]
 801b338:	009b      	lsls	r3, r3, #2
 801b33a:	d443      	bmi.n	801b3c4 <ai_platform_network_process+0x340>
 801b33c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801b340:	1a9b      	subs	r3, r3, r2
 801b342:	4419      	add	r1, r3
 801b344:	6081      	str	r1, [r0, #8]
 801b346:	69ab      	ldr	r3, [r5, #24]
 801b348:	f8da 2004 	ldr.w	r2, [sl, #4]
 801b34c:	60da      	str	r2, [r3, #12]
 801b34e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801b352:	429f      	cmp	r7, r3
 801b354:	d384      	bcc.n	801b260 <ai_platform_network_process+0x1dc>
 801b356:	e03a      	b.n	801b3ce <ai_platform_network_process+0x34a>
 801b358:	e7fe      	b.n	801b358 <ai_platform_network_process+0x2d4>
 801b35a:	bf00      	nop
 801b35c:	a1c00100 	.word	0xa1c00100
 801b360:	40023000 	.word	0x40023000
 801b364:	50023000 	.word	0x50023000
 801b368:	f407a5c2 	.word	0xf407a5c2
 801b36c:	b5e8b5cd 	.word	0xb5e8b5cd
 801b370:	68ea      	ldr	r2, [r5, #12]
 801b372:	616b      	str	r3, [r5, #20]
 801b374:	f002 0203 	and.w	r2, r2, #3
 801b378:	2a03      	cmp	r2, #3
 801b37a:	d110      	bne.n	801b39e <ai_platform_network_process+0x31a>
 801b37c:	2217      	movs	r2, #23
 801b37e:	2112      	movs	r1, #18
 801b380:	f105 0010 	add.w	r0, r5, #16
 801b384:	f000 f914 	bl	801b5b0 <core_set_error>
 801b388:	2400      	movs	r4, #0
 801b38a:	4620      	mov	r0, r4
 801b38c:	b005      	add	sp, #20
 801b38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b392:	f8ba 3000 	ldrh.w	r3, [sl]
 801b396:	429f      	cmp	r7, r3
 801b398:	f4ff aed8 	bcc.w	801b14c <ai_platform_network_process+0xc8>
 801b39c:	e74c      	b.n	801b238 <ai_platform_network_process+0x1b4>
 801b39e:	2230      	movs	r2, #48	@ 0x30
 801b3a0:	2111      	movs	r1, #17
 801b3a2:	f105 0010 	add.w	r0, r5, #16
 801b3a6:	f000 f903 	bl	801b5b0 <core_set_error>
 801b3aa:	2400      	movs	r4, #0
 801b3ac:	e7ed      	b.n	801b38a <ai_platform_network_process+0x306>
 801b3ae:	462c      	mov	r4, r5
 801b3b0:	e7eb      	b.n	801b38a <ai_platform_network_process+0x306>
 801b3b2:	9d02      	ldr	r5, [sp, #8]
 801b3b4:	2218      	movs	r2, #24
 801b3b6:	2112      	movs	r1, #18
 801b3b8:	f105 0010 	add.w	r0, r5, #16
 801b3bc:	f000 f8f8 	bl	801b5b0 <core_set_error>
 801b3c0:	2400      	movs	r4, #0
 801b3c2:	e7e2      	b.n	801b38a <ai_platform_network_process+0x306>
 801b3c4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801b3c8:	429f      	cmp	r7, r3
 801b3ca:	f4ff af49 	bcc.w	801b260 <ai_platform_network_process+0x1dc>
 801b3ce:	4625      	mov	r5, r4
 801b3d0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b3d4:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 801b3d6:	82a3      	strh	r3, [r4, #20]
 801b3d8:	2a00      	cmp	r2, #0
 801b3da:	f040 808d 	bne.w	801b4f8 <ai_platform_network_process+0x474>
 801b3de:	4616      	mov	r6, r2
 801b3e0:	4617      	mov	r7, r2
 801b3e2:	8aec      	ldrh	r4, [r5, #22]
 801b3e4:	429c      	cmp	r4, r3
 801b3e6:	bf38      	it	cc
 801b3e8:	46ab      	movcc	fp, r5
 801b3ea:	d2ce      	bcs.n	801b38a <ai_platform_network_process+0x306>
 801b3ec:	2e00      	cmp	r6, #0
 801b3ee:	d031      	beq.n	801b454 <ai_platform_network_process+0x3d0>
 801b3f0:	f04f 0800 	mov.w	r8, #0
 801b3f4:	e015      	b.n	801b422 <ai_platform_network_process+0x39e>
 801b3f6:	6882      	ldr	r2, [r0, #8]
 801b3f8:	68c5      	ldr	r5, [r0, #12]
 801b3fa:	6863      	ldr	r3, [r4, #4]
 801b3fc:	1b52      	subs	r2, r2, r5
 801b3fe:	4413      	add	r3, r2
 801b400:	6083      	str	r3, [r0, #8]
 801b402:	698b      	ldr	r3, [r1, #24]
 801b404:	6862      	ldr	r2, [r4, #4]
 801b406:	60da      	str	r2, [r3, #12]
 801b408:	f859 200a 	ldr.w	r2, [r9, sl]
 801b40c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801b410:	440b      	add	r3, r1
 801b412:	4293      	cmp	r3, r2
 801b414:	bf28      	it	cs
 801b416:	68e3      	ldrcs	r3, [r4, #12]
 801b418:	f108 0801 	add.w	r8, r8, #1
 801b41c:	bf28      	it	cs
 801b41e:	1ad3      	subcs	r3, r2, r3
 801b420:	6063      	str	r3, [r4, #4]
 801b422:	8833      	ldrh	r3, [r6, #0]
 801b424:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 801b428:	4543      	cmp	r3, r8
 801b42a:	d913      	bls.n	801b454 <ai_platform_network_process+0x3d0>
 801b42c:	6873      	ldr	r3, [r6, #4]
 801b42e:	b18b      	cbz	r3, 801b454 <ai_platform_network_process+0x3d0>
 801b430:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 801b434:	b171      	cbz	r1, 801b454 <ai_platform_network_process+0x3d0>
 801b436:	6988      	ldr	r0, [r1, #24]
 801b438:	68b2      	ldr	r2, [r6, #8]
 801b43a:	6803      	ldr	r3, [r0, #0]
 801b43c:	f8d2 9000 	ldr.w	r9, [r2]
 801b440:	009d      	lsls	r5, r3, #2
 801b442:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 801b446:	d5d6      	bpl.n	801b3f6 <ai_platform_network_process+0x372>
 801b448:	6881      	ldr	r1, [r0, #8]
 801b44a:	68a2      	ldr	r2, [r4, #8]
 801b44c:	6860      	ldr	r0, [r4, #4]
 801b44e:	f000 fed5 	bl	801c1fc <st_int8_copy>
 801b452:	e7d9      	b.n	801b408 <ai_platform_network_process+0x384>
 801b454:	4658      	mov	r0, fp
 801b456:	f000 f901 	bl	801b65c <ai_layers_forward_all>
 801b45a:	2f00      	cmp	r7, #0
 801b45c:	d03d      	beq.n	801b4da <ai_platform_network_process+0x456>
 801b45e:	2400      	movs	r4, #0
 801b460:	e016      	b.n	801b490 <ai_platform_network_process+0x40c>
 801b462:	f859 100a 	ldr.w	r1, [r9, sl]
 801b466:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 801b46a:	4413      	add	r3, r2
 801b46c:	428b      	cmp	r3, r1
 801b46e:	bf24      	itt	cs
 801b470:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 801b474:	1acb      	subcs	r3, r1, r3
 801b476:	f8c8 3004 	str.w	r3, [r8, #4]
 801b47a:	6981      	ldr	r1, [r0, #24]
 801b47c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 801b480:	1b52      	subs	r2, r2, r5
 801b482:	4413      	add	r3, r2
 801b484:	608b      	str	r3, [r1, #8]
 801b486:	6983      	ldr	r3, [r0, #24]
 801b488:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801b48c:	60da      	str	r2, [r3, #12]
 801b48e:	3401      	adds	r4, #1
 801b490:	883b      	ldrh	r3, [r7, #0]
 801b492:	42a3      	cmp	r3, r4
 801b494:	d921      	bls.n	801b4da <ai_platform_network_process+0x456>
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	b1fb      	cbz	r3, 801b4da <ai_platform_network_process+0x456>
 801b49a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b49e:	b1e0      	cbz	r0, 801b4da <ai_platform_network_process+0x456>
 801b4a0:	68ba      	ldr	r2, [r7, #8]
 801b4a2:	6983      	ldr	r3, [r0, #24]
 801b4a4:	f8d2 9000 	ldr.w	r9, [r2]
 801b4a8:	681a      	ldr	r2, [r3, #0]
 801b4aa:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 801b4ae:	0092      	lsls	r2, r2, #2
 801b4b0:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 801b4b4:	d5d5      	bpl.n	801b462 <ai_platform_network_process+0x3de>
 801b4b6:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 801b4ba:	6898      	ldr	r0, [r3, #8]
 801b4bc:	f000 fe9e 	bl	801c1fc <st_int8_copy>
 801b4c0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 801b4c4:	f859 200a 	ldr.w	r2, [r9, sl]
 801b4c8:	440b      	add	r3, r1
 801b4ca:	4293      	cmp	r3, r2
 801b4cc:	bf24      	itt	cs
 801b4ce:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 801b4d2:	1ad3      	subcs	r3, r2, r3
 801b4d4:	f8c8 3004 	str.w	r3, [r8, #4]
 801b4d8:	e7d9      	b.n	801b48e <ai_platform_network_process+0x40a>
 801b4da:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 801b4de:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 801b4e2:	3401      	adds	r4, #1
 801b4e4:	b2a4      	uxth	r4, r4
 801b4e6:	42a3      	cmp	r3, r4
 801b4e8:	f8ab 4016 	strh.w	r4, [fp, #22]
 801b4ec:	f63f af7e 	bhi.w	801b3ec <ai_platform_network_process+0x368>
 801b4f0:	4620      	mov	r0, r4
 801b4f2:	b005      	add	sp, #20
 801b4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4f8:	2a01      	cmp	r2, #1
 801b4fa:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 801b4fc:	d03c      	beq.n	801b578 <ai_platform_network_process+0x4f4>
 801b4fe:	f106 070c 	add.w	r7, r6, #12
 801b502:	e76e      	b.n	801b3e2 <ai_platform_network_process+0x35e>
 801b504:	4625      	mov	r5, r4
 801b506:	2218      	movs	r2, #24
 801b508:	2113      	movs	r1, #19
 801b50a:	f105 0010 	add.w	r0, r5, #16
 801b50e:	f000 f84f 	bl	801b5b0 <core_set_error>
 801b512:	2400      	movs	r4, #0
 801b514:	e739      	b.n	801b38a <ai_platform_network_process+0x306>
 801b516:	9d02      	ldr	r5, [sp, #8]
 801b518:	4604      	mov	r4, r0
 801b51a:	2221      	movs	r2, #33	@ 0x21
 801b51c:	2112      	movs	r1, #18
 801b51e:	f105 0010 	add.w	r0, r5, #16
 801b522:	f000 f845 	bl	801b5b0 <core_set_error>
 801b526:	e730      	b.n	801b38a <ai_platform_network_process+0x306>
 801b528:	9d02      	ldr	r5, [sp, #8]
 801b52a:	e727      	b.n	801b37c <ai_platform_network_process+0x2f8>
 801b52c:	9d02      	ldr	r5, [sp, #8]
 801b52e:	4604      	mov	r4, r0
 801b530:	2217      	movs	r2, #23
 801b532:	2112      	movs	r1, #18
 801b534:	f105 0010 	add.w	r0, r5, #16
 801b538:	f000 f83a 	bl	801b5b0 <core_set_error>
 801b53c:	e725      	b.n	801b38a <ai_platform_network_process+0x306>
 801b53e:	9d02      	ldr	r5, [sp, #8]
 801b540:	2219      	movs	r2, #25
 801b542:	2112      	movs	r1, #18
 801b544:	f105 0010 	add.w	r0, r5, #16
 801b548:	f000 f832 	bl	801b5b0 <core_set_error>
 801b54c:	2400      	movs	r4, #0
 801b54e:	e71c      	b.n	801b38a <ai_platform_network_process+0x306>
 801b550:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b554:	82ab      	strh	r3, [r5, #20]
 801b556:	e73f      	b.n	801b3d8 <ai_platform_network_process+0x354>
 801b558:	f104 0010 	add.w	r0, r4, #16
 801b55c:	2219      	movs	r2, #25
 801b55e:	2113      	movs	r1, #19
 801b560:	f000 f826 	bl	801b5b0 <core_set_error>
 801b564:	2400      	movs	r4, #0
 801b566:	e710      	b.n	801b38a <ai_platform_network_process+0x306>
 801b568:	f104 0010 	add.w	r0, r4, #16
 801b56c:	2217      	movs	r2, #23
 801b56e:	2113      	movs	r1, #19
 801b570:	f000 f81e 	bl	801b5b0 <core_set_error>
 801b574:	4654      	mov	r4, sl
 801b576:	e708      	b.n	801b38a <ai_platform_network_process+0x306>
 801b578:	2700      	movs	r7, #0
 801b57a:	e732      	b.n	801b3e2 <ai_platform_network_process+0x35e>
 801b57c:	4625      	mov	r5, r4
 801b57e:	2221      	movs	r2, #33	@ 0x21
 801b580:	4604      	mov	r4, r0
 801b582:	2113      	movs	r1, #19
 801b584:	f105 0010 	add.w	r0, r5, #16
 801b588:	f000 f812 	bl	801b5b0 <core_set_error>
 801b58c:	e6fd      	b.n	801b38a <ai_platform_network_process+0x306>
 801b58e:	4625      	mov	r5, r4
 801b590:	2217      	movs	r2, #23
 801b592:	4604      	mov	r4, r0
 801b594:	2113      	movs	r1, #19
 801b596:	f105 0010 	add.w	r0, r5, #16
 801b59a:	f000 f809 	bl	801b5b0 <core_set_error>
 801b59e:	e6f4      	b.n	801b38a <ai_platform_network_process+0x306>

0801b5a0 <core_init>:
 801b5a0:	2001      	movs	r0, #1
 801b5a2:	4770      	bx	lr

0801b5a4 <core_get_error>:
 801b5a4:	4603      	mov	r3, r0
 801b5a6:	2200      	movs	r2, #0
 801b5a8:	6800      	ldr	r0, [r0, #0]
 801b5aa:	601a      	str	r2, [r3, #0]
 801b5ac:	4770      	bx	lr
 801b5ae:	bf00      	nop

0801b5b0 <core_set_error>:
 801b5b0:	4603      	mov	r3, r0
 801b5b2:	7800      	ldrb	r0, [r0, #0]
 801b5b4:	b108      	cbz	r0, 801b5ba <core_set_error+0xa>
 801b5b6:	2000      	movs	r0, #0
 801b5b8:	4770      	bx	lr
 801b5ba:	7019      	strb	r1, [r3, #0]
 801b5bc:	6819      	ldr	r1, [r3, #0]
 801b5be:	2001      	movs	r0, #1
 801b5c0:	f362 211f 	bfi	r1, r2, #8, #24
 801b5c4:	6019      	str	r1, [r3, #0]
 801b5c6:	4770      	bx	lr

0801b5c8 <ai_check_custom_types>:
 801b5c8:	4b12      	ldr	r3, [pc, #72]	@ (801b614 <ai_check_custom_types+0x4c>)
 801b5ca:	b082      	sub	sp, #8
 801b5cc:	9301      	str	r3, [sp, #4]
 801b5ce:	b118      	cbz	r0, 801b5d8 <ai_check_custom_types+0x10>
 801b5d0:	7803      	ldrb	r3, [r0, #0]
 801b5d2:	2b03      	cmp	r3, #3
 801b5d4:	d002      	beq.n	801b5dc <ai_check_custom_types+0x14>
 801b5d6:	2000      	movs	r0, #0
 801b5d8:	b002      	add	sp, #8
 801b5da:	4770      	bx	lr
 801b5dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801b5e0:	4293      	cmp	r3, r2
 801b5e2:	d004      	beq.n	801b5ee <ai_check_custom_types+0x26>
 801b5e4:	2001      	movs	r0, #1
 801b5e6:	f080 0001 	eor.w	r0, r0, #1
 801b5ea:	b002      	add	sp, #8
 801b5ec:	4770      	bx	lr
 801b5ee:	7842      	ldrb	r2, [r0, #1]
 801b5f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801b5f4:	3001      	adds	r0, #1
 801b5f6:	429a      	cmp	r2, r3
 801b5f8:	d1f4      	bne.n	801b5e4 <ai_check_custom_types+0x1c>
 801b5fa:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801b5fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801b602:	429a      	cmp	r2, r3
 801b604:	d1ee      	bne.n	801b5e4 <ai_check_custom_types+0x1c>
 801b606:	7842      	ldrb	r2, [r0, #1]
 801b608:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801b60c:	429a      	cmp	r2, r3
 801b60e:	d1e9      	bne.n	801b5e4 <ai_check_custom_types+0x1c>
 801b610:	2000      	movs	r0, #0
 801b612:	e7e8      	b.n	801b5e6 <ai_check_custom_types+0x1e>
 801b614:	84048403 	.word	0x84048403

0801b618 <ai_layers_init_all>:
 801b618:	2100      	movs	r1, #0
 801b61a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801b61c:	b143      	cbz	r3, 801b630 <ai_layers_init_all+0x18>
 801b61e:	691a      	ldr	r2, [r3, #16]
 801b620:	60d8      	str	r0, [r3, #12]
 801b622:	429a      	cmp	r2, r3
 801b624:	f101 0101 	add.w	r1, r1, #1
 801b628:	d002      	beq.n	801b630 <ai_layers_init_all+0x18>
 801b62a:	b10a      	cbz	r2, 801b630 <ai_layers_init_all+0x18>
 801b62c:	4613      	mov	r3, r2
 801b62e:	e7f5      	b.n	801b61c <ai_layers_init_all+0x4>
 801b630:	4608      	mov	r0, r1
 801b632:	4770      	bx	lr

0801b634 <ai_layers_post_init_all>:
 801b634:	b538      	push	{r3, r4, r5, lr}
 801b636:	2500      	movs	r5, #0
 801b638:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 801b63a:	b16c      	cbz	r4, 801b658 <ai_layers_post_init_all+0x24>
 801b63c:	6863      	ldr	r3, [r4, #4]
 801b63e:	07db      	lsls	r3, r3, #31
 801b640:	d504      	bpl.n	801b64c <ai_layers_post_init_all+0x18>
 801b642:	6a23      	ldr	r3, [r4, #32]
 801b644:	b113      	cbz	r3, 801b64c <ai_layers_post_init_all+0x18>
 801b646:	4620      	mov	r0, r4
 801b648:	4798      	blx	r3
 801b64a:	3501      	adds	r5, #1
 801b64c:	6923      	ldr	r3, [r4, #16]
 801b64e:	42a3      	cmp	r3, r4
 801b650:	d002      	beq.n	801b658 <ai_layers_post_init_all+0x24>
 801b652:	b10b      	cbz	r3, 801b658 <ai_layers_post_init_all+0x24>
 801b654:	461c      	mov	r4, r3
 801b656:	e7f0      	b.n	801b63a <ai_layers_post_init_all+0x6>
 801b658:	4628      	mov	r0, r5
 801b65a:	bd38      	pop	{r3, r4, r5, pc}

0801b65c <ai_layers_forward_all>:
 801b65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b660:	f8d0 803c 	ldr.w	r8, [r0, #60]	@ 0x3c
 801b664:	4604      	mov	r4, r0
 801b666:	f1b8 0f00 	cmp.w	r8, #0
 801b66a:	d02c      	beq.n	801b6c6 <ai_layers_forward_all+0x6a>
 801b66c:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 801b66e:	6381      	str	r1, [r0, #56]	@ 0x38
 801b670:	b329      	cbz	r1, 801b6be <ai_layers_forward_all+0x62>
 801b672:	2001      	movs	r0, #1
 801b674:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801b676:	47c0      	blx	r8
 801b678:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801b67a:	b306      	cbz	r6, 801b6be <ai_layers_forward_all+0x62>
 801b67c:	2700      	movs	r7, #0
 801b67e:	4631      	mov	r1, r6
 801b680:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801b682:	2002      	movs	r0, #2
 801b684:	47c0      	blx	r8
 801b686:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 801b688:	4628      	mov	r0, r5
 801b68a:	696b      	ldr	r3, [r5, #20]
 801b68c:	4798      	blx	r3
 801b68e:	692e      	ldr	r6, [r5, #16]
 801b690:	42b5      	cmp	r5, r6
 801b692:	d00a      	beq.n	801b6aa <ai_layers_forward_all+0x4e>
 801b694:	2003      	movs	r0, #3
 801b696:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801b698:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801b69a:	47c0      	blx	r8
 801b69c:	3701      	adds	r7, #1
 801b69e:	63a6      	str	r6, [r4, #56]	@ 0x38
 801b6a0:	2e00      	cmp	r6, #0
 801b6a2:	d1ec      	bne.n	801b67e <ai_layers_forward_all+0x22>
 801b6a4:	4638      	mov	r0, r7
 801b6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6aa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801b6ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801b6ae:	2003      	movs	r0, #3
 801b6b0:	47c0      	blx	r8
 801b6b2:	2300      	movs	r3, #0
 801b6b4:	3701      	adds	r7, #1
 801b6b6:	63a3      	str	r3, [r4, #56]	@ 0x38
 801b6b8:	4638      	mov	r0, r7
 801b6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6be:	2700      	movs	r7, #0
 801b6c0:	4638      	mov	r0, r7
 801b6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6c6:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 801b6c8:	6385      	str	r5, [r0, #56]	@ 0x38
 801b6ca:	2d00      	cmp	r5, #0
 801b6cc:	d0f7      	beq.n	801b6be <ai_layers_forward_all+0x62>
 801b6ce:	4647      	mov	r7, r8
 801b6d0:	696b      	ldr	r3, [r5, #20]
 801b6d2:	4628      	mov	r0, r5
 801b6d4:	4798      	blx	r3
 801b6d6:	462b      	mov	r3, r5
 801b6d8:	692d      	ldr	r5, [r5, #16]
 801b6da:	429d      	cmp	r5, r3
 801b6dc:	d004      	beq.n	801b6e8 <ai_layers_forward_all+0x8c>
 801b6de:	63a5      	str	r5, [r4, #56]	@ 0x38
 801b6e0:	3701      	adds	r7, #1
 801b6e2:	2d00      	cmp	r5, #0
 801b6e4:	d1f4      	bne.n	801b6d0 <ai_layers_forward_all+0x74>
 801b6e6:	e7dd      	b.n	801b6a4 <ai_layers_forward_all+0x48>
 801b6e8:	2300      	movs	r3, #0
 801b6ea:	3701      	adds	r7, #1
 801b6ec:	63a3      	str	r3, [r4, #56]	@ 0x38
 801b6ee:	e7d9      	b.n	801b6a4 <ai_layers_forward_all+0x48>

0801b6f0 <forward_dense>:
 801b6f0:	6983      	ldr	r3, [r0, #24]
 801b6f2:	881a      	ldrh	r2, [r3, #0]
 801b6f4:	2a00      	cmp	r2, #0
 801b6f6:	f000 8182 	beq.w	801b9fe <forward_dense+0x30e>
 801b6fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6fe:	ed2d 8b02 	vpush	{d8}
 801b702:	f8d3 c004 	ldr.w	ip, [r3, #4]
 801b706:	b095      	sub	sp, #84	@ 0x54
 801b708:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801b70c:	b105      	cbz	r5, 801b710 <forward_dense+0x20>
 801b70e:	682d      	ldr	r5, [r5, #0]
 801b710:	2a01      	cmp	r2, #1
 801b712:	f000 8291 	beq.w	801bc38 <forward_dense+0x548>
 801b716:	f8dc 6010 	ldr.w	r6, [ip, #16]
 801b71a:	b106      	cbz	r6, 801b71e <forward_dense+0x2e>
 801b71c:	6836      	ldr	r6, [r6, #0]
 801b71e:	2a02      	cmp	r2, #2
 801b720:	f000 816f 	beq.w	801ba02 <forward_dense+0x312>
 801b724:	f8dc 301c 	ldr.w	r3, [ip, #28]
 801b728:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b72a:	2b00      	cmp	r3, #0
 801b72c:	f000 8276 	beq.w	801bc1c <forward_dense+0x52c>
 801b730:	4619      	mov	r1, r3
 801b732:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 801b736:	6809      	ldr	r1, [r1, #0]
 801b738:	2b01      	cmp	r3, #1
 801b73a:	910d      	str	r1, [sp, #52]	@ 0x34
 801b73c:	f240 8270 	bls.w	801bc20 <forward_dense+0x530>
 801b740:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b742:	685b      	ldr	r3, [r3, #4]
 801b744:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b746:	460b      	mov	r3, r1
 801b748:	68e8      	ldr	r0, [r5, #12]
 801b74a:	68f7      	ldr	r7, [r6, #12]
 801b74c:	6840      	ldr	r0, [r0, #4]
 801b74e:	6999      	ldr	r1, [r3, #24]
 801b750:	9013      	str	r0, [sp, #76]	@ 0x4c
 801b752:	680b      	ldr	r3, [r1, #0]
 801b754:	6878      	ldr	r0, [r7, #4]
 801b756:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 801b75a:	9012      	str	r0, [sp, #72]	@ 0x48
 801b75c:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 801b760:	fb00 f404 	mul.w	r4, r0, r4
 801b764:	f3c3 5041 	ubfx	r0, r3, #21, #2
 801b768:	fa4e f000 	asr.w	r0, lr, r0
 801b76c:	2a03      	cmp	r2, #3
 801b76e:	9010      	str	r0, [sp, #64]	@ 0x40
 801b770:	f000 825f 	beq.w	801bc32 <forward_dense+0x542>
 801b774:	f8dc 2028 	ldr.w	r2, [ip, #40]	@ 0x28
 801b778:	f3c3 4343 	ubfx	r3, r3, #17, #4
 801b77c:	2a00      	cmp	r2, #0
 801b77e:	f000 8248 	beq.w	801bc12 <forward_dense+0x522>
 801b782:	6812      	ldr	r2, [r2, #0]
 801b784:	2a00      	cmp	r2, #0
 801b786:	f000 8244 	beq.w	801bc12 <forward_dense+0x522>
 801b78a:	2b04      	cmp	r3, #4
 801b78c:	f8d2 9018 	ldr.w	r9, [r2, #24]
 801b790:	f000 822e 	beq.w	801bbf0 <forward_dense+0x500>
 801b794:	2b08      	cmp	r3, #8
 801b796:	f000 822b 	beq.w	801bbf0 <forward_dense+0x500>
 801b79a:	f04f 0b00 	mov.w	fp, #0
 801b79e:	69b2      	ldr	r2, [r6, #24]
 801b7a0:	fb07 f404 	mul.w	r4, r7, r4
 801b7a4:	6891      	ldr	r1, [r2, #8]
 801b7a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b7a8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801b7ac:	6952      	ldr	r2, [r2, #20]
 801b7ae:	69ab      	ldr	r3, [r5, #24]
 801b7b0:	f8d2 9004 	ldr.w	r9, [r2, #4]
 801b7b4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b7b6:	4281      	cmp	r1, r0
 801b7b8:	ea4f 0482 	mov.w	r4, r2, lsl #2
 801b7bc:	689b      	ldr	r3, [r3, #8]
 801b7be:	9106      	str	r1, [sp, #24]
 801b7c0:	900e      	str	r0, [sp, #56]	@ 0x38
 801b7c2:	940c      	str	r4, [sp, #48]	@ 0x30
 801b7c4:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 801b7c8:	f080 8114 	bcs.w	801b9f4 <forward_dense+0x304>
 801b7cc:	465c      	mov	r4, fp
 801b7ce:	ed9f 8a94 	vldr	s16, [pc, #592]	@ 801ba20 <forward_dense+0x330>
 801b7d2:	46cb      	mov	fp, r9
 801b7d4:	46c1      	mov	r9, r8
 801b7d6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b7d8:	f021 0201 	bic.w	r2, r1, #1
 801b7dc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801b7e0:	9204      	str	r2, [sp, #16]
 801b7e2:	f001 0201 	and.w	r2, r1, #1
 801b7e6:	08c8      	lsrs	r0, r1, #3
 801b7e8:	9208      	str	r2, [sp, #32]
 801b7ea:	008a      	lsls	r2, r1, #2
 801b7ec:	f001 0a07 	and.w	sl, r1, #7
 801b7f0:	920f      	str	r2, [sp, #60]	@ 0x3c
 801b7f2:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 801b7f6:	3320      	adds	r3, #32
 801b7f8:	9007      	str	r0, [sp, #28]
 801b7fa:	9205      	str	r2, [sp, #20]
 801b7fc:	9302      	str	r3, [sp, #8]
 801b7fe:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
 801b802:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b804:	699b      	ldr	r3, [r3, #24]
 801b806:	689a      	ldr	r2, [r3, #8]
 801b808:	9b02      	ldr	r3, [sp, #8]
 801b80a:	3b20      	subs	r3, #32
 801b80c:	930a      	str	r3, [sp, #40]	@ 0x28
 801b80e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b810:	b10b      	cbz	r3, 801b816 <forward_dense+0x126>
 801b812:	699b      	ldr	r3, [r3, #24]
 801b814:	689b      	ldr	r3, [r3, #8]
 801b816:	2c00      	cmp	r4, #0
 801b818:	f000 81dc 	beq.w	801bbd4 <forward_dense+0x4e4>
 801b81c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801b81e:	2904      	cmp	r1, #4
 801b820:	9906      	ldr	r1, [sp, #24]
 801b822:	f000 80ff 	beq.w	801ba24 <forward_dense+0x334>
 801b826:	4549      	cmp	r1, r9
 801b828:	f080 80d3 	bcs.w	801b9d2 <forward_dense+0x2e2>
 801b82c:	460f      	mov	r7, r1
 801b82e:	9907      	ldr	r1, [sp, #28]
 801b830:	4694      	mov	ip, r2
 801b832:	468e      	mov	lr, r1
 801b834:	1c4e      	adds	r6, r1, #1
 801b836:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801b83a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801b83e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b840:	f8dd a014 	ldr.w	sl, [sp, #20]
 801b844:	2b00      	cmp	r3, #0
 801b846:	f000 80df 	beq.w	801ba08 <forward_dense+0x318>
 801b84a:	ecb3 0a01 	vldmia	r3!, {s0}
 801b84e:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 801ba20 <forward_dense+0x330>
 801b852:	f1be 0f00 	cmp.w	lr, #0
 801b856:	f000 80df 	beq.w	801ba18 <forward_dense+0x328>
 801b85a:	4640      	mov	r0, r8
 801b85c:	f10c 0108 	add.w	r1, ip, #8
 801b860:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 801b864:	ed10 5a07 	vldr	s10, [r0, #-28]	@ 0xffffffe4
 801b868:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801b86c:	edd5 7a00 	vldr	s15, [r5]
 801b870:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 801b874:	ed10 6a08 	vldr	s12, [r0, #-32]	@ 0xffffffe0
 801b878:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801b87c:	edd5 0a00 	vldr	s1, [r5]
 801b880:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b884:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 801b888:	ed50 1a06 	vldr	s3, [r0, #-24]	@ 0xffffffe8
 801b88c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801b890:	ed95 1a00 	vldr	s2, [r5]
 801b894:	eee0 7a86 	vfma.f32	s15, s1, s12
 801b898:	f811 5c05 	ldrb.w	r5, [r1, #-5]
 801b89c:	ed50 2a05 	vldr	s5, [r0, #-20]	@ 0xffffffec
 801b8a0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801b8a4:	ed95 2a00 	vldr	s4, [r5]
 801b8a8:	eee1 7a21 	vfma.f32	s15, s2, s3
 801b8ac:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 801b8b0:	ed50 3a04 	vldr	s7, [r0, #-16]
 801b8b4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801b8b8:	ed95 3a00 	vldr	s6, [r5]
 801b8bc:	eee2 7a22 	vfma.f32	s15, s4, s5
 801b8c0:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 801b8c4:	ed50 4a03 	vldr	s9, [r0, #-12]
 801b8c8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801b8cc:	ed95 4a00 	vldr	s8, [r5]
 801b8d0:	eee3 7a23 	vfma.f32	s15, s6, s7
 801b8d4:	f811 5c02 	ldrb.w	r5, [r1, #-2]
 801b8d8:	ed50 5a02 	vldr	s11, [r0, #-8]
 801b8dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801b8e0:	ed95 5a00 	vldr	s10, [r5]
 801b8e4:	eee4 7a24 	vfma.f32	s15, s8, s9
 801b8e8:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801b8ec:	ed50 6a01 	vldr	s13, [r0, #-4]
 801b8f0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801b8f4:	ed95 6a00 	vldr	s12, [r5]
 801b8f8:	eee5 7a25 	vfma.f32	s15, s10, s11
 801b8fc:	eee6 7a26 	vfma.f32	s15, s12, s13
 801b900:	3108      	adds	r1, #8
 801b902:	428e      	cmp	r6, r1
 801b904:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b908:	f100 0020 	add.w	r0, r0, #32
 801b90c:	d1a8      	bne.n	801b860 <forward_dense+0x170>
 801b90e:	4650      	mov	r0, sl
 801b910:	f1a6 0108 	sub.w	r1, r6, #8
 801b914:	2a00      	cmp	r2, #0
 801b916:	d04a      	beq.n	801b9ae <forward_dense+0x2be>
 801b918:	780d      	ldrb	r5, [r1, #0]
 801b91a:	edd0 6a00 	vldr	s13, [r0]
 801b91e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801b922:	edd5 7a00 	vldr	s15, [r5]
 801b926:	2a01      	cmp	r2, #1
 801b928:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b92c:	d03f      	beq.n	801b9ae <forward_dense+0x2be>
 801b92e:	784d      	ldrb	r5, [r1, #1]
 801b930:	edd0 6a01 	vldr	s13, [r0, #4]
 801b934:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801b938:	edd5 7a00 	vldr	s15, [r5]
 801b93c:	2a02      	cmp	r2, #2
 801b93e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b942:	d034      	beq.n	801b9ae <forward_dense+0x2be>
 801b944:	788d      	ldrb	r5, [r1, #2]
 801b946:	edd0 6a02 	vldr	s13, [r0, #8]
 801b94a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801b94e:	edd5 7a00 	vldr	s15, [r5]
 801b952:	2a03      	cmp	r2, #3
 801b954:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b958:	d029      	beq.n	801b9ae <forward_dense+0x2be>
 801b95a:	78cd      	ldrb	r5, [r1, #3]
 801b95c:	edd0 6a03 	vldr	s13, [r0, #12]
 801b960:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801b964:	edd5 7a00 	vldr	s15, [r5]
 801b968:	2a04      	cmp	r2, #4
 801b96a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b96e:	d01e      	beq.n	801b9ae <forward_dense+0x2be>
 801b970:	790d      	ldrb	r5, [r1, #4]
 801b972:	edd0 6a04 	vldr	s13, [r0, #16]
 801b976:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801b97a:	edd5 7a00 	vldr	s15, [r5]
 801b97e:	2a05      	cmp	r2, #5
 801b980:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b984:	d013      	beq.n	801b9ae <forward_dense+0x2be>
 801b986:	794d      	ldrb	r5, [r1, #5]
 801b988:	edd0 6a05 	vldr	s13, [r0, #20]
 801b98c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801b990:	edd5 7a00 	vldr	s15, [r5]
 801b994:	2a06      	cmp	r2, #6
 801b996:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b99a:	d008      	beq.n	801b9ae <forward_dense+0x2be>
 801b99c:	7989      	ldrb	r1, [r1, #6]
 801b99e:	edd0 7a06 	vldr	s15, [r0, #24]
 801b9a2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801b9a6:	edd1 6a00 	vldr	s13, [r1]
 801b9aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b9ae:	ee30 7a07 	vadd.f32	s14, s0, s14
 801b9b2:	eca7 7a01 	vstmia	r7!, {s14}
 801b9b6:	454f      	cmp	r7, r9
 801b9b8:	44dc      	add	ip, fp
 801b9ba:	445e      	add	r6, fp
 801b9bc:	f4ff af42 	bcc.w	801b844 <forward_dense+0x154>
 801b9c0:	9a06      	ldr	r2, [sp, #24]
 801b9c2:	eba9 0302 	sub.w	r3, r9, r2
 801b9c6:	3b01      	subs	r3, #1
 801b9c8:	f023 0303 	bic.w	r3, r3, #3
 801b9cc:	3304      	adds	r3, #4
 801b9ce:	18d3      	adds	r3, r2, r3
 801b9d0:	9306      	str	r3, [sp, #24]
 801b9d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b9d4:	9a05      	ldr	r2, [sp, #20]
 801b9d6:	4499      	add	r9, r3
 801b9d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b9da:	441a      	add	r2, r3
 801b9dc:	9205      	str	r2, [sp, #20]
 801b9de:	9a02      	ldr	r2, [sp, #8]
 801b9e0:	441a      	add	r2, r3
 801b9e2:	9202      	str	r2, [sp, #8]
 801b9e4:	9a04      	ldr	r2, [sp, #16]
 801b9e6:	441a      	add	r2, r3
 801b9e8:	9204      	str	r2, [sp, #16]
 801b9ea:	9b06      	ldr	r3, [sp, #24]
 801b9ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b9ee:	4293      	cmp	r3, r2
 801b9f0:	f4ff af07 	bcc.w	801b802 <forward_dense+0x112>
 801b9f4:	b015      	add	sp, #84	@ 0x54
 801b9f6:	ecbd 8b02 	vpop	{d8}
 801b9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9fe:	6853      	ldr	r3, [r2, #4]
 801ba00:	deff      	udf	#255	@ 0xff
 801ba02:	2300      	movs	r3, #0
 801ba04:	685b      	ldr	r3, [r3, #4]
 801ba06:	deff      	udf	#255	@ 0xff
 801ba08:	eeb0 0a48 	vmov.f32	s0, s16
 801ba0c:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 801ba20 <forward_dense+0x330>
 801ba10:	f1be 0f00 	cmp.w	lr, #0
 801ba14:	f47f af21 	bne.w	801b85a <forward_dense+0x16a>
 801ba18:	4661      	mov	r1, ip
 801ba1a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ba1c:	e77a      	b.n	801b914 <forward_dense+0x224>
 801ba1e:	bf00      	nop
 801ba20:	00000000 	.word	0x00000000
 801ba24:	4549      	cmp	r1, r9
 801ba26:	d2d4      	bcs.n	801b9d2 <forward_dense+0x2e2>
 801ba28:	9103      	str	r1, [sp, #12]
 801ba2a:	9907      	ldr	r1, [sp, #28]
 801ba2c:	f101 0c01 	add.w	ip, r1, #1
 801ba30:	9904      	ldr	r1, [sp, #16]
 801ba32:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 801ba36:	3901      	subs	r1, #1
 801ba38:	9109      	str	r1, [sp, #36]	@ 0x24
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	f000 80b2 	beq.w	801bba4 <forward_dense+0x4b4>
 801ba40:	9907      	ldr	r1, [sp, #28]
 801ba42:	ecf3 8a01 	vldmia	r3!, {s17}
 801ba46:	ed1f 7a0a 	vldr	s14, [pc, #-40]	@ 801ba20 <forward_dense+0x330>
 801ba4a:	2900      	cmp	r1, #0
 801ba4c:	f000 80b2 	beq.w	801bbb4 <forward_dense+0x4c4>
 801ba50:	9902      	ldr	r1, [sp, #8]
 801ba52:	1d10      	adds	r0, r2, #4
 801ba54:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 801ba58:	ed11 6a07 	vldr	s12, [r1, #-28]	@ 0xffffffe4
 801ba5c:	f006 070f 	and.w	r7, r6, #15
 801ba60:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 801ba64:	edd7 7a00 	vldr	s15, [r7]
 801ba68:	0936      	lsrs	r6, r6, #4
 801ba6a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801ba6e:	ed51 0a08 	vldr	s1, [r1, #-32]	@ 0xffffffe0
 801ba72:	ed96 0a00 	vldr	s0, [r6]
 801ba76:	ee67 7a86 	vmul.f32	s15, s15, s12
 801ba7a:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 801ba7e:	ed51 1a06 	vldr	s3, [r1, #-24]	@ 0xffffffe8
 801ba82:	092e      	lsrs	r6, r5, #4
 801ba84:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801ba88:	ed96 1a00 	vldr	s2, [r6]
 801ba8c:	eee0 7a20 	vfma.f32	s15, s0, s1
 801ba90:	f005 050f 	and.w	r5, r5, #15
 801ba94:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801ba98:	ed51 2a05 	vldr	s5, [r1, #-20]	@ 0xffffffec
 801ba9c:	ed95 2a00 	vldr	s4, [r5]
 801baa0:	eee1 7a21 	vfma.f32	s15, s2, s3
 801baa4:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 801baa8:	ed51 3a04 	vldr	s7, [r1, #-16]
 801baac:	0937      	lsrs	r7, r6, #4
 801baae:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 801bab2:	ed97 3a00 	vldr	s6, [r7]
 801bab6:	eee2 7a22 	vfma.f32	s15, s4, s5
 801baba:	f006 060f 	and.w	r6, r6, #15
 801babe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801bac2:	ed51 4a03 	vldr	s9, [r1, #-12]
 801bac6:	ed96 4a00 	vldr	s8, [r6]
 801baca:	eee3 7a23 	vfma.f32	s15, s6, s7
 801bace:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 801bad2:	ed51 5a02 	vldr	s11, [r1, #-8]
 801bad6:	092e      	lsrs	r6, r5, #4
 801bad8:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801badc:	ed96 5a00 	vldr	s10, [r6]
 801bae0:	eee4 7a24 	vfma.f32	s15, s8, s9
 801bae4:	f005 050f 	and.w	r5, r5, #15
 801bae8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801baec:	ed51 6a01 	vldr	s13, [r1, #-4]
 801baf0:	ed95 6a00 	vldr	s12, [r5]
 801baf4:	eee5 7a25 	vfma.f32	s15, s10, s11
 801baf8:	eee6 7a26 	vfma.f32	s15, s12, s13
 801bafc:	3004      	adds	r0, #4
 801bafe:	4584      	cmp	ip, r0
 801bb00:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bb04:	f101 0120 	add.w	r1, r1, #32
 801bb08:	d1a4      	bne.n	801ba54 <forward_dense+0x364>
 801bb0a:	f8dd e014 	ldr.w	lr, [sp, #20]
 801bb0e:	f1ac 0804 	sub.w	r8, ip, #4
 801bb12:	9904      	ldr	r1, [sp, #16]
 801bb14:	458e      	cmp	lr, r1
 801bb16:	d22a      	bcs.n	801bb6e <forward_dense+0x47e>
 801bb18:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801bb1a:	f10e 0008 	add.w	r0, lr, #8
 801bb1e:	eba1 070e 	sub.w	r7, r1, lr
 801bb22:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 801bb26:	f108 36ff 	add.w	r6, r8, #4294967295
 801bb2a:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 801bb2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801bb32:	ed50 5a01 	vldr	s11, [r0, #-4]
 801bb36:	f001 050f 	and.w	r5, r1, #15
 801bb3a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801bb3e:	edd5 7a00 	vldr	s15, [r5]
 801bb42:	0909      	lsrs	r1, r1, #4
 801bb44:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801bb48:	ed50 6a02 	vldr	s13, [r0, #-8]
 801bb4c:	ed91 6a00 	vldr	s12, [r1]
 801bb50:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801bb54:	eee6 7a26 	vfma.f32	s15, s12, s13
 801bb58:	42b7      	cmp	r7, r6
 801bb5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bb5e:	f100 0008 	add.w	r0, r0, #8
 801bb62:	d1e4      	bne.n	801bb2e <forward_dense+0x43e>
 801bb64:	f10a 0a01 	add.w	sl, sl, #1
 801bb68:	44d0      	add	r8, sl
 801bb6a:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 801bb6e:	9908      	ldr	r1, [sp, #32]
 801bb70:	b321      	cbz	r1, 801bbbc <forward_dense+0x4cc>
 801bb72:	f898 1000 	ldrb.w	r1, [r8]
 801bb76:	edde 7a00 	vldr	s15, [lr]
 801bb7a:	0909      	lsrs	r1, r1, #4
 801bb7c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801bb80:	edd1 6a00 	vldr	s13, [r1]
 801bb84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801bb88:	ee78 8a87 	vadd.f32	s17, s17, s14
 801bb8c:	9903      	ldr	r1, [sp, #12]
 801bb8e:	445a      	add	r2, fp
 801bb90:	ece1 8a01 	vstmia	r1!, {s17}
 801bb94:	4589      	cmp	r9, r1
 801bb96:	44dc      	add	ip, fp
 801bb98:	9103      	str	r1, [sp, #12]
 801bb9a:	f67f af11 	bls.w	801b9c0 <forward_dense+0x2d0>
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	f47f af4e 	bne.w	801ba40 <forward_dense+0x350>
 801bba4:	9907      	ldr	r1, [sp, #28]
 801bba6:	eef0 8a48 	vmov.f32	s17, s16
 801bbaa:	ed1f 7a63 	vldr	s14, [pc, #-396]	@ 801ba20 <forward_dense+0x330>
 801bbae:	2900      	cmp	r1, #0
 801bbb0:	f47f af4e 	bne.w	801ba50 <forward_dense+0x360>
 801bbb4:	4690      	mov	r8, r2
 801bbb6:	f8dd e028 	ldr.w	lr, [sp, #40]	@ 0x28
 801bbba:	e7aa      	b.n	801bb12 <forward_dense+0x422>
 801bbbc:	ee38 7a87 	vadd.f32	s14, s17, s14
 801bbc0:	9903      	ldr	r1, [sp, #12]
 801bbc2:	445a      	add	r2, fp
 801bbc4:	eca1 7a01 	vstmia	r1!, {s14}
 801bbc8:	4549      	cmp	r1, r9
 801bbca:	44dc      	add	ip, fp
 801bbcc:	9103      	str	r1, [sp, #12]
 801bbce:	f4ff af34 	bcc.w	801ba3a <forward_dense+0x34a>
 801bbd2:	e6f5      	b.n	801b9c0 <forward_dense+0x2d0>
 801bbd4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801bbd6:	9d06      	ldr	r5, [sp, #24]
 801bbd8:	9001      	str	r0, [sp, #4]
 801bbda:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801bbdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bbde:	9000      	str	r0, [sp, #0]
 801bbe0:	4628      	mov	r0, r5
 801bbe2:	f000 f9e3 	bl	801bfac <forward_lite_dense_if32of32wf32>
 801bbe6:	462b      	mov	r3, r5
 801bbe8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bbea:	4413      	add	r3, r2
 801bbec:	9306      	str	r3, [sp, #24]
 801bbee:	e6f0      	b.n	801b9d2 <forward_dense+0x2e2>
 801bbf0:	f8d1 800c 	ldr.w	r8, [r1, #12]
 801bbf4:	f1b9 0f00 	cmp.w	r9, #0
 801bbf8:	d016      	beq.n	801bc28 <forward_dense+0x538>
 801bbfa:	e9d9 0100 	ldrd	r0, r1, [r9]
 801bbfe:	f000 fbf1 	bl	801c3e4 <ai_array_get_byte_size>
 801bc02:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 801bc06:	4602      	mov	r2, r0
 801bc08:	4659      	mov	r1, fp
 801bc0a:	4640      	mov	r0, r8
 801bc0c:	f000 faf6 	bl	801c1fc <st_int8_copy>
 801bc10:	e5c5      	b.n	801b79e <forward_dense+0xae>
 801bc12:	2b04      	cmp	r3, #4
 801bc14:	d00a      	beq.n	801bc2c <forward_dense+0x53c>
 801bc16:	f04f 0900 	mov.w	r9, #0
 801bc1a:	e5bb      	b.n	801b794 <forward_dense+0xa4>
 801bc1c:	930d      	str	r3, [sp, #52]	@ 0x34
 801bc1e:	e593      	b.n	801b748 <forward_dense+0x58>
 801bc20:	2300      	movs	r3, #0
 801bc22:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bc24:	460b      	mov	r3, r1
 801bc26:	e58f      	b.n	801b748 <forward_dense+0x58>
 801bc28:	46c3      	mov	fp, r8
 801bc2a:	e5b8      	b.n	801b79e <forward_dense+0xae>
 801bc2c:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 801bc30:	e5b5      	b.n	801b79e <forward_dense+0xae>
 801bc32:	2300      	movs	r3, #0
 801bc34:	685b      	ldr	r3, [r3, #4]
 801bc36:	deff      	udf	#255	@ 0xff
 801bc38:	2300      	movs	r3, #0
 801bc3a:	685b      	ldr	r3, [r3, #4]
 801bc3c:	deff      	udf	#255	@ 0xff
 801bc3e:	bf00      	nop

0801bc40 <forward_relu>:
 801bc40:	6982      	ldr	r2, [r0, #24]
 801bc42:	8813      	ldrh	r3, [r2, #0]
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	d05c      	beq.n	801bd02 <forward_relu+0xc2>
 801bc48:	6851      	ldr	r1, [r2, #4]
 801bc4a:	684a      	ldr	r2, [r1, #4]
 801bc4c:	b102      	cbz	r2, 801bc50 <forward_relu+0x10>
 801bc4e:	6812      	ldr	r2, [r2, #0]
 801bc50:	2b01      	cmp	r3, #1
 801bc52:	f000 811e 	beq.w	801be92 <forward_relu+0x252>
 801bc56:	b470      	push	{r4, r5, r6}
 801bc58:	6909      	ldr	r1, [r1, #16]
 801bc5a:	b101      	cbz	r1, 801bc5e <forward_relu+0x1e>
 801bc5c:	6809      	ldr	r1, [r1, #0]
 801bc5e:	69c6      	ldr	r6, [r0, #28]
 801bc60:	2e00      	cmp	r6, #0
 801bc62:	f000 8098 	beq.w	801bd96 <forward_relu+0x156>
 801bc66:	6873      	ldr	r3, [r6, #4]
 801bc68:	6988      	ldr	r0, [r1, #24]
 801bc6a:	2b01      	cmp	r3, #1
 801bc6c:	6991      	ldr	r1, [r2, #24]
 801bc6e:	f000 80bc 	beq.w	801bdea <forward_relu+0x1aa>
 801bc72:	6893      	ldr	r3, [r2, #8]
 801bc74:	6880      	ldr	r0, [r0, #8]
 801bc76:	0a1b      	lsrs	r3, r3, #8
 801bc78:	688c      	ldr	r4, [r1, #8]
 801bc7a:	f000 80ed 	beq.w	801be58 <forward_relu+0x218>
 801bc7e:	68d5      	ldr	r5, [r2, #12]
 801bc80:	2201      	movs	r2, #1
 801bc82:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801bc86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bc8a:	42ab      	cmp	r3, r5
 801bc8c:	fb01 f202 	mul.w	r2, r1, r2
 801bc90:	d1f9      	bne.n	801bc86 <forward_relu+0x46>
 801bc92:	68b3      	ldr	r3, [r6, #8]
 801bc94:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801bc98:	ed93 7a02 	vldr	s14, [r3, #8]
 801bc9c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801bca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bca4:	f102 32ff 	add.w	r2, r2, #4294967295
 801bca8:	edd3 6a00 	vldr	s13, [r3]
 801bcac:	ed93 6a01 	vldr	s12, [r3, #4]
 801bcb0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801bcb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801bcb8:	d425      	bmi.n	801bd06 <forward_relu+0xc6>
 801bcba:	429c      	cmp	r4, r3
 801bcbc:	d81f      	bhi.n	801bcfe <forward_relu+0xbe>
 801bcbe:	1d1a      	adds	r2, r3, #4
 801bcc0:	1d01      	adds	r1, r0, #4
 801bcc2:	e00d      	b.n	801bce0 <forward_relu+0xa0>
 801bcc4:	eef4 6ae7 	vcmpe.f32	s13, s15
 801bcc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bccc:	db03      	blt.n	801bcd6 <forward_relu+0x96>
 801bcce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bcd2:	ee67 7a86 	vmul.f32	s15, s15, s12
 801bcd6:	3b08      	subs	r3, #8
 801bcd8:	429c      	cmp	r4, r3
 801bcda:	ed61 7a01 	vstmdb	r1!, {s15}
 801bcde:	d80e      	bhi.n	801bcfe <forward_relu+0xbe>
 801bce0:	4613      	mov	r3, r2
 801bce2:	ed72 7a01 	vldmdb	r2!, {s15}
 801bce6:	eef4 7ac7 	vcmpe.f32	s15, s14
 801bcea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcee:	d9e9      	bls.n	801bcc4 <forward_relu+0x84>
 801bcf0:	eef0 7a47 	vmov.f32	s15, s14
 801bcf4:	3b08      	subs	r3, #8
 801bcf6:	429c      	cmp	r4, r3
 801bcf8:	ed61 7a01 	vstmdb	r1!, {s15}
 801bcfc:	d9f0      	bls.n	801bce0 <forward_relu+0xa0>
 801bcfe:	bc70      	pop	{r4, r5, r6}
 801bd00:	4770      	bx	lr
 801bd02:	685b      	ldr	r3, [r3, #4]
 801bd04:	deff      	udf	#255	@ 0xff
 801bd06:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801bd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd0e:	d11f      	bne.n	801bd50 <forward_relu+0x110>
 801bd10:	429c      	cmp	r4, r3
 801bd12:	d8f4      	bhi.n	801bcfe <forward_relu+0xbe>
 801bd14:	2500      	movs	r5, #0
 801bd16:	1b1c      	subs	r4, r3, r4
 801bd18:	f024 0403 	bic.w	r4, r4, #3
 801bd1c:	1d1a      	adds	r2, r3, #4
 801bd1e:	1d01      	adds	r1, r0, #4
 801bd20:	1b1b      	subs	r3, r3, r4
 801bd22:	ed72 7a01 	vldmdb	r2!, {s15}
 801bd26:	eef4 7ae6 	vcmpe.f32	s15, s13
 801bd2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd2e:	dc0a      	bgt.n	801bd46 <forward_relu+0x106>
 801bd30:	429a      	cmp	r2, r3
 801bd32:	f841 5d04 	str.w	r5, [r1, #-4]!
 801bd36:	d0e2      	beq.n	801bcfe <forward_relu+0xbe>
 801bd38:	ed72 7a01 	vldmdb	r2!, {s15}
 801bd3c:	eef4 7ae6 	vcmpe.f32	s15, s13
 801bd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd44:	ddf4      	ble.n	801bd30 <forward_relu+0xf0>
 801bd46:	429a      	cmp	r2, r3
 801bd48:	ed61 7a01 	vstmdb	r1!, {s15}
 801bd4c:	d1e9      	bne.n	801bd22 <forward_relu+0xe2>
 801bd4e:	e7d6      	b.n	801bcfe <forward_relu+0xbe>
 801bd50:	429c      	cmp	r4, r3
 801bd52:	d8d4      	bhi.n	801bcfe <forward_relu+0xbe>
 801bd54:	1b1c      	subs	r4, r3, r4
 801bd56:	f024 0403 	bic.w	r4, r4, #3
 801bd5a:	1d1a      	adds	r2, r3, #4
 801bd5c:	1d01      	adds	r1, r0, #4
 801bd5e:	1b1b      	subs	r3, r3, r4
 801bd60:	ed72 7a01 	vldmdb	r2!, {s15}
 801bd64:	eef4 6ae7 	vcmpe.f32	s13, s15
 801bd68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd6c:	db0e      	blt.n	801bd8c <forward_relu+0x14c>
 801bd6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bd72:	ee67 7a86 	vmul.f32	s15, s15, s12
 801bd76:	4293      	cmp	r3, r2
 801bd78:	ed61 7a01 	vstmdb	r1!, {s15}
 801bd7c:	d0bf      	beq.n	801bcfe <forward_relu+0xbe>
 801bd7e:	ed72 7a01 	vldmdb	r2!, {s15}
 801bd82:	eef4 6ae7 	vcmpe.f32	s13, s15
 801bd86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd8a:	daf0      	bge.n	801bd6e <forward_relu+0x12e>
 801bd8c:	4293      	cmp	r3, r2
 801bd8e:	ed61 7a01 	vstmdb	r1!, {s15}
 801bd92:	d1e5      	bne.n	801bd60 <forward_relu+0x120>
 801bd94:	e7b3      	b.n	801bcfe <forward_relu+0xbe>
 801bd96:	6893      	ldr	r3, [r2, #8]
 801bd98:	6988      	ldr	r0, [r1, #24]
 801bd9a:	6991      	ldr	r1, [r2, #24]
 801bd9c:	0a1b      	lsrs	r3, r3, #8
 801bd9e:	6880      	ldr	r0, [r0, #8]
 801bda0:	688c      	ldr	r4, [r1, #8]
 801bda2:	d06f      	beq.n	801be84 <forward_relu+0x244>
 801bda4:	2101      	movs	r1, #1
 801bda6:	68d5      	ldr	r5, [r2, #12]
 801bda8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801bdac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801bdb0:	429d      	cmp	r5, r3
 801bdb2:	fb02 f101 	mul.w	r1, r2, r1
 801bdb6:	d1f9      	bne.n	801bdac <forward_relu+0x16c>
 801bdb8:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 801bdbc:	3901      	subs	r1, #1
 801bdbe:	eb04 0281 	add.w	r2, r4, r1, lsl #2
 801bdc2:	4294      	cmp	r4, r2
 801bdc4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801bdc8:	d899      	bhi.n	801bcfe <forward_relu+0xbe>
 801bdca:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 801be98 <forward_relu+0x258>
 801bdce:	3204      	adds	r2, #4
 801bdd0:	1d01      	adds	r1, r0, #4
 801bdd2:	4613      	mov	r3, r2
 801bdd4:	ed72 7a01 	vldmdb	r2!, {s15}
 801bdd8:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801bddc:	3b08      	subs	r3, #8
 801bdde:	429c      	cmp	r4, r3
 801bde0:	ed61 7a01 	vstmdb	r1!, {s15}
 801bde4:	d9f5      	bls.n	801bdd2 <forward_relu+0x192>
 801bde6:	bc70      	pop	{r4, r5, r6}
 801bde8:	4770      	bx	lr
 801bdea:	688c      	ldr	r4, [r1, #8]
 801bdec:	6891      	ldr	r1, [r2, #8]
 801bdee:	6880      	ldr	r0, [r0, #8]
 801bdf0:	0a09      	lsrs	r1, r1, #8
 801bdf2:	d049      	beq.n	801be88 <forward_relu+0x248>
 801bdf4:	68d5      	ldr	r5, [r2, #12]
 801bdf6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 801bdfa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801bdfe:	42aa      	cmp	r2, r5
 801be00:	fb01 f303 	mul.w	r3, r1, r3
 801be04:	d1f9      	bne.n	801bdfa <forward_relu+0x1ba>
 801be06:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 801be0a:	3a01      	subs	r2, #1
 801be0c:	68b1      	ldr	r1, [r6, #8]
 801be0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801be12:	429c      	cmp	r4, r3
 801be14:	ed91 7a00 	vldr	s14, [r1]
 801be18:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801be1c:	f63f af6f 	bhi.w	801bcfe <forward_relu+0xbe>
 801be20:	2500      	movs	r5, #0
 801be22:	3304      	adds	r3, #4
 801be24:	1d02      	adds	r2, r0, #4
 801be26:	ed53 7a01 	vldr	s15, [r3, #-4]
 801be2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801be2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be32:	f1a3 0104 	sub.w	r1, r3, #4
 801be36:	f1a3 0308 	sub.w	r3, r3, #8
 801be3a:	d406      	bmi.n	801be4a <forward_relu+0x20a>
 801be3c:	429c      	cmp	r4, r3
 801be3e:	f842 5d04 	str.w	r5, [r2, #-4]!
 801be42:	f63f af5c 	bhi.w	801bcfe <forward_relu+0xbe>
 801be46:	460b      	mov	r3, r1
 801be48:	e7ed      	b.n	801be26 <forward_relu+0x1e6>
 801be4a:	429c      	cmp	r4, r3
 801be4c:	ed62 7a01 	vstmdb	r2!, {s15}
 801be50:	f63f af55 	bhi.w	801bcfe <forward_relu+0xbe>
 801be54:	460b      	mov	r3, r1
 801be56:	e7e6      	b.n	801be26 <forward_relu+0x1e6>
 801be58:	68b3      	ldr	r3, [r6, #8]
 801be5a:	ed93 7a02 	vldr	s14, [r3, #8]
 801be5e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801be62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be66:	edd3 6a00 	vldr	s13, [r3]
 801be6a:	ed93 6a01 	vldr	s12, [r3, #4]
 801be6e:	d401      	bmi.n	801be74 <forward_relu+0x234>
 801be70:	4623      	mov	r3, r4
 801be72:	e724      	b.n	801bcbe <forward_relu+0x7e>
 801be74:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801be78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be7c:	4623      	mov	r3, r4
 801be7e:	f47f af69 	bne.w	801bd54 <forward_relu+0x114>
 801be82:	e747      	b.n	801bd14 <forward_relu+0xd4>
 801be84:	4622      	mov	r2, r4
 801be86:	e7a0      	b.n	801bdca <forward_relu+0x18a>
 801be88:	68b2      	ldr	r2, [r6, #8]
 801be8a:	4623      	mov	r3, r4
 801be8c:	ed92 7a00 	vldr	s14, [r2]
 801be90:	e7c6      	b.n	801be20 <forward_relu+0x1e0>
 801be92:	2300      	movs	r3, #0
 801be94:	685b      	ldr	r3, [r3, #4]
 801be96:	deff      	udf	#255	@ 0xff
 801be98:	00000000 	.word	0x00000000

0801be9c <forward_sm>:
 801be9c:	6982      	ldr	r2, [r0, #24]
 801be9e:	8813      	ldrh	r3, [r2, #0]
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	d077      	beq.n	801bf94 <forward_sm+0xf8>
 801bea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bea8:	ed2d 8b04 	vpush	{d8-d9}
 801beac:	6852      	ldr	r2, [r2, #4]
 801beae:	b085      	sub	sp, #20
 801beb0:	6854      	ldr	r4, [r2, #4]
 801beb2:	b104      	cbz	r4, 801beb6 <forward_sm+0x1a>
 801beb4:	6824      	ldr	r4, [r4, #0]
 801beb6:	2b01      	cmp	r3, #1
 801beb8:	d071      	beq.n	801bf9e <forward_sm+0x102>
 801beba:	6913      	ldr	r3, [r2, #16]
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	d071      	beq.n	801bfa4 <forward_sm+0x108>
 801bec0:	681e      	ldr	r6, [r3, #0]
 801bec2:	68a3      	ldr	r3, [r4, #8]
 801bec4:	68e0      	ldr	r0, [r4, #12]
 801bec6:	68f2      	ldr	r2, [r6, #12]
 801bec8:	0a1b      	lsrs	r3, r3, #8
 801beca:	6845      	ldr	r5, [r0, #4]
 801becc:	6857      	ldr	r7, [r2, #4]
 801bece:	d063      	beq.n	801bf98 <forward_sm+0xfc>
 801bed0:	2201      	movs	r2, #1
 801bed2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801bed6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801beda:	4298      	cmp	r0, r3
 801bedc:	fb01 f202 	mul.w	r2, r1, r2
 801bee0:	d1f9      	bne.n	801bed6 <forward_sm+0x3a>
 801bee2:	ea4f 0982 	mov.w	r9, r2, lsl #2
 801bee6:	69a2      	ldr	r2, [r4, #24]
 801bee8:	69b3      	ldr	r3, [r6, #24]
 801beea:	6892      	ldr	r2, [r2, #8]
 801beec:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801bef0:	eb02 0309 	add.w	r3, r2, r9
 801bef4:	429a      	cmp	r2, r3
 801bef6:	9301      	str	r3, [sp, #4]
 801bef8:	d247      	bcs.n	801bf8a <forward_sm+0xee>
 801befa:	00bb      	lsls	r3, r7, #2
 801befc:	9303      	str	r3, [sp, #12]
 801befe:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 801bf02:	00ab      	lsls	r3, r5, #2
 801bf04:	2d01      	cmp	r5, #1
 801bf06:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 801bf0a:	463e      	mov	r6, r7
 801bf0c:	ed92 8a00 	vldr	s16, [r2]
 801bf10:	9302      	str	r3, [sp, #8]
 801bf12:	d937      	bls.n	801bf84 <forward_sm+0xe8>
 801bf14:	1d13      	adds	r3, r2, #4
 801bf16:	ecf3 7a01 	vldmia	r3!, {s15}
 801bf1a:	429e      	cmp	r6, r3
 801bf1c:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 801bf20:	d1f9      	bne.n	801bf16 <forward_sm+0x7a>
 801bf22:	4692      	mov	sl, r2
 801bf24:	46c3      	mov	fp, r8
 801bf26:	46c1      	mov	r9, r8
 801bf28:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 801bfa8 <forward_sm+0x10c>
 801bf2c:	2400      	movs	r4, #0
 801bf2e:	ecba 0a01 	vldmia	sl!, {s0}
 801bf32:	ee30 0a48 	vsub.f32	s0, s0, s16
 801bf36:	f004 ffe5 	bl	8020f04 <expf>
 801bf3a:	3401      	adds	r4, #1
 801bf3c:	42a5      	cmp	r5, r4
 801bf3e:	eca9 0a01 	vstmia	r9!, {s0}
 801bf42:	ee78 8a80 	vadd.f32	s17, s17, s0
 801bf46:	d8f2      	bhi.n	801bf2e <forward_sm+0x92>
 801bf48:	eef5 8a40 	vcmp.f32	s17, #0.0
 801bf4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf50:	d00b      	beq.n	801bf6a <forward_sm+0xce>
 801bf52:	ee89 7a28 	vdiv.f32	s14, s18, s17
 801bf56:	2300      	movs	r3, #0
 801bf58:	eddb 7a00 	vldr	s15, [fp]
 801bf5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bf60:	3301      	adds	r3, #1
 801bf62:	429d      	cmp	r5, r3
 801bf64:	eceb 7a01 	vstmia	fp!, {s15}
 801bf68:	d8f6      	bhi.n	801bf58 <forward_sm+0xbc>
 801bf6a:	9b03      	ldr	r3, [sp, #12]
 801bf6c:	9901      	ldr	r1, [sp, #4]
 801bf6e:	4498      	add	r8, r3
 801bf70:	9b02      	ldr	r3, [sp, #8]
 801bf72:	42b9      	cmp	r1, r7
 801bf74:	463a      	mov	r2, r7
 801bf76:	441e      	add	r6, r3
 801bf78:	d907      	bls.n	801bf8a <forward_sm+0xee>
 801bf7a:	2d01      	cmp	r5, #1
 801bf7c:	ed92 8a00 	vldr	s16, [r2]
 801bf80:	441f      	add	r7, r3
 801bf82:	d8c7      	bhi.n	801bf14 <forward_sm+0x78>
 801bf84:	2d00      	cmp	r5, #0
 801bf86:	d0f0      	beq.n	801bf6a <forward_sm+0xce>
 801bf88:	e7cb      	b.n	801bf22 <forward_sm+0x86>
 801bf8a:	b005      	add	sp, #20
 801bf8c:	ecbd 8b04 	vpop	{d8-d9}
 801bf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf94:	685b      	ldr	r3, [r3, #4]
 801bf96:	deff      	udf	#255	@ 0xff
 801bf98:	f04f 0904 	mov.w	r9, #4
 801bf9c:	e7a3      	b.n	801bee6 <forward_sm+0x4a>
 801bf9e:	2300      	movs	r3, #0
 801bfa0:	685b      	ldr	r3, [r3, #4]
 801bfa2:	deff      	udf	#255	@ 0xff
 801bfa4:	68db      	ldr	r3, [r3, #12]
 801bfa6:	deff      	udf	#255	@ 0xff
 801bfa8:	00000000 	.word	0x00000000

0801bfac <forward_lite_dense_if32of32wf32>:
 801bfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfb0:	ed2d 8b10 	vpush	{d8-d15}
 801bfb4:	e9dd 6419 	ldrd	r6, r4, [sp, #100]	@ 0x64
 801bfb8:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 801bfbc:	4287      	cmp	r7, r0
 801bfbe:	f240 8106 	bls.w	801c1ce <forward_lite_dense_if32of32wf32+0x222>
 801bfc2:	4605      	mov	r5, r0
 801bfc4:	f1a6 0810 	sub.w	r8, r6, #16
 801bfc8:	ea4f 1818 	mov.w	r8, r8, lsr #4
 801bfcc:	f108 0801 	add.w	r8, r8, #1
 801bfd0:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 801bfd4:	ea4f 0986 	mov.w	r9, r6, lsl #2
 801bfd8:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 801bfdc:	f006 0a0f 	and.w	sl, r6, #15
 801bfe0:	2e0f      	cmp	r6, #15
 801bfe2:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 801c1f8 <forward_lite_dense_if32of32wf32+0x24c>
 801bfe6:	f240 8103 	bls.w	801c1f0 <forward_lite_dense_if32of32wf32+0x244>
 801bfea:	46b6      	mov	lr, r6
 801bfec:	f101 0c40 	add.w	ip, r1, #64	@ 0x40
 801bff0:	f102 0440 	add.w	r4, r2, #64	@ 0x40
 801bff4:	ed54 6a0f 	vldr	s13, [r4, #-60]	@ 0xffffffc4
 801bff8:	ed5c 7a0f 	vldr	s15, [ip, #-60]	@ 0xffffffc4
 801bffc:	ed5c fa10 	vldr	s31, [ip, #-64]	@ 0xffffffc0
 801c000:	ed14 fa10 	vldr	s30, [r4, #-64]	@ 0xffffffc0
 801c004:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c008:	ed5c ea0e 	vldr	s29, [ip, #-56]	@ 0xffffffc8
 801c00c:	ed14 ea0e 	vldr	s28, [r4, #-56]	@ 0xffffffc8
 801c010:	eeef 7a8f 	vfma.f32	s15, s31, s30
 801c014:	ed5c da0d 	vldr	s27, [ip, #-52]	@ 0xffffffcc
 801c018:	ed14 da0d 	vldr	s26, [r4, #-52]	@ 0xffffffcc
 801c01c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 801c020:	ed5c ca0c 	vldr	s25, [ip, #-48]	@ 0xffffffd0
 801c024:	ed14 ca0c 	vldr	s24, [r4, #-48]	@ 0xffffffd0
 801c028:	eeed 7a8d 	vfma.f32	s15, s27, s26
 801c02c:	ed5c ba0b 	vldr	s23, [ip, #-44]	@ 0xffffffd4
 801c030:	ed14 ba0b 	vldr	s22, [r4, #-44]	@ 0xffffffd4
 801c034:	eeec 7a8c 	vfma.f32	s15, s25, s24
 801c038:	ed5c aa0a 	vldr	s21, [ip, #-40]	@ 0xffffffd8
 801c03c:	ed14 aa0a 	vldr	s20, [r4, #-40]	@ 0xffffffd8
 801c040:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801c044:	ed5c 9a09 	vldr	s19, [ip, #-36]	@ 0xffffffdc
 801c048:	ed14 9a09 	vldr	s18, [r4, #-36]	@ 0xffffffdc
 801c04c:	eeea 7a8a 	vfma.f32	s15, s21, s20
 801c050:	ed5c 8a08 	vldr	s17, [ip, #-32]	@ 0xffffffe0
 801c054:	ed14 8a08 	vldr	s16, [r4, #-32]	@ 0xffffffe0
 801c058:	eee9 7a89 	vfma.f32	s15, s19, s18
 801c05c:	ed1c 0a07 	vldr	s0, [ip, #-28]	@ 0xffffffe4
 801c060:	ed54 0a07 	vldr	s1, [r4, #-28]	@ 0xffffffe4
 801c064:	eee8 7a88 	vfma.f32	s15, s17, s16
 801c068:	ed1c 1a06 	vldr	s2, [ip, #-24]	@ 0xffffffe8
 801c06c:	ed54 1a06 	vldr	s3, [r4, #-24]	@ 0xffffffe8
 801c070:	eee0 7a20 	vfma.f32	s15, s0, s1
 801c074:	ed1c 2a05 	vldr	s4, [ip, #-20]	@ 0xffffffec
 801c078:	ed54 2a05 	vldr	s5, [r4, #-20]	@ 0xffffffec
 801c07c:	eee1 7a21 	vfma.f32	s15, s2, s3
 801c080:	ed1c 3a04 	vldr	s6, [ip, #-16]
 801c084:	ed54 3a04 	vldr	s7, [r4, #-16]
 801c088:	eee2 7a22 	vfma.f32	s15, s4, s5
 801c08c:	ed1c 4a03 	vldr	s8, [ip, #-12]
 801c090:	ed54 4a03 	vldr	s9, [r4, #-12]
 801c094:	eee3 7a23 	vfma.f32	s15, s6, s7
 801c098:	ed1c 5a02 	vldr	s10, [ip, #-8]
 801c09c:	ed54 5a02 	vldr	s11, [r4, #-8]
 801c0a0:	eee4 7a24 	vfma.f32	s15, s8, s9
 801c0a4:	ed1c 6a01 	vldr	s12, [ip, #-4]
 801c0a8:	ed54 6a01 	vldr	s13, [r4, #-4]
 801c0ac:	eee5 7a25 	vfma.f32	s15, s10, s11
 801c0b0:	eee6 7a26 	vfma.f32	s15, s12, s13
 801c0b4:	f1ae 0e10 	sub.w	lr, lr, #16
 801c0b8:	f1be 0f0f 	cmp.w	lr, #15
 801c0bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c0c0:	f10c 0c40 	add.w	ip, ip, #64	@ 0x40
 801c0c4:	f104 0440 	add.w	r4, r4, #64	@ 0x40
 801c0c8:	d894      	bhi.n	801bff4 <forward_lite_dense_if32of32wf32+0x48>
 801c0ca:	4654      	mov	r4, sl
 801c0cc:	46c4      	mov	ip, r8
 801c0ce:	eb02 0e0b 	add.w	lr, r2, fp
 801c0d2:	2c00      	cmp	r4, #0
 801c0d4:	d075      	beq.n	801c1c2 <forward_lite_dense_if32of32wf32+0x216>
 801c0d6:	eddc 6a00 	vldr	s13, [ip]
 801c0da:	edde 7a00 	vldr	s15, [lr]
 801c0de:	2c01      	cmp	r4, #1
 801c0e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c0e4:	d06d      	beq.n	801c1c2 <forward_lite_dense_if32of32wf32+0x216>
 801c0e6:	eddc 6a01 	vldr	s13, [ip, #4]
 801c0ea:	edde 7a01 	vldr	s15, [lr, #4]
 801c0ee:	2c02      	cmp	r4, #2
 801c0f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c0f4:	d065      	beq.n	801c1c2 <forward_lite_dense_if32of32wf32+0x216>
 801c0f6:	eddc 6a02 	vldr	s13, [ip, #8]
 801c0fa:	edde 7a02 	vldr	s15, [lr, #8]
 801c0fe:	2c03      	cmp	r4, #3
 801c100:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c104:	d05d      	beq.n	801c1c2 <forward_lite_dense_if32of32wf32+0x216>
 801c106:	eddc 6a03 	vldr	s13, [ip, #12]
 801c10a:	edde 7a03 	vldr	s15, [lr, #12]
 801c10e:	2c04      	cmp	r4, #4
 801c110:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c114:	d055      	beq.n	801c1c2 <forward_lite_dense_if32of32wf32+0x216>
 801c116:	eddc 6a04 	vldr	s13, [ip, #16]
 801c11a:	edde 7a04 	vldr	s15, [lr, #16]
 801c11e:	2c05      	cmp	r4, #5
 801c120:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c124:	d04d      	beq.n	801c1c2 <forward_lite_dense_if32of32wf32+0x216>
 801c126:	eddc 6a05 	vldr	s13, [ip, #20]
 801c12a:	edde 7a05 	vldr	s15, [lr, #20]
 801c12e:	2c06      	cmp	r4, #6
 801c130:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c134:	d045      	beq.n	801c1c2 <forward_lite_dense_if32of32wf32+0x216>
 801c136:	eddc 6a06 	vldr	s13, [ip, #24]
 801c13a:	edde 7a06 	vldr	s15, [lr, #24]
 801c13e:	2c07      	cmp	r4, #7
 801c140:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c144:	d03d      	beq.n	801c1c2 <forward_lite_dense_if32of32wf32+0x216>
 801c146:	eddc 6a07 	vldr	s13, [ip, #28]
 801c14a:	edde 7a07 	vldr	s15, [lr, #28]
 801c14e:	2c08      	cmp	r4, #8
 801c150:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c154:	d035      	beq.n	801c1c2 <forward_lite_dense_if32of32wf32+0x216>
 801c156:	eddc 6a08 	vldr	s13, [ip, #32]
 801c15a:	edde 7a08 	vldr	s15, [lr, #32]
 801c15e:	2c09      	cmp	r4, #9
 801c160:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c164:	d02d      	beq.n	801c1c2 <forward_lite_dense_if32of32wf32+0x216>
 801c166:	eddc 6a09 	vldr	s13, [ip, #36]	@ 0x24
 801c16a:	edde 7a09 	vldr	s15, [lr, #36]	@ 0x24
 801c16e:	2c0a      	cmp	r4, #10
 801c170:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c174:	d025      	beq.n	801c1c2 <forward_lite_dense_if32of32wf32+0x216>
 801c176:	eddc 6a0a 	vldr	s13, [ip, #40]	@ 0x28
 801c17a:	edde 7a0a 	vldr	s15, [lr, #40]	@ 0x28
 801c17e:	2c0b      	cmp	r4, #11
 801c180:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c184:	d01d      	beq.n	801c1c2 <forward_lite_dense_if32of32wf32+0x216>
 801c186:	eddc 6a0b 	vldr	s13, [ip, #44]	@ 0x2c
 801c18a:	edde 7a0b 	vldr	s15, [lr, #44]	@ 0x2c
 801c18e:	2c0c      	cmp	r4, #12
 801c190:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c194:	d015      	beq.n	801c1c2 <forward_lite_dense_if32of32wf32+0x216>
 801c196:	eddc 6a0c 	vldr	s13, [ip, #48]	@ 0x30
 801c19a:	edde 7a0c 	vldr	s15, [lr, #48]	@ 0x30
 801c19e:	3c0d      	subs	r4, #13
 801c1a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c1a4:	d00d      	beq.n	801c1c2 <forward_lite_dense_if32of32wf32+0x216>
 801c1a6:	eddc 6a0d 	vldr	s13, [ip, #52]	@ 0x34
 801c1aa:	edde 7a0d 	vldr	s15, [lr, #52]	@ 0x34
 801c1ae:	2c01      	cmp	r4, #1
 801c1b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c1b4:	d005      	beq.n	801c1c2 <forward_lite_dense_if32of32wf32+0x216>
 801c1b6:	edde 6a0e 	vldr	s13, [lr, #56]	@ 0x38
 801c1ba:	eddc 7a0e 	vldr	s15, [ip, #56]	@ 0x38
 801c1be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c1c2:	eca5 7a01 	vstmia	r5!, {s14}
 801c1c6:	42af      	cmp	r7, r5
 801c1c8:	444a      	add	r2, r9
 801c1ca:	f63f af09 	bhi.w	801bfe0 <forward_lite_dense_if32of32wf32+0x34>
 801c1ce:	b15b      	cbz	r3, 801c1e8 <forward_lite_dense_if32of32wf32+0x23c>
 801c1d0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c1d2:	b14a      	cbz	r2, 801c1e8 <forward_lite_dense_if32of32wf32+0x23c>
 801c1d4:	edd0 7a00 	vldr	s15, [r0]
 801c1d8:	ecb3 7a01 	vldmia	r3!, {s14}
 801c1dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c1e0:	ece0 7a01 	vstmia	r0!, {s15}
 801c1e4:	4287      	cmp	r7, r0
 801c1e6:	d1f5      	bne.n	801c1d4 <forward_lite_dense_if32of32wf32+0x228>
 801c1e8:	ecbd 8b10 	vpop	{d8-d15}
 801c1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1f0:	4634      	mov	r4, r6
 801c1f2:	4696      	mov	lr, r2
 801c1f4:	468c      	mov	ip, r1
 801c1f6:	e76c      	b.n	801c0d2 <forward_lite_dense_if32of32wf32+0x126>
 801c1f8:	00000000 	.word	0x00000000

0801c1fc <st_int8_copy>:
 801c1fc:	4288      	cmp	r0, r1
 801c1fe:	d056      	beq.n	801c2ae <st_int8_copy+0xb2>
 801c200:	2a00      	cmp	r2, #0
 801c202:	d054      	beq.n	801c2ae <st_int8_copy+0xb2>
 801c204:	4288      	cmp	r0, r1
 801c206:	d353      	bcc.n	801c2b0 <st_int8_copy+0xb4>
 801c208:	078b      	lsls	r3, r1, #30
 801c20a:	d102      	bne.n	801c212 <st_int8_copy+0x16>
 801c20c:	e008      	b.n	801c220 <st_int8_copy+0x24>
 801c20e:	2a00      	cmp	r2, #0
 801c210:	d05b      	beq.n	801c2ca <st_int8_copy+0xce>
 801c212:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801c216:	3a01      	subs	r2, #1
 801c218:	f801 3b01 	strb.w	r3, [r1], #1
 801c21c:	078b      	lsls	r3, r1, #30
 801c21e:	d1f6      	bne.n	801c20e <st_int8_copy+0x12>
 801c220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c224:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 801c228:	d06c      	beq.n	801c304 <st_int8_copy+0x108>
 801c22a:	ea41 0300 	orr.w	r3, r1, r0
 801c22e:	075b      	lsls	r3, r3, #29
 801c230:	d14c      	bne.n	801c2cc <st_int8_copy+0xd0>
 801c232:	f10e 33ff 	add.w	r3, lr, #4294967295
 801c236:	2b01      	cmp	r3, #1
 801c238:	d948      	bls.n	801c2cc <st_int8_copy+0xd0>
 801c23a:	f100 0310 	add.w	r3, r0, #16
 801c23e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 801c242:	f101 0c10 	add.w	ip, r1, #16
 801c246:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 801c24a:	ed13 6b04 	vldr	d6, [r3, #-16]
 801c24e:	ed13 7b02 	vldr	d7, [r3, #-8]
 801c252:	3310      	adds	r3, #16
 801c254:	4573      	cmp	r3, lr
 801c256:	ed0c 6b04 	vstr	d6, [ip, #-16]
 801c25a:	ed0c 7b02 	vstr	d7, [ip, #-8]
 801c25e:	f10c 0c10 	add.w	ip, ip, #16
 801c262:	d1f2      	bne.n	801c24a <st_int8_copy+0x4e>
 801c264:	f3c2 0381 	ubfx	r3, r2, #2, #2
 801c268:	4421      	add	r1, r4
 801c26a:	4420      	add	r0, r4
 801c26c:	f002 0203 	and.w	r2, r2, #3
 801c270:	b16b      	cbz	r3, 801c28e <st_int8_copy+0x92>
 801c272:	6804      	ldr	r4, [r0, #0]
 801c274:	600c      	str	r4, [r1, #0]
 801c276:	1e5c      	subs	r4, r3, #1
 801c278:	d005      	beq.n	801c286 <st_int8_copy+0x8a>
 801c27a:	6845      	ldr	r5, [r0, #4]
 801c27c:	2c01      	cmp	r4, #1
 801c27e:	604d      	str	r5, [r1, #4]
 801c280:	bf1c      	itt	ne
 801c282:	6884      	ldrne	r4, [r0, #8]
 801c284:	608c      	strne	r4, [r1, #8]
 801c286:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801c28a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801c28e:	b162      	cbz	r2, 801c2aa <st_int8_copy+0xae>
 801c290:	f990 3000 	ldrsb.w	r3, [r0]
 801c294:	3a01      	subs	r2, #1
 801c296:	700b      	strb	r3, [r1, #0]
 801c298:	d007      	beq.n	801c2aa <st_int8_copy+0xae>
 801c29a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801c29e:	2a01      	cmp	r2, #1
 801c2a0:	704b      	strb	r3, [r1, #1]
 801c2a2:	bf1c      	itt	ne
 801c2a4:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 801c2a8:	708b      	strbne	r3, [r1, #2]
 801c2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2ae:	4770      	bx	lr
 801c2b0:	1883      	adds	r3, r0, r2
 801c2b2:	428b      	cmp	r3, r1
 801c2b4:	d9a8      	bls.n	801c208 <st_int8_copy+0xc>
 801c2b6:	4283      	cmp	r3, r0
 801c2b8:	440a      	add	r2, r1
 801c2ba:	d9f8      	bls.n	801c2ae <st_int8_copy+0xb2>
 801c2bc:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 801c2c0:	4283      	cmp	r3, r0
 801c2c2:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801c2c6:	d1f9      	bne.n	801c2bc <st_int8_copy+0xc0>
 801c2c8:	4770      	bx	lr
 801c2ca:	4770      	bx	lr
 801c2cc:	460b      	mov	r3, r1
 801c2ce:	4684      	mov	ip, r0
 801c2d0:	ea4f 140e 	mov.w	r4, lr, lsl #4
 801c2d4:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 801c2d8:	f8dc 8000 	ldr.w	r8, [ip]
 801c2dc:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801c2e0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c2e4:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801c2e8:	3310      	adds	r3, #16
 801c2ea:	f843 8c10 	str.w	r8, [r3, #-16]
 801c2ee:	f843 7c0c 	str.w	r7, [r3, #-12]
 801c2f2:	f843 6c08 	str.w	r6, [r3, #-8]
 801c2f6:	f843 5c04 	str.w	r5, [r3, #-4]
 801c2fa:	459e      	cmp	lr, r3
 801c2fc:	f10c 0c10 	add.w	ip, ip, #16
 801c300:	d1ea      	bne.n	801c2d8 <st_int8_copy+0xdc>
 801c302:	e7af      	b.n	801c264 <st_int8_copy+0x68>
 801c304:	0893      	lsrs	r3, r2, #2
 801c306:	f002 0203 	and.w	r2, r2, #3
 801c30a:	e7b1      	b.n	801c270 <st_int8_copy+0x74>

0801c30c <ai_array_to_buffer_fmt>:
 801c30c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 801c310:	2b02      	cmp	r3, #2
 801c312:	d050      	beq.n	801c3b6 <ai_array_to_buffer_fmt+0xaa>
 801c314:	4b2a      	ldr	r3, [pc, #168]	@ (801c3c0 <ai_array_to_buffer_fmt+0xb4>)
 801c316:	f020 427e 	bic.w	r2, r0, #4261412864	@ 0xfe000000
 801c31a:	429a      	cmp	r2, r3
 801c31c:	d00b      	beq.n	801c336 <ai_array_to_buffer_fmt+0x2a>
 801c31e:	dc1c      	bgt.n	801c35a <ai_array_to_buffer_fmt+0x4e>
 801c320:	4b28      	ldr	r3, [pc, #160]	@ (801c3c4 <ai_array_to_buffer_fmt+0xb8>)
 801c322:	429a      	cmp	r2, r3
 801c324:	d007      	beq.n	801c336 <ai_array_to_buffer_fmt+0x2a>
 801c326:	dd0b      	ble.n	801c340 <ai_array_to_buffer_fmt+0x34>
 801c328:	4b27      	ldr	r3, [pc, #156]	@ (801c3c8 <ai_array_to_buffer_fmt+0xbc>)
 801c32a:	429a      	cmp	r2, r3
 801c32c:	d003      	beq.n	801c336 <ai_array_to_buffer_fmt+0x2a>
 801c32e:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 801c332:	429a      	cmp	r2, r3
 801c334:	d131      	bne.n	801c39a <ai_array_to_buffer_fmt+0x8e>
 801c336:	4613      	mov	r3, r2
 801c338:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801c33c:	4318      	orrs	r0, r3
 801c33e:	4770      	bx	lr
 801c340:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 801c344:	429a      	cmp	r2, r3
 801c346:	d0f6      	beq.n	801c336 <ai_array_to_buffer_fmt+0x2a>
 801c348:	dd2c      	ble.n	801c3a4 <ai_array_to_buffer_fmt+0x98>
 801c34a:	4b20      	ldr	r3, [pc, #128]	@ (801c3cc <ai_array_to_buffer_fmt+0xc0>)
 801c34c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801c350:	429a      	cmp	r2, r3
 801c352:	bf18      	it	ne
 801c354:	2340      	movne	r3, #64	@ 0x40
 801c356:	4318      	orrs	r0, r3
 801c358:	4770      	bx	lr
 801c35a:	4b1d      	ldr	r3, [pc, #116]	@ (801c3d0 <ai_array_to_buffer_fmt+0xc4>)
 801c35c:	429a      	cmp	r2, r3
 801c35e:	d0ea      	beq.n	801c336 <ai_array_to_buffer_fmt+0x2a>
 801c360:	dd0e      	ble.n	801c380 <ai_array_to_buffer_fmt+0x74>
 801c362:	4b1c      	ldr	r3, [pc, #112]	@ (801c3d4 <ai_array_to_buffer_fmt+0xc8>)
 801c364:	429a      	cmp	r2, r3
 801c366:	d0e6      	beq.n	801c336 <ai_array_to_buffer_fmt+0x2a>
 801c368:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 801c36c:	429a      	cmp	r2, r3
 801c36e:	d0e2      	beq.n	801c336 <ai_array_to_buffer_fmt+0x2a>
 801c370:	4b19      	ldr	r3, [pc, #100]	@ (801c3d8 <ai_array_to_buffer_fmt+0xcc>)
 801c372:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801c376:	429a      	cmp	r2, r3
 801c378:	bf18      	it	ne
 801c37a:	2340      	movne	r3, #64	@ 0x40
 801c37c:	4318      	orrs	r0, r3
 801c37e:	4770      	bx	lr
 801c380:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 801c384:	429a      	cmp	r2, r3
 801c386:	d0d6      	beq.n	801c336 <ai_array_to_buffer_fmt+0x2a>
 801c388:	3307      	adds	r3, #7
 801c38a:	429a      	cmp	r2, r3
 801c38c:	d0d3      	beq.n	801c336 <ai_array_to_buffer_fmt+0x2a>
 801c38e:	f2a3 3387 	subw	r3, r3, #903	@ 0x387
 801c392:	429a      	cmp	r2, r3
 801c394:	bf18      	it	ne
 801c396:	2340      	movne	r3, #64	@ 0x40
 801c398:	e7ce      	b.n	801c338 <ai_array_to_buffer_fmt+0x2c>
 801c39a:	4b10      	ldr	r3, [pc, #64]	@ (801c3dc <ai_array_to_buffer_fmt+0xd0>)
 801c39c:	429a      	cmp	r2, r3
 801c39e:	bf18      	it	ne
 801c3a0:	2340      	movne	r3, #64	@ 0x40
 801c3a2:	e7c9      	b.n	801c338 <ai_array_to_buffer_fmt+0x2c>
 801c3a4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 801c3a8:	429a      	cmp	r2, r3
 801c3aa:	d0c4      	beq.n	801c336 <ai_array_to_buffer_fmt+0x2a>
 801c3ac:	3380      	adds	r3, #128	@ 0x80
 801c3ae:	429a      	cmp	r2, r3
 801c3b0:	bf18      	it	ne
 801c3b2:	2340      	movne	r3, #64	@ 0x40
 801c3b4:	e7c0      	b.n	801c338 <ai_array_to_buffer_fmt+0x2c>
 801c3b6:	4b0a      	ldr	r3, [pc, #40]	@ (801c3e0 <ai_array_to_buffer_fmt+0xd4>)
 801c3b8:	4003      	ands	r3, r0
 801c3ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c3be:	e7bb      	b.n	801c338 <ai_array_to_buffer_fmt+0x2c>
 801c3c0:	00840040 	.word	0x00840040
 801c3c4:	00040840 	.word	0x00040840
 801c3c8:	00041040 	.word	0x00041040
 801c3cc:	00040447 	.word	0x00040447
 801c3d0:	00840840 	.word	0x00840840
 801c3d4:	00841040 	.word	0x00841040
 801c3d8:	0084084f 	.word	0x0084084f
 801c3dc:	0004084f 	.word	0x0004084f
 801c3e0:	00803fff 	.word	0x00803fff

0801c3e4 <ai_array_get_byte_size>:
 801c3e4:	b319      	cbz	r1, 801c42e <ai_array_get_byte_size+0x4a>
 801c3e6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801c3ea:	fb03 f101 	mul.w	r1, r3, r1
 801c3ee:	f3c0 4243 	ubfx	r2, r0, #17, #4
 801c3f2:	3107      	adds	r1, #7
 801c3f4:	f3c0 5341 	ubfx	r3, r0, #21, #2
 801c3f8:	f021 0107 	bic.w	r1, r1, #7
 801c3fc:	2a04      	cmp	r2, #4
 801c3fe:	ea4f 10e0 	mov.w	r0, r0, asr #7
 801c402:	fa21 f103 	lsr.w	r1, r1, r3
 801c406:	d00b      	beq.n	801c420 <ai_array_get_byte_size+0x3c>
 801c408:	2a08      	cmp	r2, #8
 801c40a:	d002      	beq.n	801c412 <ai_array_get_byte_size+0x2e>
 801c40c:	3107      	adds	r1, #7
 801c40e:	08c8      	lsrs	r0, r1, #3
 801c410:	4770      	bx	lr
 801c412:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 801c416:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 801c41a:	3107      	adds	r1, #7
 801c41c:	08c8      	lsrs	r0, r1, #3
 801c41e:	4770      	bx	lr
 801c420:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 801c424:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 801c428:	3107      	adds	r1, #7
 801c42a:	08c8      	lsrs	r0, r1, #3
 801c42c:	4770      	bx	lr
 801c42e:	4608      	mov	r0, r1
 801c430:	4770      	bx	lr
 801c432:	bf00      	nop

0801c434 <ai_array_get_data_byte_size>:
 801c434:	b161      	cbz	r1, 801c450 <ai_array_get_data_byte_size+0x1c>
 801c436:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801c43a:	fb03 f101 	mul.w	r1, r3, r1
 801c43e:	f3c0 5341 	ubfx	r3, r0, #21, #2
 801c442:	1dc8      	adds	r0, r1, #7
 801c444:	f020 0007 	bic.w	r0, r0, #7
 801c448:	40d8      	lsrs	r0, r3
 801c44a:	3007      	adds	r0, #7
 801c44c:	08c0      	lsrs	r0, r0, #3
 801c44e:	4770      	bx	lr
 801c450:	4608      	mov	r0, r1
 801c452:	4770      	bx	lr

0801c454 <ai_version_get>:
 801c454:	0212      	lsls	r2, r2, #8
 801c456:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801c45a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 801c45e:	4770      	bx	lr

0801c460 <get_tensor_byte_size>:
 801c460:	b410      	push	{r4}
 801c462:	68c4      	ldr	r4, [r0, #12]
 801c464:	6941      	ldr	r1, [r0, #20]
 801c466:	6983      	ldr	r3, [r0, #24]
 801c468:	68c9      	ldr	r1, [r1, #12]
 801c46a:	68e0      	ldr	r0, [r4, #12]
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	fb01 f000 	mul.w	r0, r1, r0
 801c472:	4a06      	ldr	r2, [pc, #24]	@ (801c48c <get_tensor_byte_size+0x2c>)
 801c474:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 801c478:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801c47c:	4293      	cmp	r3, r2
 801c47e:	bf04      	itt	eq
 801c480:	3007      	addeq	r0, #7
 801c482:	08c0      	lsreq	r0, r0, #3
 801c484:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c488:	4770      	bx	lr
 801c48a:	bf00      	nop
 801c48c:	000400c0 	.word	0x000400c0

0801c490 <atoi>:
 801c490:	220a      	movs	r2, #10
 801c492:	2100      	movs	r1, #0
 801c494:	f000 bf9a 	b.w	801d3cc <strtol>

0801c498 <calloc>:
 801c498:	4b02      	ldr	r3, [pc, #8]	@ (801c4a4 <calloc+0xc>)
 801c49a:	460a      	mov	r2, r1
 801c49c:	4601      	mov	r1, r0
 801c49e:	6818      	ldr	r0, [r3, #0]
 801c4a0:	f000 b802 	b.w	801c4a8 <_calloc_r>
 801c4a4:	20000b28 	.word	0x20000b28

0801c4a8 <_calloc_r>:
 801c4a8:	b570      	push	{r4, r5, r6, lr}
 801c4aa:	fba1 5402 	umull	r5, r4, r1, r2
 801c4ae:	b93c      	cbnz	r4, 801c4c0 <_calloc_r+0x18>
 801c4b0:	4629      	mov	r1, r5
 801c4b2:	f000 f83f 	bl	801c534 <_malloc_r>
 801c4b6:	4606      	mov	r6, r0
 801c4b8:	b928      	cbnz	r0, 801c4c6 <_calloc_r+0x1e>
 801c4ba:	2600      	movs	r6, #0
 801c4bc:	4630      	mov	r0, r6
 801c4be:	bd70      	pop	{r4, r5, r6, pc}
 801c4c0:	220c      	movs	r2, #12
 801c4c2:	6002      	str	r2, [r0, #0]
 801c4c4:	e7f9      	b.n	801c4ba <_calloc_r+0x12>
 801c4c6:	462a      	mov	r2, r5
 801c4c8:	4621      	mov	r1, r4
 801c4ca:	f002 f8a9 	bl	801e620 <memset>
 801c4ce:	e7f5      	b.n	801c4bc <_calloc_r+0x14>

0801c4d0 <malloc>:
 801c4d0:	4b02      	ldr	r3, [pc, #8]	@ (801c4dc <malloc+0xc>)
 801c4d2:	4601      	mov	r1, r0
 801c4d4:	6818      	ldr	r0, [r3, #0]
 801c4d6:	f000 b82d 	b.w	801c534 <_malloc_r>
 801c4da:	bf00      	nop
 801c4dc:	20000b28 	.word	0x20000b28

0801c4e0 <free>:
 801c4e0:	4b02      	ldr	r3, [pc, #8]	@ (801c4ec <free+0xc>)
 801c4e2:	4601      	mov	r1, r0
 801c4e4:	6818      	ldr	r0, [r3, #0]
 801c4e6:	f003 b883 	b.w	801f5f0 <_free_r>
 801c4ea:	bf00      	nop
 801c4ec:	20000b28 	.word	0x20000b28

0801c4f0 <sbrk_aligned>:
 801c4f0:	b570      	push	{r4, r5, r6, lr}
 801c4f2:	4e0f      	ldr	r6, [pc, #60]	@ (801c530 <sbrk_aligned+0x40>)
 801c4f4:	460c      	mov	r4, r1
 801c4f6:	4605      	mov	r5, r0
 801c4f8:	6831      	ldr	r1, [r6, #0]
 801c4fa:	b911      	cbnz	r1, 801c502 <sbrk_aligned+0x12>
 801c4fc:	f002 f984 	bl	801e808 <_sbrk_r>
 801c500:	6030      	str	r0, [r6, #0]
 801c502:	4621      	mov	r1, r4
 801c504:	4628      	mov	r0, r5
 801c506:	f002 f97f 	bl	801e808 <_sbrk_r>
 801c50a:	1c43      	adds	r3, r0, #1
 801c50c:	d103      	bne.n	801c516 <sbrk_aligned+0x26>
 801c50e:	f04f 34ff 	mov.w	r4, #4294967295
 801c512:	4620      	mov	r0, r4
 801c514:	bd70      	pop	{r4, r5, r6, pc}
 801c516:	1cc4      	adds	r4, r0, #3
 801c518:	f024 0403 	bic.w	r4, r4, #3
 801c51c:	42a0      	cmp	r0, r4
 801c51e:	d0f8      	beq.n	801c512 <sbrk_aligned+0x22>
 801c520:	1a21      	subs	r1, r4, r0
 801c522:	4628      	mov	r0, r5
 801c524:	f002 f970 	bl	801e808 <_sbrk_r>
 801c528:	3001      	adds	r0, #1
 801c52a:	d1f2      	bne.n	801c512 <sbrk_aligned+0x22>
 801c52c:	e7ef      	b.n	801c50e <sbrk_aligned+0x1e>
 801c52e:	bf00      	nop
 801c530:	20045818 	.word	0x20045818

0801c534 <_malloc_r>:
 801c534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c538:	1ccd      	adds	r5, r1, #3
 801c53a:	4606      	mov	r6, r0
 801c53c:	f025 0503 	bic.w	r5, r5, #3
 801c540:	3508      	adds	r5, #8
 801c542:	2d0c      	cmp	r5, #12
 801c544:	bf38      	it	cc
 801c546:	250c      	movcc	r5, #12
 801c548:	2d00      	cmp	r5, #0
 801c54a:	db01      	blt.n	801c550 <_malloc_r+0x1c>
 801c54c:	42a9      	cmp	r1, r5
 801c54e:	d904      	bls.n	801c55a <_malloc_r+0x26>
 801c550:	230c      	movs	r3, #12
 801c552:	6033      	str	r3, [r6, #0]
 801c554:	2000      	movs	r0, #0
 801c556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c55a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801c630 <_malloc_r+0xfc>
 801c55e:	f000 f869 	bl	801c634 <__malloc_lock>
 801c562:	f8d8 3000 	ldr.w	r3, [r8]
 801c566:	461c      	mov	r4, r3
 801c568:	bb44      	cbnz	r4, 801c5bc <_malloc_r+0x88>
 801c56a:	4629      	mov	r1, r5
 801c56c:	4630      	mov	r0, r6
 801c56e:	f7ff ffbf 	bl	801c4f0 <sbrk_aligned>
 801c572:	1c43      	adds	r3, r0, #1
 801c574:	4604      	mov	r4, r0
 801c576:	d158      	bne.n	801c62a <_malloc_r+0xf6>
 801c578:	f8d8 4000 	ldr.w	r4, [r8]
 801c57c:	4627      	mov	r7, r4
 801c57e:	2f00      	cmp	r7, #0
 801c580:	d143      	bne.n	801c60a <_malloc_r+0xd6>
 801c582:	2c00      	cmp	r4, #0
 801c584:	d04b      	beq.n	801c61e <_malloc_r+0xea>
 801c586:	6823      	ldr	r3, [r4, #0]
 801c588:	4639      	mov	r1, r7
 801c58a:	4630      	mov	r0, r6
 801c58c:	eb04 0903 	add.w	r9, r4, r3
 801c590:	f002 f93a 	bl	801e808 <_sbrk_r>
 801c594:	4581      	cmp	r9, r0
 801c596:	d142      	bne.n	801c61e <_malloc_r+0xea>
 801c598:	6821      	ldr	r1, [r4, #0]
 801c59a:	4630      	mov	r0, r6
 801c59c:	1a6d      	subs	r5, r5, r1
 801c59e:	4629      	mov	r1, r5
 801c5a0:	f7ff ffa6 	bl	801c4f0 <sbrk_aligned>
 801c5a4:	3001      	adds	r0, #1
 801c5a6:	d03a      	beq.n	801c61e <_malloc_r+0xea>
 801c5a8:	6823      	ldr	r3, [r4, #0]
 801c5aa:	442b      	add	r3, r5
 801c5ac:	6023      	str	r3, [r4, #0]
 801c5ae:	f8d8 3000 	ldr.w	r3, [r8]
 801c5b2:	685a      	ldr	r2, [r3, #4]
 801c5b4:	bb62      	cbnz	r2, 801c610 <_malloc_r+0xdc>
 801c5b6:	f8c8 7000 	str.w	r7, [r8]
 801c5ba:	e00f      	b.n	801c5dc <_malloc_r+0xa8>
 801c5bc:	6822      	ldr	r2, [r4, #0]
 801c5be:	1b52      	subs	r2, r2, r5
 801c5c0:	d420      	bmi.n	801c604 <_malloc_r+0xd0>
 801c5c2:	2a0b      	cmp	r2, #11
 801c5c4:	d917      	bls.n	801c5f6 <_malloc_r+0xc2>
 801c5c6:	1961      	adds	r1, r4, r5
 801c5c8:	42a3      	cmp	r3, r4
 801c5ca:	6025      	str	r5, [r4, #0]
 801c5cc:	bf18      	it	ne
 801c5ce:	6059      	strne	r1, [r3, #4]
 801c5d0:	6863      	ldr	r3, [r4, #4]
 801c5d2:	bf08      	it	eq
 801c5d4:	f8c8 1000 	streq.w	r1, [r8]
 801c5d8:	5162      	str	r2, [r4, r5]
 801c5da:	604b      	str	r3, [r1, #4]
 801c5dc:	4630      	mov	r0, r6
 801c5de:	f000 f82f 	bl	801c640 <__malloc_unlock>
 801c5e2:	f104 000b 	add.w	r0, r4, #11
 801c5e6:	1d23      	adds	r3, r4, #4
 801c5e8:	f020 0007 	bic.w	r0, r0, #7
 801c5ec:	1ac2      	subs	r2, r0, r3
 801c5ee:	bf1c      	itt	ne
 801c5f0:	1a1b      	subne	r3, r3, r0
 801c5f2:	50a3      	strne	r3, [r4, r2]
 801c5f4:	e7af      	b.n	801c556 <_malloc_r+0x22>
 801c5f6:	6862      	ldr	r2, [r4, #4]
 801c5f8:	42a3      	cmp	r3, r4
 801c5fa:	bf0c      	ite	eq
 801c5fc:	f8c8 2000 	streq.w	r2, [r8]
 801c600:	605a      	strne	r2, [r3, #4]
 801c602:	e7eb      	b.n	801c5dc <_malloc_r+0xa8>
 801c604:	4623      	mov	r3, r4
 801c606:	6864      	ldr	r4, [r4, #4]
 801c608:	e7ae      	b.n	801c568 <_malloc_r+0x34>
 801c60a:	463c      	mov	r4, r7
 801c60c:	687f      	ldr	r7, [r7, #4]
 801c60e:	e7b6      	b.n	801c57e <_malloc_r+0x4a>
 801c610:	461a      	mov	r2, r3
 801c612:	685b      	ldr	r3, [r3, #4]
 801c614:	42a3      	cmp	r3, r4
 801c616:	d1fb      	bne.n	801c610 <_malloc_r+0xdc>
 801c618:	2300      	movs	r3, #0
 801c61a:	6053      	str	r3, [r2, #4]
 801c61c:	e7de      	b.n	801c5dc <_malloc_r+0xa8>
 801c61e:	230c      	movs	r3, #12
 801c620:	4630      	mov	r0, r6
 801c622:	6033      	str	r3, [r6, #0]
 801c624:	f000 f80c 	bl	801c640 <__malloc_unlock>
 801c628:	e794      	b.n	801c554 <_malloc_r+0x20>
 801c62a:	6005      	str	r5, [r0, #0]
 801c62c:	e7d6      	b.n	801c5dc <_malloc_r+0xa8>
 801c62e:	bf00      	nop
 801c630:	2004581c 	.word	0x2004581c

0801c634 <__malloc_lock>:
 801c634:	4801      	ldr	r0, [pc, #4]	@ (801c63c <__malloc_lock+0x8>)
 801c636:	f002 b934 	b.w	801e8a2 <__retarget_lock_acquire_recursive>
 801c63a:	bf00      	nop
 801c63c:	20045960 	.word	0x20045960

0801c640 <__malloc_unlock>:
 801c640:	4801      	ldr	r0, [pc, #4]	@ (801c648 <__malloc_unlock+0x8>)
 801c642:	f002 b92f 	b.w	801e8a4 <__retarget_lock_release_recursive>
 801c646:	bf00      	nop
 801c648:	20045960 	.word	0x20045960

0801c64c <_realloc_r>:
 801c64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c650:	4680      	mov	r8, r0
 801c652:	4615      	mov	r5, r2
 801c654:	460c      	mov	r4, r1
 801c656:	b921      	cbnz	r1, 801c662 <_realloc_r+0x16>
 801c658:	4611      	mov	r1, r2
 801c65a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c65e:	f7ff bf69 	b.w	801c534 <_malloc_r>
 801c662:	b92a      	cbnz	r2, 801c670 <_realloc_r+0x24>
 801c664:	f002 ffc4 	bl	801f5f0 <_free_r>
 801c668:	2400      	movs	r4, #0
 801c66a:	4620      	mov	r0, r4
 801c66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c670:	f004 f80c 	bl	802068c <_malloc_usable_size_r>
 801c674:	4285      	cmp	r5, r0
 801c676:	4606      	mov	r6, r0
 801c678:	d802      	bhi.n	801c680 <_realloc_r+0x34>
 801c67a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801c67e:	d8f4      	bhi.n	801c66a <_realloc_r+0x1e>
 801c680:	4629      	mov	r1, r5
 801c682:	4640      	mov	r0, r8
 801c684:	f7ff ff56 	bl	801c534 <_malloc_r>
 801c688:	4607      	mov	r7, r0
 801c68a:	2800      	cmp	r0, #0
 801c68c:	d0ec      	beq.n	801c668 <_realloc_r+0x1c>
 801c68e:	42b5      	cmp	r5, r6
 801c690:	462a      	mov	r2, r5
 801c692:	4621      	mov	r1, r4
 801c694:	bf28      	it	cs
 801c696:	4632      	movcs	r2, r6
 801c698:	f002 f91b 	bl	801e8d2 <memcpy>
 801c69c:	4621      	mov	r1, r4
 801c69e:	4640      	mov	r0, r8
 801c6a0:	463c      	mov	r4, r7
 801c6a2:	f002 ffa5 	bl	801f5f0 <_free_r>
 801c6a6:	e7e0      	b.n	801c66a <_realloc_r+0x1e>

0801c6a8 <sulp>:
 801c6a8:	b570      	push	{r4, r5, r6, lr}
 801c6aa:	4604      	mov	r4, r0
 801c6ac:	460d      	mov	r5, r1
 801c6ae:	4616      	mov	r6, r2
 801c6b0:	ec45 4b10 	vmov	d0, r4, r5
 801c6b4:	f003 fea8 	bl	8020408 <__ulp>
 801c6b8:	ec51 0b10 	vmov	r0, r1, d0
 801c6bc:	b17e      	cbz	r6, 801c6de <sulp+0x36>
 801c6be:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c6c2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	dd09      	ble.n	801c6de <sulp+0x36>
 801c6ca:	051b      	lsls	r3, r3, #20
 801c6cc:	2400      	movs	r4, #0
 801c6ce:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801c6d2:	4622      	mov	r2, r4
 801c6d4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801c6d8:	462b      	mov	r3, r5
 801c6da:	f7e3 ff9b 	bl	8000614 <__aeabi_dmul>
 801c6de:	ec41 0b10 	vmov	d0, r0, r1
 801c6e2:	bd70      	pop	{r4, r5, r6, pc}
 801c6e4:	0000      	movs	r0, r0
	...

0801c6e8 <_strtod_l>:
 801c6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6ec:	b09f      	sub	sp, #124	@ 0x7c
 801c6ee:	460c      	mov	r4, r1
 801c6f0:	f04f 0a00 	mov.w	sl, #0
 801c6f4:	f04f 0b00 	mov.w	fp, #0
 801c6f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801c6fa:	2200      	movs	r2, #0
 801c6fc:	9005      	str	r0, [sp, #20]
 801c6fe:	921a      	str	r2, [sp, #104]	@ 0x68
 801c700:	460a      	mov	r2, r1
 801c702:	9219      	str	r2, [sp, #100]	@ 0x64
 801c704:	7811      	ldrb	r1, [r2, #0]
 801c706:	292b      	cmp	r1, #43	@ 0x2b
 801c708:	d04a      	beq.n	801c7a0 <_strtod_l+0xb8>
 801c70a:	d838      	bhi.n	801c77e <_strtod_l+0x96>
 801c70c:	290d      	cmp	r1, #13
 801c70e:	d832      	bhi.n	801c776 <_strtod_l+0x8e>
 801c710:	2908      	cmp	r1, #8
 801c712:	d832      	bhi.n	801c77a <_strtod_l+0x92>
 801c714:	2900      	cmp	r1, #0
 801c716:	d03b      	beq.n	801c790 <_strtod_l+0xa8>
 801c718:	2200      	movs	r2, #0
 801c71a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c71c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801c71e:	782a      	ldrb	r2, [r5, #0]
 801c720:	2a30      	cmp	r2, #48	@ 0x30
 801c722:	f040 80b3 	bne.w	801c88c <_strtod_l+0x1a4>
 801c726:	786a      	ldrb	r2, [r5, #1]
 801c728:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801c72c:	2a58      	cmp	r2, #88	@ 0x58
 801c72e:	d16e      	bne.n	801c80e <_strtod_l+0x126>
 801c730:	9302      	str	r3, [sp, #8]
 801c732:	a919      	add	r1, sp, #100	@ 0x64
 801c734:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c736:	4a90      	ldr	r2, [pc, #576]	@ (801c978 <_strtod_l+0x290>)
 801c738:	9301      	str	r3, [sp, #4]
 801c73a:	ab1a      	add	r3, sp, #104	@ 0x68
 801c73c:	9805      	ldr	r0, [sp, #20]
 801c73e:	9300      	str	r3, [sp, #0]
 801c740:	ab1b      	add	r3, sp, #108	@ 0x6c
 801c742:	f003 f805 	bl	801f750 <__gethex>
 801c746:	f010 060f 	ands.w	r6, r0, #15
 801c74a:	4604      	mov	r4, r0
 801c74c:	d005      	beq.n	801c75a <_strtod_l+0x72>
 801c74e:	2e06      	cmp	r6, #6
 801c750:	d128      	bne.n	801c7a4 <_strtod_l+0xbc>
 801c752:	3501      	adds	r5, #1
 801c754:	2300      	movs	r3, #0
 801c756:	9519      	str	r5, [sp, #100]	@ 0x64
 801c758:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c75a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c75c:	2b00      	cmp	r3, #0
 801c75e:	f040 858e 	bne.w	801d27e <_strtod_l+0xb96>
 801c762:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c764:	b1cb      	cbz	r3, 801c79a <_strtod_l+0xb2>
 801c766:	4652      	mov	r2, sl
 801c768:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801c76c:	ec43 2b10 	vmov	d0, r2, r3
 801c770:	b01f      	add	sp, #124	@ 0x7c
 801c772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c776:	2920      	cmp	r1, #32
 801c778:	d1ce      	bne.n	801c718 <_strtod_l+0x30>
 801c77a:	3201      	adds	r2, #1
 801c77c:	e7c1      	b.n	801c702 <_strtod_l+0x1a>
 801c77e:	292d      	cmp	r1, #45	@ 0x2d
 801c780:	d1ca      	bne.n	801c718 <_strtod_l+0x30>
 801c782:	2101      	movs	r1, #1
 801c784:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c786:	1c51      	adds	r1, r2, #1
 801c788:	9119      	str	r1, [sp, #100]	@ 0x64
 801c78a:	7852      	ldrb	r2, [r2, #1]
 801c78c:	2a00      	cmp	r2, #0
 801c78e:	d1c5      	bne.n	801c71c <_strtod_l+0x34>
 801c790:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c792:	9419      	str	r4, [sp, #100]	@ 0x64
 801c794:	2b00      	cmp	r3, #0
 801c796:	f040 8570 	bne.w	801d27a <_strtod_l+0xb92>
 801c79a:	4652      	mov	r2, sl
 801c79c:	465b      	mov	r3, fp
 801c79e:	e7e5      	b.n	801c76c <_strtod_l+0x84>
 801c7a0:	2100      	movs	r1, #0
 801c7a2:	e7ef      	b.n	801c784 <_strtod_l+0x9c>
 801c7a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c7a6:	b13a      	cbz	r2, 801c7b8 <_strtod_l+0xd0>
 801c7a8:	2135      	movs	r1, #53	@ 0x35
 801c7aa:	a81c      	add	r0, sp, #112	@ 0x70
 801c7ac:	f003 ff2a 	bl	8020604 <__copybits>
 801c7b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c7b2:	9805      	ldr	r0, [sp, #20]
 801c7b4:	f003 faee 	bl	801fd94 <_Bfree>
 801c7b8:	3e01      	subs	r6, #1
 801c7ba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c7bc:	2e04      	cmp	r6, #4
 801c7be:	d806      	bhi.n	801c7ce <_strtod_l+0xe6>
 801c7c0:	e8df f006 	tbb	[pc, r6]
 801c7c4:	201d0314 	.word	0x201d0314
 801c7c8:	14          	.byte	0x14
 801c7c9:	00          	.byte	0x00
 801c7ca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801c7ce:	05e1      	lsls	r1, r4, #23
 801c7d0:	bf48      	it	mi
 801c7d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801c7d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c7da:	0d1b      	lsrs	r3, r3, #20
 801c7dc:	051b      	lsls	r3, r3, #20
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	d1bb      	bne.n	801c75a <_strtod_l+0x72>
 801c7e2:	f002 f833 	bl	801e84c <__errno>
 801c7e6:	2322      	movs	r3, #34	@ 0x22
 801c7e8:	6003      	str	r3, [r0, #0]
 801c7ea:	e7b6      	b.n	801c75a <_strtod_l+0x72>
 801c7ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801c7f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801c7f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801c7f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c7fc:	e7e7      	b.n	801c7ce <_strtod_l+0xe6>
 801c7fe:	f8df b180 	ldr.w	fp, [pc, #384]	@ 801c980 <_strtod_l+0x298>
 801c802:	e7e4      	b.n	801c7ce <_strtod_l+0xe6>
 801c804:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801c808:	f04f 3aff 	mov.w	sl, #4294967295
 801c80c:	e7df      	b.n	801c7ce <_strtod_l+0xe6>
 801c80e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c810:	1c5a      	adds	r2, r3, #1
 801c812:	9219      	str	r2, [sp, #100]	@ 0x64
 801c814:	785b      	ldrb	r3, [r3, #1]
 801c816:	2b30      	cmp	r3, #48	@ 0x30
 801c818:	d0f9      	beq.n	801c80e <_strtod_l+0x126>
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d09d      	beq.n	801c75a <_strtod_l+0x72>
 801c81e:	2301      	movs	r3, #1
 801c820:	9309      	str	r3, [sp, #36]	@ 0x24
 801c822:	220a      	movs	r2, #10
 801c824:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c826:	930c      	str	r3, [sp, #48]	@ 0x30
 801c828:	2300      	movs	r3, #0
 801c82a:	461f      	mov	r7, r3
 801c82c:	9308      	str	r3, [sp, #32]
 801c82e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c830:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c832:	7805      	ldrb	r5, [r0, #0]
 801c834:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801c838:	b2d9      	uxtb	r1, r3
 801c83a:	2909      	cmp	r1, #9
 801c83c:	d928      	bls.n	801c890 <_strtod_l+0x1a8>
 801c83e:	2201      	movs	r2, #1
 801c840:	494e      	ldr	r1, [pc, #312]	@ (801c97c <_strtod_l+0x294>)
 801c842:	f001 ff11 	bl	801e668 <strncmp>
 801c846:	2800      	cmp	r0, #0
 801c848:	d033      	beq.n	801c8b2 <_strtod_l+0x1ca>
 801c84a:	2000      	movs	r0, #0
 801c84c:	462a      	mov	r2, r5
 801c84e:	463d      	mov	r5, r7
 801c850:	4681      	mov	r9, r0
 801c852:	4603      	mov	r3, r0
 801c854:	2a65      	cmp	r2, #101	@ 0x65
 801c856:	d001      	beq.n	801c85c <_strtod_l+0x174>
 801c858:	2a45      	cmp	r2, #69	@ 0x45
 801c85a:	d114      	bne.n	801c886 <_strtod_l+0x19e>
 801c85c:	b91d      	cbnz	r5, 801c866 <_strtod_l+0x17e>
 801c85e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c860:	4302      	orrs	r2, r0
 801c862:	d095      	beq.n	801c790 <_strtod_l+0xa8>
 801c864:	2500      	movs	r5, #0
 801c866:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801c868:	1c62      	adds	r2, r4, #1
 801c86a:	9219      	str	r2, [sp, #100]	@ 0x64
 801c86c:	7862      	ldrb	r2, [r4, #1]
 801c86e:	2a2b      	cmp	r2, #43	@ 0x2b
 801c870:	d078      	beq.n	801c964 <_strtod_l+0x27c>
 801c872:	2a2d      	cmp	r2, #45	@ 0x2d
 801c874:	d07c      	beq.n	801c970 <_strtod_l+0x288>
 801c876:	f04f 0c00 	mov.w	ip, #0
 801c87a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801c87e:	2909      	cmp	r1, #9
 801c880:	f240 8084 	bls.w	801c98c <_strtod_l+0x2a4>
 801c884:	9419      	str	r4, [sp, #100]	@ 0x64
 801c886:	f04f 0800 	mov.w	r8, #0
 801c88a:	e0a4      	b.n	801c9d6 <_strtod_l+0x2ee>
 801c88c:	2300      	movs	r3, #0
 801c88e:	e7c7      	b.n	801c820 <_strtod_l+0x138>
 801c890:	2f08      	cmp	r7, #8
 801c892:	f100 0001 	add.w	r0, r0, #1
 801c896:	f107 0701 	add.w	r7, r7, #1
 801c89a:	bfd5      	itete	le
 801c89c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801c89e:	9908      	ldrgt	r1, [sp, #32]
 801c8a0:	fb02 3301 	mlale	r3, r2, r1, r3
 801c8a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 801c8a8:	bfd4      	ite	le
 801c8aa:	930a      	strle	r3, [sp, #40]	@ 0x28
 801c8ac:	9308      	strgt	r3, [sp, #32]
 801c8ae:	9019      	str	r0, [sp, #100]	@ 0x64
 801c8b0:	e7be      	b.n	801c830 <_strtod_l+0x148>
 801c8b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c8b4:	1c5a      	adds	r2, r3, #1
 801c8b6:	9219      	str	r2, [sp, #100]	@ 0x64
 801c8b8:	785a      	ldrb	r2, [r3, #1]
 801c8ba:	b37f      	cbz	r7, 801c91c <_strtod_l+0x234>
 801c8bc:	4681      	mov	r9, r0
 801c8be:	463d      	mov	r5, r7
 801c8c0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801c8c4:	2b09      	cmp	r3, #9
 801c8c6:	d912      	bls.n	801c8ee <_strtod_l+0x206>
 801c8c8:	2301      	movs	r3, #1
 801c8ca:	e7c3      	b.n	801c854 <_strtod_l+0x16c>
 801c8cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c8ce:	3001      	adds	r0, #1
 801c8d0:	1c5a      	adds	r2, r3, #1
 801c8d2:	9219      	str	r2, [sp, #100]	@ 0x64
 801c8d4:	785a      	ldrb	r2, [r3, #1]
 801c8d6:	2a30      	cmp	r2, #48	@ 0x30
 801c8d8:	d0f8      	beq.n	801c8cc <_strtod_l+0x1e4>
 801c8da:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801c8de:	2b08      	cmp	r3, #8
 801c8e0:	f200 84d2 	bhi.w	801d288 <_strtod_l+0xba0>
 801c8e4:	4681      	mov	r9, r0
 801c8e6:	2000      	movs	r0, #0
 801c8e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c8ea:	4605      	mov	r5, r0
 801c8ec:	930c      	str	r3, [sp, #48]	@ 0x30
 801c8ee:	3a30      	subs	r2, #48	@ 0x30
 801c8f0:	f100 0301 	add.w	r3, r0, #1
 801c8f4:	d02a      	beq.n	801c94c <_strtod_l+0x264>
 801c8f6:	4499      	add	r9, r3
 801c8f8:	eb00 0c05 	add.w	ip, r0, r5
 801c8fc:	462b      	mov	r3, r5
 801c8fe:	210a      	movs	r1, #10
 801c900:	4563      	cmp	r3, ip
 801c902:	d10d      	bne.n	801c920 <_strtod_l+0x238>
 801c904:	1c69      	adds	r1, r5, #1
 801c906:	4401      	add	r1, r0
 801c908:	4428      	add	r0, r5
 801c90a:	2808      	cmp	r0, #8
 801c90c:	dc16      	bgt.n	801c93c <_strtod_l+0x254>
 801c90e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c910:	230a      	movs	r3, #10
 801c912:	fb03 2300 	mla	r3, r3, r0, r2
 801c916:	930a      	str	r3, [sp, #40]	@ 0x28
 801c918:	2300      	movs	r3, #0
 801c91a:	e018      	b.n	801c94e <_strtod_l+0x266>
 801c91c:	4638      	mov	r0, r7
 801c91e:	e7da      	b.n	801c8d6 <_strtod_l+0x1ee>
 801c920:	2b08      	cmp	r3, #8
 801c922:	f103 0301 	add.w	r3, r3, #1
 801c926:	dc03      	bgt.n	801c930 <_strtod_l+0x248>
 801c928:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801c92a:	434e      	muls	r6, r1
 801c92c:	960a      	str	r6, [sp, #40]	@ 0x28
 801c92e:	e7e7      	b.n	801c900 <_strtod_l+0x218>
 801c930:	2b10      	cmp	r3, #16
 801c932:	bfde      	ittt	le
 801c934:	9e08      	ldrle	r6, [sp, #32]
 801c936:	434e      	mulle	r6, r1
 801c938:	9608      	strle	r6, [sp, #32]
 801c93a:	e7e1      	b.n	801c900 <_strtod_l+0x218>
 801c93c:	280f      	cmp	r0, #15
 801c93e:	dceb      	bgt.n	801c918 <_strtod_l+0x230>
 801c940:	9808      	ldr	r0, [sp, #32]
 801c942:	230a      	movs	r3, #10
 801c944:	fb03 2300 	mla	r3, r3, r0, r2
 801c948:	9308      	str	r3, [sp, #32]
 801c94a:	e7e5      	b.n	801c918 <_strtod_l+0x230>
 801c94c:	4629      	mov	r1, r5
 801c94e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c950:	460d      	mov	r5, r1
 801c952:	1c50      	adds	r0, r2, #1
 801c954:	9019      	str	r0, [sp, #100]	@ 0x64
 801c956:	4618      	mov	r0, r3
 801c958:	7852      	ldrb	r2, [r2, #1]
 801c95a:	e7b1      	b.n	801c8c0 <_strtod_l+0x1d8>
 801c95c:	f04f 0900 	mov.w	r9, #0
 801c960:	2301      	movs	r3, #1
 801c962:	e77c      	b.n	801c85e <_strtod_l+0x176>
 801c964:	f04f 0c00 	mov.w	ip, #0
 801c968:	1ca2      	adds	r2, r4, #2
 801c96a:	9219      	str	r2, [sp, #100]	@ 0x64
 801c96c:	78a2      	ldrb	r2, [r4, #2]
 801c96e:	e784      	b.n	801c87a <_strtod_l+0x192>
 801c970:	f04f 0c01 	mov.w	ip, #1
 801c974:	e7f8      	b.n	801c968 <_strtod_l+0x280>
 801c976:	bf00      	nop
 801c978:	08082360 	.word	0x08082360
 801c97c:	08082348 	.word	0x08082348
 801c980:	7ff00000 	.word	0x7ff00000
 801c984:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c986:	1c51      	adds	r1, r2, #1
 801c988:	9119      	str	r1, [sp, #100]	@ 0x64
 801c98a:	7852      	ldrb	r2, [r2, #1]
 801c98c:	2a30      	cmp	r2, #48	@ 0x30
 801c98e:	d0f9      	beq.n	801c984 <_strtod_l+0x29c>
 801c990:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801c994:	2908      	cmp	r1, #8
 801c996:	f63f af76 	bhi.w	801c886 <_strtod_l+0x19e>
 801c99a:	3a30      	subs	r2, #48	@ 0x30
 801c99c:	f04f 080a 	mov.w	r8, #10
 801c9a0:	920e      	str	r2, [sp, #56]	@ 0x38
 801c9a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c9a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 801c9a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c9a8:	1c56      	adds	r6, r2, #1
 801c9aa:	9619      	str	r6, [sp, #100]	@ 0x64
 801c9ac:	7852      	ldrb	r2, [r2, #1]
 801c9ae:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801c9b2:	f1be 0f09 	cmp.w	lr, #9
 801c9b6:	d939      	bls.n	801ca2c <_strtod_l+0x344>
 801c9b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801c9ba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801c9be:	1a76      	subs	r6, r6, r1
 801c9c0:	2e08      	cmp	r6, #8
 801c9c2:	dc03      	bgt.n	801c9cc <_strtod_l+0x2e4>
 801c9c4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801c9c6:	4588      	cmp	r8, r1
 801c9c8:	bfa8      	it	ge
 801c9ca:	4688      	movge	r8, r1
 801c9cc:	f1bc 0f00 	cmp.w	ip, #0
 801c9d0:	d001      	beq.n	801c9d6 <_strtod_l+0x2ee>
 801c9d2:	f1c8 0800 	rsb	r8, r8, #0
 801c9d6:	2d00      	cmp	r5, #0
 801c9d8:	d14e      	bne.n	801ca78 <_strtod_l+0x390>
 801c9da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c9dc:	4308      	orrs	r0, r1
 801c9de:	f47f aebc 	bne.w	801c75a <_strtod_l+0x72>
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	f47f aed4 	bne.w	801c790 <_strtod_l+0xa8>
 801c9e8:	2a69      	cmp	r2, #105	@ 0x69
 801c9ea:	d028      	beq.n	801ca3e <_strtod_l+0x356>
 801c9ec:	dc25      	bgt.n	801ca3a <_strtod_l+0x352>
 801c9ee:	2a49      	cmp	r2, #73	@ 0x49
 801c9f0:	d025      	beq.n	801ca3e <_strtod_l+0x356>
 801c9f2:	2a4e      	cmp	r2, #78	@ 0x4e
 801c9f4:	f47f aecc 	bne.w	801c790 <_strtod_l+0xa8>
 801c9f8:	499b      	ldr	r1, [pc, #620]	@ (801cc68 <_strtod_l+0x580>)
 801c9fa:	a819      	add	r0, sp, #100	@ 0x64
 801c9fc:	f003 f8c8 	bl	801fb90 <__match>
 801ca00:	2800      	cmp	r0, #0
 801ca02:	f43f aec5 	beq.w	801c790 <_strtod_l+0xa8>
 801ca06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ca08:	781b      	ldrb	r3, [r3, #0]
 801ca0a:	2b28      	cmp	r3, #40	@ 0x28
 801ca0c:	d12e      	bne.n	801ca6c <_strtod_l+0x384>
 801ca0e:	aa1c      	add	r2, sp, #112	@ 0x70
 801ca10:	4996      	ldr	r1, [pc, #600]	@ (801cc6c <_strtod_l+0x584>)
 801ca12:	a819      	add	r0, sp, #100	@ 0x64
 801ca14:	f003 f8d0 	bl	801fbb8 <__hexnan>
 801ca18:	2805      	cmp	r0, #5
 801ca1a:	d127      	bne.n	801ca6c <_strtod_l+0x384>
 801ca1c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ca1e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801ca22:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801ca26:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801ca2a:	e696      	b.n	801c75a <_strtod_l+0x72>
 801ca2c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ca2e:	fb08 2101 	mla	r1, r8, r1, r2
 801ca32:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801ca36:	920e      	str	r2, [sp, #56]	@ 0x38
 801ca38:	e7b5      	b.n	801c9a6 <_strtod_l+0x2be>
 801ca3a:	2a6e      	cmp	r2, #110	@ 0x6e
 801ca3c:	e7da      	b.n	801c9f4 <_strtod_l+0x30c>
 801ca3e:	498c      	ldr	r1, [pc, #560]	@ (801cc70 <_strtod_l+0x588>)
 801ca40:	a819      	add	r0, sp, #100	@ 0x64
 801ca42:	f003 f8a5 	bl	801fb90 <__match>
 801ca46:	2800      	cmp	r0, #0
 801ca48:	f43f aea2 	beq.w	801c790 <_strtod_l+0xa8>
 801ca4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ca4e:	a819      	add	r0, sp, #100	@ 0x64
 801ca50:	4988      	ldr	r1, [pc, #544]	@ (801cc74 <_strtod_l+0x58c>)
 801ca52:	3b01      	subs	r3, #1
 801ca54:	9319      	str	r3, [sp, #100]	@ 0x64
 801ca56:	f003 f89b 	bl	801fb90 <__match>
 801ca5a:	b910      	cbnz	r0, 801ca62 <_strtod_l+0x37a>
 801ca5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ca5e:	3301      	adds	r3, #1
 801ca60:	9319      	str	r3, [sp, #100]	@ 0x64
 801ca62:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801cc84 <_strtod_l+0x59c>
 801ca66:	f04f 0a00 	mov.w	sl, #0
 801ca6a:	e676      	b.n	801c75a <_strtod_l+0x72>
 801ca6c:	4882      	ldr	r0, [pc, #520]	@ (801cc78 <_strtod_l+0x590>)
 801ca6e:	f001 ff3f 	bl	801e8f0 <nan>
 801ca72:	ec5b ab10 	vmov	sl, fp, d0
 801ca76:	e670      	b.n	801c75a <_strtod_l+0x72>
 801ca78:	eba8 0309 	sub.w	r3, r8, r9
 801ca7c:	2f00      	cmp	r7, #0
 801ca7e:	bf08      	it	eq
 801ca80:	462f      	moveq	r7, r5
 801ca82:	2d10      	cmp	r5, #16
 801ca84:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ca86:	462c      	mov	r4, r5
 801ca88:	9309      	str	r3, [sp, #36]	@ 0x24
 801ca8a:	bfa8      	it	ge
 801ca8c:	2410      	movge	r4, #16
 801ca8e:	f7e3 fd47 	bl	8000520 <__aeabi_ui2d>
 801ca92:	2d09      	cmp	r5, #9
 801ca94:	4682      	mov	sl, r0
 801ca96:	468b      	mov	fp, r1
 801ca98:	dc13      	bgt.n	801cac2 <_strtod_l+0x3da>
 801ca9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	f43f ae5c 	beq.w	801c75a <_strtod_l+0x72>
 801caa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801caa4:	dd78      	ble.n	801cb98 <_strtod_l+0x4b0>
 801caa6:	2b16      	cmp	r3, #22
 801caa8:	dc5f      	bgt.n	801cb6a <_strtod_l+0x482>
 801caaa:	4974      	ldr	r1, [pc, #464]	@ (801cc7c <_strtod_l+0x594>)
 801caac:	4652      	mov	r2, sl
 801caae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801cab2:	465b      	mov	r3, fp
 801cab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cab8:	f7e3 fdac 	bl	8000614 <__aeabi_dmul>
 801cabc:	4682      	mov	sl, r0
 801cabe:	468b      	mov	fp, r1
 801cac0:	e64b      	b.n	801c75a <_strtod_l+0x72>
 801cac2:	4b6e      	ldr	r3, [pc, #440]	@ (801cc7c <_strtod_l+0x594>)
 801cac4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801cac8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801cacc:	f7e3 fda2 	bl	8000614 <__aeabi_dmul>
 801cad0:	4682      	mov	sl, r0
 801cad2:	468b      	mov	fp, r1
 801cad4:	9808      	ldr	r0, [sp, #32]
 801cad6:	f7e3 fd23 	bl	8000520 <__aeabi_ui2d>
 801cada:	4602      	mov	r2, r0
 801cadc:	460b      	mov	r3, r1
 801cade:	4650      	mov	r0, sl
 801cae0:	4659      	mov	r1, fp
 801cae2:	f7e3 fbe1 	bl	80002a8 <__adddf3>
 801cae6:	2d0f      	cmp	r5, #15
 801cae8:	4682      	mov	sl, r0
 801caea:	468b      	mov	fp, r1
 801caec:	ddd5      	ble.n	801ca9a <_strtod_l+0x3b2>
 801caee:	1b2c      	subs	r4, r5, r4
 801caf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801caf2:	441c      	add	r4, r3
 801caf4:	2c00      	cmp	r4, #0
 801caf6:	f340 8096 	ble.w	801cc26 <_strtod_l+0x53e>
 801cafa:	f014 030f 	ands.w	r3, r4, #15
 801cafe:	d00a      	beq.n	801cb16 <_strtod_l+0x42e>
 801cb00:	495e      	ldr	r1, [pc, #376]	@ (801cc7c <_strtod_l+0x594>)
 801cb02:	4652      	mov	r2, sl
 801cb04:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801cb08:	465b      	mov	r3, fp
 801cb0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cb0e:	f7e3 fd81 	bl	8000614 <__aeabi_dmul>
 801cb12:	4682      	mov	sl, r0
 801cb14:	468b      	mov	fp, r1
 801cb16:	f034 040f 	bics.w	r4, r4, #15
 801cb1a:	d073      	beq.n	801cc04 <_strtod_l+0x51c>
 801cb1c:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801cb20:	dd48      	ble.n	801cbb4 <_strtod_l+0x4cc>
 801cb22:	2400      	movs	r4, #0
 801cb24:	46a0      	mov	r8, r4
 801cb26:	46a1      	mov	r9, r4
 801cb28:	940a      	str	r4, [sp, #40]	@ 0x28
 801cb2a:	2322      	movs	r3, #34	@ 0x22
 801cb2c:	9a05      	ldr	r2, [sp, #20]
 801cb2e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801cc84 <_strtod_l+0x59c>
 801cb32:	f04f 0a00 	mov.w	sl, #0
 801cb36:	6013      	str	r3, [r2, #0]
 801cb38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	f43f ae0d 	beq.w	801c75a <_strtod_l+0x72>
 801cb40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801cb42:	9805      	ldr	r0, [sp, #20]
 801cb44:	f003 f926 	bl	801fd94 <_Bfree>
 801cb48:	4649      	mov	r1, r9
 801cb4a:	9805      	ldr	r0, [sp, #20]
 801cb4c:	f003 f922 	bl	801fd94 <_Bfree>
 801cb50:	4641      	mov	r1, r8
 801cb52:	9805      	ldr	r0, [sp, #20]
 801cb54:	f003 f91e 	bl	801fd94 <_Bfree>
 801cb58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801cb5a:	9805      	ldr	r0, [sp, #20]
 801cb5c:	f003 f91a 	bl	801fd94 <_Bfree>
 801cb60:	4621      	mov	r1, r4
 801cb62:	9805      	ldr	r0, [sp, #20]
 801cb64:	f003 f916 	bl	801fd94 <_Bfree>
 801cb68:	e5f7      	b.n	801c75a <_strtod_l+0x72>
 801cb6a:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801cb6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cb70:	4293      	cmp	r3, r2
 801cb72:	dbbc      	blt.n	801caee <_strtod_l+0x406>
 801cb74:	f1c5 050f 	rsb	r5, r5, #15
 801cb78:	4c40      	ldr	r4, [pc, #256]	@ (801cc7c <_strtod_l+0x594>)
 801cb7a:	4652      	mov	r2, sl
 801cb7c:	465b      	mov	r3, fp
 801cb7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801cb82:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cb86:	f7e3 fd45 	bl	8000614 <__aeabi_dmul>
 801cb8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb8c:	1b5d      	subs	r5, r3, r5
 801cb8e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801cb92:	e9d4 2300 	ldrd	r2, r3, [r4]
 801cb96:	e78f      	b.n	801cab8 <_strtod_l+0x3d0>
 801cb98:	3316      	adds	r3, #22
 801cb9a:	dba8      	blt.n	801caee <_strtod_l+0x406>
 801cb9c:	eba9 0808 	sub.w	r8, r9, r8
 801cba0:	4b36      	ldr	r3, [pc, #216]	@ (801cc7c <_strtod_l+0x594>)
 801cba2:	4650      	mov	r0, sl
 801cba4:	4659      	mov	r1, fp
 801cba6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801cbaa:	e9d8 2300 	ldrd	r2, r3, [r8]
 801cbae:	f7e3 fe5b 	bl	8000868 <__aeabi_ddiv>
 801cbb2:	e783      	b.n	801cabc <_strtod_l+0x3d4>
 801cbb4:	4b32      	ldr	r3, [pc, #200]	@ (801cc80 <_strtod_l+0x598>)
 801cbb6:	1124      	asrs	r4, r4, #4
 801cbb8:	4650      	mov	r0, sl
 801cbba:	4659      	mov	r1, fp
 801cbbc:	9308      	str	r3, [sp, #32]
 801cbbe:	2300      	movs	r3, #0
 801cbc0:	461e      	mov	r6, r3
 801cbc2:	2c01      	cmp	r4, #1
 801cbc4:	dc21      	bgt.n	801cc0a <_strtod_l+0x522>
 801cbc6:	b10b      	cbz	r3, 801cbcc <_strtod_l+0x4e4>
 801cbc8:	4682      	mov	sl, r0
 801cbca:	468b      	mov	fp, r1
 801cbcc:	492c      	ldr	r1, [pc, #176]	@ (801cc80 <_strtod_l+0x598>)
 801cbce:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801cbd2:	4652      	mov	r2, sl
 801cbd4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801cbd8:	465b      	mov	r3, fp
 801cbda:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cbde:	f7e3 fd19 	bl	8000614 <__aeabi_dmul>
 801cbe2:	4b28      	ldr	r3, [pc, #160]	@ (801cc84 <_strtod_l+0x59c>)
 801cbe4:	460a      	mov	r2, r1
 801cbe6:	4682      	mov	sl, r0
 801cbe8:	400b      	ands	r3, r1
 801cbea:	4927      	ldr	r1, [pc, #156]	@ (801cc88 <_strtod_l+0x5a0>)
 801cbec:	428b      	cmp	r3, r1
 801cbee:	d898      	bhi.n	801cb22 <_strtod_l+0x43a>
 801cbf0:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801cbf4:	428b      	cmp	r3, r1
 801cbf6:	bf86      	itte	hi
 801cbf8:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801cc8c <_strtod_l+0x5a4>
 801cbfc:	f04f 3aff 	movhi.w	sl, #4294967295
 801cc00:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801cc04:	2300      	movs	r3, #0
 801cc06:	9308      	str	r3, [sp, #32]
 801cc08:	e07a      	b.n	801cd00 <_strtod_l+0x618>
 801cc0a:	07e2      	lsls	r2, r4, #31
 801cc0c:	d505      	bpl.n	801cc1a <_strtod_l+0x532>
 801cc0e:	9b08      	ldr	r3, [sp, #32]
 801cc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc14:	f7e3 fcfe 	bl	8000614 <__aeabi_dmul>
 801cc18:	2301      	movs	r3, #1
 801cc1a:	9a08      	ldr	r2, [sp, #32]
 801cc1c:	3601      	adds	r6, #1
 801cc1e:	1064      	asrs	r4, r4, #1
 801cc20:	3208      	adds	r2, #8
 801cc22:	9208      	str	r2, [sp, #32]
 801cc24:	e7cd      	b.n	801cbc2 <_strtod_l+0x4da>
 801cc26:	d0ed      	beq.n	801cc04 <_strtod_l+0x51c>
 801cc28:	4264      	negs	r4, r4
 801cc2a:	f014 020f 	ands.w	r2, r4, #15
 801cc2e:	d00a      	beq.n	801cc46 <_strtod_l+0x55e>
 801cc30:	4b12      	ldr	r3, [pc, #72]	@ (801cc7c <_strtod_l+0x594>)
 801cc32:	4650      	mov	r0, sl
 801cc34:	4659      	mov	r1, fp
 801cc36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc3e:	f7e3 fe13 	bl	8000868 <__aeabi_ddiv>
 801cc42:	4682      	mov	sl, r0
 801cc44:	468b      	mov	fp, r1
 801cc46:	1124      	asrs	r4, r4, #4
 801cc48:	d0dc      	beq.n	801cc04 <_strtod_l+0x51c>
 801cc4a:	2c1f      	cmp	r4, #31
 801cc4c:	dd20      	ble.n	801cc90 <_strtod_l+0x5a8>
 801cc4e:	2400      	movs	r4, #0
 801cc50:	46a0      	mov	r8, r4
 801cc52:	46a1      	mov	r9, r4
 801cc54:	940a      	str	r4, [sp, #40]	@ 0x28
 801cc56:	2322      	movs	r3, #34	@ 0x22
 801cc58:	9a05      	ldr	r2, [sp, #20]
 801cc5a:	f04f 0a00 	mov.w	sl, #0
 801cc5e:	f04f 0b00 	mov.w	fp, #0
 801cc62:	6013      	str	r3, [r2, #0]
 801cc64:	e768      	b.n	801cb38 <_strtod_l+0x450>
 801cc66:	bf00      	nop
 801cc68:	080824ae 	.word	0x080824ae
 801cc6c:	0808234c 	.word	0x0808234c
 801cc70:	080824a6 	.word	0x080824a6
 801cc74:	08082592 	.word	0x08082592
 801cc78:	0808258e 	.word	0x0808258e
 801cc7c:	080826f8 	.word	0x080826f8
 801cc80:	080826d0 	.word	0x080826d0
 801cc84:	7ff00000 	.word	0x7ff00000
 801cc88:	7ca00000 	.word	0x7ca00000
 801cc8c:	7fefffff 	.word	0x7fefffff
 801cc90:	f014 0310 	ands.w	r3, r4, #16
 801cc94:	4650      	mov	r0, sl
 801cc96:	4659      	mov	r1, fp
 801cc98:	4ea9      	ldr	r6, [pc, #676]	@ (801cf40 <_strtod_l+0x858>)
 801cc9a:	bf18      	it	ne
 801cc9c:	236a      	movne	r3, #106	@ 0x6a
 801cc9e:	9308      	str	r3, [sp, #32]
 801cca0:	2300      	movs	r3, #0
 801cca2:	07e2      	lsls	r2, r4, #31
 801cca4:	d504      	bpl.n	801ccb0 <_strtod_l+0x5c8>
 801cca6:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ccaa:	f7e3 fcb3 	bl	8000614 <__aeabi_dmul>
 801ccae:	2301      	movs	r3, #1
 801ccb0:	1064      	asrs	r4, r4, #1
 801ccb2:	f106 0608 	add.w	r6, r6, #8
 801ccb6:	d1f4      	bne.n	801cca2 <_strtod_l+0x5ba>
 801ccb8:	b10b      	cbz	r3, 801ccbe <_strtod_l+0x5d6>
 801ccba:	4682      	mov	sl, r0
 801ccbc:	468b      	mov	fp, r1
 801ccbe:	9b08      	ldr	r3, [sp, #32]
 801ccc0:	b1b3      	cbz	r3, 801ccf0 <_strtod_l+0x608>
 801ccc2:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801ccc6:	4659      	mov	r1, fp
 801ccc8:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	dd0f      	ble.n	801ccf0 <_strtod_l+0x608>
 801ccd0:	2b1f      	cmp	r3, #31
 801ccd2:	dd55      	ble.n	801cd80 <_strtod_l+0x698>
 801ccd4:	2b34      	cmp	r3, #52	@ 0x34
 801ccd6:	f04f 0a00 	mov.w	sl, #0
 801ccda:	bfdb      	ittet	le
 801ccdc:	f04f 33ff 	movle.w	r3, #4294967295
 801cce0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801cce4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801cce8:	4093      	lslle	r3, r2
 801ccea:	bfd8      	it	le
 801ccec:	ea03 0b01 	andle.w	fp, r3, r1
 801ccf0:	2200      	movs	r2, #0
 801ccf2:	2300      	movs	r3, #0
 801ccf4:	4650      	mov	r0, sl
 801ccf6:	4659      	mov	r1, fp
 801ccf8:	f7e3 fef4 	bl	8000ae4 <__aeabi_dcmpeq>
 801ccfc:	2800      	cmp	r0, #0
 801ccfe:	d1a6      	bne.n	801cc4e <_strtod_l+0x566>
 801cd00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cd02:	463a      	mov	r2, r7
 801cd04:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801cd06:	9300      	str	r3, [sp, #0]
 801cd08:	462b      	mov	r3, r5
 801cd0a:	9805      	ldr	r0, [sp, #20]
 801cd0c:	f003 f8ac 	bl	801fe68 <__s2b>
 801cd10:	900a      	str	r0, [sp, #40]	@ 0x28
 801cd12:	2800      	cmp	r0, #0
 801cd14:	f43f af05 	beq.w	801cb22 <_strtod_l+0x43a>
 801cd18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cd1a:	eba9 0308 	sub.w	r3, r9, r8
 801cd1e:	2400      	movs	r4, #0
 801cd20:	2a00      	cmp	r2, #0
 801cd22:	46a0      	mov	r8, r4
 801cd24:	bfa8      	it	ge
 801cd26:	2300      	movge	r3, #0
 801cd28:	9312      	str	r3, [sp, #72]	@ 0x48
 801cd2a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801cd2e:	9316      	str	r3, [sp, #88]	@ 0x58
 801cd30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cd32:	9805      	ldr	r0, [sp, #20]
 801cd34:	6859      	ldr	r1, [r3, #4]
 801cd36:	f002 ffed 	bl	801fd14 <_Balloc>
 801cd3a:	4681      	mov	r9, r0
 801cd3c:	2800      	cmp	r0, #0
 801cd3e:	f43f aef4 	beq.w	801cb2a <_strtod_l+0x442>
 801cd42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cd44:	300c      	adds	r0, #12
 801cd46:	691a      	ldr	r2, [r3, #16]
 801cd48:	f103 010c 	add.w	r1, r3, #12
 801cd4c:	3202      	adds	r2, #2
 801cd4e:	0092      	lsls	r2, r2, #2
 801cd50:	f001 fdbf 	bl	801e8d2 <memcpy>
 801cd54:	aa1c      	add	r2, sp, #112	@ 0x70
 801cd56:	a91b      	add	r1, sp, #108	@ 0x6c
 801cd58:	9805      	ldr	r0, [sp, #20]
 801cd5a:	ec4b ab10 	vmov	d0, sl, fp
 801cd5e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801cd62:	f003 fbc5 	bl	80204f0 <__d2b>
 801cd66:	901a      	str	r0, [sp, #104]	@ 0x68
 801cd68:	2800      	cmp	r0, #0
 801cd6a:	f43f aede 	beq.w	801cb2a <_strtod_l+0x442>
 801cd6e:	2101      	movs	r1, #1
 801cd70:	9805      	ldr	r0, [sp, #20]
 801cd72:	f003 f90f 	bl	801ff94 <__i2b>
 801cd76:	4680      	mov	r8, r0
 801cd78:	b948      	cbnz	r0, 801cd8e <_strtod_l+0x6a6>
 801cd7a:	f04f 0800 	mov.w	r8, #0
 801cd7e:	e6d4      	b.n	801cb2a <_strtod_l+0x442>
 801cd80:	f04f 32ff 	mov.w	r2, #4294967295
 801cd84:	fa02 f303 	lsl.w	r3, r2, r3
 801cd88:	ea03 0a0a 	and.w	sl, r3, sl
 801cd8c:	e7b0      	b.n	801ccf0 <_strtod_l+0x608>
 801cd8e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801cd90:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801cd92:	2d00      	cmp	r5, #0
 801cd94:	bfa9      	itett	ge
 801cd96:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801cd98:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801cd9a:	18ef      	addge	r7, r5, r3
 801cd9c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801cd9e:	bfb8      	it	lt
 801cda0:	1b5e      	sublt	r6, r3, r5
 801cda2:	9b08      	ldr	r3, [sp, #32]
 801cda4:	bfb8      	it	lt
 801cda6:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801cda8:	1aed      	subs	r5, r5, r3
 801cdaa:	4b66      	ldr	r3, [pc, #408]	@ (801cf44 <_strtod_l+0x85c>)
 801cdac:	4415      	add	r5, r2
 801cdae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801cdb2:	3d01      	subs	r5, #1
 801cdb4:	429d      	cmp	r5, r3
 801cdb6:	da4f      	bge.n	801ce58 <_strtod_l+0x770>
 801cdb8:	1b5b      	subs	r3, r3, r5
 801cdba:	2101      	movs	r1, #1
 801cdbc:	2b1f      	cmp	r3, #31
 801cdbe:	eba2 0203 	sub.w	r2, r2, r3
 801cdc2:	dc3d      	bgt.n	801ce40 <_strtod_l+0x758>
 801cdc4:	fa01 f303 	lsl.w	r3, r1, r3
 801cdc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cdca:	2300      	movs	r3, #0
 801cdcc:	9310      	str	r3, [sp, #64]	@ 0x40
 801cdce:	18bd      	adds	r5, r7, r2
 801cdd0:	9b08      	ldr	r3, [sp, #32]
 801cdd2:	4416      	add	r6, r2
 801cdd4:	42af      	cmp	r7, r5
 801cdd6:	441e      	add	r6, r3
 801cdd8:	463b      	mov	r3, r7
 801cdda:	bfa8      	it	ge
 801cddc:	462b      	movge	r3, r5
 801cdde:	42b3      	cmp	r3, r6
 801cde0:	bfa8      	it	ge
 801cde2:	4633      	movge	r3, r6
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	bfc2      	ittt	gt
 801cde8:	1aed      	subgt	r5, r5, r3
 801cdea:	1af6      	subgt	r6, r6, r3
 801cdec:	1aff      	subgt	r7, r7, r3
 801cdee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cdf0:	2b00      	cmp	r3, #0
 801cdf2:	dd16      	ble.n	801ce22 <_strtod_l+0x73a>
 801cdf4:	4641      	mov	r1, r8
 801cdf6:	461a      	mov	r2, r3
 801cdf8:	9805      	ldr	r0, [sp, #20]
 801cdfa:	f003 f98b 	bl	8020114 <__pow5mult>
 801cdfe:	4680      	mov	r8, r0
 801ce00:	2800      	cmp	r0, #0
 801ce02:	d0ba      	beq.n	801cd7a <_strtod_l+0x692>
 801ce04:	4601      	mov	r1, r0
 801ce06:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ce08:	9805      	ldr	r0, [sp, #20]
 801ce0a:	f003 f8d9 	bl	801ffc0 <__multiply>
 801ce0e:	900e      	str	r0, [sp, #56]	@ 0x38
 801ce10:	2800      	cmp	r0, #0
 801ce12:	f43f ae8a 	beq.w	801cb2a <_strtod_l+0x442>
 801ce16:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ce18:	9805      	ldr	r0, [sp, #20]
 801ce1a:	f002 ffbb 	bl	801fd94 <_Bfree>
 801ce1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ce20:	931a      	str	r3, [sp, #104]	@ 0x68
 801ce22:	2d00      	cmp	r5, #0
 801ce24:	dc1d      	bgt.n	801ce62 <_strtod_l+0x77a>
 801ce26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	dd23      	ble.n	801ce74 <_strtod_l+0x78c>
 801ce2c:	4649      	mov	r1, r9
 801ce2e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ce30:	9805      	ldr	r0, [sp, #20]
 801ce32:	f003 f96f 	bl	8020114 <__pow5mult>
 801ce36:	4681      	mov	r9, r0
 801ce38:	b9e0      	cbnz	r0, 801ce74 <_strtod_l+0x78c>
 801ce3a:	f04f 0900 	mov.w	r9, #0
 801ce3e:	e674      	b.n	801cb2a <_strtod_l+0x442>
 801ce40:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801ce44:	9113      	str	r1, [sp, #76]	@ 0x4c
 801ce46:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801ce4a:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801ce4e:	35e2      	adds	r5, #226	@ 0xe2
 801ce50:	fa01 f305 	lsl.w	r3, r1, r5
 801ce54:	9310      	str	r3, [sp, #64]	@ 0x40
 801ce56:	e7ba      	b.n	801cdce <_strtod_l+0x6e6>
 801ce58:	2300      	movs	r3, #0
 801ce5a:	9310      	str	r3, [sp, #64]	@ 0x40
 801ce5c:	2301      	movs	r3, #1
 801ce5e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ce60:	e7b5      	b.n	801cdce <_strtod_l+0x6e6>
 801ce62:	462a      	mov	r2, r5
 801ce64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ce66:	9805      	ldr	r0, [sp, #20]
 801ce68:	f003 f9ae 	bl	80201c8 <__lshift>
 801ce6c:	901a      	str	r0, [sp, #104]	@ 0x68
 801ce6e:	2800      	cmp	r0, #0
 801ce70:	d1d9      	bne.n	801ce26 <_strtod_l+0x73e>
 801ce72:	e65a      	b.n	801cb2a <_strtod_l+0x442>
 801ce74:	2e00      	cmp	r6, #0
 801ce76:	dd07      	ble.n	801ce88 <_strtod_l+0x7a0>
 801ce78:	4649      	mov	r1, r9
 801ce7a:	4632      	mov	r2, r6
 801ce7c:	9805      	ldr	r0, [sp, #20]
 801ce7e:	f003 f9a3 	bl	80201c8 <__lshift>
 801ce82:	4681      	mov	r9, r0
 801ce84:	2800      	cmp	r0, #0
 801ce86:	d0d8      	beq.n	801ce3a <_strtod_l+0x752>
 801ce88:	2f00      	cmp	r7, #0
 801ce8a:	dd08      	ble.n	801ce9e <_strtod_l+0x7b6>
 801ce8c:	4641      	mov	r1, r8
 801ce8e:	463a      	mov	r2, r7
 801ce90:	9805      	ldr	r0, [sp, #20]
 801ce92:	f003 f999 	bl	80201c8 <__lshift>
 801ce96:	4680      	mov	r8, r0
 801ce98:	2800      	cmp	r0, #0
 801ce9a:	f43f ae46 	beq.w	801cb2a <_strtod_l+0x442>
 801ce9e:	464a      	mov	r2, r9
 801cea0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801cea2:	9805      	ldr	r0, [sp, #20]
 801cea4:	f003 fa18 	bl	80202d8 <__mdiff>
 801cea8:	4604      	mov	r4, r0
 801ceaa:	2800      	cmp	r0, #0
 801ceac:	f43f ae3d 	beq.w	801cb2a <_strtod_l+0x442>
 801ceb0:	68c3      	ldr	r3, [r0, #12]
 801ceb2:	4641      	mov	r1, r8
 801ceb4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ceb6:	2300      	movs	r3, #0
 801ceb8:	60c3      	str	r3, [r0, #12]
 801ceba:	f003 f9f1 	bl	80202a0 <__mcmp>
 801cebe:	2800      	cmp	r0, #0
 801cec0:	da46      	bge.n	801cf50 <_strtod_l+0x868>
 801cec2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cec4:	ea53 030a 	orrs.w	r3, r3, sl
 801cec8:	d16c      	bne.n	801cfa4 <_strtod_l+0x8bc>
 801ceca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cece:	2b00      	cmp	r3, #0
 801ced0:	d168      	bne.n	801cfa4 <_strtod_l+0x8bc>
 801ced2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801ced6:	0d1b      	lsrs	r3, r3, #20
 801ced8:	051b      	lsls	r3, r3, #20
 801ceda:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801cede:	d961      	bls.n	801cfa4 <_strtod_l+0x8bc>
 801cee0:	6963      	ldr	r3, [r4, #20]
 801cee2:	b913      	cbnz	r3, 801ceea <_strtod_l+0x802>
 801cee4:	6923      	ldr	r3, [r4, #16]
 801cee6:	2b01      	cmp	r3, #1
 801cee8:	dd5c      	ble.n	801cfa4 <_strtod_l+0x8bc>
 801ceea:	4621      	mov	r1, r4
 801ceec:	2201      	movs	r2, #1
 801ceee:	9805      	ldr	r0, [sp, #20]
 801cef0:	f003 f96a 	bl	80201c8 <__lshift>
 801cef4:	4641      	mov	r1, r8
 801cef6:	4604      	mov	r4, r0
 801cef8:	f003 f9d2 	bl	80202a0 <__mcmp>
 801cefc:	2800      	cmp	r0, #0
 801cefe:	dd51      	ble.n	801cfa4 <_strtod_l+0x8bc>
 801cf00:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801cf04:	9a08      	ldr	r2, [sp, #32]
 801cf06:	0d1b      	lsrs	r3, r3, #20
 801cf08:	051b      	lsls	r3, r3, #20
 801cf0a:	2a00      	cmp	r2, #0
 801cf0c:	d06b      	beq.n	801cfe6 <_strtod_l+0x8fe>
 801cf0e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801cf12:	d868      	bhi.n	801cfe6 <_strtod_l+0x8fe>
 801cf14:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801cf18:	f67f ae9d 	bls.w	801cc56 <_strtod_l+0x56e>
 801cf1c:	4b0a      	ldr	r3, [pc, #40]	@ (801cf48 <_strtod_l+0x860>)
 801cf1e:	4650      	mov	r0, sl
 801cf20:	4659      	mov	r1, fp
 801cf22:	2200      	movs	r2, #0
 801cf24:	f7e3 fb76 	bl	8000614 <__aeabi_dmul>
 801cf28:	4b08      	ldr	r3, [pc, #32]	@ (801cf4c <_strtod_l+0x864>)
 801cf2a:	4682      	mov	sl, r0
 801cf2c:	468b      	mov	fp, r1
 801cf2e:	400b      	ands	r3, r1
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	f47f ae05 	bne.w	801cb40 <_strtod_l+0x458>
 801cf36:	2322      	movs	r3, #34	@ 0x22
 801cf38:	9a05      	ldr	r2, [sp, #20]
 801cf3a:	6013      	str	r3, [r2, #0]
 801cf3c:	e600      	b.n	801cb40 <_strtod_l+0x458>
 801cf3e:	bf00      	nop
 801cf40:	08082378 	.word	0x08082378
 801cf44:	fffffc02 	.word	0xfffffc02
 801cf48:	39500000 	.word	0x39500000
 801cf4c:	7ff00000 	.word	0x7ff00000
 801cf50:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801cf54:	d165      	bne.n	801d022 <_strtod_l+0x93a>
 801cf56:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cf58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cf5c:	b35a      	cbz	r2, 801cfb6 <_strtod_l+0x8ce>
 801cf5e:	4a9e      	ldr	r2, [pc, #632]	@ (801d1d8 <_strtod_l+0xaf0>)
 801cf60:	4293      	cmp	r3, r2
 801cf62:	d12b      	bne.n	801cfbc <_strtod_l+0x8d4>
 801cf64:	9b08      	ldr	r3, [sp, #32]
 801cf66:	4651      	mov	r1, sl
 801cf68:	b303      	cbz	r3, 801cfac <_strtod_l+0x8c4>
 801cf6a:	465a      	mov	r2, fp
 801cf6c:	4b9b      	ldr	r3, [pc, #620]	@ (801d1dc <_strtod_l+0xaf4>)
 801cf6e:	4013      	ands	r3, r2
 801cf70:	f04f 32ff 	mov.w	r2, #4294967295
 801cf74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801cf78:	d81b      	bhi.n	801cfb2 <_strtod_l+0x8ca>
 801cf7a:	0d1b      	lsrs	r3, r3, #20
 801cf7c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801cf80:	fa02 f303 	lsl.w	r3, r2, r3
 801cf84:	4299      	cmp	r1, r3
 801cf86:	d119      	bne.n	801cfbc <_strtod_l+0x8d4>
 801cf88:	4b95      	ldr	r3, [pc, #596]	@ (801d1e0 <_strtod_l+0xaf8>)
 801cf8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cf8c:	429a      	cmp	r2, r3
 801cf8e:	d102      	bne.n	801cf96 <_strtod_l+0x8ae>
 801cf90:	3101      	adds	r1, #1
 801cf92:	f43f adca 	beq.w	801cb2a <_strtod_l+0x442>
 801cf96:	4b91      	ldr	r3, [pc, #580]	@ (801d1dc <_strtod_l+0xaf4>)
 801cf98:	f04f 0a00 	mov.w	sl, #0
 801cf9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cf9e:	401a      	ands	r2, r3
 801cfa0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801cfa4:	9b08      	ldr	r3, [sp, #32]
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	d1b8      	bne.n	801cf1c <_strtod_l+0x834>
 801cfaa:	e5c9      	b.n	801cb40 <_strtod_l+0x458>
 801cfac:	f04f 33ff 	mov.w	r3, #4294967295
 801cfb0:	e7e8      	b.n	801cf84 <_strtod_l+0x89c>
 801cfb2:	4613      	mov	r3, r2
 801cfb4:	e7e6      	b.n	801cf84 <_strtod_l+0x89c>
 801cfb6:	ea53 030a 	orrs.w	r3, r3, sl
 801cfba:	d0a1      	beq.n	801cf00 <_strtod_l+0x818>
 801cfbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cfbe:	b1db      	cbz	r3, 801cff8 <_strtod_l+0x910>
 801cfc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cfc2:	4213      	tst	r3, r2
 801cfc4:	d0ee      	beq.n	801cfa4 <_strtod_l+0x8bc>
 801cfc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cfc8:	4650      	mov	r0, sl
 801cfca:	9a08      	ldr	r2, [sp, #32]
 801cfcc:	4659      	mov	r1, fp
 801cfce:	b1bb      	cbz	r3, 801d000 <_strtod_l+0x918>
 801cfd0:	f7ff fb6a 	bl	801c6a8 <sulp>
 801cfd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cfd8:	ec53 2b10 	vmov	r2, r3, d0
 801cfdc:	f7e3 f964 	bl	80002a8 <__adddf3>
 801cfe0:	4682      	mov	sl, r0
 801cfe2:	468b      	mov	fp, r1
 801cfe4:	e7de      	b.n	801cfa4 <_strtod_l+0x8bc>
 801cfe6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801cfea:	f04f 3aff 	mov.w	sl, #4294967295
 801cfee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801cff2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801cff6:	e7d5      	b.n	801cfa4 <_strtod_l+0x8bc>
 801cff8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801cffa:	ea13 0f0a 	tst.w	r3, sl
 801cffe:	e7e1      	b.n	801cfc4 <_strtod_l+0x8dc>
 801d000:	f7ff fb52 	bl	801c6a8 <sulp>
 801d004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d008:	ec53 2b10 	vmov	r2, r3, d0
 801d00c:	f7e3 f94a 	bl	80002a4 <__aeabi_dsub>
 801d010:	2200      	movs	r2, #0
 801d012:	2300      	movs	r3, #0
 801d014:	4682      	mov	sl, r0
 801d016:	468b      	mov	fp, r1
 801d018:	f7e3 fd64 	bl	8000ae4 <__aeabi_dcmpeq>
 801d01c:	2800      	cmp	r0, #0
 801d01e:	d0c1      	beq.n	801cfa4 <_strtod_l+0x8bc>
 801d020:	e619      	b.n	801cc56 <_strtod_l+0x56e>
 801d022:	4641      	mov	r1, r8
 801d024:	4620      	mov	r0, r4
 801d026:	f003 fabb 	bl	80205a0 <__ratio>
 801d02a:	2200      	movs	r2, #0
 801d02c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801d030:	ec57 6b10 	vmov	r6, r7, d0
 801d034:	4630      	mov	r0, r6
 801d036:	4639      	mov	r1, r7
 801d038:	f7e3 fd68 	bl	8000b0c <__aeabi_dcmple>
 801d03c:	2800      	cmp	r0, #0
 801d03e:	d06f      	beq.n	801d120 <_strtod_l+0xa38>
 801d040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d042:	2b00      	cmp	r3, #0
 801d044:	d17a      	bne.n	801d13c <_strtod_l+0xa54>
 801d046:	f1ba 0f00 	cmp.w	sl, #0
 801d04a:	d158      	bne.n	801d0fe <_strtod_l+0xa16>
 801d04c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d04e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d052:	2b00      	cmp	r3, #0
 801d054:	d15a      	bne.n	801d10c <_strtod_l+0xa24>
 801d056:	2200      	movs	r2, #0
 801d058:	4b62      	ldr	r3, [pc, #392]	@ (801d1e4 <_strtod_l+0xafc>)
 801d05a:	4630      	mov	r0, r6
 801d05c:	4639      	mov	r1, r7
 801d05e:	f7e3 fd4b 	bl	8000af8 <__aeabi_dcmplt>
 801d062:	2800      	cmp	r0, #0
 801d064:	d159      	bne.n	801d11a <_strtod_l+0xa32>
 801d066:	4630      	mov	r0, r6
 801d068:	4639      	mov	r1, r7
 801d06a:	2200      	movs	r2, #0
 801d06c:	4b5e      	ldr	r3, [pc, #376]	@ (801d1e8 <_strtod_l+0xb00>)
 801d06e:	f7e3 fad1 	bl	8000614 <__aeabi_dmul>
 801d072:	4606      	mov	r6, r0
 801d074:	460f      	mov	r7, r1
 801d076:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801d07a:	9606      	str	r6, [sp, #24]
 801d07c:	9307      	str	r3, [sp, #28]
 801d07e:	4d57      	ldr	r5, [pc, #348]	@ (801d1dc <_strtod_l+0xaf4>)
 801d080:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d084:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801d088:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d08a:	401d      	ands	r5, r3
 801d08c:	4b57      	ldr	r3, [pc, #348]	@ (801d1ec <_strtod_l+0xb04>)
 801d08e:	429d      	cmp	r5, r3
 801d090:	f040 80b0 	bne.w	801d1f4 <_strtod_l+0xb0c>
 801d094:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d096:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801d09a:	ec4b ab10 	vmov	d0, sl, fp
 801d09e:	f003 f9b3 	bl	8020408 <__ulp>
 801d0a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d0a6:	ec51 0b10 	vmov	r0, r1, d0
 801d0aa:	f7e3 fab3 	bl	8000614 <__aeabi_dmul>
 801d0ae:	4652      	mov	r2, sl
 801d0b0:	465b      	mov	r3, fp
 801d0b2:	f7e3 f8f9 	bl	80002a8 <__adddf3>
 801d0b6:	460b      	mov	r3, r1
 801d0b8:	4948      	ldr	r1, [pc, #288]	@ (801d1dc <_strtod_l+0xaf4>)
 801d0ba:	4682      	mov	sl, r0
 801d0bc:	4a4c      	ldr	r2, [pc, #304]	@ (801d1f0 <_strtod_l+0xb08>)
 801d0be:	4019      	ands	r1, r3
 801d0c0:	4291      	cmp	r1, r2
 801d0c2:	d942      	bls.n	801d14a <_strtod_l+0xa62>
 801d0c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d0c6:	4b46      	ldr	r3, [pc, #280]	@ (801d1e0 <_strtod_l+0xaf8>)
 801d0c8:	429a      	cmp	r2, r3
 801d0ca:	d103      	bne.n	801d0d4 <_strtod_l+0x9ec>
 801d0cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d0ce:	3301      	adds	r3, #1
 801d0d0:	f43f ad2b 	beq.w	801cb2a <_strtod_l+0x442>
 801d0d4:	f8df b108 	ldr.w	fp, [pc, #264]	@ 801d1e0 <_strtod_l+0xaf8>
 801d0d8:	f04f 3aff 	mov.w	sl, #4294967295
 801d0dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d0de:	9805      	ldr	r0, [sp, #20]
 801d0e0:	f002 fe58 	bl	801fd94 <_Bfree>
 801d0e4:	4649      	mov	r1, r9
 801d0e6:	9805      	ldr	r0, [sp, #20]
 801d0e8:	f002 fe54 	bl	801fd94 <_Bfree>
 801d0ec:	4641      	mov	r1, r8
 801d0ee:	9805      	ldr	r0, [sp, #20]
 801d0f0:	f002 fe50 	bl	801fd94 <_Bfree>
 801d0f4:	4621      	mov	r1, r4
 801d0f6:	9805      	ldr	r0, [sp, #20]
 801d0f8:	f002 fe4c 	bl	801fd94 <_Bfree>
 801d0fc:	e618      	b.n	801cd30 <_strtod_l+0x648>
 801d0fe:	f1ba 0f01 	cmp.w	sl, #1
 801d102:	d103      	bne.n	801d10c <_strtod_l+0xa24>
 801d104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d106:	2b00      	cmp	r3, #0
 801d108:	f43f ada5 	beq.w	801cc56 <_strtod_l+0x56e>
 801d10c:	2600      	movs	r6, #0
 801d10e:	4f35      	ldr	r7, [pc, #212]	@ (801d1e4 <_strtod_l+0xafc>)
 801d110:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 801d1b8 <_strtod_l+0xad0>
 801d114:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d118:	e7b1      	b.n	801d07e <_strtod_l+0x996>
 801d11a:	2600      	movs	r6, #0
 801d11c:	4f32      	ldr	r7, [pc, #200]	@ (801d1e8 <_strtod_l+0xb00>)
 801d11e:	e7aa      	b.n	801d076 <_strtod_l+0x98e>
 801d120:	4b31      	ldr	r3, [pc, #196]	@ (801d1e8 <_strtod_l+0xb00>)
 801d122:	4630      	mov	r0, r6
 801d124:	4639      	mov	r1, r7
 801d126:	2200      	movs	r2, #0
 801d128:	f7e3 fa74 	bl	8000614 <__aeabi_dmul>
 801d12c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d12e:	4606      	mov	r6, r0
 801d130:	460f      	mov	r7, r1
 801d132:	2b00      	cmp	r3, #0
 801d134:	d09f      	beq.n	801d076 <_strtod_l+0x98e>
 801d136:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801d13a:	e7a0      	b.n	801d07e <_strtod_l+0x996>
 801d13c:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 801d1c0 <_strtod_l+0xad8>
 801d140:	ec57 6b17 	vmov	r6, r7, d7
 801d144:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d148:	e799      	b.n	801d07e <_strtod_l+0x996>
 801d14a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801d14e:	9b08      	ldr	r3, [sp, #32]
 801d150:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801d154:	2b00      	cmp	r3, #0
 801d156:	d1c1      	bne.n	801d0dc <_strtod_l+0x9f4>
 801d158:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801d15c:	0d1b      	lsrs	r3, r3, #20
 801d15e:	051b      	lsls	r3, r3, #20
 801d160:	429d      	cmp	r5, r3
 801d162:	d1bb      	bne.n	801d0dc <_strtod_l+0x9f4>
 801d164:	4630      	mov	r0, r6
 801d166:	4639      	mov	r1, r7
 801d168:	f7e3 fd9c 	bl	8000ca4 <__aeabi_d2lz>
 801d16c:	f7e3 fa24 	bl	80005b8 <__aeabi_l2d>
 801d170:	4602      	mov	r2, r0
 801d172:	460b      	mov	r3, r1
 801d174:	4630      	mov	r0, r6
 801d176:	4639      	mov	r1, r7
 801d178:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801d17c:	f7e3 f892 	bl	80002a4 <__aeabi_dsub>
 801d180:	460b      	mov	r3, r1
 801d182:	4602      	mov	r2, r0
 801d184:	ea46 060a 	orr.w	r6, r6, sl
 801d188:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801d18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d18e:	431e      	orrs	r6, r3
 801d190:	d06d      	beq.n	801d26e <_strtod_l+0xb86>
 801d192:	a30d      	add	r3, pc, #52	@ (adr r3, 801d1c8 <_strtod_l+0xae0>)
 801d194:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d198:	f7e3 fcae 	bl	8000af8 <__aeabi_dcmplt>
 801d19c:	2800      	cmp	r0, #0
 801d19e:	f47f accf 	bne.w	801cb40 <_strtod_l+0x458>
 801d1a2:	a30b      	add	r3, pc, #44	@ (adr r3, 801d1d0 <_strtod_l+0xae8>)
 801d1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d1ac:	f7e3 fcc2 	bl	8000b34 <__aeabi_dcmpgt>
 801d1b0:	2800      	cmp	r0, #0
 801d1b2:	d093      	beq.n	801d0dc <_strtod_l+0x9f4>
 801d1b4:	e4c4      	b.n	801cb40 <_strtod_l+0x458>
 801d1b6:	bf00      	nop
 801d1b8:	00000000 	.word	0x00000000
 801d1bc:	bff00000 	.word	0xbff00000
 801d1c0:	00000000 	.word	0x00000000
 801d1c4:	3ff00000 	.word	0x3ff00000
 801d1c8:	94a03595 	.word	0x94a03595
 801d1cc:	3fdfffff 	.word	0x3fdfffff
 801d1d0:	35afe535 	.word	0x35afe535
 801d1d4:	3fe00000 	.word	0x3fe00000
 801d1d8:	000fffff 	.word	0x000fffff
 801d1dc:	7ff00000 	.word	0x7ff00000
 801d1e0:	7fefffff 	.word	0x7fefffff
 801d1e4:	3ff00000 	.word	0x3ff00000
 801d1e8:	3fe00000 	.word	0x3fe00000
 801d1ec:	7fe00000 	.word	0x7fe00000
 801d1f0:	7c9fffff 	.word	0x7c9fffff
 801d1f4:	9b08      	ldr	r3, [sp, #32]
 801d1f6:	b323      	cbz	r3, 801d242 <_strtod_l+0xb5a>
 801d1f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801d1fc:	d821      	bhi.n	801d242 <_strtod_l+0xb5a>
 801d1fe:	4630      	mov	r0, r6
 801d200:	4639      	mov	r1, r7
 801d202:	a327      	add	r3, pc, #156	@ (adr r3, 801d2a0 <_strtod_l+0xbb8>)
 801d204:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d208:	f7e3 fc80 	bl	8000b0c <__aeabi_dcmple>
 801d20c:	b1a0      	cbz	r0, 801d238 <_strtod_l+0xb50>
 801d20e:	4639      	mov	r1, r7
 801d210:	4630      	mov	r0, r6
 801d212:	f7e3 fcd7 	bl	8000bc4 <__aeabi_d2uiz>
 801d216:	2801      	cmp	r0, #1
 801d218:	bf38      	it	cc
 801d21a:	2001      	movcc	r0, #1
 801d21c:	f7e3 f980 	bl	8000520 <__aeabi_ui2d>
 801d220:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d222:	4606      	mov	r6, r0
 801d224:	460f      	mov	r7, r1
 801d226:	b9fb      	cbnz	r3, 801d268 <_strtod_l+0xb80>
 801d228:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d22c:	9014      	str	r0, [sp, #80]	@ 0x50
 801d22e:	9315      	str	r3, [sp, #84]	@ 0x54
 801d230:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801d234:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801d238:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d23a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801d23e:	1b5b      	subs	r3, r3, r5
 801d240:	9311      	str	r3, [sp, #68]	@ 0x44
 801d242:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801d246:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801d24a:	f003 f8dd 	bl	8020408 <__ulp>
 801d24e:	4650      	mov	r0, sl
 801d250:	4659      	mov	r1, fp
 801d252:	ec53 2b10 	vmov	r2, r3, d0
 801d256:	f7e3 f9dd 	bl	8000614 <__aeabi_dmul>
 801d25a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801d25e:	f7e3 f823 	bl	80002a8 <__adddf3>
 801d262:	4682      	mov	sl, r0
 801d264:	468b      	mov	fp, r1
 801d266:	e772      	b.n	801d14e <_strtod_l+0xa66>
 801d268:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801d26c:	e7e0      	b.n	801d230 <_strtod_l+0xb48>
 801d26e:	a30e      	add	r3, pc, #56	@ (adr r3, 801d2a8 <_strtod_l+0xbc0>)
 801d270:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d274:	f7e3 fc40 	bl	8000af8 <__aeabi_dcmplt>
 801d278:	e79a      	b.n	801d1b0 <_strtod_l+0xac8>
 801d27a:	2300      	movs	r3, #0
 801d27c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d27e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d280:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801d282:	6013      	str	r3, [r2, #0]
 801d284:	f7ff ba6d 	b.w	801c762 <_strtod_l+0x7a>
 801d288:	2a65      	cmp	r2, #101	@ 0x65
 801d28a:	f43f ab67 	beq.w	801c95c <_strtod_l+0x274>
 801d28e:	2a45      	cmp	r2, #69	@ 0x45
 801d290:	f43f ab64 	beq.w	801c95c <_strtod_l+0x274>
 801d294:	2301      	movs	r3, #1
 801d296:	f7ff bba0 	b.w	801c9da <_strtod_l+0x2f2>
 801d29a:	bf00      	nop
 801d29c:	f3af 8000 	nop.w
 801d2a0:	ffc00000 	.word	0xffc00000
 801d2a4:	41dfffff 	.word	0x41dfffff
 801d2a8:	94a03595 	.word	0x94a03595
 801d2ac:	3fcfffff 	.word	0x3fcfffff

0801d2b0 <_strtod_r>:
 801d2b0:	4b01      	ldr	r3, [pc, #4]	@ (801d2b8 <_strtod_r+0x8>)
 801d2b2:	f7ff ba19 	b.w	801c6e8 <_strtod_l>
 801d2b6:	bf00      	nop
 801d2b8:	200009bc 	.word	0x200009bc

0801d2bc <strtod>:
 801d2bc:	460a      	mov	r2, r1
 801d2be:	4601      	mov	r1, r0
 801d2c0:	4802      	ldr	r0, [pc, #8]	@ (801d2cc <strtod+0x10>)
 801d2c2:	4b03      	ldr	r3, [pc, #12]	@ (801d2d0 <strtod+0x14>)
 801d2c4:	6800      	ldr	r0, [r0, #0]
 801d2c6:	f7ff ba0f 	b.w	801c6e8 <_strtod_l>
 801d2ca:	bf00      	nop
 801d2cc:	20000b28 	.word	0x20000b28
 801d2d0:	200009bc 	.word	0x200009bc

0801d2d4 <_strtol_l.constprop.0>:
 801d2d4:	2b24      	cmp	r3, #36	@ 0x24
 801d2d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d2da:	4686      	mov	lr, r0
 801d2dc:	4690      	mov	r8, r2
 801d2de:	d801      	bhi.n	801d2e4 <_strtol_l.constprop.0+0x10>
 801d2e0:	2b01      	cmp	r3, #1
 801d2e2:	d106      	bne.n	801d2f2 <_strtol_l.constprop.0+0x1e>
 801d2e4:	f001 fab2 	bl	801e84c <__errno>
 801d2e8:	2316      	movs	r3, #22
 801d2ea:	6003      	str	r3, [r0, #0]
 801d2ec:	2000      	movs	r0, #0
 801d2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d2f2:	460d      	mov	r5, r1
 801d2f4:	4833      	ldr	r0, [pc, #204]	@ (801d3c4 <_strtol_l.constprop.0+0xf0>)
 801d2f6:	462a      	mov	r2, r5
 801d2f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d2fc:	5d06      	ldrb	r6, [r0, r4]
 801d2fe:	f016 0608 	ands.w	r6, r6, #8
 801d302:	d1f8      	bne.n	801d2f6 <_strtol_l.constprop.0+0x22>
 801d304:	2c2d      	cmp	r4, #45	@ 0x2d
 801d306:	d12d      	bne.n	801d364 <_strtol_l.constprop.0+0x90>
 801d308:	782c      	ldrb	r4, [r5, #0]
 801d30a:	2601      	movs	r6, #1
 801d30c:	1c95      	adds	r5, r2, #2
 801d30e:	f033 0210 	bics.w	r2, r3, #16
 801d312:	d109      	bne.n	801d328 <_strtol_l.constprop.0+0x54>
 801d314:	2c30      	cmp	r4, #48	@ 0x30
 801d316:	d12a      	bne.n	801d36e <_strtol_l.constprop.0+0x9a>
 801d318:	782a      	ldrb	r2, [r5, #0]
 801d31a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d31e:	2a58      	cmp	r2, #88	@ 0x58
 801d320:	d125      	bne.n	801d36e <_strtol_l.constprop.0+0x9a>
 801d322:	786c      	ldrb	r4, [r5, #1]
 801d324:	2310      	movs	r3, #16
 801d326:	3502      	adds	r5, #2
 801d328:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801d32c:	2200      	movs	r2, #0
 801d32e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d332:	4610      	mov	r0, r2
 801d334:	fbbc f9f3 	udiv	r9, ip, r3
 801d338:	fb03 ca19 	mls	sl, r3, r9, ip
 801d33c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801d340:	2f09      	cmp	r7, #9
 801d342:	d81b      	bhi.n	801d37c <_strtol_l.constprop.0+0xa8>
 801d344:	463c      	mov	r4, r7
 801d346:	42a3      	cmp	r3, r4
 801d348:	dd27      	ble.n	801d39a <_strtol_l.constprop.0+0xc6>
 801d34a:	1c57      	adds	r7, r2, #1
 801d34c:	d007      	beq.n	801d35e <_strtol_l.constprop.0+0x8a>
 801d34e:	4581      	cmp	r9, r0
 801d350:	d320      	bcc.n	801d394 <_strtol_l.constprop.0+0xc0>
 801d352:	d101      	bne.n	801d358 <_strtol_l.constprop.0+0x84>
 801d354:	45a2      	cmp	sl, r4
 801d356:	db1d      	blt.n	801d394 <_strtol_l.constprop.0+0xc0>
 801d358:	fb00 4003 	mla	r0, r0, r3, r4
 801d35c:	2201      	movs	r2, #1
 801d35e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d362:	e7eb      	b.n	801d33c <_strtol_l.constprop.0+0x68>
 801d364:	2c2b      	cmp	r4, #43	@ 0x2b
 801d366:	bf04      	itt	eq
 801d368:	782c      	ldrbeq	r4, [r5, #0]
 801d36a:	1c95      	addeq	r5, r2, #2
 801d36c:	e7cf      	b.n	801d30e <_strtol_l.constprop.0+0x3a>
 801d36e:	2b00      	cmp	r3, #0
 801d370:	d1da      	bne.n	801d328 <_strtol_l.constprop.0+0x54>
 801d372:	2c30      	cmp	r4, #48	@ 0x30
 801d374:	bf0c      	ite	eq
 801d376:	2308      	moveq	r3, #8
 801d378:	230a      	movne	r3, #10
 801d37a:	e7d5      	b.n	801d328 <_strtol_l.constprop.0+0x54>
 801d37c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801d380:	2f19      	cmp	r7, #25
 801d382:	d801      	bhi.n	801d388 <_strtol_l.constprop.0+0xb4>
 801d384:	3c37      	subs	r4, #55	@ 0x37
 801d386:	e7de      	b.n	801d346 <_strtol_l.constprop.0+0x72>
 801d388:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801d38c:	2f19      	cmp	r7, #25
 801d38e:	d804      	bhi.n	801d39a <_strtol_l.constprop.0+0xc6>
 801d390:	3c57      	subs	r4, #87	@ 0x57
 801d392:	e7d8      	b.n	801d346 <_strtol_l.constprop.0+0x72>
 801d394:	f04f 32ff 	mov.w	r2, #4294967295
 801d398:	e7e1      	b.n	801d35e <_strtol_l.constprop.0+0x8a>
 801d39a:	1c53      	adds	r3, r2, #1
 801d39c:	d108      	bne.n	801d3b0 <_strtol_l.constprop.0+0xdc>
 801d39e:	2322      	movs	r3, #34	@ 0x22
 801d3a0:	4660      	mov	r0, ip
 801d3a2:	f8ce 3000 	str.w	r3, [lr]
 801d3a6:	f1b8 0f00 	cmp.w	r8, #0
 801d3aa:	d0a0      	beq.n	801d2ee <_strtol_l.constprop.0+0x1a>
 801d3ac:	1e69      	subs	r1, r5, #1
 801d3ae:	e006      	b.n	801d3be <_strtol_l.constprop.0+0xea>
 801d3b0:	b106      	cbz	r6, 801d3b4 <_strtol_l.constprop.0+0xe0>
 801d3b2:	4240      	negs	r0, r0
 801d3b4:	f1b8 0f00 	cmp.w	r8, #0
 801d3b8:	d099      	beq.n	801d2ee <_strtol_l.constprop.0+0x1a>
 801d3ba:	2a00      	cmp	r2, #0
 801d3bc:	d1f6      	bne.n	801d3ac <_strtol_l.constprop.0+0xd8>
 801d3be:	f8c8 1000 	str.w	r1, [r8]
 801d3c2:	e794      	b.n	801d2ee <_strtol_l.constprop.0+0x1a>
 801d3c4:	080823a1 	.word	0x080823a1

0801d3c8 <_strtol_r>:
 801d3c8:	f7ff bf84 	b.w	801d2d4 <_strtol_l.constprop.0>

0801d3cc <strtol>:
 801d3cc:	4613      	mov	r3, r2
 801d3ce:	460a      	mov	r2, r1
 801d3d0:	4601      	mov	r1, r0
 801d3d2:	4802      	ldr	r0, [pc, #8]	@ (801d3dc <strtol+0x10>)
 801d3d4:	6800      	ldr	r0, [r0, #0]
 801d3d6:	f7ff bf7d 	b.w	801d2d4 <_strtol_l.constprop.0>
 801d3da:	bf00      	nop
 801d3dc:	20000b28 	.word	0x20000b28

0801d3e0 <__cvt>:
 801d3e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d3e4:	ec57 6b10 	vmov	r6, r7, d0
 801d3e8:	2f00      	cmp	r7, #0
 801d3ea:	460c      	mov	r4, r1
 801d3ec:	4619      	mov	r1, r3
 801d3ee:	463b      	mov	r3, r7
 801d3f0:	bfb4      	ite	lt
 801d3f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801d3f6:	2300      	movge	r3, #0
 801d3f8:	4691      	mov	r9, r2
 801d3fa:	bfbf      	itttt	lt
 801d3fc:	4632      	movlt	r2, r6
 801d3fe:	461f      	movlt	r7, r3
 801d400:	232d      	movlt	r3, #45	@ 0x2d
 801d402:	4616      	movlt	r6, r2
 801d404:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801d408:	700b      	strb	r3, [r1, #0]
 801d40a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d40c:	f023 0820 	bic.w	r8, r3, #32
 801d410:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d414:	d005      	beq.n	801d422 <__cvt+0x42>
 801d416:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801d41a:	d100      	bne.n	801d41e <__cvt+0x3e>
 801d41c:	3401      	adds	r4, #1
 801d41e:	2102      	movs	r1, #2
 801d420:	e000      	b.n	801d424 <__cvt+0x44>
 801d422:	2103      	movs	r1, #3
 801d424:	ab03      	add	r3, sp, #12
 801d426:	4622      	mov	r2, r4
 801d428:	9301      	str	r3, [sp, #4]
 801d42a:	ab02      	add	r3, sp, #8
 801d42c:	ec47 6b10 	vmov	d0, r6, r7
 801d430:	9300      	str	r3, [sp, #0]
 801d432:	4653      	mov	r3, sl
 801d434:	f001 fb18 	bl	801ea68 <_dtoa_r>
 801d438:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801d43c:	4605      	mov	r5, r0
 801d43e:	d119      	bne.n	801d474 <__cvt+0x94>
 801d440:	f019 0f01 	tst.w	r9, #1
 801d444:	d00e      	beq.n	801d464 <__cvt+0x84>
 801d446:	eb00 0904 	add.w	r9, r0, r4
 801d44a:	2200      	movs	r2, #0
 801d44c:	2300      	movs	r3, #0
 801d44e:	4630      	mov	r0, r6
 801d450:	4639      	mov	r1, r7
 801d452:	f7e3 fb47 	bl	8000ae4 <__aeabi_dcmpeq>
 801d456:	b108      	cbz	r0, 801d45c <__cvt+0x7c>
 801d458:	f8cd 900c 	str.w	r9, [sp, #12]
 801d45c:	2230      	movs	r2, #48	@ 0x30
 801d45e:	9b03      	ldr	r3, [sp, #12]
 801d460:	454b      	cmp	r3, r9
 801d462:	d31e      	bcc.n	801d4a2 <__cvt+0xc2>
 801d464:	9b03      	ldr	r3, [sp, #12]
 801d466:	4628      	mov	r0, r5
 801d468:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d46a:	1b5b      	subs	r3, r3, r5
 801d46c:	6013      	str	r3, [r2, #0]
 801d46e:	b004      	add	sp, #16
 801d470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d474:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d478:	eb00 0904 	add.w	r9, r0, r4
 801d47c:	d1e5      	bne.n	801d44a <__cvt+0x6a>
 801d47e:	7803      	ldrb	r3, [r0, #0]
 801d480:	2b30      	cmp	r3, #48	@ 0x30
 801d482:	d10a      	bne.n	801d49a <__cvt+0xba>
 801d484:	2200      	movs	r2, #0
 801d486:	2300      	movs	r3, #0
 801d488:	4630      	mov	r0, r6
 801d48a:	4639      	mov	r1, r7
 801d48c:	f7e3 fb2a 	bl	8000ae4 <__aeabi_dcmpeq>
 801d490:	b918      	cbnz	r0, 801d49a <__cvt+0xba>
 801d492:	f1c4 0401 	rsb	r4, r4, #1
 801d496:	f8ca 4000 	str.w	r4, [sl]
 801d49a:	f8da 3000 	ldr.w	r3, [sl]
 801d49e:	4499      	add	r9, r3
 801d4a0:	e7d3      	b.n	801d44a <__cvt+0x6a>
 801d4a2:	1c59      	adds	r1, r3, #1
 801d4a4:	9103      	str	r1, [sp, #12]
 801d4a6:	701a      	strb	r2, [r3, #0]
 801d4a8:	e7d9      	b.n	801d45e <__cvt+0x7e>

0801d4aa <__exponent>:
 801d4aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d4ac:	2900      	cmp	r1, #0
 801d4ae:	7002      	strb	r2, [r0, #0]
 801d4b0:	bfba      	itte	lt
 801d4b2:	4249      	neglt	r1, r1
 801d4b4:	232d      	movlt	r3, #45	@ 0x2d
 801d4b6:	232b      	movge	r3, #43	@ 0x2b
 801d4b8:	2909      	cmp	r1, #9
 801d4ba:	7043      	strb	r3, [r0, #1]
 801d4bc:	dd28      	ble.n	801d510 <__exponent+0x66>
 801d4be:	f10d 0307 	add.w	r3, sp, #7
 801d4c2:	270a      	movs	r7, #10
 801d4c4:	461d      	mov	r5, r3
 801d4c6:	461a      	mov	r2, r3
 801d4c8:	3b01      	subs	r3, #1
 801d4ca:	fbb1 f6f7 	udiv	r6, r1, r7
 801d4ce:	fb07 1416 	mls	r4, r7, r6, r1
 801d4d2:	3430      	adds	r4, #48	@ 0x30
 801d4d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 801d4d8:	460c      	mov	r4, r1
 801d4da:	4631      	mov	r1, r6
 801d4dc:	2c63      	cmp	r4, #99	@ 0x63
 801d4de:	dcf2      	bgt.n	801d4c6 <__exponent+0x1c>
 801d4e0:	3130      	adds	r1, #48	@ 0x30
 801d4e2:	1e94      	subs	r4, r2, #2
 801d4e4:	f803 1c01 	strb.w	r1, [r3, #-1]
 801d4e8:	1c41      	adds	r1, r0, #1
 801d4ea:	4623      	mov	r3, r4
 801d4ec:	42ab      	cmp	r3, r5
 801d4ee:	d30a      	bcc.n	801d506 <__exponent+0x5c>
 801d4f0:	f10d 0309 	add.w	r3, sp, #9
 801d4f4:	1a9b      	subs	r3, r3, r2
 801d4f6:	42ac      	cmp	r4, r5
 801d4f8:	bf88      	it	hi
 801d4fa:	2300      	movhi	r3, #0
 801d4fc:	3302      	adds	r3, #2
 801d4fe:	4403      	add	r3, r0
 801d500:	1a18      	subs	r0, r3, r0
 801d502:	b003      	add	sp, #12
 801d504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d506:	f813 6b01 	ldrb.w	r6, [r3], #1
 801d50a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801d50e:	e7ed      	b.n	801d4ec <__exponent+0x42>
 801d510:	2330      	movs	r3, #48	@ 0x30
 801d512:	3130      	adds	r1, #48	@ 0x30
 801d514:	7083      	strb	r3, [r0, #2]
 801d516:	1d03      	adds	r3, r0, #4
 801d518:	70c1      	strb	r1, [r0, #3]
 801d51a:	e7f1      	b.n	801d500 <__exponent+0x56>

0801d51c <_printf_float>:
 801d51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d520:	b08d      	sub	sp, #52	@ 0x34
 801d522:	460c      	mov	r4, r1
 801d524:	4616      	mov	r6, r2
 801d526:	461f      	mov	r7, r3
 801d528:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801d52c:	4605      	mov	r5, r0
 801d52e:	f001 f933 	bl	801e798 <_localeconv_r>
 801d532:	6803      	ldr	r3, [r0, #0]
 801d534:	4618      	mov	r0, r3
 801d536:	9304      	str	r3, [sp, #16]
 801d538:	f7e2 fea8 	bl	800028c <strlen>
 801d53c:	2300      	movs	r3, #0
 801d53e:	9005      	str	r0, [sp, #20]
 801d540:	930a      	str	r3, [sp, #40]	@ 0x28
 801d542:	f8d8 3000 	ldr.w	r3, [r8]
 801d546:	f894 a018 	ldrb.w	sl, [r4, #24]
 801d54a:	3307      	adds	r3, #7
 801d54c:	f8d4 b000 	ldr.w	fp, [r4]
 801d550:	f023 0307 	bic.w	r3, r3, #7
 801d554:	f103 0208 	add.w	r2, r3, #8
 801d558:	f8c8 2000 	str.w	r2, [r8]
 801d55c:	f04f 32ff 	mov.w	r2, #4294967295
 801d560:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d564:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801d568:	f8cd 8018 	str.w	r8, [sp, #24]
 801d56c:	9307      	str	r3, [sp, #28]
 801d56e:	4b9d      	ldr	r3, [pc, #628]	@ (801d7e4 <_printf_float+0x2c8>)
 801d570:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d574:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801d578:	f7e3 fae6 	bl	8000b48 <__aeabi_dcmpun>
 801d57c:	bb70      	cbnz	r0, 801d5dc <_printf_float+0xc0>
 801d57e:	f04f 32ff 	mov.w	r2, #4294967295
 801d582:	4b98      	ldr	r3, [pc, #608]	@ (801d7e4 <_printf_float+0x2c8>)
 801d584:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d588:	f7e3 fac0 	bl	8000b0c <__aeabi_dcmple>
 801d58c:	bb30      	cbnz	r0, 801d5dc <_printf_float+0xc0>
 801d58e:	2200      	movs	r2, #0
 801d590:	2300      	movs	r3, #0
 801d592:	4640      	mov	r0, r8
 801d594:	4649      	mov	r1, r9
 801d596:	f7e3 faaf 	bl	8000af8 <__aeabi_dcmplt>
 801d59a:	b110      	cbz	r0, 801d5a2 <_printf_float+0x86>
 801d59c:	232d      	movs	r3, #45	@ 0x2d
 801d59e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d5a2:	4a91      	ldr	r2, [pc, #580]	@ (801d7e8 <_printf_float+0x2cc>)
 801d5a4:	4b91      	ldr	r3, [pc, #580]	@ (801d7ec <_printf_float+0x2d0>)
 801d5a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801d5aa:	bf94      	ite	ls
 801d5ac:	4690      	movls	r8, r2
 801d5ae:	4698      	movhi	r8, r3
 801d5b0:	2303      	movs	r3, #3
 801d5b2:	f04f 0900 	mov.w	r9, #0
 801d5b6:	6123      	str	r3, [r4, #16]
 801d5b8:	f02b 0304 	bic.w	r3, fp, #4
 801d5bc:	6023      	str	r3, [r4, #0]
 801d5be:	4633      	mov	r3, r6
 801d5c0:	aa0b      	add	r2, sp, #44	@ 0x2c
 801d5c2:	4621      	mov	r1, r4
 801d5c4:	4628      	mov	r0, r5
 801d5c6:	9700      	str	r7, [sp, #0]
 801d5c8:	f000 f9d2 	bl	801d970 <_printf_common>
 801d5cc:	3001      	adds	r0, #1
 801d5ce:	f040 808d 	bne.w	801d6ec <_printf_float+0x1d0>
 801d5d2:	f04f 30ff 	mov.w	r0, #4294967295
 801d5d6:	b00d      	add	sp, #52	@ 0x34
 801d5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5dc:	4642      	mov	r2, r8
 801d5de:	464b      	mov	r3, r9
 801d5e0:	4640      	mov	r0, r8
 801d5e2:	4649      	mov	r1, r9
 801d5e4:	f7e3 fab0 	bl	8000b48 <__aeabi_dcmpun>
 801d5e8:	b140      	cbz	r0, 801d5fc <_printf_float+0xe0>
 801d5ea:	464b      	mov	r3, r9
 801d5ec:	4a80      	ldr	r2, [pc, #512]	@ (801d7f0 <_printf_float+0x2d4>)
 801d5ee:	2b00      	cmp	r3, #0
 801d5f0:	bfbc      	itt	lt
 801d5f2:	232d      	movlt	r3, #45	@ 0x2d
 801d5f4:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801d5f8:	4b7e      	ldr	r3, [pc, #504]	@ (801d7f4 <_printf_float+0x2d8>)
 801d5fa:	e7d4      	b.n	801d5a6 <_printf_float+0x8a>
 801d5fc:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801d600:	6863      	ldr	r3, [r4, #4]
 801d602:	9206      	str	r2, [sp, #24]
 801d604:	1c5a      	adds	r2, r3, #1
 801d606:	d13b      	bne.n	801d680 <_printf_float+0x164>
 801d608:	2306      	movs	r3, #6
 801d60a:	6063      	str	r3, [r4, #4]
 801d60c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801d610:	2300      	movs	r3, #0
 801d612:	4628      	mov	r0, r5
 801d614:	6022      	str	r2, [r4, #0]
 801d616:	9303      	str	r3, [sp, #12]
 801d618:	ab0a      	add	r3, sp, #40	@ 0x28
 801d61a:	e9cd a301 	strd	sl, r3, [sp, #4]
 801d61e:	ab09      	add	r3, sp, #36	@ 0x24
 801d620:	ec49 8b10 	vmov	d0, r8, r9
 801d624:	9300      	str	r3, [sp, #0]
 801d626:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801d62a:	6861      	ldr	r1, [r4, #4]
 801d62c:	f7ff fed8 	bl	801d3e0 <__cvt>
 801d630:	9b06      	ldr	r3, [sp, #24]
 801d632:	4680      	mov	r8, r0
 801d634:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d636:	2b47      	cmp	r3, #71	@ 0x47
 801d638:	d129      	bne.n	801d68e <_printf_float+0x172>
 801d63a:	1cc8      	adds	r0, r1, #3
 801d63c:	db02      	blt.n	801d644 <_printf_float+0x128>
 801d63e:	6863      	ldr	r3, [r4, #4]
 801d640:	4299      	cmp	r1, r3
 801d642:	dd41      	ble.n	801d6c8 <_printf_float+0x1ac>
 801d644:	f1aa 0a02 	sub.w	sl, sl, #2
 801d648:	fa5f fa8a 	uxtb.w	sl, sl
 801d64c:	3901      	subs	r1, #1
 801d64e:	4652      	mov	r2, sl
 801d650:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801d654:	9109      	str	r1, [sp, #36]	@ 0x24
 801d656:	f7ff ff28 	bl	801d4aa <__exponent>
 801d65a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d65c:	4681      	mov	r9, r0
 801d65e:	1813      	adds	r3, r2, r0
 801d660:	2a01      	cmp	r2, #1
 801d662:	6123      	str	r3, [r4, #16]
 801d664:	dc02      	bgt.n	801d66c <_printf_float+0x150>
 801d666:	6822      	ldr	r2, [r4, #0]
 801d668:	07d2      	lsls	r2, r2, #31
 801d66a:	d501      	bpl.n	801d670 <_printf_float+0x154>
 801d66c:	3301      	adds	r3, #1
 801d66e:	6123      	str	r3, [r4, #16]
 801d670:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801d674:	2b00      	cmp	r3, #0
 801d676:	d0a2      	beq.n	801d5be <_printf_float+0xa2>
 801d678:	232d      	movs	r3, #45	@ 0x2d
 801d67a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d67e:	e79e      	b.n	801d5be <_printf_float+0xa2>
 801d680:	9a06      	ldr	r2, [sp, #24]
 801d682:	2a47      	cmp	r2, #71	@ 0x47
 801d684:	d1c2      	bne.n	801d60c <_printf_float+0xf0>
 801d686:	2b00      	cmp	r3, #0
 801d688:	d1c0      	bne.n	801d60c <_printf_float+0xf0>
 801d68a:	2301      	movs	r3, #1
 801d68c:	e7bd      	b.n	801d60a <_printf_float+0xee>
 801d68e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d692:	d9db      	bls.n	801d64c <_printf_float+0x130>
 801d694:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801d698:	d118      	bne.n	801d6cc <_printf_float+0x1b0>
 801d69a:	2900      	cmp	r1, #0
 801d69c:	6863      	ldr	r3, [r4, #4]
 801d69e:	dd0b      	ble.n	801d6b8 <_printf_float+0x19c>
 801d6a0:	6121      	str	r1, [r4, #16]
 801d6a2:	b913      	cbnz	r3, 801d6aa <_printf_float+0x18e>
 801d6a4:	6822      	ldr	r2, [r4, #0]
 801d6a6:	07d0      	lsls	r0, r2, #31
 801d6a8:	d502      	bpl.n	801d6b0 <_printf_float+0x194>
 801d6aa:	3301      	adds	r3, #1
 801d6ac:	440b      	add	r3, r1
 801d6ae:	6123      	str	r3, [r4, #16]
 801d6b0:	f04f 0900 	mov.w	r9, #0
 801d6b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 801d6b6:	e7db      	b.n	801d670 <_printf_float+0x154>
 801d6b8:	b913      	cbnz	r3, 801d6c0 <_printf_float+0x1a4>
 801d6ba:	6822      	ldr	r2, [r4, #0]
 801d6bc:	07d2      	lsls	r2, r2, #31
 801d6be:	d501      	bpl.n	801d6c4 <_printf_float+0x1a8>
 801d6c0:	3302      	adds	r3, #2
 801d6c2:	e7f4      	b.n	801d6ae <_printf_float+0x192>
 801d6c4:	2301      	movs	r3, #1
 801d6c6:	e7f2      	b.n	801d6ae <_printf_float+0x192>
 801d6c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801d6cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d6ce:	4299      	cmp	r1, r3
 801d6d0:	db05      	blt.n	801d6de <_printf_float+0x1c2>
 801d6d2:	6823      	ldr	r3, [r4, #0]
 801d6d4:	6121      	str	r1, [r4, #16]
 801d6d6:	07d8      	lsls	r0, r3, #31
 801d6d8:	d5ea      	bpl.n	801d6b0 <_printf_float+0x194>
 801d6da:	1c4b      	adds	r3, r1, #1
 801d6dc:	e7e7      	b.n	801d6ae <_printf_float+0x192>
 801d6de:	2900      	cmp	r1, #0
 801d6e0:	bfd4      	ite	le
 801d6e2:	f1c1 0202 	rsble	r2, r1, #2
 801d6e6:	2201      	movgt	r2, #1
 801d6e8:	4413      	add	r3, r2
 801d6ea:	e7e0      	b.n	801d6ae <_printf_float+0x192>
 801d6ec:	6823      	ldr	r3, [r4, #0]
 801d6ee:	055a      	lsls	r2, r3, #21
 801d6f0:	d407      	bmi.n	801d702 <_printf_float+0x1e6>
 801d6f2:	6923      	ldr	r3, [r4, #16]
 801d6f4:	4642      	mov	r2, r8
 801d6f6:	4631      	mov	r1, r6
 801d6f8:	4628      	mov	r0, r5
 801d6fa:	47b8      	blx	r7
 801d6fc:	3001      	adds	r0, #1
 801d6fe:	d12b      	bne.n	801d758 <_printf_float+0x23c>
 801d700:	e767      	b.n	801d5d2 <_printf_float+0xb6>
 801d702:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d706:	f240 80dd 	bls.w	801d8c4 <_printf_float+0x3a8>
 801d70a:	2200      	movs	r2, #0
 801d70c:	2300      	movs	r3, #0
 801d70e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d712:	f7e3 f9e7 	bl	8000ae4 <__aeabi_dcmpeq>
 801d716:	2800      	cmp	r0, #0
 801d718:	d033      	beq.n	801d782 <_printf_float+0x266>
 801d71a:	2301      	movs	r3, #1
 801d71c:	4a36      	ldr	r2, [pc, #216]	@ (801d7f8 <_printf_float+0x2dc>)
 801d71e:	4631      	mov	r1, r6
 801d720:	4628      	mov	r0, r5
 801d722:	47b8      	blx	r7
 801d724:	3001      	adds	r0, #1
 801d726:	f43f af54 	beq.w	801d5d2 <_printf_float+0xb6>
 801d72a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801d72e:	4543      	cmp	r3, r8
 801d730:	db02      	blt.n	801d738 <_printf_float+0x21c>
 801d732:	6823      	ldr	r3, [r4, #0]
 801d734:	07d8      	lsls	r0, r3, #31
 801d736:	d50f      	bpl.n	801d758 <_printf_float+0x23c>
 801d738:	4631      	mov	r1, r6
 801d73a:	4628      	mov	r0, r5
 801d73c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d740:	47b8      	blx	r7
 801d742:	3001      	adds	r0, #1
 801d744:	f43f af45 	beq.w	801d5d2 <_printf_float+0xb6>
 801d748:	f04f 0900 	mov.w	r9, #0
 801d74c:	f108 38ff 	add.w	r8, r8, #4294967295
 801d750:	f104 0a1a 	add.w	sl, r4, #26
 801d754:	45c8      	cmp	r8, r9
 801d756:	dc09      	bgt.n	801d76c <_printf_float+0x250>
 801d758:	6823      	ldr	r3, [r4, #0]
 801d75a:	079b      	lsls	r3, r3, #30
 801d75c:	f100 8103 	bmi.w	801d966 <_printf_float+0x44a>
 801d760:	68e0      	ldr	r0, [r4, #12]
 801d762:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d764:	4298      	cmp	r0, r3
 801d766:	bfb8      	it	lt
 801d768:	4618      	movlt	r0, r3
 801d76a:	e734      	b.n	801d5d6 <_printf_float+0xba>
 801d76c:	2301      	movs	r3, #1
 801d76e:	4652      	mov	r2, sl
 801d770:	4631      	mov	r1, r6
 801d772:	4628      	mov	r0, r5
 801d774:	47b8      	blx	r7
 801d776:	3001      	adds	r0, #1
 801d778:	f43f af2b 	beq.w	801d5d2 <_printf_float+0xb6>
 801d77c:	f109 0901 	add.w	r9, r9, #1
 801d780:	e7e8      	b.n	801d754 <_printf_float+0x238>
 801d782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d784:	2b00      	cmp	r3, #0
 801d786:	dc39      	bgt.n	801d7fc <_printf_float+0x2e0>
 801d788:	2301      	movs	r3, #1
 801d78a:	4a1b      	ldr	r2, [pc, #108]	@ (801d7f8 <_printf_float+0x2dc>)
 801d78c:	4631      	mov	r1, r6
 801d78e:	4628      	mov	r0, r5
 801d790:	47b8      	blx	r7
 801d792:	3001      	adds	r0, #1
 801d794:	f43f af1d 	beq.w	801d5d2 <_printf_float+0xb6>
 801d798:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801d79c:	ea59 0303 	orrs.w	r3, r9, r3
 801d7a0:	d102      	bne.n	801d7a8 <_printf_float+0x28c>
 801d7a2:	6823      	ldr	r3, [r4, #0]
 801d7a4:	07d9      	lsls	r1, r3, #31
 801d7a6:	d5d7      	bpl.n	801d758 <_printf_float+0x23c>
 801d7a8:	4631      	mov	r1, r6
 801d7aa:	4628      	mov	r0, r5
 801d7ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d7b0:	47b8      	blx	r7
 801d7b2:	3001      	adds	r0, #1
 801d7b4:	f43f af0d 	beq.w	801d5d2 <_printf_float+0xb6>
 801d7b8:	f04f 0a00 	mov.w	sl, #0
 801d7bc:	f104 0b1a 	add.w	fp, r4, #26
 801d7c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d7c2:	425b      	negs	r3, r3
 801d7c4:	4553      	cmp	r3, sl
 801d7c6:	dc01      	bgt.n	801d7cc <_printf_float+0x2b0>
 801d7c8:	464b      	mov	r3, r9
 801d7ca:	e793      	b.n	801d6f4 <_printf_float+0x1d8>
 801d7cc:	2301      	movs	r3, #1
 801d7ce:	465a      	mov	r2, fp
 801d7d0:	4631      	mov	r1, r6
 801d7d2:	4628      	mov	r0, r5
 801d7d4:	47b8      	blx	r7
 801d7d6:	3001      	adds	r0, #1
 801d7d8:	f43f aefb 	beq.w	801d5d2 <_printf_float+0xb6>
 801d7dc:	f10a 0a01 	add.w	sl, sl, #1
 801d7e0:	e7ee      	b.n	801d7c0 <_printf_float+0x2a4>
 801d7e2:	bf00      	nop
 801d7e4:	7fefffff 	.word	0x7fefffff
 801d7e8:	080824a1 	.word	0x080824a1
 801d7ec:	080824a5 	.word	0x080824a5
 801d7f0:	080824a9 	.word	0x080824a9
 801d7f4:	080824ad 	.word	0x080824ad
 801d7f8:	080824b1 	.word	0x080824b1
 801d7fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d7fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d802:	4553      	cmp	r3, sl
 801d804:	bfa8      	it	ge
 801d806:	4653      	movge	r3, sl
 801d808:	2b00      	cmp	r3, #0
 801d80a:	4699      	mov	r9, r3
 801d80c:	dc36      	bgt.n	801d87c <_printf_float+0x360>
 801d80e:	f04f 0b00 	mov.w	fp, #0
 801d812:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d816:	f104 021a 	add.w	r2, r4, #26
 801d81a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d81c:	9306      	str	r3, [sp, #24]
 801d81e:	eba3 0309 	sub.w	r3, r3, r9
 801d822:	455b      	cmp	r3, fp
 801d824:	dc31      	bgt.n	801d88a <_printf_float+0x36e>
 801d826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d828:	459a      	cmp	sl, r3
 801d82a:	dc3a      	bgt.n	801d8a2 <_printf_float+0x386>
 801d82c:	6823      	ldr	r3, [r4, #0]
 801d82e:	07da      	lsls	r2, r3, #31
 801d830:	d437      	bmi.n	801d8a2 <_printf_float+0x386>
 801d832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d834:	ebaa 0903 	sub.w	r9, sl, r3
 801d838:	9b06      	ldr	r3, [sp, #24]
 801d83a:	ebaa 0303 	sub.w	r3, sl, r3
 801d83e:	4599      	cmp	r9, r3
 801d840:	bfa8      	it	ge
 801d842:	4699      	movge	r9, r3
 801d844:	f1b9 0f00 	cmp.w	r9, #0
 801d848:	dc33      	bgt.n	801d8b2 <_printf_float+0x396>
 801d84a:	f04f 0800 	mov.w	r8, #0
 801d84e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d852:	f104 0b1a 	add.w	fp, r4, #26
 801d856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d858:	ebaa 0303 	sub.w	r3, sl, r3
 801d85c:	eba3 0309 	sub.w	r3, r3, r9
 801d860:	4543      	cmp	r3, r8
 801d862:	f77f af79 	ble.w	801d758 <_printf_float+0x23c>
 801d866:	2301      	movs	r3, #1
 801d868:	465a      	mov	r2, fp
 801d86a:	4631      	mov	r1, r6
 801d86c:	4628      	mov	r0, r5
 801d86e:	47b8      	blx	r7
 801d870:	3001      	adds	r0, #1
 801d872:	f43f aeae 	beq.w	801d5d2 <_printf_float+0xb6>
 801d876:	f108 0801 	add.w	r8, r8, #1
 801d87a:	e7ec      	b.n	801d856 <_printf_float+0x33a>
 801d87c:	4642      	mov	r2, r8
 801d87e:	4631      	mov	r1, r6
 801d880:	4628      	mov	r0, r5
 801d882:	47b8      	blx	r7
 801d884:	3001      	adds	r0, #1
 801d886:	d1c2      	bne.n	801d80e <_printf_float+0x2f2>
 801d888:	e6a3      	b.n	801d5d2 <_printf_float+0xb6>
 801d88a:	2301      	movs	r3, #1
 801d88c:	4631      	mov	r1, r6
 801d88e:	4628      	mov	r0, r5
 801d890:	9206      	str	r2, [sp, #24]
 801d892:	47b8      	blx	r7
 801d894:	3001      	adds	r0, #1
 801d896:	f43f ae9c 	beq.w	801d5d2 <_printf_float+0xb6>
 801d89a:	f10b 0b01 	add.w	fp, fp, #1
 801d89e:	9a06      	ldr	r2, [sp, #24]
 801d8a0:	e7bb      	b.n	801d81a <_printf_float+0x2fe>
 801d8a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d8a6:	4631      	mov	r1, r6
 801d8a8:	4628      	mov	r0, r5
 801d8aa:	47b8      	blx	r7
 801d8ac:	3001      	adds	r0, #1
 801d8ae:	d1c0      	bne.n	801d832 <_printf_float+0x316>
 801d8b0:	e68f      	b.n	801d5d2 <_printf_float+0xb6>
 801d8b2:	9a06      	ldr	r2, [sp, #24]
 801d8b4:	464b      	mov	r3, r9
 801d8b6:	4631      	mov	r1, r6
 801d8b8:	4628      	mov	r0, r5
 801d8ba:	4442      	add	r2, r8
 801d8bc:	47b8      	blx	r7
 801d8be:	3001      	adds	r0, #1
 801d8c0:	d1c3      	bne.n	801d84a <_printf_float+0x32e>
 801d8c2:	e686      	b.n	801d5d2 <_printf_float+0xb6>
 801d8c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d8c8:	f1ba 0f01 	cmp.w	sl, #1
 801d8cc:	dc01      	bgt.n	801d8d2 <_printf_float+0x3b6>
 801d8ce:	07db      	lsls	r3, r3, #31
 801d8d0:	d536      	bpl.n	801d940 <_printf_float+0x424>
 801d8d2:	2301      	movs	r3, #1
 801d8d4:	4642      	mov	r2, r8
 801d8d6:	4631      	mov	r1, r6
 801d8d8:	4628      	mov	r0, r5
 801d8da:	47b8      	blx	r7
 801d8dc:	3001      	adds	r0, #1
 801d8de:	f43f ae78 	beq.w	801d5d2 <_printf_float+0xb6>
 801d8e2:	4631      	mov	r1, r6
 801d8e4:	4628      	mov	r0, r5
 801d8e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d8ea:	47b8      	blx	r7
 801d8ec:	3001      	adds	r0, #1
 801d8ee:	f43f ae70 	beq.w	801d5d2 <_printf_float+0xb6>
 801d8f2:	2200      	movs	r2, #0
 801d8f4:	2300      	movs	r3, #0
 801d8f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d8fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d8fe:	f7e3 f8f1 	bl	8000ae4 <__aeabi_dcmpeq>
 801d902:	b9c0      	cbnz	r0, 801d936 <_printf_float+0x41a>
 801d904:	4653      	mov	r3, sl
 801d906:	f108 0201 	add.w	r2, r8, #1
 801d90a:	4631      	mov	r1, r6
 801d90c:	4628      	mov	r0, r5
 801d90e:	47b8      	blx	r7
 801d910:	3001      	adds	r0, #1
 801d912:	d10c      	bne.n	801d92e <_printf_float+0x412>
 801d914:	e65d      	b.n	801d5d2 <_printf_float+0xb6>
 801d916:	2301      	movs	r3, #1
 801d918:	465a      	mov	r2, fp
 801d91a:	4631      	mov	r1, r6
 801d91c:	4628      	mov	r0, r5
 801d91e:	47b8      	blx	r7
 801d920:	3001      	adds	r0, #1
 801d922:	f43f ae56 	beq.w	801d5d2 <_printf_float+0xb6>
 801d926:	f108 0801 	add.w	r8, r8, #1
 801d92a:	45d0      	cmp	r8, sl
 801d92c:	dbf3      	blt.n	801d916 <_printf_float+0x3fa>
 801d92e:	464b      	mov	r3, r9
 801d930:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801d934:	e6df      	b.n	801d6f6 <_printf_float+0x1da>
 801d936:	f04f 0800 	mov.w	r8, #0
 801d93a:	f104 0b1a 	add.w	fp, r4, #26
 801d93e:	e7f4      	b.n	801d92a <_printf_float+0x40e>
 801d940:	2301      	movs	r3, #1
 801d942:	4642      	mov	r2, r8
 801d944:	e7e1      	b.n	801d90a <_printf_float+0x3ee>
 801d946:	2301      	movs	r3, #1
 801d948:	464a      	mov	r2, r9
 801d94a:	4631      	mov	r1, r6
 801d94c:	4628      	mov	r0, r5
 801d94e:	47b8      	blx	r7
 801d950:	3001      	adds	r0, #1
 801d952:	f43f ae3e 	beq.w	801d5d2 <_printf_float+0xb6>
 801d956:	f108 0801 	add.w	r8, r8, #1
 801d95a:	68e3      	ldr	r3, [r4, #12]
 801d95c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d95e:	1a5b      	subs	r3, r3, r1
 801d960:	4543      	cmp	r3, r8
 801d962:	dcf0      	bgt.n	801d946 <_printf_float+0x42a>
 801d964:	e6fc      	b.n	801d760 <_printf_float+0x244>
 801d966:	f04f 0800 	mov.w	r8, #0
 801d96a:	f104 0919 	add.w	r9, r4, #25
 801d96e:	e7f4      	b.n	801d95a <_printf_float+0x43e>

0801d970 <_printf_common>:
 801d970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d974:	4616      	mov	r6, r2
 801d976:	4698      	mov	r8, r3
 801d978:	688a      	ldr	r2, [r1, #8]
 801d97a:	4607      	mov	r7, r0
 801d97c:	690b      	ldr	r3, [r1, #16]
 801d97e:	460c      	mov	r4, r1
 801d980:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d984:	4293      	cmp	r3, r2
 801d986:	bfb8      	it	lt
 801d988:	4613      	movlt	r3, r2
 801d98a:	6033      	str	r3, [r6, #0]
 801d98c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d990:	b10a      	cbz	r2, 801d996 <_printf_common+0x26>
 801d992:	3301      	adds	r3, #1
 801d994:	6033      	str	r3, [r6, #0]
 801d996:	6823      	ldr	r3, [r4, #0]
 801d998:	0699      	lsls	r1, r3, #26
 801d99a:	bf42      	ittt	mi
 801d99c:	6833      	ldrmi	r3, [r6, #0]
 801d99e:	3302      	addmi	r3, #2
 801d9a0:	6033      	strmi	r3, [r6, #0]
 801d9a2:	6825      	ldr	r5, [r4, #0]
 801d9a4:	f015 0506 	ands.w	r5, r5, #6
 801d9a8:	d106      	bne.n	801d9b8 <_printf_common+0x48>
 801d9aa:	f104 0a19 	add.w	sl, r4, #25
 801d9ae:	68e3      	ldr	r3, [r4, #12]
 801d9b0:	6832      	ldr	r2, [r6, #0]
 801d9b2:	1a9b      	subs	r3, r3, r2
 801d9b4:	42ab      	cmp	r3, r5
 801d9b6:	dc2b      	bgt.n	801da10 <_printf_common+0xa0>
 801d9b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d9bc:	6822      	ldr	r2, [r4, #0]
 801d9be:	3b00      	subs	r3, #0
 801d9c0:	bf18      	it	ne
 801d9c2:	2301      	movne	r3, #1
 801d9c4:	0692      	lsls	r2, r2, #26
 801d9c6:	d430      	bmi.n	801da2a <_printf_common+0xba>
 801d9c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d9cc:	4641      	mov	r1, r8
 801d9ce:	4638      	mov	r0, r7
 801d9d0:	47c8      	blx	r9
 801d9d2:	3001      	adds	r0, #1
 801d9d4:	d023      	beq.n	801da1e <_printf_common+0xae>
 801d9d6:	6823      	ldr	r3, [r4, #0]
 801d9d8:	341a      	adds	r4, #26
 801d9da:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801d9de:	f003 0306 	and.w	r3, r3, #6
 801d9e2:	2b04      	cmp	r3, #4
 801d9e4:	bf0a      	itet	eq
 801d9e6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801d9ea:	2500      	movne	r5, #0
 801d9ec:	6833      	ldreq	r3, [r6, #0]
 801d9ee:	f04f 0600 	mov.w	r6, #0
 801d9f2:	bf08      	it	eq
 801d9f4:	1aed      	subeq	r5, r5, r3
 801d9f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801d9fa:	bf08      	it	eq
 801d9fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801da00:	4293      	cmp	r3, r2
 801da02:	bfc4      	itt	gt
 801da04:	1a9b      	subgt	r3, r3, r2
 801da06:	18ed      	addgt	r5, r5, r3
 801da08:	42b5      	cmp	r5, r6
 801da0a:	d11a      	bne.n	801da42 <_printf_common+0xd2>
 801da0c:	2000      	movs	r0, #0
 801da0e:	e008      	b.n	801da22 <_printf_common+0xb2>
 801da10:	2301      	movs	r3, #1
 801da12:	4652      	mov	r2, sl
 801da14:	4641      	mov	r1, r8
 801da16:	4638      	mov	r0, r7
 801da18:	47c8      	blx	r9
 801da1a:	3001      	adds	r0, #1
 801da1c:	d103      	bne.n	801da26 <_printf_common+0xb6>
 801da1e:	f04f 30ff 	mov.w	r0, #4294967295
 801da22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da26:	3501      	adds	r5, #1
 801da28:	e7c1      	b.n	801d9ae <_printf_common+0x3e>
 801da2a:	18e1      	adds	r1, r4, r3
 801da2c:	1c5a      	adds	r2, r3, #1
 801da2e:	2030      	movs	r0, #48	@ 0x30
 801da30:	3302      	adds	r3, #2
 801da32:	4422      	add	r2, r4
 801da34:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801da38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801da3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801da40:	e7c2      	b.n	801d9c8 <_printf_common+0x58>
 801da42:	2301      	movs	r3, #1
 801da44:	4622      	mov	r2, r4
 801da46:	4641      	mov	r1, r8
 801da48:	4638      	mov	r0, r7
 801da4a:	47c8      	blx	r9
 801da4c:	3001      	adds	r0, #1
 801da4e:	d0e6      	beq.n	801da1e <_printf_common+0xae>
 801da50:	3601      	adds	r6, #1
 801da52:	e7d9      	b.n	801da08 <_printf_common+0x98>

0801da54 <_printf_i>:
 801da54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801da58:	7e0f      	ldrb	r7, [r1, #24]
 801da5a:	4691      	mov	r9, r2
 801da5c:	4680      	mov	r8, r0
 801da5e:	460c      	mov	r4, r1
 801da60:	2f78      	cmp	r7, #120	@ 0x78
 801da62:	469a      	mov	sl, r3
 801da64:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801da66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801da6a:	d807      	bhi.n	801da7c <_printf_i+0x28>
 801da6c:	2f62      	cmp	r7, #98	@ 0x62
 801da6e:	d80a      	bhi.n	801da86 <_printf_i+0x32>
 801da70:	2f00      	cmp	r7, #0
 801da72:	f000 80d2 	beq.w	801dc1a <_printf_i+0x1c6>
 801da76:	2f58      	cmp	r7, #88	@ 0x58
 801da78:	f000 80b9 	beq.w	801dbee <_printf_i+0x19a>
 801da7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801da80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801da84:	e03a      	b.n	801dafc <_printf_i+0xa8>
 801da86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801da8a:	2b15      	cmp	r3, #21
 801da8c:	d8f6      	bhi.n	801da7c <_printf_i+0x28>
 801da8e:	a101      	add	r1, pc, #4	@ (adr r1, 801da94 <_printf_i+0x40>)
 801da90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801da94:	0801daed 	.word	0x0801daed
 801da98:	0801db01 	.word	0x0801db01
 801da9c:	0801da7d 	.word	0x0801da7d
 801daa0:	0801da7d 	.word	0x0801da7d
 801daa4:	0801da7d 	.word	0x0801da7d
 801daa8:	0801da7d 	.word	0x0801da7d
 801daac:	0801db01 	.word	0x0801db01
 801dab0:	0801da7d 	.word	0x0801da7d
 801dab4:	0801da7d 	.word	0x0801da7d
 801dab8:	0801da7d 	.word	0x0801da7d
 801dabc:	0801da7d 	.word	0x0801da7d
 801dac0:	0801dc01 	.word	0x0801dc01
 801dac4:	0801db2b 	.word	0x0801db2b
 801dac8:	0801dbbb 	.word	0x0801dbbb
 801dacc:	0801da7d 	.word	0x0801da7d
 801dad0:	0801da7d 	.word	0x0801da7d
 801dad4:	0801dc23 	.word	0x0801dc23
 801dad8:	0801da7d 	.word	0x0801da7d
 801dadc:	0801db2b 	.word	0x0801db2b
 801dae0:	0801da7d 	.word	0x0801da7d
 801dae4:	0801da7d 	.word	0x0801da7d
 801dae8:	0801dbc3 	.word	0x0801dbc3
 801daec:	6833      	ldr	r3, [r6, #0]
 801daee:	1d1a      	adds	r2, r3, #4
 801daf0:	681b      	ldr	r3, [r3, #0]
 801daf2:	6032      	str	r2, [r6, #0]
 801daf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801daf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801dafc:	2301      	movs	r3, #1
 801dafe:	e09d      	b.n	801dc3c <_printf_i+0x1e8>
 801db00:	6833      	ldr	r3, [r6, #0]
 801db02:	6820      	ldr	r0, [r4, #0]
 801db04:	1d19      	adds	r1, r3, #4
 801db06:	6031      	str	r1, [r6, #0]
 801db08:	0606      	lsls	r6, r0, #24
 801db0a:	d501      	bpl.n	801db10 <_printf_i+0xbc>
 801db0c:	681d      	ldr	r5, [r3, #0]
 801db0e:	e003      	b.n	801db18 <_printf_i+0xc4>
 801db10:	0645      	lsls	r5, r0, #25
 801db12:	d5fb      	bpl.n	801db0c <_printf_i+0xb8>
 801db14:	f9b3 5000 	ldrsh.w	r5, [r3]
 801db18:	2d00      	cmp	r5, #0
 801db1a:	da03      	bge.n	801db24 <_printf_i+0xd0>
 801db1c:	232d      	movs	r3, #45	@ 0x2d
 801db1e:	426d      	negs	r5, r5
 801db20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801db24:	4859      	ldr	r0, [pc, #356]	@ (801dc8c <_printf_i+0x238>)
 801db26:	230a      	movs	r3, #10
 801db28:	e011      	b.n	801db4e <_printf_i+0xfa>
 801db2a:	6821      	ldr	r1, [r4, #0]
 801db2c:	6833      	ldr	r3, [r6, #0]
 801db2e:	0608      	lsls	r0, r1, #24
 801db30:	f853 5b04 	ldr.w	r5, [r3], #4
 801db34:	d402      	bmi.n	801db3c <_printf_i+0xe8>
 801db36:	0649      	lsls	r1, r1, #25
 801db38:	bf48      	it	mi
 801db3a:	b2ad      	uxthmi	r5, r5
 801db3c:	2f6f      	cmp	r7, #111	@ 0x6f
 801db3e:	6033      	str	r3, [r6, #0]
 801db40:	4852      	ldr	r0, [pc, #328]	@ (801dc8c <_printf_i+0x238>)
 801db42:	bf14      	ite	ne
 801db44:	230a      	movne	r3, #10
 801db46:	2308      	moveq	r3, #8
 801db48:	2100      	movs	r1, #0
 801db4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801db4e:	6866      	ldr	r6, [r4, #4]
 801db50:	2e00      	cmp	r6, #0
 801db52:	60a6      	str	r6, [r4, #8]
 801db54:	bfa2      	ittt	ge
 801db56:	6821      	ldrge	r1, [r4, #0]
 801db58:	f021 0104 	bicge.w	r1, r1, #4
 801db5c:	6021      	strge	r1, [r4, #0]
 801db5e:	b90d      	cbnz	r5, 801db64 <_printf_i+0x110>
 801db60:	2e00      	cmp	r6, #0
 801db62:	d04b      	beq.n	801dbfc <_printf_i+0x1a8>
 801db64:	4616      	mov	r6, r2
 801db66:	fbb5 f1f3 	udiv	r1, r5, r3
 801db6a:	fb03 5711 	mls	r7, r3, r1, r5
 801db6e:	5dc7      	ldrb	r7, [r0, r7]
 801db70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801db74:	462f      	mov	r7, r5
 801db76:	460d      	mov	r5, r1
 801db78:	42bb      	cmp	r3, r7
 801db7a:	d9f4      	bls.n	801db66 <_printf_i+0x112>
 801db7c:	2b08      	cmp	r3, #8
 801db7e:	d10b      	bne.n	801db98 <_printf_i+0x144>
 801db80:	6823      	ldr	r3, [r4, #0]
 801db82:	07df      	lsls	r7, r3, #31
 801db84:	d508      	bpl.n	801db98 <_printf_i+0x144>
 801db86:	6923      	ldr	r3, [r4, #16]
 801db88:	6861      	ldr	r1, [r4, #4]
 801db8a:	4299      	cmp	r1, r3
 801db8c:	bfde      	ittt	le
 801db8e:	2330      	movle	r3, #48	@ 0x30
 801db90:	f806 3c01 	strble.w	r3, [r6, #-1]
 801db94:	f106 36ff 	addle.w	r6, r6, #4294967295
 801db98:	1b92      	subs	r2, r2, r6
 801db9a:	6122      	str	r2, [r4, #16]
 801db9c:	464b      	mov	r3, r9
 801db9e:	aa03      	add	r2, sp, #12
 801dba0:	4621      	mov	r1, r4
 801dba2:	4640      	mov	r0, r8
 801dba4:	f8cd a000 	str.w	sl, [sp]
 801dba8:	f7ff fee2 	bl	801d970 <_printf_common>
 801dbac:	3001      	adds	r0, #1
 801dbae:	d14a      	bne.n	801dc46 <_printf_i+0x1f2>
 801dbb0:	f04f 30ff 	mov.w	r0, #4294967295
 801dbb4:	b004      	add	sp, #16
 801dbb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dbba:	6823      	ldr	r3, [r4, #0]
 801dbbc:	f043 0320 	orr.w	r3, r3, #32
 801dbc0:	6023      	str	r3, [r4, #0]
 801dbc2:	2778      	movs	r7, #120	@ 0x78
 801dbc4:	4832      	ldr	r0, [pc, #200]	@ (801dc90 <_printf_i+0x23c>)
 801dbc6:	6823      	ldr	r3, [r4, #0]
 801dbc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801dbcc:	061f      	lsls	r7, r3, #24
 801dbce:	6831      	ldr	r1, [r6, #0]
 801dbd0:	f851 5b04 	ldr.w	r5, [r1], #4
 801dbd4:	d402      	bmi.n	801dbdc <_printf_i+0x188>
 801dbd6:	065f      	lsls	r7, r3, #25
 801dbd8:	bf48      	it	mi
 801dbda:	b2ad      	uxthmi	r5, r5
 801dbdc:	6031      	str	r1, [r6, #0]
 801dbde:	07d9      	lsls	r1, r3, #31
 801dbe0:	bf44      	itt	mi
 801dbe2:	f043 0320 	orrmi.w	r3, r3, #32
 801dbe6:	6023      	strmi	r3, [r4, #0]
 801dbe8:	b11d      	cbz	r5, 801dbf2 <_printf_i+0x19e>
 801dbea:	2310      	movs	r3, #16
 801dbec:	e7ac      	b.n	801db48 <_printf_i+0xf4>
 801dbee:	4827      	ldr	r0, [pc, #156]	@ (801dc8c <_printf_i+0x238>)
 801dbf0:	e7e9      	b.n	801dbc6 <_printf_i+0x172>
 801dbf2:	6823      	ldr	r3, [r4, #0]
 801dbf4:	f023 0320 	bic.w	r3, r3, #32
 801dbf8:	6023      	str	r3, [r4, #0]
 801dbfa:	e7f6      	b.n	801dbea <_printf_i+0x196>
 801dbfc:	4616      	mov	r6, r2
 801dbfe:	e7bd      	b.n	801db7c <_printf_i+0x128>
 801dc00:	6833      	ldr	r3, [r6, #0]
 801dc02:	6825      	ldr	r5, [r4, #0]
 801dc04:	1d18      	adds	r0, r3, #4
 801dc06:	6961      	ldr	r1, [r4, #20]
 801dc08:	6030      	str	r0, [r6, #0]
 801dc0a:	062e      	lsls	r6, r5, #24
 801dc0c:	681b      	ldr	r3, [r3, #0]
 801dc0e:	d501      	bpl.n	801dc14 <_printf_i+0x1c0>
 801dc10:	6019      	str	r1, [r3, #0]
 801dc12:	e002      	b.n	801dc1a <_printf_i+0x1c6>
 801dc14:	0668      	lsls	r0, r5, #25
 801dc16:	d5fb      	bpl.n	801dc10 <_printf_i+0x1bc>
 801dc18:	8019      	strh	r1, [r3, #0]
 801dc1a:	2300      	movs	r3, #0
 801dc1c:	4616      	mov	r6, r2
 801dc1e:	6123      	str	r3, [r4, #16]
 801dc20:	e7bc      	b.n	801db9c <_printf_i+0x148>
 801dc22:	6833      	ldr	r3, [r6, #0]
 801dc24:	2100      	movs	r1, #0
 801dc26:	1d1a      	adds	r2, r3, #4
 801dc28:	6032      	str	r2, [r6, #0]
 801dc2a:	681e      	ldr	r6, [r3, #0]
 801dc2c:	6862      	ldr	r2, [r4, #4]
 801dc2e:	4630      	mov	r0, r6
 801dc30:	f000 fe41 	bl	801e8b6 <memchr>
 801dc34:	b108      	cbz	r0, 801dc3a <_printf_i+0x1e6>
 801dc36:	1b80      	subs	r0, r0, r6
 801dc38:	6060      	str	r0, [r4, #4]
 801dc3a:	6863      	ldr	r3, [r4, #4]
 801dc3c:	6123      	str	r3, [r4, #16]
 801dc3e:	2300      	movs	r3, #0
 801dc40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dc44:	e7aa      	b.n	801db9c <_printf_i+0x148>
 801dc46:	6923      	ldr	r3, [r4, #16]
 801dc48:	4632      	mov	r2, r6
 801dc4a:	4649      	mov	r1, r9
 801dc4c:	4640      	mov	r0, r8
 801dc4e:	47d0      	blx	sl
 801dc50:	3001      	adds	r0, #1
 801dc52:	d0ad      	beq.n	801dbb0 <_printf_i+0x15c>
 801dc54:	6823      	ldr	r3, [r4, #0]
 801dc56:	079b      	lsls	r3, r3, #30
 801dc58:	d413      	bmi.n	801dc82 <_printf_i+0x22e>
 801dc5a:	68e0      	ldr	r0, [r4, #12]
 801dc5c:	9b03      	ldr	r3, [sp, #12]
 801dc5e:	4298      	cmp	r0, r3
 801dc60:	bfb8      	it	lt
 801dc62:	4618      	movlt	r0, r3
 801dc64:	e7a6      	b.n	801dbb4 <_printf_i+0x160>
 801dc66:	2301      	movs	r3, #1
 801dc68:	4632      	mov	r2, r6
 801dc6a:	4649      	mov	r1, r9
 801dc6c:	4640      	mov	r0, r8
 801dc6e:	47d0      	blx	sl
 801dc70:	3001      	adds	r0, #1
 801dc72:	d09d      	beq.n	801dbb0 <_printf_i+0x15c>
 801dc74:	3501      	adds	r5, #1
 801dc76:	68e3      	ldr	r3, [r4, #12]
 801dc78:	9903      	ldr	r1, [sp, #12]
 801dc7a:	1a5b      	subs	r3, r3, r1
 801dc7c:	42ab      	cmp	r3, r5
 801dc7e:	dcf2      	bgt.n	801dc66 <_printf_i+0x212>
 801dc80:	e7eb      	b.n	801dc5a <_printf_i+0x206>
 801dc82:	2500      	movs	r5, #0
 801dc84:	f104 0619 	add.w	r6, r4, #25
 801dc88:	e7f5      	b.n	801dc76 <_printf_i+0x222>
 801dc8a:	bf00      	nop
 801dc8c:	080824b3 	.word	0x080824b3
 801dc90:	080824c4 	.word	0x080824c4

0801dc94 <_scanf_float>:
 801dc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc98:	b087      	sub	sp, #28
 801dc9a:	4617      	mov	r7, r2
 801dc9c:	4680      	mov	r8, r0
 801dc9e:	460c      	mov	r4, r1
 801dca0:	9303      	str	r3, [sp, #12]
 801dca2:	688b      	ldr	r3, [r1, #8]
 801dca4:	1e5a      	subs	r2, r3, #1
 801dca6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801dcaa:	460a      	mov	r2, r1
 801dcac:	bf89      	itett	hi
 801dcae:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801dcb2:	f04f 0b00 	movls.w	fp, #0
 801dcb6:	eb03 0b05 	addhi.w	fp, r3, r5
 801dcba:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801dcbe:	f04f 0500 	mov.w	r5, #0
 801dcc2:	bf88      	it	hi
 801dcc4:	608b      	strhi	r3, [r1, #8]
 801dcc6:	680b      	ldr	r3, [r1, #0]
 801dcc8:	46aa      	mov	sl, r5
 801dcca:	46a9      	mov	r9, r5
 801dccc:	9502      	str	r5, [sp, #8]
 801dcce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801dcd2:	f842 3b1c 	str.w	r3, [r2], #28
 801dcd6:	4616      	mov	r6, r2
 801dcd8:	9201      	str	r2, [sp, #4]
 801dcda:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801dcde:	68a2      	ldr	r2, [r4, #8]
 801dce0:	b152      	cbz	r2, 801dcf8 <_scanf_float+0x64>
 801dce2:	683b      	ldr	r3, [r7, #0]
 801dce4:	781b      	ldrb	r3, [r3, #0]
 801dce6:	2b4e      	cmp	r3, #78	@ 0x4e
 801dce8:	d864      	bhi.n	801ddb4 <_scanf_float+0x120>
 801dcea:	2b40      	cmp	r3, #64	@ 0x40
 801dcec:	d83c      	bhi.n	801dd68 <_scanf_float+0xd4>
 801dcee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801dcf2:	b2c8      	uxtb	r0, r1
 801dcf4:	280e      	cmp	r0, #14
 801dcf6:	d93a      	bls.n	801dd6e <_scanf_float+0xda>
 801dcf8:	f1b9 0f00 	cmp.w	r9, #0
 801dcfc:	d003      	beq.n	801dd06 <_scanf_float+0x72>
 801dcfe:	6823      	ldr	r3, [r4, #0]
 801dd00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801dd04:	6023      	str	r3, [r4, #0]
 801dd06:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dd0a:	f1ba 0f01 	cmp.w	sl, #1
 801dd0e:	f200 8117 	bhi.w	801df40 <_scanf_float+0x2ac>
 801dd12:	9b01      	ldr	r3, [sp, #4]
 801dd14:	429e      	cmp	r6, r3
 801dd16:	f200 8108 	bhi.w	801df2a <_scanf_float+0x296>
 801dd1a:	2001      	movs	r0, #1
 801dd1c:	b007      	add	sp, #28
 801dd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd22:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801dd26:	2a0d      	cmp	r2, #13
 801dd28:	d8e6      	bhi.n	801dcf8 <_scanf_float+0x64>
 801dd2a:	a101      	add	r1, pc, #4	@ (adr r1, 801dd30 <_scanf_float+0x9c>)
 801dd2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801dd30:	0801de77 	.word	0x0801de77
 801dd34:	0801dcf9 	.word	0x0801dcf9
 801dd38:	0801dcf9 	.word	0x0801dcf9
 801dd3c:	0801dcf9 	.word	0x0801dcf9
 801dd40:	0801ded7 	.word	0x0801ded7
 801dd44:	0801deaf 	.word	0x0801deaf
 801dd48:	0801dcf9 	.word	0x0801dcf9
 801dd4c:	0801dcf9 	.word	0x0801dcf9
 801dd50:	0801de85 	.word	0x0801de85
 801dd54:	0801dcf9 	.word	0x0801dcf9
 801dd58:	0801dcf9 	.word	0x0801dcf9
 801dd5c:	0801dcf9 	.word	0x0801dcf9
 801dd60:	0801dcf9 	.word	0x0801dcf9
 801dd64:	0801de3d 	.word	0x0801de3d
 801dd68:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801dd6c:	e7db      	b.n	801dd26 <_scanf_float+0x92>
 801dd6e:	290e      	cmp	r1, #14
 801dd70:	d8c2      	bhi.n	801dcf8 <_scanf_float+0x64>
 801dd72:	a001      	add	r0, pc, #4	@ (adr r0, 801dd78 <_scanf_float+0xe4>)
 801dd74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801dd78:	0801de2d 	.word	0x0801de2d
 801dd7c:	0801dcf9 	.word	0x0801dcf9
 801dd80:	0801de2d 	.word	0x0801de2d
 801dd84:	0801dec3 	.word	0x0801dec3
 801dd88:	0801dcf9 	.word	0x0801dcf9
 801dd8c:	0801ddd5 	.word	0x0801ddd5
 801dd90:	0801de13 	.word	0x0801de13
 801dd94:	0801de13 	.word	0x0801de13
 801dd98:	0801de13 	.word	0x0801de13
 801dd9c:	0801de13 	.word	0x0801de13
 801dda0:	0801de13 	.word	0x0801de13
 801dda4:	0801de13 	.word	0x0801de13
 801dda8:	0801de13 	.word	0x0801de13
 801ddac:	0801de13 	.word	0x0801de13
 801ddb0:	0801de13 	.word	0x0801de13
 801ddb4:	2b6e      	cmp	r3, #110	@ 0x6e
 801ddb6:	d809      	bhi.n	801ddcc <_scanf_float+0x138>
 801ddb8:	2b60      	cmp	r3, #96	@ 0x60
 801ddba:	d8b2      	bhi.n	801dd22 <_scanf_float+0x8e>
 801ddbc:	2b54      	cmp	r3, #84	@ 0x54
 801ddbe:	d07b      	beq.n	801deb8 <_scanf_float+0x224>
 801ddc0:	2b59      	cmp	r3, #89	@ 0x59
 801ddc2:	d199      	bne.n	801dcf8 <_scanf_float+0x64>
 801ddc4:	2d07      	cmp	r5, #7
 801ddc6:	d197      	bne.n	801dcf8 <_scanf_float+0x64>
 801ddc8:	2508      	movs	r5, #8
 801ddca:	e02c      	b.n	801de26 <_scanf_float+0x192>
 801ddcc:	2b74      	cmp	r3, #116	@ 0x74
 801ddce:	d073      	beq.n	801deb8 <_scanf_float+0x224>
 801ddd0:	2b79      	cmp	r3, #121	@ 0x79
 801ddd2:	e7f6      	b.n	801ddc2 <_scanf_float+0x12e>
 801ddd4:	6821      	ldr	r1, [r4, #0]
 801ddd6:	05c8      	lsls	r0, r1, #23
 801ddd8:	d51b      	bpl.n	801de12 <_scanf_float+0x17e>
 801ddda:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801ddde:	f109 0901 	add.w	r9, r9, #1
 801dde2:	6021      	str	r1, [r4, #0]
 801dde4:	f1bb 0f00 	cmp.w	fp, #0
 801dde8:	d003      	beq.n	801ddf2 <_scanf_float+0x15e>
 801ddea:	3201      	adds	r2, #1
 801ddec:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ddf0:	60a2      	str	r2, [r4, #8]
 801ddf2:	68a3      	ldr	r3, [r4, #8]
 801ddf4:	3b01      	subs	r3, #1
 801ddf6:	60a3      	str	r3, [r4, #8]
 801ddf8:	6923      	ldr	r3, [r4, #16]
 801ddfa:	3301      	adds	r3, #1
 801ddfc:	6123      	str	r3, [r4, #16]
 801ddfe:	687b      	ldr	r3, [r7, #4]
 801de00:	3b01      	subs	r3, #1
 801de02:	2b00      	cmp	r3, #0
 801de04:	607b      	str	r3, [r7, #4]
 801de06:	f340 8087 	ble.w	801df18 <_scanf_float+0x284>
 801de0a:	683b      	ldr	r3, [r7, #0]
 801de0c:	3301      	adds	r3, #1
 801de0e:	603b      	str	r3, [r7, #0]
 801de10:	e765      	b.n	801dcde <_scanf_float+0x4a>
 801de12:	eb1a 0105 	adds.w	r1, sl, r5
 801de16:	f47f af6f 	bne.w	801dcf8 <_scanf_float+0x64>
 801de1a:	6822      	ldr	r2, [r4, #0]
 801de1c:	460d      	mov	r5, r1
 801de1e:	468a      	mov	sl, r1
 801de20:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801de24:	6022      	str	r2, [r4, #0]
 801de26:	f806 3b01 	strb.w	r3, [r6], #1
 801de2a:	e7e2      	b.n	801ddf2 <_scanf_float+0x15e>
 801de2c:	6822      	ldr	r2, [r4, #0]
 801de2e:	0610      	lsls	r0, r2, #24
 801de30:	f57f af62 	bpl.w	801dcf8 <_scanf_float+0x64>
 801de34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801de38:	6022      	str	r2, [r4, #0]
 801de3a:	e7f4      	b.n	801de26 <_scanf_float+0x192>
 801de3c:	f1ba 0f00 	cmp.w	sl, #0
 801de40:	d10e      	bne.n	801de60 <_scanf_float+0x1cc>
 801de42:	f1b9 0f00 	cmp.w	r9, #0
 801de46:	d10e      	bne.n	801de66 <_scanf_float+0x1d2>
 801de48:	6822      	ldr	r2, [r4, #0]
 801de4a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801de4e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801de52:	d108      	bne.n	801de66 <_scanf_float+0x1d2>
 801de54:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801de58:	f04f 0a01 	mov.w	sl, #1
 801de5c:	6022      	str	r2, [r4, #0]
 801de5e:	e7e2      	b.n	801de26 <_scanf_float+0x192>
 801de60:	f1ba 0f02 	cmp.w	sl, #2
 801de64:	d055      	beq.n	801df12 <_scanf_float+0x27e>
 801de66:	2d01      	cmp	r5, #1
 801de68:	d002      	beq.n	801de70 <_scanf_float+0x1dc>
 801de6a:	2d04      	cmp	r5, #4
 801de6c:	f47f af44 	bne.w	801dcf8 <_scanf_float+0x64>
 801de70:	3501      	adds	r5, #1
 801de72:	b2ed      	uxtb	r5, r5
 801de74:	e7d7      	b.n	801de26 <_scanf_float+0x192>
 801de76:	f1ba 0f01 	cmp.w	sl, #1
 801de7a:	f47f af3d 	bne.w	801dcf8 <_scanf_float+0x64>
 801de7e:	f04f 0a02 	mov.w	sl, #2
 801de82:	e7d0      	b.n	801de26 <_scanf_float+0x192>
 801de84:	b97d      	cbnz	r5, 801dea6 <_scanf_float+0x212>
 801de86:	f1b9 0f00 	cmp.w	r9, #0
 801de8a:	f47f af38 	bne.w	801dcfe <_scanf_float+0x6a>
 801de8e:	6822      	ldr	r2, [r4, #0]
 801de90:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801de94:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801de98:	f040 8107 	bne.w	801e0aa <_scanf_float+0x416>
 801de9c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801dea0:	2501      	movs	r5, #1
 801dea2:	6022      	str	r2, [r4, #0]
 801dea4:	e7bf      	b.n	801de26 <_scanf_float+0x192>
 801dea6:	2d03      	cmp	r5, #3
 801dea8:	d0e2      	beq.n	801de70 <_scanf_float+0x1dc>
 801deaa:	2d05      	cmp	r5, #5
 801deac:	e7de      	b.n	801de6c <_scanf_float+0x1d8>
 801deae:	2d02      	cmp	r5, #2
 801deb0:	f47f af22 	bne.w	801dcf8 <_scanf_float+0x64>
 801deb4:	2503      	movs	r5, #3
 801deb6:	e7b6      	b.n	801de26 <_scanf_float+0x192>
 801deb8:	2d06      	cmp	r5, #6
 801deba:	f47f af1d 	bne.w	801dcf8 <_scanf_float+0x64>
 801debe:	2507      	movs	r5, #7
 801dec0:	e7b1      	b.n	801de26 <_scanf_float+0x192>
 801dec2:	6822      	ldr	r2, [r4, #0]
 801dec4:	0591      	lsls	r1, r2, #22
 801dec6:	f57f af17 	bpl.w	801dcf8 <_scanf_float+0x64>
 801deca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801dece:	f8cd 9008 	str.w	r9, [sp, #8]
 801ded2:	6022      	str	r2, [r4, #0]
 801ded4:	e7a7      	b.n	801de26 <_scanf_float+0x192>
 801ded6:	6822      	ldr	r2, [r4, #0]
 801ded8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801dedc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801dee0:	d006      	beq.n	801def0 <_scanf_float+0x25c>
 801dee2:	0550      	lsls	r0, r2, #21
 801dee4:	f57f af08 	bpl.w	801dcf8 <_scanf_float+0x64>
 801dee8:	f1b9 0f00 	cmp.w	r9, #0
 801deec:	f000 80dd 	beq.w	801e0aa <_scanf_float+0x416>
 801def0:	0591      	lsls	r1, r2, #22
 801def2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801def6:	bf58      	it	pl
 801def8:	9902      	ldrpl	r1, [sp, #8]
 801defa:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801defe:	bf58      	it	pl
 801df00:	eba9 0101 	subpl.w	r1, r9, r1
 801df04:	6022      	str	r2, [r4, #0]
 801df06:	f04f 0900 	mov.w	r9, #0
 801df0a:	bf58      	it	pl
 801df0c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801df10:	e789      	b.n	801de26 <_scanf_float+0x192>
 801df12:	f04f 0a03 	mov.w	sl, #3
 801df16:	e786      	b.n	801de26 <_scanf_float+0x192>
 801df18:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801df1c:	4639      	mov	r1, r7
 801df1e:	4640      	mov	r0, r8
 801df20:	4798      	blx	r3
 801df22:	2800      	cmp	r0, #0
 801df24:	f43f aedb 	beq.w	801dcde <_scanf_float+0x4a>
 801df28:	e6e6      	b.n	801dcf8 <_scanf_float+0x64>
 801df2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801df2e:	463a      	mov	r2, r7
 801df30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801df34:	4640      	mov	r0, r8
 801df36:	4798      	blx	r3
 801df38:	6923      	ldr	r3, [r4, #16]
 801df3a:	3b01      	subs	r3, #1
 801df3c:	6123      	str	r3, [r4, #16]
 801df3e:	e6e8      	b.n	801dd12 <_scanf_float+0x7e>
 801df40:	1e6b      	subs	r3, r5, #1
 801df42:	2b06      	cmp	r3, #6
 801df44:	d824      	bhi.n	801df90 <_scanf_float+0x2fc>
 801df46:	2d02      	cmp	r5, #2
 801df48:	d836      	bhi.n	801dfb8 <_scanf_float+0x324>
 801df4a:	9b01      	ldr	r3, [sp, #4]
 801df4c:	429e      	cmp	r6, r3
 801df4e:	f67f aee4 	bls.w	801dd1a <_scanf_float+0x86>
 801df52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801df56:	463a      	mov	r2, r7
 801df58:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801df5c:	4640      	mov	r0, r8
 801df5e:	4798      	blx	r3
 801df60:	6923      	ldr	r3, [r4, #16]
 801df62:	3b01      	subs	r3, #1
 801df64:	6123      	str	r3, [r4, #16]
 801df66:	e7f0      	b.n	801df4a <_scanf_float+0x2b6>
 801df68:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801df6c:	463a      	mov	r2, r7
 801df6e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801df72:	4640      	mov	r0, r8
 801df74:	4798      	blx	r3
 801df76:	6923      	ldr	r3, [r4, #16]
 801df78:	3b01      	subs	r3, #1
 801df7a:	6123      	str	r3, [r4, #16]
 801df7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801df80:	fa5f fa8a 	uxtb.w	sl, sl
 801df84:	f1ba 0f02 	cmp.w	sl, #2
 801df88:	d1ee      	bne.n	801df68 <_scanf_float+0x2d4>
 801df8a:	3d03      	subs	r5, #3
 801df8c:	b2ed      	uxtb	r5, r5
 801df8e:	1b76      	subs	r6, r6, r5
 801df90:	6823      	ldr	r3, [r4, #0]
 801df92:	05da      	lsls	r2, r3, #23
 801df94:	d52f      	bpl.n	801dff6 <_scanf_float+0x362>
 801df96:	055b      	lsls	r3, r3, #21
 801df98:	d511      	bpl.n	801dfbe <_scanf_float+0x32a>
 801df9a:	9b01      	ldr	r3, [sp, #4]
 801df9c:	429e      	cmp	r6, r3
 801df9e:	f67f aebc 	bls.w	801dd1a <_scanf_float+0x86>
 801dfa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801dfa6:	463a      	mov	r2, r7
 801dfa8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801dfac:	4640      	mov	r0, r8
 801dfae:	4798      	blx	r3
 801dfb0:	6923      	ldr	r3, [r4, #16]
 801dfb2:	3b01      	subs	r3, #1
 801dfb4:	6123      	str	r3, [r4, #16]
 801dfb6:	e7f0      	b.n	801df9a <_scanf_float+0x306>
 801dfb8:	46aa      	mov	sl, r5
 801dfba:	46b3      	mov	fp, r6
 801dfbc:	e7de      	b.n	801df7c <_scanf_float+0x2e8>
 801dfbe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801dfc2:	1e75      	subs	r5, r6, #1
 801dfc4:	6923      	ldr	r3, [r4, #16]
 801dfc6:	2965      	cmp	r1, #101	@ 0x65
 801dfc8:	f103 33ff 	add.w	r3, r3, #4294967295
 801dfcc:	6123      	str	r3, [r4, #16]
 801dfce:	d00c      	beq.n	801dfea <_scanf_float+0x356>
 801dfd0:	2945      	cmp	r1, #69	@ 0x45
 801dfd2:	d00a      	beq.n	801dfea <_scanf_float+0x356>
 801dfd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801dfd8:	463a      	mov	r2, r7
 801dfda:	4640      	mov	r0, r8
 801dfdc:	1eb5      	subs	r5, r6, #2
 801dfde:	4798      	blx	r3
 801dfe0:	6923      	ldr	r3, [r4, #16]
 801dfe2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801dfe6:	3b01      	subs	r3, #1
 801dfe8:	6123      	str	r3, [r4, #16]
 801dfea:	462e      	mov	r6, r5
 801dfec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801dff0:	463a      	mov	r2, r7
 801dff2:	4640      	mov	r0, r8
 801dff4:	4798      	blx	r3
 801dff6:	6822      	ldr	r2, [r4, #0]
 801dff8:	f012 0210 	ands.w	r2, r2, #16
 801dffc:	d001      	beq.n	801e002 <_scanf_float+0x36e>
 801dffe:	2000      	movs	r0, #0
 801e000:	e68c      	b.n	801dd1c <_scanf_float+0x88>
 801e002:	7032      	strb	r2, [r6, #0]
 801e004:	6823      	ldr	r3, [r4, #0]
 801e006:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801e00a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e00e:	d11c      	bne.n	801e04a <_scanf_float+0x3b6>
 801e010:	9b02      	ldr	r3, [sp, #8]
 801e012:	454b      	cmp	r3, r9
 801e014:	eba3 0209 	sub.w	r2, r3, r9
 801e018:	d123      	bne.n	801e062 <_scanf_float+0x3ce>
 801e01a:	2200      	movs	r2, #0
 801e01c:	9901      	ldr	r1, [sp, #4]
 801e01e:	4640      	mov	r0, r8
 801e020:	f7ff f946 	bl	801d2b0 <_strtod_r>
 801e024:	6821      	ldr	r1, [r4, #0]
 801e026:	9b03      	ldr	r3, [sp, #12]
 801e028:	f011 0f02 	tst.w	r1, #2
 801e02c:	681b      	ldr	r3, [r3, #0]
 801e02e:	ec57 6b10 	vmov	r6, r7, d0
 801e032:	f103 0204 	add.w	r2, r3, #4
 801e036:	d01f      	beq.n	801e078 <_scanf_float+0x3e4>
 801e038:	9903      	ldr	r1, [sp, #12]
 801e03a:	600a      	str	r2, [r1, #0]
 801e03c:	681b      	ldr	r3, [r3, #0]
 801e03e:	e9c3 6700 	strd	r6, r7, [r3]
 801e042:	68e3      	ldr	r3, [r4, #12]
 801e044:	3301      	adds	r3, #1
 801e046:	60e3      	str	r3, [r4, #12]
 801e048:	e7d9      	b.n	801dffe <_scanf_float+0x36a>
 801e04a:	9b04      	ldr	r3, [sp, #16]
 801e04c:	2b00      	cmp	r3, #0
 801e04e:	d0e4      	beq.n	801e01a <_scanf_float+0x386>
 801e050:	9905      	ldr	r1, [sp, #20]
 801e052:	230a      	movs	r3, #10
 801e054:	4640      	mov	r0, r8
 801e056:	3101      	adds	r1, #1
 801e058:	f7ff f9b6 	bl	801d3c8 <_strtol_r>
 801e05c:	9b04      	ldr	r3, [sp, #16]
 801e05e:	9e05      	ldr	r6, [sp, #20]
 801e060:	1ac2      	subs	r2, r0, r3
 801e062:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801e066:	4912      	ldr	r1, [pc, #72]	@ (801e0b0 <_scanf_float+0x41c>)
 801e068:	429e      	cmp	r6, r3
 801e06a:	bf28      	it	cs
 801e06c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801e070:	4630      	mov	r0, r6
 801e072:	f000 f9c3 	bl	801e3fc <siprintf>
 801e076:	e7d0      	b.n	801e01a <_scanf_float+0x386>
 801e078:	f011 0f04 	tst.w	r1, #4
 801e07c:	9903      	ldr	r1, [sp, #12]
 801e07e:	600a      	str	r2, [r1, #0]
 801e080:	d1dc      	bne.n	801e03c <_scanf_float+0x3a8>
 801e082:	681d      	ldr	r5, [r3, #0]
 801e084:	4632      	mov	r2, r6
 801e086:	463b      	mov	r3, r7
 801e088:	4630      	mov	r0, r6
 801e08a:	4639      	mov	r1, r7
 801e08c:	f7e2 fd5c 	bl	8000b48 <__aeabi_dcmpun>
 801e090:	b128      	cbz	r0, 801e09e <_scanf_float+0x40a>
 801e092:	4808      	ldr	r0, [pc, #32]	@ (801e0b4 <_scanf_float+0x420>)
 801e094:	f000 fc34 	bl	801e900 <nanf>
 801e098:	ed85 0a00 	vstr	s0, [r5]
 801e09c:	e7d1      	b.n	801e042 <_scanf_float+0x3ae>
 801e09e:	4630      	mov	r0, r6
 801e0a0:	4639      	mov	r1, r7
 801e0a2:	f7e2 fdaf 	bl	8000c04 <__aeabi_d2f>
 801e0a6:	6028      	str	r0, [r5, #0]
 801e0a8:	e7cb      	b.n	801e042 <_scanf_float+0x3ae>
 801e0aa:	f04f 0900 	mov.w	r9, #0
 801e0ae:	e62a      	b.n	801dd06 <_scanf_float+0x72>
 801e0b0:	080824d5 	.word	0x080824d5
 801e0b4:	0808258e 	.word	0x0808258e

0801e0b8 <__sflush_r>:
 801e0b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0c0:	0716      	lsls	r6, r2, #28
 801e0c2:	4605      	mov	r5, r0
 801e0c4:	460c      	mov	r4, r1
 801e0c6:	d454      	bmi.n	801e172 <__sflush_r+0xba>
 801e0c8:	684b      	ldr	r3, [r1, #4]
 801e0ca:	2b00      	cmp	r3, #0
 801e0cc:	dc02      	bgt.n	801e0d4 <__sflush_r+0x1c>
 801e0ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	dd48      	ble.n	801e166 <__sflush_r+0xae>
 801e0d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e0d6:	2e00      	cmp	r6, #0
 801e0d8:	d045      	beq.n	801e166 <__sflush_r+0xae>
 801e0da:	2300      	movs	r3, #0
 801e0dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e0e0:	682f      	ldr	r7, [r5, #0]
 801e0e2:	6a21      	ldr	r1, [r4, #32]
 801e0e4:	602b      	str	r3, [r5, #0]
 801e0e6:	d030      	beq.n	801e14a <__sflush_r+0x92>
 801e0e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e0ea:	89a3      	ldrh	r3, [r4, #12]
 801e0ec:	0759      	lsls	r1, r3, #29
 801e0ee:	d505      	bpl.n	801e0fc <__sflush_r+0x44>
 801e0f0:	6863      	ldr	r3, [r4, #4]
 801e0f2:	1ad2      	subs	r2, r2, r3
 801e0f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e0f6:	b10b      	cbz	r3, 801e0fc <__sflush_r+0x44>
 801e0f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e0fa:	1ad2      	subs	r2, r2, r3
 801e0fc:	2300      	movs	r3, #0
 801e0fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e100:	6a21      	ldr	r1, [r4, #32]
 801e102:	4628      	mov	r0, r5
 801e104:	47b0      	blx	r6
 801e106:	1c43      	adds	r3, r0, #1
 801e108:	89a3      	ldrh	r3, [r4, #12]
 801e10a:	d106      	bne.n	801e11a <__sflush_r+0x62>
 801e10c:	6829      	ldr	r1, [r5, #0]
 801e10e:	291d      	cmp	r1, #29
 801e110:	d82b      	bhi.n	801e16a <__sflush_r+0xb2>
 801e112:	4a2a      	ldr	r2, [pc, #168]	@ (801e1bc <__sflush_r+0x104>)
 801e114:	410a      	asrs	r2, r1
 801e116:	07d6      	lsls	r6, r2, #31
 801e118:	d427      	bmi.n	801e16a <__sflush_r+0xb2>
 801e11a:	2200      	movs	r2, #0
 801e11c:	04d9      	lsls	r1, r3, #19
 801e11e:	6062      	str	r2, [r4, #4]
 801e120:	6922      	ldr	r2, [r4, #16]
 801e122:	6022      	str	r2, [r4, #0]
 801e124:	d504      	bpl.n	801e130 <__sflush_r+0x78>
 801e126:	1c42      	adds	r2, r0, #1
 801e128:	d101      	bne.n	801e12e <__sflush_r+0x76>
 801e12a:	682b      	ldr	r3, [r5, #0]
 801e12c:	b903      	cbnz	r3, 801e130 <__sflush_r+0x78>
 801e12e:	6560      	str	r0, [r4, #84]	@ 0x54
 801e130:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e132:	602f      	str	r7, [r5, #0]
 801e134:	b1b9      	cbz	r1, 801e166 <__sflush_r+0xae>
 801e136:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e13a:	4299      	cmp	r1, r3
 801e13c:	d002      	beq.n	801e144 <__sflush_r+0x8c>
 801e13e:	4628      	mov	r0, r5
 801e140:	f001 fa56 	bl	801f5f0 <_free_r>
 801e144:	2300      	movs	r3, #0
 801e146:	6363      	str	r3, [r4, #52]	@ 0x34
 801e148:	e00d      	b.n	801e166 <__sflush_r+0xae>
 801e14a:	2301      	movs	r3, #1
 801e14c:	4628      	mov	r0, r5
 801e14e:	47b0      	blx	r6
 801e150:	4602      	mov	r2, r0
 801e152:	1c50      	adds	r0, r2, #1
 801e154:	d1c9      	bne.n	801e0ea <__sflush_r+0x32>
 801e156:	682b      	ldr	r3, [r5, #0]
 801e158:	2b00      	cmp	r3, #0
 801e15a:	d0c6      	beq.n	801e0ea <__sflush_r+0x32>
 801e15c:	2b1d      	cmp	r3, #29
 801e15e:	d001      	beq.n	801e164 <__sflush_r+0xac>
 801e160:	2b16      	cmp	r3, #22
 801e162:	d11d      	bne.n	801e1a0 <__sflush_r+0xe8>
 801e164:	602f      	str	r7, [r5, #0]
 801e166:	2000      	movs	r0, #0
 801e168:	e021      	b.n	801e1ae <__sflush_r+0xf6>
 801e16a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e16e:	b21b      	sxth	r3, r3
 801e170:	e01a      	b.n	801e1a8 <__sflush_r+0xf0>
 801e172:	690f      	ldr	r7, [r1, #16]
 801e174:	2f00      	cmp	r7, #0
 801e176:	d0f6      	beq.n	801e166 <__sflush_r+0xae>
 801e178:	0793      	lsls	r3, r2, #30
 801e17a:	680e      	ldr	r6, [r1, #0]
 801e17c:	600f      	str	r7, [r1, #0]
 801e17e:	bf0c      	ite	eq
 801e180:	694b      	ldreq	r3, [r1, #20]
 801e182:	2300      	movne	r3, #0
 801e184:	eba6 0807 	sub.w	r8, r6, r7
 801e188:	608b      	str	r3, [r1, #8]
 801e18a:	f1b8 0f00 	cmp.w	r8, #0
 801e18e:	ddea      	ble.n	801e166 <__sflush_r+0xae>
 801e190:	4643      	mov	r3, r8
 801e192:	463a      	mov	r2, r7
 801e194:	6a21      	ldr	r1, [r4, #32]
 801e196:	4628      	mov	r0, r5
 801e198:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e19a:	47b0      	blx	r6
 801e19c:	2800      	cmp	r0, #0
 801e19e:	dc08      	bgt.n	801e1b2 <__sflush_r+0xfa>
 801e1a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e1a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e1a8:	f04f 30ff 	mov.w	r0, #4294967295
 801e1ac:	81a3      	strh	r3, [r4, #12]
 801e1ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1b2:	4407      	add	r7, r0
 801e1b4:	eba8 0800 	sub.w	r8, r8, r0
 801e1b8:	e7e7      	b.n	801e18a <__sflush_r+0xd2>
 801e1ba:	bf00      	nop
 801e1bc:	dfbffffe 	.word	0xdfbffffe

0801e1c0 <_fflush_r>:
 801e1c0:	b538      	push	{r3, r4, r5, lr}
 801e1c2:	690b      	ldr	r3, [r1, #16]
 801e1c4:	4605      	mov	r5, r0
 801e1c6:	460c      	mov	r4, r1
 801e1c8:	b913      	cbnz	r3, 801e1d0 <_fflush_r+0x10>
 801e1ca:	2500      	movs	r5, #0
 801e1cc:	4628      	mov	r0, r5
 801e1ce:	bd38      	pop	{r3, r4, r5, pc}
 801e1d0:	b118      	cbz	r0, 801e1da <_fflush_r+0x1a>
 801e1d2:	6a03      	ldr	r3, [r0, #32]
 801e1d4:	b90b      	cbnz	r3, 801e1da <_fflush_r+0x1a>
 801e1d6:	f000 f8a7 	bl	801e328 <__sinit>
 801e1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e1de:	2b00      	cmp	r3, #0
 801e1e0:	d0f3      	beq.n	801e1ca <_fflush_r+0xa>
 801e1e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e1e4:	07d0      	lsls	r0, r2, #31
 801e1e6:	d404      	bmi.n	801e1f2 <_fflush_r+0x32>
 801e1e8:	0599      	lsls	r1, r3, #22
 801e1ea:	d402      	bmi.n	801e1f2 <_fflush_r+0x32>
 801e1ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e1ee:	f000 fb58 	bl	801e8a2 <__retarget_lock_acquire_recursive>
 801e1f2:	4628      	mov	r0, r5
 801e1f4:	4621      	mov	r1, r4
 801e1f6:	f7ff ff5f 	bl	801e0b8 <__sflush_r>
 801e1fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e1fc:	4605      	mov	r5, r0
 801e1fe:	07da      	lsls	r2, r3, #31
 801e200:	d4e4      	bmi.n	801e1cc <_fflush_r+0xc>
 801e202:	89a3      	ldrh	r3, [r4, #12]
 801e204:	059b      	lsls	r3, r3, #22
 801e206:	d4e1      	bmi.n	801e1cc <_fflush_r+0xc>
 801e208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e20a:	f000 fb4b 	bl	801e8a4 <__retarget_lock_release_recursive>
 801e20e:	e7dd      	b.n	801e1cc <_fflush_r+0xc>

0801e210 <std>:
 801e210:	2300      	movs	r3, #0
 801e212:	b510      	push	{r4, lr}
 801e214:	4604      	mov	r4, r0
 801e216:	6083      	str	r3, [r0, #8]
 801e218:	8181      	strh	r1, [r0, #12]
 801e21a:	4619      	mov	r1, r3
 801e21c:	6643      	str	r3, [r0, #100]	@ 0x64
 801e21e:	81c2      	strh	r2, [r0, #14]
 801e220:	2208      	movs	r2, #8
 801e222:	6183      	str	r3, [r0, #24]
 801e224:	e9c0 3300 	strd	r3, r3, [r0]
 801e228:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e22c:	305c      	adds	r0, #92	@ 0x5c
 801e22e:	f000 f9f7 	bl	801e620 <memset>
 801e232:	4b0d      	ldr	r3, [pc, #52]	@ (801e268 <std+0x58>)
 801e234:	6224      	str	r4, [r4, #32]
 801e236:	6263      	str	r3, [r4, #36]	@ 0x24
 801e238:	4b0c      	ldr	r3, [pc, #48]	@ (801e26c <std+0x5c>)
 801e23a:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e23c:	4b0c      	ldr	r3, [pc, #48]	@ (801e270 <std+0x60>)
 801e23e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e240:	4b0c      	ldr	r3, [pc, #48]	@ (801e274 <std+0x64>)
 801e242:	6323      	str	r3, [r4, #48]	@ 0x30
 801e244:	4b0c      	ldr	r3, [pc, #48]	@ (801e278 <std+0x68>)
 801e246:	429c      	cmp	r4, r3
 801e248:	d006      	beq.n	801e258 <std+0x48>
 801e24a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e24e:	4294      	cmp	r4, r2
 801e250:	d002      	beq.n	801e258 <std+0x48>
 801e252:	33d0      	adds	r3, #208	@ 0xd0
 801e254:	429c      	cmp	r4, r3
 801e256:	d105      	bne.n	801e264 <std+0x54>
 801e258:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e260:	f000 bb1e 	b.w	801e8a0 <__retarget_lock_init_recursive>
 801e264:	bd10      	pop	{r4, pc}
 801e266:	bf00      	nop
 801e268:	0801e43d 	.word	0x0801e43d
 801e26c:	0801e45f 	.word	0x0801e45f
 801e270:	0801e497 	.word	0x0801e497
 801e274:	0801e4bb 	.word	0x0801e4bb
 801e278:	20045820 	.word	0x20045820

0801e27c <stdio_exit_handler>:
 801e27c:	4a02      	ldr	r2, [pc, #8]	@ (801e288 <stdio_exit_handler+0xc>)
 801e27e:	4903      	ldr	r1, [pc, #12]	@ (801e28c <stdio_exit_handler+0x10>)
 801e280:	4803      	ldr	r0, [pc, #12]	@ (801e290 <stdio_exit_handler+0x14>)
 801e282:	f000 b869 	b.w	801e358 <_fwalk_sglue>
 801e286:	bf00      	nop
 801e288:	200009b0 	.word	0x200009b0
 801e28c:	0801e1c1 	.word	0x0801e1c1
 801e290:	20000b2c 	.word	0x20000b2c

0801e294 <cleanup_stdio>:
 801e294:	6841      	ldr	r1, [r0, #4]
 801e296:	4b0c      	ldr	r3, [pc, #48]	@ (801e2c8 <cleanup_stdio+0x34>)
 801e298:	4299      	cmp	r1, r3
 801e29a:	b510      	push	{r4, lr}
 801e29c:	4604      	mov	r4, r0
 801e29e:	d001      	beq.n	801e2a4 <cleanup_stdio+0x10>
 801e2a0:	f7ff ff8e 	bl	801e1c0 <_fflush_r>
 801e2a4:	68a1      	ldr	r1, [r4, #8]
 801e2a6:	4b09      	ldr	r3, [pc, #36]	@ (801e2cc <cleanup_stdio+0x38>)
 801e2a8:	4299      	cmp	r1, r3
 801e2aa:	d002      	beq.n	801e2b2 <cleanup_stdio+0x1e>
 801e2ac:	4620      	mov	r0, r4
 801e2ae:	f7ff ff87 	bl	801e1c0 <_fflush_r>
 801e2b2:	68e1      	ldr	r1, [r4, #12]
 801e2b4:	4b06      	ldr	r3, [pc, #24]	@ (801e2d0 <cleanup_stdio+0x3c>)
 801e2b6:	4299      	cmp	r1, r3
 801e2b8:	d004      	beq.n	801e2c4 <cleanup_stdio+0x30>
 801e2ba:	4620      	mov	r0, r4
 801e2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e2c0:	f7ff bf7e 	b.w	801e1c0 <_fflush_r>
 801e2c4:	bd10      	pop	{r4, pc}
 801e2c6:	bf00      	nop
 801e2c8:	20045820 	.word	0x20045820
 801e2cc:	20045888 	.word	0x20045888
 801e2d0:	200458f0 	.word	0x200458f0

0801e2d4 <global_stdio_init.part.0>:
 801e2d4:	b510      	push	{r4, lr}
 801e2d6:	4b0b      	ldr	r3, [pc, #44]	@ (801e304 <global_stdio_init.part.0+0x30>)
 801e2d8:	2104      	movs	r1, #4
 801e2da:	4c0b      	ldr	r4, [pc, #44]	@ (801e308 <global_stdio_init.part.0+0x34>)
 801e2dc:	4a0b      	ldr	r2, [pc, #44]	@ (801e30c <global_stdio_init.part.0+0x38>)
 801e2de:	4620      	mov	r0, r4
 801e2e0:	601a      	str	r2, [r3, #0]
 801e2e2:	2200      	movs	r2, #0
 801e2e4:	f7ff ff94 	bl	801e210 <std>
 801e2e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e2ec:	2201      	movs	r2, #1
 801e2ee:	2109      	movs	r1, #9
 801e2f0:	f7ff ff8e 	bl	801e210 <std>
 801e2f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e2f8:	2202      	movs	r2, #2
 801e2fa:	2112      	movs	r1, #18
 801e2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e300:	f7ff bf86 	b.w	801e210 <std>
 801e304:	20045958 	.word	0x20045958
 801e308:	20045820 	.word	0x20045820
 801e30c:	0801e27d 	.word	0x0801e27d

0801e310 <__sfp_lock_acquire>:
 801e310:	4801      	ldr	r0, [pc, #4]	@ (801e318 <__sfp_lock_acquire+0x8>)
 801e312:	f000 bac6 	b.w	801e8a2 <__retarget_lock_acquire_recursive>
 801e316:	bf00      	nop
 801e318:	20045961 	.word	0x20045961

0801e31c <__sfp_lock_release>:
 801e31c:	4801      	ldr	r0, [pc, #4]	@ (801e324 <__sfp_lock_release+0x8>)
 801e31e:	f000 bac1 	b.w	801e8a4 <__retarget_lock_release_recursive>
 801e322:	bf00      	nop
 801e324:	20045961 	.word	0x20045961

0801e328 <__sinit>:
 801e328:	b510      	push	{r4, lr}
 801e32a:	4604      	mov	r4, r0
 801e32c:	f7ff fff0 	bl	801e310 <__sfp_lock_acquire>
 801e330:	6a23      	ldr	r3, [r4, #32]
 801e332:	b11b      	cbz	r3, 801e33c <__sinit+0x14>
 801e334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e338:	f7ff bff0 	b.w	801e31c <__sfp_lock_release>
 801e33c:	4b04      	ldr	r3, [pc, #16]	@ (801e350 <__sinit+0x28>)
 801e33e:	6223      	str	r3, [r4, #32]
 801e340:	4b04      	ldr	r3, [pc, #16]	@ (801e354 <__sinit+0x2c>)
 801e342:	681b      	ldr	r3, [r3, #0]
 801e344:	2b00      	cmp	r3, #0
 801e346:	d1f5      	bne.n	801e334 <__sinit+0xc>
 801e348:	f7ff ffc4 	bl	801e2d4 <global_stdio_init.part.0>
 801e34c:	e7f2      	b.n	801e334 <__sinit+0xc>
 801e34e:	bf00      	nop
 801e350:	0801e295 	.word	0x0801e295
 801e354:	20045958 	.word	0x20045958

0801e358 <_fwalk_sglue>:
 801e358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e35c:	4607      	mov	r7, r0
 801e35e:	4688      	mov	r8, r1
 801e360:	4614      	mov	r4, r2
 801e362:	2600      	movs	r6, #0
 801e364:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e368:	f1b9 0901 	subs.w	r9, r9, #1
 801e36c:	d505      	bpl.n	801e37a <_fwalk_sglue+0x22>
 801e36e:	6824      	ldr	r4, [r4, #0]
 801e370:	2c00      	cmp	r4, #0
 801e372:	d1f7      	bne.n	801e364 <_fwalk_sglue+0xc>
 801e374:	4630      	mov	r0, r6
 801e376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e37a:	89ab      	ldrh	r3, [r5, #12]
 801e37c:	2b01      	cmp	r3, #1
 801e37e:	d907      	bls.n	801e390 <_fwalk_sglue+0x38>
 801e380:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e384:	3301      	adds	r3, #1
 801e386:	d003      	beq.n	801e390 <_fwalk_sglue+0x38>
 801e388:	4629      	mov	r1, r5
 801e38a:	4638      	mov	r0, r7
 801e38c:	47c0      	blx	r8
 801e38e:	4306      	orrs	r6, r0
 801e390:	3568      	adds	r5, #104	@ 0x68
 801e392:	e7e9      	b.n	801e368 <_fwalk_sglue+0x10>

0801e394 <sniprintf>:
 801e394:	b40c      	push	{r2, r3}
 801e396:	4b18      	ldr	r3, [pc, #96]	@ (801e3f8 <sniprintf+0x64>)
 801e398:	b530      	push	{r4, r5, lr}
 801e39a:	1e0c      	subs	r4, r1, #0
 801e39c:	b09d      	sub	sp, #116	@ 0x74
 801e39e:	681d      	ldr	r5, [r3, #0]
 801e3a0:	da08      	bge.n	801e3b4 <sniprintf+0x20>
 801e3a2:	238b      	movs	r3, #139	@ 0x8b
 801e3a4:	f04f 30ff 	mov.w	r0, #4294967295
 801e3a8:	602b      	str	r3, [r5, #0]
 801e3aa:	b01d      	add	sp, #116	@ 0x74
 801e3ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e3b0:	b002      	add	sp, #8
 801e3b2:	4770      	bx	lr
 801e3b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801e3b8:	9002      	str	r0, [sp, #8]
 801e3ba:	9006      	str	r0, [sp, #24]
 801e3bc:	a902      	add	r1, sp, #8
 801e3be:	f8ad 3014 	strh.w	r3, [sp, #20]
 801e3c2:	bf14      	ite	ne
 801e3c4:	f104 33ff 	addne.w	r3, r4, #4294967295
 801e3c8:	4623      	moveq	r3, r4
 801e3ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801e3cc:	4628      	mov	r0, r5
 801e3ce:	9304      	str	r3, [sp, #16]
 801e3d0:	9307      	str	r3, [sp, #28]
 801e3d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e3d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e3da:	ab21      	add	r3, sp, #132	@ 0x84
 801e3dc:	9301      	str	r3, [sp, #4]
 801e3de:	f002 f9c5 	bl	802076c <_svfiprintf_r>
 801e3e2:	1c43      	adds	r3, r0, #1
 801e3e4:	bfbc      	itt	lt
 801e3e6:	238b      	movlt	r3, #139	@ 0x8b
 801e3e8:	602b      	strlt	r3, [r5, #0]
 801e3ea:	2c00      	cmp	r4, #0
 801e3ec:	d0dd      	beq.n	801e3aa <sniprintf+0x16>
 801e3ee:	9b02      	ldr	r3, [sp, #8]
 801e3f0:	2200      	movs	r2, #0
 801e3f2:	701a      	strb	r2, [r3, #0]
 801e3f4:	e7d9      	b.n	801e3aa <sniprintf+0x16>
 801e3f6:	bf00      	nop
 801e3f8:	20000b28 	.word	0x20000b28

0801e3fc <siprintf>:
 801e3fc:	b40e      	push	{r1, r2, r3}
 801e3fe:	b500      	push	{lr}
 801e400:	b09c      	sub	sp, #112	@ 0x70
 801e402:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e406:	ab1d      	add	r3, sp, #116	@ 0x74
 801e408:	9002      	str	r0, [sp, #8]
 801e40a:	9006      	str	r0, [sp, #24]
 801e40c:	9107      	str	r1, [sp, #28]
 801e40e:	9104      	str	r1, [sp, #16]
 801e410:	4808      	ldr	r0, [pc, #32]	@ (801e434 <siprintf+0x38>)
 801e412:	4909      	ldr	r1, [pc, #36]	@ (801e438 <siprintf+0x3c>)
 801e414:	f853 2b04 	ldr.w	r2, [r3], #4
 801e418:	9105      	str	r1, [sp, #20]
 801e41a:	a902      	add	r1, sp, #8
 801e41c:	6800      	ldr	r0, [r0, #0]
 801e41e:	9301      	str	r3, [sp, #4]
 801e420:	f002 f9a4 	bl	802076c <_svfiprintf_r>
 801e424:	9b02      	ldr	r3, [sp, #8]
 801e426:	2200      	movs	r2, #0
 801e428:	701a      	strb	r2, [r3, #0]
 801e42a:	b01c      	add	sp, #112	@ 0x70
 801e42c:	f85d eb04 	ldr.w	lr, [sp], #4
 801e430:	b003      	add	sp, #12
 801e432:	4770      	bx	lr
 801e434:	20000b28 	.word	0x20000b28
 801e438:	ffff0208 	.word	0xffff0208

0801e43c <__sread>:
 801e43c:	b510      	push	{r4, lr}
 801e43e:	460c      	mov	r4, r1
 801e440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e444:	f000 f9ce 	bl	801e7e4 <_read_r>
 801e448:	2800      	cmp	r0, #0
 801e44a:	bfab      	itete	ge
 801e44c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e44e:	89a3      	ldrhlt	r3, [r4, #12]
 801e450:	181b      	addge	r3, r3, r0
 801e452:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e456:	bfac      	ite	ge
 801e458:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e45a:	81a3      	strhlt	r3, [r4, #12]
 801e45c:	bd10      	pop	{r4, pc}

0801e45e <__swrite>:
 801e45e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e462:	461f      	mov	r7, r3
 801e464:	898b      	ldrh	r3, [r1, #12]
 801e466:	4605      	mov	r5, r0
 801e468:	460c      	mov	r4, r1
 801e46a:	05db      	lsls	r3, r3, #23
 801e46c:	4616      	mov	r6, r2
 801e46e:	d505      	bpl.n	801e47c <__swrite+0x1e>
 801e470:	2302      	movs	r3, #2
 801e472:	2200      	movs	r2, #0
 801e474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e478:	f000 f9a2 	bl	801e7c0 <_lseek_r>
 801e47c:	89a3      	ldrh	r3, [r4, #12]
 801e47e:	4632      	mov	r2, r6
 801e480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e484:	4628      	mov	r0, r5
 801e486:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e48a:	81a3      	strh	r3, [r4, #12]
 801e48c:	463b      	mov	r3, r7
 801e48e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e492:	f000 b9c9 	b.w	801e828 <_write_r>

0801e496 <__sseek>:
 801e496:	b510      	push	{r4, lr}
 801e498:	460c      	mov	r4, r1
 801e49a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e49e:	f000 f98f 	bl	801e7c0 <_lseek_r>
 801e4a2:	1c43      	adds	r3, r0, #1
 801e4a4:	89a3      	ldrh	r3, [r4, #12]
 801e4a6:	bf15      	itete	ne
 801e4a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e4aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e4ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e4b2:	81a3      	strheq	r3, [r4, #12]
 801e4b4:	bf18      	it	ne
 801e4b6:	81a3      	strhne	r3, [r4, #12]
 801e4b8:	bd10      	pop	{r4, pc}

0801e4ba <__sclose>:
 801e4ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e4be:	f000 b96f 	b.w	801e7a0 <_close_r>

0801e4c2 <__swbuf_r>:
 801e4c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4c4:	460e      	mov	r6, r1
 801e4c6:	4614      	mov	r4, r2
 801e4c8:	4605      	mov	r5, r0
 801e4ca:	b118      	cbz	r0, 801e4d4 <__swbuf_r+0x12>
 801e4cc:	6a03      	ldr	r3, [r0, #32]
 801e4ce:	b90b      	cbnz	r3, 801e4d4 <__swbuf_r+0x12>
 801e4d0:	f7ff ff2a 	bl	801e328 <__sinit>
 801e4d4:	69a3      	ldr	r3, [r4, #24]
 801e4d6:	60a3      	str	r3, [r4, #8]
 801e4d8:	89a3      	ldrh	r3, [r4, #12]
 801e4da:	071a      	lsls	r2, r3, #28
 801e4dc:	d501      	bpl.n	801e4e2 <__swbuf_r+0x20>
 801e4de:	6923      	ldr	r3, [r4, #16]
 801e4e0:	b943      	cbnz	r3, 801e4f4 <__swbuf_r+0x32>
 801e4e2:	4621      	mov	r1, r4
 801e4e4:	4628      	mov	r0, r5
 801e4e6:	f000 f82b 	bl	801e540 <__swsetup_r>
 801e4ea:	b118      	cbz	r0, 801e4f4 <__swbuf_r+0x32>
 801e4ec:	f04f 37ff 	mov.w	r7, #4294967295
 801e4f0:	4638      	mov	r0, r7
 801e4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e4f4:	6823      	ldr	r3, [r4, #0]
 801e4f6:	b2f6      	uxtb	r6, r6
 801e4f8:	6922      	ldr	r2, [r4, #16]
 801e4fa:	4637      	mov	r7, r6
 801e4fc:	1a98      	subs	r0, r3, r2
 801e4fe:	6963      	ldr	r3, [r4, #20]
 801e500:	4283      	cmp	r3, r0
 801e502:	dc05      	bgt.n	801e510 <__swbuf_r+0x4e>
 801e504:	4621      	mov	r1, r4
 801e506:	4628      	mov	r0, r5
 801e508:	f7ff fe5a 	bl	801e1c0 <_fflush_r>
 801e50c:	2800      	cmp	r0, #0
 801e50e:	d1ed      	bne.n	801e4ec <__swbuf_r+0x2a>
 801e510:	68a3      	ldr	r3, [r4, #8]
 801e512:	3b01      	subs	r3, #1
 801e514:	60a3      	str	r3, [r4, #8]
 801e516:	6823      	ldr	r3, [r4, #0]
 801e518:	1c5a      	adds	r2, r3, #1
 801e51a:	6022      	str	r2, [r4, #0]
 801e51c:	701e      	strb	r6, [r3, #0]
 801e51e:	1c43      	adds	r3, r0, #1
 801e520:	6962      	ldr	r2, [r4, #20]
 801e522:	429a      	cmp	r2, r3
 801e524:	d004      	beq.n	801e530 <__swbuf_r+0x6e>
 801e526:	89a3      	ldrh	r3, [r4, #12]
 801e528:	07db      	lsls	r3, r3, #31
 801e52a:	d5e1      	bpl.n	801e4f0 <__swbuf_r+0x2e>
 801e52c:	2e0a      	cmp	r6, #10
 801e52e:	d1df      	bne.n	801e4f0 <__swbuf_r+0x2e>
 801e530:	4621      	mov	r1, r4
 801e532:	4628      	mov	r0, r5
 801e534:	f7ff fe44 	bl	801e1c0 <_fflush_r>
 801e538:	2800      	cmp	r0, #0
 801e53a:	d0d9      	beq.n	801e4f0 <__swbuf_r+0x2e>
 801e53c:	e7d6      	b.n	801e4ec <__swbuf_r+0x2a>
	...

0801e540 <__swsetup_r>:
 801e540:	b538      	push	{r3, r4, r5, lr}
 801e542:	4b29      	ldr	r3, [pc, #164]	@ (801e5e8 <__swsetup_r+0xa8>)
 801e544:	4605      	mov	r5, r0
 801e546:	460c      	mov	r4, r1
 801e548:	6818      	ldr	r0, [r3, #0]
 801e54a:	b118      	cbz	r0, 801e554 <__swsetup_r+0x14>
 801e54c:	6a03      	ldr	r3, [r0, #32]
 801e54e:	b90b      	cbnz	r3, 801e554 <__swsetup_r+0x14>
 801e550:	f7ff feea 	bl	801e328 <__sinit>
 801e554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e558:	0719      	lsls	r1, r3, #28
 801e55a:	d422      	bmi.n	801e5a2 <__swsetup_r+0x62>
 801e55c:	06da      	lsls	r2, r3, #27
 801e55e:	d407      	bmi.n	801e570 <__swsetup_r+0x30>
 801e560:	2209      	movs	r2, #9
 801e562:	602a      	str	r2, [r5, #0]
 801e564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e568:	f04f 30ff 	mov.w	r0, #4294967295
 801e56c:	81a3      	strh	r3, [r4, #12]
 801e56e:	e033      	b.n	801e5d8 <__swsetup_r+0x98>
 801e570:	0758      	lsls	r0, r3, #29
 801e572:	d512      	bpl.n	801e59a <__swsetup_r+0x5a>
 801e574:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e576:	b141      	cbz	r1, 801e58a <__swsetup_r+0x4a>
 801e578:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e57c:	4299      	cmp	r1, r3
 801e57e:	d002      	beq.n	801e586 <__swsetup_r+0x46>
 801e580:	4628      	mov	r0, r5
 801e582:	f001 f835 	bl	801f5f0 <_free_r>
 801e586:	2300      	movs	r3, #0
 801e588:	6363      	str	r3, [r4, #52]	@ 0x34
 801e58a:	89a3      	ldrh	r3, [r4, #12]
 801e58c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e590:	81a3      	strh	r3, [r4, #12]
 801e592:	2300      	movs	r3, #0
 801e594:	6063      	str	r3, [r4, #4]
 801e596:	6923      	ldr	r3, [r4, #16]
 801e598:	6023      	str	r3, [r4, #0]
 801e59a:	89a3      	ldrh	r3, [r4, #12]
 801e59c:	f043 0308 	orr.w	r3, r3, #8
 801e5a0:	81a3      	strh	r3, [r4, #12]
 801e5a2:	6923      	ldr	r3, [r4, #16]
 801e5a4:	b94b      	cbnz	r3, 801e5ba <__swsetup_r+0x7a>
 801e5a6:	89a3      	ldrh	r3, [r4, #12]
 801e5a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e5ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e5b0:	d003      	beq.n	801e5ba <__swsetup_r+0x7a>
 801e5b2:	4621      	mov	r1, r4
 801e5b4:	4628      	mov	r0, r5
 801e5b6:	f002 fa0c 	bl	80209d2 <__smakebuf_r>
 801e5ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e5be:	f013 0201 	ands.w	r2, r3, #1
 801e5c2:	d00a      	beq.n	801e5da <__swsetup_r+0x9a>
 801e5c4:	2200      	movs	r2, #0
 801e5c6:	60a2      	str	r2, [r4, #8]
 801e5c8:	6962      	ldr	r2, [r4, #20]
 801e5ca:	4252      	negs	r2, r2
 801e5cc:	61a2      	str	r2, [r4, #24]
 801e5ce:	6922      	ldr	r2, [r4, #16]
 801e5d0:	b942      	cbnz	r2, 801e5e4 <__swsetup_r+0xa4>
 801e5d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e5d6:	d1c5      	bne.n	801e564 <__swsetup_r+0x24>
 801e5d8:	bd38      	pop	{r3, r4, r5, pc}
 801e5da:	0799      	lsls	r1, r3, #30
 801e5dc:	bf58      	it	pl
 801e5de:	6962      	ldrpl	r2, [r4, #20]
 801e5e0:	60a2      	str	r2, [r4, #8]
 801e5e2:	e7f4      	b.n	801e5ce <__swsetup_r+0x8e>
 801e5e4:	2000      	movs	r0, #0
 801e5e6:	e7f7      	b.n	801e5d8 <__swsetup_r+0x98>
 801e5e8:	20000b28 	.word	0x20000b28

0801e5ec <memmove>:
 801e5ec:	4288      	cmp	r0, r1
 801e5ee:	b510      	push	{r4, lr}
 801e5f0:	eb01 0402 	add.w	r4, r1, r2
 801e5f4:	d902      	bls.n	801e5fc <memmove+0x10>
 801e5f6:	4284      	cmp	r4, r0
 801e5f8:	4623      	mov	r3, r4
 801e5fa:	d807      	bhi.n	801e60c <memmove+0x20>
 801e5fc:	1e43      	subs	r3, r0, #1
 801e5fe:	42a1      	cmp	r1, r4
 801e600:	d008      	beq.n	801e614 <memmove+0x28>
 801e602:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e606:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e60a:	e7f8      	b.n	801e5fe <memmove+0x12>
 801e60c:	4402      	add	r2, r0
 801e60e:	4601      	mov	r1, r0
 801e610:	428a      	cmp	r2, r1
 801e612:	d100      	bne.n	801e616 <memmove+0x2a>
 801e614:	bd10      	pop	{r4, pc}
 801e616:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e61a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e61e:	e7f7      	b.n	801e610 <memmove+0x24>

0801e620 <memset>:
 801e620:	4402      	add	r2, r0
 801e622:	4603      	mov	r3, r0
 801e624:	4293      	cmp	r3, r2
 801e626:	d100      	bne.n	801e62a <memset+0xa>
 801e628:	4770      	bx	lr
 801e62a:	f803 1b01 	strb.w	r1, [r3], #1
 801e62e:	e7f9      	b.n	801e624 <memset+0x4>

0801e630 <strcat>:
 801e630:	4602      	mov	r2, r0
 801e632:	b510      	push	{r4, lr}
 801e634:	7814      	ldrb	r4, [r2, #0]
 801e636:	4613      	mov	r3, r2
 801e638:	3201      	adds	r2, #1
 801e63a:	2c00      	cmp	r4, #0
 801e63c:	d1fa      	bne.n	801e634 <strcat+0x4>
 801e63e:	3b01      	subs	r3, #1
 801e640:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e644:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e648:	2a00      	cmp	r2, #0
 801e64a:	d1f9      	bne.n	801e640 <strcat+0x10>
 801e64c:	bd10      	pop	{r4, pc}

0801e64e <strchr>:
 801e64e:	b2c9      	uxtb	r1, r1
 801e650:	4603      	mov	r3, r0
 801e652:	4618      	mov	r0, r3
 801e654:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e658:	b112      	cbz	r2, 801e660 <strchr+0x12>
 801e65a:	428a      	cmp	r2, r1
 801e65c:	d1f9      	bne.n	801e652 <strchr+0x4>
 801e65e:	4770      	bx	lr
 801e660:	2900      	cmp	r1, #0
 801e662:	bf18      	it	ne
 801e664:	2000      	movne	r0, #0
 801e666:	4770      	bx	lr

0801e668 <strncmp>:
 801e668:	b510      	push	{r4, lr}
 801e66a:	b16a      	cbz	r2, 801e688 <strncmp+0x20>
 801e66c:	3901      	subs	r1, #1
 801e66e:	1884      	adds	r4, r0, r2
 801e670:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e674:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e678:	429a      	cmp	r2, r3
 801e67a:	d103      	bne.n	801e684 <strncmp+0x1c>
 801e67c:	42a0      	cmp	r0, r4
 801e67e:	d001      	beq.n	801e684 <strncmp+0x1c>
 801e680:	2a00      	cmp	r2, #0
 801e682:	d1f5      	bne.n	801e670 <strncmp+0x8>
 801e684:	1ad0      	subs	r0, r2, r3
 801e686:	bd10      	pop	{r4, pc}
 801e688:	4610      	mov	r0, r2
 801e68a:	e7fc      	b.n	801e686 <strncmp+0x1e>

0801e68c <strncpy>:
 801e68c:	3901      	subs	r1, #1
 801e68e:	4603      	mov	r3, r0
 801e690:	b510      	push	{r4, lr}
 801e692:	b132      	cbz	r2, 801e6a2 <strncpy+0x16>
 801e694:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e698:	3a01      	subs	r2, #1
 801e69a:	f803 4b01 	strb.w	r4, [r3], #1
 801e69e:	2c00      	cmp	r4, #0
 801e6a0:	d1f7      	bne.n	801e692 <strncpy+0x6>
 801e6a2:	441a      	add	r2, r3
 801e6a4:	2100      	movs	r1, #0
 801e6a6:	4293      	cmp	r3, r2
 801e6a8:	d100      	bne.n	801e6ac <strncpy+0x20>
 801e6aa:	bd10      	pop	{r4, pc}
 801e6ac:	f803 1b01 	strb.w	r1, [r3], #1
 801e6b0:	e7f9      	b.n	801e6a6 <strncpy+0x1a>
	...

0801e6b4 <strtok>:
 801e6b4:	4b16      	ldr	r3, [pc, #88]	@ (801e710 <strtok+0x5c>)
 801e6b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6ba:	681f      	ldr	r7, [r3, #0]
 801e6bc:	4605      	mov	r5, r0
 801e6be:	460e      	mov	r6, r1
 801e6c0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801e6c2:	b9ec      	cbnz	r4, 801e700 <strtok+0x4c>
 801e6c4:	2050      	movs	r0, #80	@ 0x50
 801e6c6:	f7fd ff03 	bl	801c4d0 <malloc>
 801e6ca:	4602      	mov	r2, r0
 801e6cc:	6478      	str	r0, [r7, #68]	@ 0x44
 801e6ce:	b920      	cbnz	r0, 801e6da <strtok+0x26>
 801e6d0:	4b10      	ldr	r3, [pc, #64]	@ (801e714 <strtok+0x60>)
 801e6d2:	215b      	movs	r1, #91	@ 0x5b
 801e6d4:	4810      	ldr	r0, [pc, #64]	@ (801e718 <strtok+0x64>)
 801e6d6:	f000 f919 	bl	801e90c <__assert_func>
 801e6da:	e9c0 4400 	strd	r4, r4, [r0]
 801e6de:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801e6e2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801e6e6:	6184      	str	r4, [r0, #24]
 801e6e8:	7704      	strb	r4, [r0, #28]
 801e6ea:	6244      	str	r4, [r0, #36]	@ 0x24
 801e6ec:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801e6f0:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801e6f4:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801e6f8:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801e6fc:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801e700:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801e702:	4631      	mov	r1, r6
 801e704:	4628      	mov	r0, r5
 801e706:	2301      	movs	r3, #1
 801e708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e70c:	f000 b806 	b.w	801e71c <__strtok_r>
 801e710:	20000b28 	.word	0x20000b28
 801e714:	080824da 	.word	0x080824da
 801e718:	080824f1 	.word	0x080824f1

0801e71c <__strtok_r>:
 801e71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e71e:	4604      	mov	r4, r0
 801e720:	b908      	cbnz	r0, 801e726 <__strtok_r+0xa>
 801e722:	6814      	ldr	r4, [r2, #0]
 801e724:	b144      	cbz	r4, 801e738 <__strtok_r+0x1c>
 801e726:	4620      	mov	r0, r4
 801e728:	460f      	mov	r7, r1
 801e72a:	f814 5b01 	ldrb.w	r5, [r4], #1
 801e72e:	f817 6b01 	ldrb.w	r6, [r7], #1
 801e732:	b91e      	cbnz	r6, 801e73c <__strtok_r+0x20>
 801e734:	b965      	cbnz	r5, 801e750 <__strtok_r+0x34>
 801e736:	6015      	str	r5, [r2, #0]
 801e738:	2000      	movs	r0, #0
 801e73a:	e005      	b.n	801e748 <__strtok_r+0x2c>
 801e73c:	42b5      	cmp	r5, r6
 801e73e:	d1f6      	bne.n	801e72e <__strtok_r+0x12>
 801e740:	2b00      	cmp	r3, #0
 801e742:	d1f0      	bne.n	801e726 <__strtok_r+0xa>
 801e744:	6014      	str	r4, [r2, #0]
 801e746:	7003      	strb	r3, [r0, #0]
 801e748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e74a:	461c      	mov	r4, r3
 801e74c:	e00c      	b.n	801e768 <__strtok_r+0x4c>
 801e74e:	b915      	cbnz	r5, 801e756 <__strtok_r+0x3a>
 801e750:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e754:	460e      	mov	r6, r1
 801e756:	f816 5b01 	ldrb.w	r5, [r6], #1
 801e75a:	42ab      	cmp	r3, r5
 801e75c:	d1f7      	bne.n	801e74e <__strtok_r+0x32>
 801e75e:	2b00      	cmp	r3, #0
 801e760:	d0f3      	beq.n	801e74a <__strtok_r+0x2e>
 801e762:	2300      	movs	r3, #0
 801e764:	f804 3c01 	strb.w	r3, [r4, #-1]
 801e768:	6014      	str	r4, [r2, #0]
 801e76a:	e7ed      	b.n	801e748 <__strtok_r+0x2c>

0801e76c <strstr>:
 801e76c:	780a      	ldrb	r2, [r1, #0]
 801e76e:	b570      	push	{r4, r5, r6, lr}
 801e770:	b96a      	cbnz	r2, 801e78e <strstr+0x22>
 801e772:	bd70      	pop	{r4, r5, r6, pc}
 801e774:	429a      	cmp	r2, r3
 801e776:	d109      	bne.n	801e78c <strstr+0x20>
 801e778:	460c      	mov	r4, r1
 801e77a:	4605      	mov	r5, r0
 801e77c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801e780:	2b00      	cmp	r3, #0
 801e782:	d0f6      	beq.n	801e772 <strstr+0x6>
 801e784:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801e788:	429e      	cmp	r6, r3
 801e78a:	d0f7      	beq.n	801e77c <strstr+0x10>
 801e78c:	3001      	adds	r0, #1
 801e78e:	7803      	ldrb	r3, [r0, #0]
 801e790:	2b00      	cmp	r3, #0
 801e792:	d1ef      	bne.n	801e774 <strstr+0x8>
 801e794:	4618      	mov	r0, r3
 801e796:	e7ec      	b.n	801e772 <strstr+0x6>

0801e798 <_localeconv_r>:
 801e798:	4800      	ldr	r0, [pc, #0]	@ (801e79c <_localeconv_r+0x4>)
 801e79a:	4770      	bx	lr
 801e79c:	20000aac 	.word	0x20000aac

0801e7a0 <_close_r>:
 801e7a0:	b538      	push	{r3, r4, r5, lr}
 801e7a2:	2300      	movs	r3, #0
 801e7a4:	4d05      	ldr	r5, [pc, #20]	@ (801e7bc <_close_r+0x1c>)
 801e7a6:	4604      	mov	r4, r0
 801e7a8:	4608      	mov	r0, r1
 801e7aa:	602b      	str	r3, [r5, #0]
 801e7ac:	f7e3 f9da 	bl	8001b64 <_close>
 801e7b0:	1c43      	adds	r3, r0, #1
 801e7b2:	d102      	bne.n	801e7ba <_close_r+0x1a>
 801e7b4:	682b      	ldr	r3, [r5, #0]
 801e7b6:	b103      	cbz	r3, 801e7ba <_close_r+0x1a>
 801e7b8:	6023      	str	r3, [r4, #0]
 801e7ba:	bd38      	pop	{r3, r4, r5, pc}
 801e7bc:	2004595c 	.word	0x2004595c

0801e7c0 <_lseek_r>:
 801e7c0:	b538      	push	{r3, r4, r5, lr}
 801e7c2:	4604      	mov	r4, r0
 801e7c4:	4d06      	ldr	r5, [pc, #24]	@ (801e7e0 <_lseek_r+0x20>)
 801e7c6:	4608      	mov	r0, r1
 801e7c8:	4611      	mov	r1, r2
 801e7ca:	2200      	movs	r2, #0
 801e7cc:	602a      	str	r2, [r5, #0]
 801e7ce:	461a      	mov	r2, r3
 801e7d0:	f7e3 f9ef 	bl	8001bb2 <_lseek>
 801e7d4:	1c43      	adds	r3, r0, #1
 801e7d6:	d102      	bne.n	801e7de <_lseek_r+0x1e>
 801e7d8:	682b      	ldr	r3, [r5, #0]
 801e7da:	b103      	cbz	r3, 801e7de <_lseek_r+0x1e>
 801e7dc:	6023      	str	r3, [r4, #0]
 801e7de:	bd38      	pop	{r3, r4, r5, pc}
 801e7e0:	2004595c 	.word	0x2004595c

0801e7e4 <_read_r>:
 801e7e4:	b538      	push	{r3, r4, r5, lr}
 801e7e6:	4604      	mov	r4, r0
 801e7e8:	4d06      	ldr	r5, [pc, #24]	@ (801e804 <_read_r+0x20>)
 801e7ea:	4608      	mov	r0, r1
 801e7ec:	4611      	mov	r1, r2
 801e7ee:	2200      	movs	r2, #0
 801e7f0:	602a      	str	r2, [r5, #0]
 801e7f2:	461a      	mov	r2, r3
 801e7f4:	f7e3 f97d 	bl	8001af2 <_read>
 801e7f8:	1c43      	adds	r3, r0, #1
 801e7fa:	d102      	bne.n	801e802 <_read_r+0x1e>
 801e7fc:	682b      	ldr	r3, [r5, #0]
 801e7fe:	b103      	cbz	r3, 801e802 <_read_r+0x1e>
 801e800:	6023      	str	r3, [r4, #0]
 801e802:	bd38      	pop	{r3, r4, r5, pc}
 801e804:	2004595c 	.word	0x2004595c

0801e808 <_sbrk_r>:
 801e808:	b538      	push	{r3, r4, r5, lr}
 801e80a:	2300      	movs	r3, #0
 801e80c:	4d05      	ldr	r5, [pc, #20]	@ (801e824 <_sbrk_r+0x1c>)
 801e80e:	4604      	mov	r4, r0
 801e810:	4608      	mov	r0, r1
 801e812:	602b      	str	r3, [r5, #0]
 801e814:	f7e3 f9da 	bl	8001bcc <_sbrk>
 801e818:	1c43      	adds	r3, r0, #1
 801e81a:	d102      	bne.n	801e822 <_sbrk_r+0x1a>
 801e81c:	682b      	ldr	r3, [r5, #0]
 801e81e:	b103      	cbz	r3, 801e822 <_sbrk_r+0x1a>
 801e820:	6023      	str	r3, [r4, #0]
 801e822:	bd38      	pop	{r3, r4, r5, pc}
 801e824:	2004595c 	.word	0x2004595c

0801e828 <_write_r>:
 801e828:	b538      	push	{r3, r4, r5, lr}
 801e82a:	4604      	mov	r4, r0
 801e82c:	4d06      	ldr	r5, [pc, #24]	@ (801e848 <_write_r+0x20>)
 801e82e:	4608      	mov	r0, r1
 801e830:	4611      	mov	r1, r2
 801e832:	2200      	movs	r2, #0
 801e834:	602a      	str	r2, [r5, #0]
 801e836:	461a      	mov	r2, r3
 801e838:	f7e3 f978 	bl	8001b2c <_write>
 801e83c:	1c43      	adds	r3, r0, #1
 801e83e:	d102      	bne.n	801e846 <_write_r+0x1e>
 801e840:	682b      	ldr	r3, [r5, #0]
 801e842:	b103      	cbz	r3, 801e846 <_write_r+0x1e>
 801e844:	6023      	str	r3, [r4, #0]
 801e846:	bd38      	pop	{r3, r4, r5, pc}
 801e848:	2004595c 	.word	0x2004595c

0801e84c <__errno>:
 801e84c:	4b01      	ldr	r3, [pc, #4]	@ (801e854 <__errno+0x8>)
 801e84e:	6818      	ldr	r0, [r3, #0]
 801e850:	4770      	bx	lr
 801e852:	bf00      	nop
 801e854:	20000b28 	.word	0x20000b28

0801e858 <__libc_init_array>:
 801e858:	b570      	push	{r4, r5, r6, lr}
 801e85a:	4d0d      	ldr	r5, [pc, #52]	@ (801e890 <__libc_init_array+0x38>)
 801e85c:	2600      	movs	r6, #0
 801e85e:	4c0d      	ldr	r4, [pc, #52]	@ (801e894 <__libc_init_array+0x3c>)
 801e860:	1b64      	subs	r4, r4, r5
 801e862:	10a4      	asrs	r4, r4, #2
 801e864:	42a6      	cmp	r6, r4
 801e866:	d109      	bne.n	801e87c <__libc_init_array+0x24>
 801e868:	4d0b      	ldr	r5, [pc, #44]	@ (801e898 <__libc_init_array+0x40>)
 801e86a:	2600      	movs	r6, #0
 801e86c:	4c0b      	ldr	r4, [pc, #44]	@ (801e89c <__libc_init_array+0x44>)
 801e86e:	f003 fe49 	bl	8022504 <_init>
 801e872:	1b64      	subs	r4, r4, r5
 801e874:	10a4      	asrs	r4, r4, #2
 801e876:	42a6      	cmp	r6, r4
 801e878:	d105      	bne.n	801e886 <__libc_init_array+0x2e>
 801e87a:	bd70      	pop	{r4, r5, r6, pc}
 801e87c:	f855 3b04 	ldr.w	r3, [r5], #4
 801e880:	3601      	adds	r6, #1
 801e882:	4798      	blx	r3
 801e884:	e7ee      	b.n	801e864 <__libc_init_array+0xc>
 801e886:	f855 3b04 	ldr.w	r3, [r5], #4
 801e88a:	3601      	adds	r6, #1
 801e88c:	4798      	blx	r3
 801e88e:	e7f2      	b.n	801e876 <__libc_init_array+0x1e>
 801e890:	08082828 	.word	0x08082828
 801e894:	08082828 	.word	0x08082828
 801e898:	08082828 	.word	0x08082828
 801e89c:	0808282c 	.word	0x0808282c

0801e8a0 <__retarget_lock_init_recursive>:
 801e8a0:	4770      	bx	lr

0801e8a2 <__retarget_lock_acquire_recursive>:
 801e8a2:	4770      	bx	lr

0801e8a4 <__retarget_lock_release_recursive>:
 801e8a4:	4770      	bx	lr

0801e8a6 <strcpy>:
 801e8a6:	4603      	mov	r3, r0
 801e8a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e8ac:	f803 2b01 	strb.w	r2, [r3], #1
 801e8b0:	2a00      	cmp	r2, #0
 801e8b2:	d1f9      	bne.n	801e8a8 <strcpy+0x2>
 801e8b4:	4770      	bx	lr

0801e8b6 <memchr>:
 801e8b6:	b2c9      	uxtb	r1, r1
 801e8b8:	4603      	mov	r3, r0
 801e8ba:	4402      	add	r2, r0
 801e8bc:	b510      	push	{r4, lr}
 801e8be:	4293      	cmp	r3, r2
 801e8c0:	4618      	mov	r0, r3
 801e8c2:	d101      	bne.n	801e8c8 <memchr+0x12>
 801e8c4:	2000      	movs	r0, #0
 801e8c6:	e003      	b.n	801e8d0 <memchr+0x1a>
 801e8c8:	7804      	ldrb	r4, [r0, #0]
 801e8ca:	3301      	adds	r3, #1
 801e8cc:	428c      	cmp	r4, r1
 801e8ce:	d1f6      	bne.n	801e8be <memchr+0x8>
 801e8d0:	bd10      	pop	{r4, pc}

0801e8d2 <memcpy>:
 801e8d2:	440a      	add	r2, r1
 801e8d4:	1e43      	subs	r3, r0, #1
 801e8d6:	4291      	cmp	r1, r2
 801e8d8:	d100      	bne.n	801e8dc <memcpy+0xa>
 801e8da:	4770      	bx	lr
 801e8dc:	b510      	push	{r4, lr}
 801e8de:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e8e2:	4291      	cmp	r1, r2
 801e8e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e8e8:	d1f9      	bne.n	801e8de <memcpy+0xc>
 801e8ea:	bd10      	pop	{r4, pc}
 801e8ec:	0000      	movs	r0, r0
	...

0801e8f0 <nan>:
 801e8f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e8f8 <nan+0x8>
 801e8f4:	4770      	bx	lr
 801e8f6:	bf00      	nop
 801e8f8:	00000000 	.word	0x00000000
 801e8fc:	7ff80000 	.word	0x7ff80000

0801e900 <nanf>:
 801e900:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801e908 <nanf+0x8>
 801e904:	4770      	bx	lr
 801e906:	bf00      	nop
 801e908:	7fc00000 	.word	0x7fc00000

0801e90c <__assert_func>:
 801e90c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e90e:	4614      	mov	r4, r2
 801e910:	461a      	mov	r2, r3
 801e912:	4b09      	ldr	r3, [pc, #36]	@ (801e938 <__assert_func+0x2c>)
 801e914:	4605      	mov	r5, r0
 801e916:	681b      	ldr	r3, [r3, #0]
 801e918:	68d8      	ldr	r0, [r3, #12]
 801e91a:	b954      	cbnz	r4, 801e932 <__assert_func+0x26>
 801e91c:	4b07      	ldr	r3, [pc, #28]	@ (801e93c <__assert_func+0x30>)
 801e91e:	461c      	mov	r4, r3
 801e920:	9100      	str	r1, [sp, #0]
 801e922:	4907      	ldr	r1, [pc, #28]	@ (801e940 <__assert_func+0x34>)
 801e924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e928:	462b      	mov	r3, r5
 801e92a:	f002 f81b 	bl	8020964 <fiprintf>
 801e92e:	f002 f8af 	bl	8020a90 <abort>
 801e932:	4b04      	ldr	r3, [pc, #16]	@ (801e944 <__assert_func+0x38>)
 801e934:	e7f4      	b.n	801e920 <__assert_func+0x14>
 801e936:	bf00      	nop
 801e938:	20000b28 	.word	0x20000b28
 801e93c:	0808258e 	.word	0x0808258e
 801e940:	08082560 	.word	0x08082560
 801e944:	08082553 	.word	0x08082553

0801e948 <quorem>:
 801e948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e94c:	6903      	ldr	r3, [r0, #16]
 801e94e:	4607      	mov	r7, r0
 801e950:	690c      	ldr	r4, [r1, #16]
 801e952:	42a3      	cmp	r3, r4
 801e954:	f2c0 8083 	blt.w	801ea5e <quorem+0x116>
 801e958:	3c01      	subs	r4, #1
 801e95a:	f100 0514 	add.w	r5, r0, #20
 801e95e:	f101 0814 	add.w	r8, r1, #20
 801e962:	00a3      	lsls	r3, r4, #2
 801e964:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e968:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e96c:	9300      	str	r3, [sp, #0]
 801e96e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e972:	9301      	str	r3, [sp, #4]
 801e974:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e978:	3301      	adds	r3, #1
 801e97a:	429a      	cmp	r2, r3
 801e97c:	fbb2 f6f3 	udiv	r6, r2, r3
 801e980:	d331      	bcc.n	801e9e6 <quorem+0x9e>
 801e982:	f04f 0a00 	mov.w	sl, #0
 801e986:	46c4      	mov	ip, r8
 801e988:	46ae      	mov	lr, r5
 801e98a:	46d3      	mov	fp, sl
 801e98c:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e990:	b298      	uxth	r0, r3
 801e992:	45e1      	cmp	r9, ip
 801e994:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801e998:	fb06 a000 	mla	r0, r6, r0, sl
 801e99c:	ea4f 4210 	mov.w	r2, r0, lsr #16
 801e9a0:	b280      	uxth	r0, r0
 801e9a2:	fb06 2303 	mla	r3, r6, r3, r2
 801e9a6:	f8de 2000 	ldr.w	r2, [lr]
 801e9aa:	b292      	uxth	r2, r2
 801e9ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e9b0:	eba2 0200 	sub.w	r2, r2, r0
 801e9b4:	b29b      	uxth	r3, r3
 801e9b6:	f8de 0000 	ldr.w	r0, [lr]
 801e9ba:	445a      	add	r2, fp
 801e9bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801e9c0:	b292      	uxth	r2, r2
 801e9c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801e9c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801e9ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801e9ce:	f84e 2b04 	str.w	r2, [lr], #4
 801e9d2:	d2db      	bcs.n	801e98c <quorem+0x44>
 801e9d4:	9b00      	ldr	r3, [sp, #0]
 801e9d6:	58eb      	ldr	r3, [r5, r3]
 801e9d8:	b92b      	cbnz	r3, 801e9e6 <quorem+0x9e>
 801e9da:	9b01      	ldr	r3, [sp, #4]
 801e9dc:	3b04      	subs	r3, #4
 801e9de:	429d      	cmp	r5, r3
 801e9e0:	461a      	mov	r2, r3
 801e9e2:	d330      	bcc.n	801ea46 <quorem+0xfe>
 801e9e4:	613c      	str	r4, [r7, #16]
 801e9e6:	4638      	mov	r0, r7
 801e9e8:	f001 fc5a 	bl	80202a0 <__mcmp>
 801e9ec:	2800      	cmp	r0, #0
 801e9ee:	db26      	blt.n	801ea3e <quorem+0xf6>
 801e9f0:	4629      	mov	r1, r5
 801e9f2:	2000      	movs	r0, #0
 801e9f4:	f858 2b04 	ldr.w	r2, [r8], #4
 801e9f8:	f8d1 c000 	ldr.w	ip, [r1]
 801e9fc:	fa1f fe82 	uxth.w	lr, r2
 801ea00:	45c1      	cmp	r9, r8
 801ea02:	fa1f f38c 	uxth.w	r3, ip
 801ea06:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801ea0a:	eba3 030e 	sub.w	r3, r3, lr
 801ea0e:	4403      	add	r3, r0
 801ea10:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801ea14:	b29b      	uxth	r3, r3
 801ea16:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801ea1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ea1e:	ea4f 4022 	mov.w	r0, r2, asr #16
 801ea22:	f841 3b04 	str.w	r3, [r1], #4
 801ea26:	d2e5      	bcs.n	801e9f4 <quorem+0xac>
 801ea28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ea2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ea30:	b922      	cbnz	r2, 801ea3c <quorem+0xf4>
 801ea32:	3b04      	subs	r3, #4
 801ea34:	429d      	cmp	r5, r3
 801ea36:	461a      	mov	r2, r3
 801ea38:	d30b      	bcc.n	801ea52 <quorem+0x10a>
 801ea3a:	613c      	str	r4, [r7, #16]
 801ea3c:	3601      	adds	r6, #1
 801ea3e:	4630      	mov	r0, r6
 801ea40:	b003      	add	sp, #12
 801ea42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea46:	6812      	ldr	r2, [r2, #0]
 801ea48:	3b04      	subs	r3, #4
 801ea4a:	2a00      	cmp	r2, #0
 801ea4c:	d1ca      	bne.n	801e9e4 <quorem+0x9c>
 801ea4e:	3c01      	subs	r4, #1
 801ea50:	e7c5      	b.n	801e9de <quorem+0x96>
 801ea52:	6812      	ldr	r2, [r2, #0]
 801ea54:	3b04      	subs	r3, #4
 801ea56:	2a00      	cmp	r2, #0
 801ea58:	d1ef      	bne.n	801ea3a <quorem+0xf2>
 801ea5a:	3c01      	subs	r4, #1
 801ea5c:	e7ea      	b.n	801ea34 <quorem+0xec>
 801ea5e:	2000      	movs	r0, #0
 801ea60:	e7ee      	b.n	801ea40 <quorem+0xf8>
 801ea62:	0000      	movs	r0, r0
 801ea64:	0000      	movs	r0, r0
	...

0801ea68 <_dtoa_r>:
 801ea68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea6c:	69c7      	ldr	r7, [r0, #28]
 801ea6e:	b099      	sub	sp, #100	@ 0x64
 801ea70:	4683      	mov	fp, r0
 801ea72:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801ea74:	9109      	str	r1, [sp, #36]	@ 0x24
 801ea76:	920e      	str	r2, [sp, #56]	@ 0x38
 801ea78:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ea7a:	ec55 4b10 	vmov	r4, r5, d0
 801ea7e:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ea82:	b97f      	cbnz	r7, 801eaa4 <_dtoa_r+0x3c>
 801ea84:	2010      	movs	r0, #16
 801ea86:	f7fd fd23 	bl	801c4d0 <malloc>
 801ea8a:	4602      	mov	r2, r0
 801ea8c:	f8cb 001c 	str.w	r0, [fp, #28]
 801ea90:	b920      	cbnz	r0, 801ea9c <_dtoa_r+0x34>
 801ea92:	4ba7      	ldr	r3, [pc, #668]	@ (801ed30 <_dtoa_r+0x2c8>)
 801ea94:	21ef      	movs	r1, #239	@ 0xef
 801ea96:	48a7      	ldr	r0, [pc, #668]	@ (801ed34 <_dtoa_r+0x2cc>)
 801ea98:	f7ff ff38 	bl	801e90c <__assert_func>
 801ea9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801eaa0:	6007      	str	r7, [r0, #0]
 801eaa2:	60c7      	str	r7, [r0, #12]
 801eaa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801eaa8:	6819      	ldr	r1, [r3, #0]
 801eaaa:	b159      	cbz	r1, 801eac4 <_dtoa_r+0x5c>
 801eaac:	685a      	ldr	r2, [r3, #4]
 801eaae:	2301      	movs	r3, #1
 801eab0:	4658      	mov	r0, fp
 801eab2:	4093      	lsls	r3, r2
 801eab4:	604a      	str	r2, [r1, #4]
 801eab6:	608b      	str	r3, [r1, #8]
 801eab8:	f001 f96c 	bl	801fd94 <_Bfree>
 801eabc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801eac0:	2200      	movs	r2, #0
 801eac2:	601a      	str	r2, [r3, #0]
 801eac4:	1e2b      	subs	r3, r5, #0
 801eac6:	bfb7      	itett	lt
 801eac8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801eacc:	2300      	movge	r3, #0
 801eace:	2201      	movlt	r2, #1
 801ead0:	9303      	strlt	r3, [sp, #12]
 801ead2:	bfa8      	it	ge
 801ead4:	6033      	strge	r3, [r6, #0]
 801ead6:	9f03      	ldr	r7, [sp, #12]
 801ead8:	4b97      	ldr	r3, [pc, #604]	@ (801ed38 <_dtoa_r+0x2d0>)
 801eada:	bfb8      	it	lt
 801eadc:	6032      	strlt	r2, [r6, #0]
 801eade:	43bb      	bics	r3, r7
 801eae0:	d112      	bne.n	801eb08 <_dtoa_r+0xa0>
 801eae2:	f242 730f 	movw	r3, #9999	@ 0x270f
 801eae6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801eae8:	6013      	str	r3, [r2, #0]
 801eaea:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801eaee:	4323      	orrs	r3, r4
 801eaf0:	f000 854c 	beq.w	801f58c <_dtoa_r+0xb24>
 801eaf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801eaf6:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801ed4c <_dtoa_r+0x2e4>
 801eafa:	2b00      	cmp	r3, #0
 801eafc:	f000 854e 	beq.w	801f59c <_dtoa_r+0xb34>
 801eb00:	f10a 0303 	add.w	r3, sl, #3
 801eb04:	f000 bd48 	b.w	801f598 <_dtoa_r+0xb30>
 801eb08:	ed9d 7b02 	vldr	d7, [sp, #8]
 801eb0c:	2200      	movs	r2, #0
 801eb0e:	2300      	movs	r3, #0
 801eb10:	ec51 0b17 	vmov	r0, r1, d7
 801eb14:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801eb18:	f7e1 ffe4 	bl	8000ae4 <__aeabi_dcmpeq>
 801eb1c:	4680      	mov	r8, r0
 801eb1e:	b158      	cbz	r0, 801eb38 <_dtoa_r+0xd0>
 801eb20:	2301      	movs	r3, #1
 801eb22:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801eb24:	6013      	str	r3, [r2, #0]
 801eb26:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801eb28:	b113      	cbz	r3, 801eb30 <_dtoa_r+0xc8>
 801eb2a:	4b84      	ldr	r3, [pc, #528]	@ (801ed3c <_dtoa_r+0x2d4>)
 801eb2c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801eb2e:	6013      	str	r3, [r2, #0]
 801eb30:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801ed50 <_dtoa_r+0x2e8>
 801eb34:	f000 bd32 	b.w	801f59c <_dtoa_r+0xb34>
 801eb38:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801eb3c:	aa16      	add	r2, sp, #88	@ 0x58
 801eb3e:	a917      	add	r1, sp, #92	@ 0x5c
 801eb40:	4658      	mov	r0, fp
 801eb42:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801eb46:	f001 fcd3 	bl	80204f0 <__d2b>
 801eb4a:	4681      	mov	r9, r0
 801eb4c:	2e00      	cmp	r6, #0
 801eb4e:	d075      	beq.n	801ec3c <_dtoa_r+0x1d4>
 801eb50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eb52:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801eb56:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801eb5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801eb5e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801eb62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801eb66:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801eb6a:	4619      	mov	r1, r3
 801eb6c:	2200      	movs	r2, #0
 801eb6e:	4b74      	ldr	r3, [pc, #464]	@ (801ed40 <_dtoa_r+0x2d8>)
 801eb70:	f7e1 fb98 	bl	80002a4 <__aeabi_dsub>
 801eb74:	a368      	add	r3, pc, #416	@ (adr r3, 801ed18 <_dtoa_r+0x2b0>)
 801eb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb7a:	f7e1 fd4b 	bl	8000614 <__aeabi_dmul>
 801eb7e:	a368      	add	r3, pc, #416	@ (adr r3, 801ed20 <_dtoa_r+0x2b8>)
 801eb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb84:	f7e1 fb90 	bl	80002a8 <__adddf3>
 801eb88:	4604      	mov	r4, r0
 801eb8a:	460d      	mov	r5, r1
 801eb8c:	4630      	mov	r0, r6
 801eb8e:	f7e1 fcd7 	bl	8000540 <__aeabi_i2d>
 801eb92:	a365      	add	r3, pc, #404	@ (adr r3, 801ed28 <_dtoa_r+0x2c0>)
 801eb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb98:	f7e1 fd3c 	bl	8000614 <__aeabi_dmul>
 801eb9c:	4602      	mov	r2, r0
 801eb9e:	460b      	mov	r3, r1
 801eba0:	4620      	mov	r0, r4
 801eba2:	4629      	mov	r1, r5
 801eba4:	f7e1 fb80 	bl	80002a8 <__adddf3>
 801eba8:	4604      	mov	r4, r0
 801ebaa:	460d      	mov	r5, r1
 801ebac:	f7e1 ffe2 	bl	8000b74 <__aeabi_d2iz>
 801ebb0:	2200      	movs	r2, #0
 801ebb2:	4607      	mov	r7, r0
 801ebb4:	2300      	movs	r3, #0
 801ebb6:	4620      	mov	r0, r4
 801ebb8:	4629      	mov	r1, r5
 801ebba:	f7e1 ff9d 	bl	8000af8 <__aeabi_dcmplt>
 801ebbe:	b140      	cbz	r0, 801ebd2 <_dtoa_r+0x16a>
 801ebc0:	4638      	mov	r0, r7
 801ebc2:	f7e1 fcbd 	bl	8000540 <__aeabi_i2d>
 801ebc6:	4622      	mov	r2, r4
 801ebc8:	462b      	mov	r3, r5
 801ebca:	f7e1 ff8b 	bl	8000ae4 <__aeabi_dcmpeq>
 801ebce:	b900      	cbnz	r0, 801ebd2 <_dtoa_r+0x16a>
 801ebd0:	3f01      	subs	r7, #1
 801ebd2:	2f16      	cmp	r7, #22
 801ebd4:	d851      	bhi.n	801ec7a <_dtoa_r+0x212>
 801ebd6:	4b5b      	ldr	r3, [pc, #364]	@ (801ed44 <_dtoa_r+0x2dc>)
 801ebd8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ebdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ebe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebe4:	f7e1 ff88 	bl	8000af8 <__aeabi_dcmplt>
 801ebe8:	2800      	cmp	r0, #0
 801ebea:	d048      	beq.n	801ec7e <_dtoa_r+0x216>
 801ebec:	3f01      	subs	r7, #1
 801ebee:	2300      	movs	r3, #0
 801ebf0:	9312      	str	r3, [sp, #72]	@ 0x48
 801ebf2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ebf4:	1b9b      	subs	r3, r3, r6
 801ebf6:	1e5a      	subs	r2, r3, #1
 801ebf8:	bf46      	itte	mi
 801ebfa:	f1c3 0801 	rsbmi	r8, r3, #1
 801ebfe:	2300      	movmi	r3, #0
 801ec00:	f04f 0800 	movpl.w	r8, #0
 801ec04:	9208      	str	r2, [sp, #32]
 801ec06:	bf48      	it	mi
 801ec08:	9308      	strmi	r3, [sp, #32]
 801ec0a:	2f00      	cmp	r7, #0
 801ec0c:	db39      	blt.n	801ec82 <_dtoa_r+0x21a>
 801ec0e:	9b08      	ldr	r3, [sp, #32]
 801ec10:	970f      	str	r7, [sp, #60]	@ 0x3c
 801ec12:	443b      	add	r3, r7
 801ec14:	9308      	str	r3, [sp, #32]
 801ec16:	2300      	movs	r3, #0
 801ec18:	930a      	str	r3, [sp, #40]	@ 0x28
 801ec1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ec1c:	2b09      	cmp	r3, #9
 801ec1e:	d864      	bhi.n	801ecea <_dtoa_r+0x282>
 801ec20:	2b05      	cmp	r3, #5
 801ec22:	bfc5      	ittet	gt
 801ec24:	3b04      	subgt	r3, #4
 801ec26:	2400      	movgt	r4, #0
 801ec28:	2401      	movle	r4, #1
 801ec2a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801ec2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ec2e:	3b02      	subs	r3, #2
 801ec30:	2b03      	cmp	r3, #3
 801ec32:	d865      	bhi.n	801ed00 <_dtoa_r+0x298>
 801ec34:	e8df f003 	tbb	[pc, r3]
 801ec38:	5737392c 	.word	0x5737392c
 801ec3c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801ec40:	441e      	add	r6, r3
 801ec42:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801ec46:	2b20      	cmp	r3, #32
 801ec48:	bfc9      	itett	gt
 801ec4a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801ec4e:	f1c3 0320 	rsble	r3, r3, #32
 801ec52:	409f      	lslgt	r7, r3
 801ec54:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801ec58:	bfd8      	it	le
 801ec5a:	fa04 f003 	lslle.w	r0, r4, r3
 801ec5e:	f106 36ff 	add.w	r6, r6, #4294967295
 801ec62:	bfc4      	itt	gt
 801ec64:	fa24 f303 	lsrgt.w	r3, r4, r3
 801ec68:	ea47 0003 	orrgt.w	r0, r7, r3
 801ec6c:	f7e1 fc58 	bl	8000520 <__aeabi_ui2d>
 801ec70:	2201      	movs	r2, #1
 801ec72:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801ec76:	9214      	str	r2, [sp, #80]	@ 0x50
 801ec78:	e777      	b.n	801eb6a <_dtoa_r+0x102>
 801ec7a:	2301      	movs	r3, #1
 801ec7c:	e7b8      	b.n	801ebf0 <_dtoa_r+0x188>
 801ec7e:	9012      	str	r0, [sp, #72]	@ 0x48
 801ec80:	e7b7      	b.n	801ebf2 <_dtoa_r+0x18a>
 801ec82:	427b      	negs	r3, r7
 801ec84:	eba8 0807 	sub.w	r8, r8, r7
 801ec88:	930a      	str	r3, [sp, #40]	@ 0x28
 801ec8a:	2300      	movs	r3, #0
 801ec8c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ec8e:	e7c4      	b.n	801ec1a <_dtoa_r+0x1b2>
 801ec90:	2300      	movs	r3, #0
 801ec92:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ec94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ec96:	2b00      	cmp	r3, #0
 801ec98:	dc35      	bgt.n	801ed06 <_dtoa_r+0x29e>
 801ec9a:	2301      	movs	r3, #1
 801ec9c:	461a      	mov	r2, r3
 801ec9e:	9300      	str	r3, [sp, #0]
 801eca0:	9307      	str	r3, [sp, #28]
 801eca2:	920e      	str	r2, [sp, #56]	@ 0x38
 801eca4:	e00b      	b.n	801ecbe <_dtoa_r+0x256>
 801eca6:	2301      	movs	r3, #1
 801eca8:	e7f3      	b.n	801ec92 <_dtoa_r+0x22a>
 801ecaa:	2300      	movs	r3, #0
 801ecac:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ecae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ecb0:	18fb      	adds	r3, r7, r3
 801ecb2:	9300      	str	r3, [sp, #0]
 801ecb4:	3301      	adds	r3, #1
 801ecb6:	2b01      	cmp	r3, #1
 801ecb8:	9307      	str	r3, [sp, #28]
 801ecba:	bfb8      	it	lt
 801ecbc:	2301      	movlt	r3, #1
 801ecbe:	f8db 001c 	ldr.w	r0, [fp, #28]
 801ecc2:	2100      	movs	r1, #0
 801ecc4:	2204      	movs	r2, #4
 801ecc6:	f102 0514 	add.w	r5, r2, #20
 801ecca:	429d      	cmp	r5, r3
 801eccc:	d91f      	bls.n	801ed0e <_dtoa_r+0x2a6>
 801ecce:	6041      	str	r1, [r0, #4]
 801ecd0:	4658      	mov	r0, fp
 801ecd2:	f001 f81f 	bl	801fd14 <_Balloc>
 801ecd6:	4682      	mov	sl, r0
 801ecd8:	2800      	cmp	r0, #0
 801ecda:	d13b      	bne.n	801ed54 <_dtoa_r+0x2ec>
 801ecdc:	4b1a      	ldr	r3, [pc, #104]	@ (801ed48 <_dtoa_r+0x2e0>)
 801ecde:	4602      	mov	r2, r0
 801ece0:	f240 11af 	movw	r1, #431	@ 0x1af
 801ece4:	e6d7      	b.n	801ea96 <_dtoa_r+0x2e>
 801ece6:	2301      	movs	r3, #1
 801ece8:	e7e0      	b.n	801ecac <_dtoa_r+0x244>
 801ecea:	2401      	movs	r4, #1
 801ecec:	2300      	movs	r3, #0
 801ecee:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ecf0:	9309      	str	r3, [sp, #36]	@ 0x24
 801ecf2:	f04f 33ff 	mov.w	r3, #4294967295
 801ecf6:	2200      	movs	r2, #0
 801ecf8:	9300      	str	r3, [sp, #0]
 801ecfa:	9307      	str	r3, [sp, #28]
 801ecfc:	2312      	movs	r3, #18
 801ecfe:	e7d0      	b.n	801eca2 <_dtoa_r+0x23a>
 801ed00:	2301      	movs	r3, #1
 801ed02:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ed04:	e7f5      	b.n	801ecf2 <_dtoa_r+0x28a>
 801ed06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ed08:	9300      	str	r3, [sp, #0]
 801ed0a:	9307      	str	r3, [sp, #28]
 801ed0c:	e7d7      	b.n	801ecbe <_dtoa_r+0x256>
 801ed0e:	3101      	adds	r1, #1
 801ed10:	0052      	lsls	r2, r2, #1
 801ed12:	e7d8      	b.n	801ecc6 <_dtoa_r+0x25e>
 801ed14:	f3af 8000 	nop.w
 801ed18:	636f4361 	.word	0x636f4361
 801ed1c:	3fd287a7 	.word	0x3fd287a7
 801ed20:	8b60c8b3 	.word	0x8b60c8b3
 801ed24:	3fc68a28 	.word	0x3fc68a28
 801ed28:	509f79fb 	.word	0x509f79fb
 801ed2c:	3fd34413 	.word	0x3fd34413
 801ed30:	080824da 	.word	0x080824da
 801ed34:	0808259c 	.word	0x0808259c
 801ed38:	7ff00000 	.word	0x7ff00000
 801ed3c:	080824b2 	.word	0x080824b2
 801ed40:	3ff80000 	.word	0x3ff80000
 801ed44:	080826f8 	.word	0x080826f8
 801ed48:	080825f4 	.word	0x080825f4
 801ed4c:	08082598 	.word	0x08082598
 801ed50:	080824b1 	.word	0x080824b1
 801ed54:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ed58:	6018      	str	r0, [r3, #0]
 801ed5a:	9b07      	ldr	r3, [sp, #28]
 801ed5c:	2b0e      	cmp	r3, #14
 801ed5e:	f200 80a4 	bhi.w	801eeaa <_dtoa_r+0x442>
 801ed62:	2c00      	cmp	r4, #0
 801ed64:	f000 80a1 	beq.w	801eeaa <_dtoa_r+0x442>
 801ed68:	2f00      	cmp	r7, #0
 801ed6a:	dd33      	ble.n	801edd4 <_dtoa_r+0x36c>
 801ed6c:	f007 020f 	and.w	r2, r7, #15
 801ed70:	4bac      	ldr	r3, [pc, #688]	@ (801f024 <_dtoa_r+0x5bc>)
 801ed72:	05f8      	lsls	r0, r7, #23
 801ed74:	ea4f 1427 	mov.w	r4, r7, asr #4
 801ed78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ed7c:	ed93 7b00 	vldr	d7, [r3]
 801ed80:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ed84:	d516      	bpl.n	801edb4 <_dtoa_r+0x34c>
 801ed86:	4ba8      	ldr	r3, [pc, #672]	@ (801f028 <_dtoa_r+0x5c0>)
 801ed88:	f004 040f 	and.w	r4, r4, #15
 801ed8c:	2603      	movs	r6, #3
 801ed8e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ed92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ed96:	f7e1 fd67 	bl	8000868 <__aeabi_ddiv>
 801ed9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ed9e:	4da2      	ldr	r5, [pc, #648]	@ (801f028 <_dtoa_r+0x5c0>)
 801eda0:	b954      	cbnz	r4, 801edb8 <_dtoa_r+0x350>
 801eda2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801eda6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801edaa:	f7e1 fd5d 	bl	8000868 <__aeabi_ddiv>
 801edae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801edb2:	e028      	b.n	801ee06 <_dtoa_r+0x39e>
 801edb4:	2602      	movs	r6, #2
 801edb6:	e7f2      	b.n	801ed9e <_dtoa_r+0x336>
 801edb8:	07e1      	lsls	r1, r4, #31
 801edba:	d508      	bpl.n	801edce <_dtoa_r+0x366>
 801edbc:	3601      	adds	r6, #1
 801edbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801edc2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801edc6:	f7e1 fc25 	bl	8000614 <__aeabi_dmul>
 801edca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801edce:	1064      	asrs	r4, r4, #1
 801edd0:	3508      	adds	r5, #8
 801edd2:	e7e5      	b.n	801eda0 <_dtoa_r+0x338>
 801edd4:	f000 80d2 	beq.w	801ef7c <_dtoa_r+0x514>
 801edd8:	427c      	negs	r4, r7
 801edda:	4b92      	ldr	r3, [pc, #584]	@ (801f024 <_dtoa_r+0x5bc>)
 801eddc:	4d92      	ldr	r5, [pc, #584]	@ (801f028 <_dtoa_r+0x5c0>)
 801edde:	2602      	movs	r6, #2
 801ede0:	f004 020f 	and.w	r2, r4, #15
 801ede4:	1124      	asrs	r4, r4, #4
 801ede6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801edea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801edee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edf2:	f7e1 fc0f 	bl	8000614 <__aeabi_dmul>
 801edf6:	2300      	movs	r3, #0
 801edf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801edfc:	2c00      	cmp	r4, #0
 801edfe:	f040 80b2 	bne.w	801ef66 <_dtoa_r+0x4fe>
 801ee02:	2b00      	cmp	r3, #0
 801ee04:	d1d3      	bne.n	801edae <_dtoa_r+0x346>
 801ee06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ee08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801ee0c:	2b00      	cmp	r3, #0
 801ee0e:	f000 80b7 	beq.w	801ef80 <_dtoa_r+0x518>
 801ee12:	2200      	movs	r2, #0
 801ee14:	4b85      	ldr	r3, [pc, #532]	@ (801f02c <_dtoa_r+0x5c4>)
 801ee16:	4620      	mov	r0, r4
 801ee18:	4629      	mov	r1, r5
 801ee1a:	f7e1 fe6d 	bl	8000af8 <__aeabi_dcmplt>
 801ee1e:	2800      	cmp	r0, #0
 801ee20:	f000 80ae 	beq.w	801ef80 <_dtoa_r+0x518>
 801ee24:	9b07      	ldr	r3, [sp, #28]
 801ee26:	2b00      	cmp	r3, #0
 801ee28:	f000 80aa 	beq.w	801ef80 <_dtoa_r+0x518>
 801ee2c:	9b00      	ldr	r3, [sp, #0]
 801ee2e:	2b00      	cmp	r3, #0
 801ee30:	dd37      	ble.n	801eea2 <_dtoa_r+0x43a>
 801ee32:	1e7b      	subs	r3, r7, #1
 801ee34:	4620      	mov	r0, r4
 801ee36:	2200      	movs	r2, #0
 801ee38:	4629      	mov	r1, r5
 801ee3a:	9304      	str	r3, [sp, #16]
 801ee3c:	3601      	adds	r6, #1
 801ee3e:	4b7c      	ldr	r3, [pc, #496]	@ (801f030 <_dtoa_r+0x5c8>)
 801ee40:	f7e1 fbe8 	bl	8000614 <__aeabi_dmul>
 801ee44:	9c00      	ldr	r4, [sp, #0]
 801ee46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ee4a:	4630      	mov	r0, r6
 801ee4c:	f7e1 fb78 	bl	8000540 <__aeabi_i2d>
 801ee50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ee54:	f7e1 fbde 	bl	8000614 <__aeabi_dmul>
 801ee58:	2200      	movs	r2, #0
 801ee5a:	4b76      	ldr	r3, [pc, #472]	@ (801f034 <_dtoa_r+0x5cc>)
 801ee5c:	f7e1 fa24 	bl	80002a8 <__adddf3>
 801ee60:	4605      	mov	r5, r0
 801ee62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801ee66:	2c00      	cmp	r4, #0
 801ee68:	f040 808d 	bne.w	801ef86 <_dtoa_r+0x51e>
 801ee6c:	2200      	movs	r2, #0
 801ee6e:	4b72      	ldr	r3, [pc, #456]	@ (801f038 <_dtoa_r+0x5d0>)
 801ee70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee74:	f7e1 fa16 	bl	80002a4 <__aeabi_dsub>
 801ee78:	4602      	mov	r2, r0
 801ee7a:	460b      	mov	r3, r1
 801ee7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ee80:	462a      	mov	r2, r5
 801ee82:	4633      	mov	r3, r6
 801ee84:	f7e1 fe56 	bl	8000b34 <__aeabi_dcmpgt>
 801ee88:	2800      	cmp	r0, #0
 801ee8a:	f040 828b 	bne.w	801f3a4 <_dtoa_r+0x93c>
 801ee8e:	462a      	mov	r2, r5
 801ee90:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801ee94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee98:	f7e1 fe2e 	bl	8000af8 <__aeabi_dcmplt>
 801ee9c:	2800      	cmp	r0, #0
 801ee9e:	f040 8128 	bne.w	801f0f2 <_dtoa_r+0x68a>
 801eea2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801eea6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801eeaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801eeac:	2b00      	cmp	r3, #0
 801eeae:	f2c0 815a 	blt.w	801f166 <_dtoa_r+0x6fe>
 801eeb2:	2f0e      	cmp	r7, #14
 801eeb4:	f300 8157 	bgt.w	801f166 <_dtoa_r+0x6fe>
 801eeb8:	4b5a      	ldr	r3, [pc, #360]	@ (801f024 <_dtoa_r+0x5bc>)
 801eeba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801eebe:	ed93 7b00 	vldr	d7, [r3]
 801eec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eec4:	2b00      	cmp	r3, #0
 801eec6:	ed8d 7b00 	vstr	d7, [sp]
 801eeca:	da03      	bge.n	801eed4 <_dtoa_r+0x46c>
 801eecc:	9b07      	ldr	r3, [sp, #28]
 801eece:	2b00      	cmp	r3, #0
 801eed0:	f340 8101 	ble.w	801f0d6 <_dtoa_r+0x66e>
 801eed4:	4656      	mov	r6, sl
 801eed6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801eeda:	e9dd 2300 	ldrd	r2, r3, [sp]
 801eede:	4620      	mov	r0, r4
 801eee0:	4629      	mov	r1, r5
 801eee2:	f7e1 fcc1 	bl	8000868 <__aeabi_ddiv>
 801eee6:	f7e1 fe45 	bl	8000b74 <__aeabi_d2iz>
 801eeea:	4680      	mov	r8, r0
 801eeec:	f7e1 fb28 	bl	8000540 <__aeabi_i2d>
 801eef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801eef4:	f7e1 fb8e 	bl	8000614 <__aeabi_dmul>
 801eef8:	4602      	mov	r2, r0
 801eefa:	4620      	mov	r0, r4
 801eefc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801ef00:	460b      	mov	r3, r1
 801ef02:	4629      	mov	r1, r5
 801ef04:	f7e1 f9ce 	bl	80002a4 <__aeabi_dsub>
 801ef08:	9d07      	ldr	r5, [sp, #28]
 801ef0a:	f806 4b01 	strb.w	r4, [r6], #1
 801ef0e:	eba6 040a 	sub.w	r4, r6, sl
 801ef12:	4602      	mov	r2, r0
 801ef14:	460b      	mov	r3, r1
 801ef16:	42a5      	cmp	r5, r4
 801ef18:	f040 8117 	bne.w	801f14a <_dtoa_r+0x6e2>
 801ef1c:	f7e1 f9c4 	bl	80002a8 <__adddf3>
 801ef20:	4604      	mov	r4, r0
 801ef22:	460d      	mov	r5, r1
 801ef24:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ef28:	f7e1 fe04 	bl	8000b34 <__aeabi_dcmpgt>
 801ef2c:	2800      	cmp	r0, #0
 801ef2e:	f040 80f9 	bne.w	801f124 <_dtoa_r+0x6bc>
 801ef32:	4620      	mov	r0, r4
 801ef34:	4629      	mov	r1, r5
 801ef36:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ef3a:	f7e1 fdd3 	bl	8000ae4 <__aeabi_dcmpeq>
 801ef3e:	b118      	cbz	r0, 801ef48 <_dtoa_r+0x4e0>
 801ef40:	f018 0f01 	tst.w	r8, #1
 801ef44:	f040 80ee 	bne.w	801f124 <_dtoa_r+0x6bc>
 801ef48:	4649      	mov	r1, r9
 801ef4a:	4658      	mov	r0, fp
 801ef4c:	f000 ff22 	bl	801fd94 <_Bfree>
 801ef50:	2300      	movs	r3, #0
 801ef52:	3701      	adds	r7, #1
 801ef54:	7033      	strb	r3, [r6, #0]
 801ef56:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ef58:	601f      	str	r7, [r3, #0]
 801ef5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ef5c:	2b00      	cmp	r3, #0
 801ef5e:	f000 831d 	beq.w	801f59c <_dtoa_r+0xb34>
 801ef62:	601e      	str	r6, [r3, #0]
 801ef64:	e31a      	b.n	801f59c <_dtoa_r+0xb34>
 801ef66:	07e2      	lsls	r2, r4, #31
 801ef68:	d505      	bpl.n	801ef76 <_dtoa_r+0x50e>
 801ef6a:	3601      	adds	r6, #1
 801ef6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ef70:	f7e1 fb50 	bl	8000614 <__aeabi_dmul>
 801ef74:	2301      	movs	r3, #1
 801ef76:	1064      	asrs	r4, r4, #1
 801ef78:	3508      	adds	r5, #8
 801ef7a:	e73f      	b.n	801edfc <_dtoa_r+0x394>
 801ef7c:	2602      	movs	r6, #2
 801ef7e:	e742      	b.n	801ee06 <_dtoa_r+0x39e>
 801ef80:	9c07      	ldr	r4, [sp, #28]
 801ef82:	9704      	str	r7, [sp, #16]
 801ef84:	e761      	b.n	801ee4a <_dtoa_r+0x3e2>
 801ef86:	4b27      	ldr	r3, [pc, #156]	@ (801f024 <_dtoa_r+0x5bc>)
 801ef88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ef8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ef8e:	4454      	add	r4, sl
 801ef90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ef94:	2900      	cmp	r1, #0
 801ef96:	d053      	beq.n	801f040 <_dtoa_r+0x5d8>
 801ef98:	2000      	movs	r0, #0
 801ef9a:	4928      	ldr	r1, [pc, #160]	@ (801f03c <_dtoa_r+0x5d4>)
 801ef9c:	f7e1 fc64 	bl	8000868 <__aeabi_ddiv>
 801efa0:	4633      	mov	r3, r6
 801efa2:	4656      	mov	r6, sl
 801efa4:	462a      	mov	r2, r5
 801efa6:	f7e1 f97d 	bl	80002a4 <__aeabi_dsub>
 801efaa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801efae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801efb2:	f7e1 fddf 	bl	8000b74 <__aeabi_d2iz>
 801efb6:	4605      	mov	r5, r0
 801efb8:	f7e1 fac2 	bl	8000540 <__aeabi_i2d>
 801efbc:	4602      	mov	r2, r0
 801efbe:	460b      	mov	r3, r1
 801efc0:	3530      	adds	r5, #48	@ 0x30
 801efc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801efc6:	f7e1 f96d 	bl	80002a4 <__aeabi_dsub>
 801efca:	4602      	mov	r2, r0
 801efcc:	460b      	mov	r3, r1
 801efce:	f806 5b01 	strb.w	r5, [r6], #1
 801efd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801efd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801efda:	f7e1 fd8d 	bl	8000af8 <__aeabi_dcmplt>
 801efde:	2800      	cmp	r0, #0
 801efe0:	d171      	bne.n	801f0c6 <_dtoa_r+0x65e>
 801efe2:	2000      	movs	r0, #0
 801efe4:	4911      	ldr	r1, [pc, #68]	@ (801f02c <_dtoa_r+0x5c4>)
 801efe6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801efea:	f7e1 f95b 	bl	80002a4 <__aeabi_dsub>
 801efee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801eff2:	f7e1 fd81 	bl	8000af8 <__aeabi_dcmplt>
 801eff6:	2800      	cmp	r0, #0
 801eff8:	f040 8095 	bne.w	801f126 <_dtoa_r+0x6be>
 801effc:	42a6      	cmp	r6, r4
 801effe:	f43f af50 	beq.w	801eea2 <_dtoa_r+0x43a>
 801f002:	2200      	movs	r2, #0
 801f004:	4b0a      	ldr	r3, [pc, #40]	@ (801f030 <_dtoa_r+0x5c8>)
 801f006:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f00a:	f7e1 fb03 	bl	8000614 <__aeabi_dmul>
 801f00e:	2200      	movs	r2, #0
 801f010:	4b07      	ldr	r3, [pc, #28]	@ (801f030 <_dtoa_r+0x5c8>)
 801f012:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f01a:	f7e1 fafb 	bl	8000614 <__aeabi_dmul>
 801f01e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f022:	e7c4      	b.n	801efae <_dtoa_r+0x546>
 801f024:	080826f8 	.word	0x080826f8
 801f028:	080826d0 	.word	0x080826d0
 801f02c:	3ff00000 	.word	0x3ff00000
 801f030:	40240000 	.word	0x40240000
 801f034:	401c0000 	.word	0x401c0000
 801f038:	40140000 	.word	0x40140000
 801f03c:	3fe00000 	.word	0x3fe00000
 801f040:	4631      	mov	r1, r6
 801f042:	4656      	mov	r6, sl
 801f044:	4628      	mov	r0, r5
 801f046:	f7e1 fae5 	bl	8000614 <__aeabi_dmul>
 801f04a:	9415      	str	r4, [sp, #84]	@ 0x54
 801f04c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f054:	f7e1 fd8e 	bl	8000b74 <__aeabi_d2iz>
 801f058:	4605      	mov	r5, r0
 801f05a:	f7e1 fa71 	bl	8000540 <__aeabi_i2d>
 801f05e:	4602      	mov	r2, r0
 801f060:	3530      	adds	r5, #48	@ 0x30
 801f062:	460b      	mov	r3, r1
 801f064:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f068:	f7e1 f91c 	bl	80002a4 <__aeabi_dsub>
 801f06c:	f806 5b01 	strb.w	r5, [r6], #1
 801f070:	4602      	mov	r2, r0
 801f072:	460b      	mov	r3, r1
 801f074:	42a6      	cmp	r6, r4
 801f076:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f07a:	f04f 0200 	mov.w	r2, #0
 801f07e:	d124      	bne.n	801f0ca <_dtoa_r+0x662>
 801f080:	4bac      	ldr	r3, [pc, #688]	@ (801f334 <_dtoa_r+0x8cc>)
 801f082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f086:	f7e1 f90f 	bl	80002a8 <__adddf3>
 801f08a:	4602      	mov	r2, r0
 801f08c:	460b      	mov	r3, r1
 801f08e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f092:	f7e1 fd4f 	bl	8000b34 <__aeabi_dcmpgt>
 801f096:	2800      	cmp	r0, #0
 801f098:	d145      	bne.n	801f126 <_dtoa_r+0x6be>
 801f09a:	2000      	movs	r0, #0
 801f09c:	49a5      	ldr	r1, [pc, #660]	@ (801f334 <_dtoa_r+0x8cc>)
 801f09e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f0a2:	f7e1 f8ff 	bl	80002a4 <__aeabi_dsub>
 801f0a6:	4602      	mov	r2, r0
 801f0a8:	460b      	mov	r3, r1
 801f0aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f0ae:	f7e1 fd23 	bl	8000af8 <__aeabi_dcmplt>
 801f0b2:	2800      	cmp	r0, #0
 801f0b4:	f43f aef5 	beq.w	801eea2 <_dtoa_r+0x43a>
 801f0b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801f0ba:	1e73      	subs	r3, r6, #1
 801f0bc:	9315      	str	r3, [sp, #84]	@ 0x54
 801f0be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f0c2:	2b30      	cmp	r3, #48	@ 0x30
 801f0c4:	d0f8      	beq.n	801f0b8 <_dtoa_r+0x650>
 801f0c6:	9f04      	ldr	r7, [sp, #16]
 801f0c8:	e73e      	b.n	801ef48 <_dtoa_r+0x4e0>
 801f0ca:	4b9b      	ldr	r3, [pc, #620]	@ (801f338 <_dtoa_r+0x8d0>)
 801f0cc:	f7e1 faa2 	bl	8000614 <__aeabi_dmul>
 801f0d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f0d4:	e7bc      	b.n	801f050 <_dtoa_r+0x5e8>
 801f0d6:	d10c      	bne.n	801f0f2 <_dtoa_r+0x68a>
 801f0d8:	2200      	movs	r2, #0
 801f0da:	4b98      	ldr	r3, [pc, #608]	@ (801f33c <_dtoa_r+0x8d4>)
 801f0dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f0e0:	f7e1 fa98 	bl	8000614 <__aeabi_dmul>
 801f0e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f0e8:	f7e1 fd1a 	bl	8000b20 <__aeabi_dcmpge>
 801f0ec:	2800      	cmp	r0, #0
 801f0ee:	f000 8157 	beq.w	801f3a0 <_dtoa_r+0x938>
 801f0f2:	2400      	movs	r4, #0
 801f0f4:	4625      	mov	r5, r4
 801f0f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f0f8:	4656      	mov	r6, sl
 801f0fa:	43db      	mvns	r3, r3
 801f0fc:	9304      	str	r3, [sp, #16]
 801f0fe:	2700      	movs	r7, #0
 801f100:	4621      	mov	r1, r4
 801f102:	4658      	mov	r0, fp
 801f104:	f000 fe46 	bl	801fd94 <_Bfree>
 801f108:	2d00      	cmp	r5, #0
 801f10a:	d0dc      	beq.n	801f0c6 <_dtoa_r+0x65e>
 801f10c:	b12f      	cbz	r7, 801f11a <_dtoa_r+0x6b2>
 801f10e:	42af      	cmp	r7, r5
 801f110:	d003      	beq.n	801f11a <_dtoa_r+0x6b2>
 801f112:	4639      	mov	r1, r7
 801f114:	4658      	mov	r0, fp
 801f116:	f000 fe3d 	bl	801fd94 <_Bfree>
 801f11a:	4629      	mov	r1, r5
 801f11c:	4658      	mov	r0, fp
 801f11e:	f000 fe39 	bl	801fd94 <_Bfree>
 801f122:	e7d0      	b.n	801f0c6 <_dtoa_r+0x65e>
 801f124:	9704      	str	r7, [sp, #16]
 801f126:	4633      	mov	r3, r6
 801f128:	461e      	mov	r6, r3
 801f12a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f12e:	2a39      	cmp	r2, #57	@ 0x39
 801f130:	d107      	bne.n	801f142 <_dtoa_r+0x6da>
 801f132:	459a      	cmp	sl, r3
 801f134:	d1f8      	bne.n	801f128 <_dtoa_r+0x6c0>
 801f136:	9a04      	ldr	r2, [sp, #16]
 801f138:	3201      	adds	r2, #1
 801f13a:	9204      	str	r2, [sp, #16]
 801f13c:	2230      	movs	r2, #48	@ 0x30
 801f13e:	f88a 2000 	strb.w	r2, [sl]
 801f142:	781a      	ldrb	r2, [r3, #0]
 801f144:	3201      	adds	r2, #1
 801f146:	701a      	strb	r2, [r3, #0]
 801f148:	e7bd      	b.n	801f0c6 <_dtoa_r+0x65e>
 801f14a:	2200      	movs	r2, #0
 801f14c:	4b7a      	ldr	r3, [pc, #488]	@ (801f338 <_dtoa_r+0x8d0>)
 801f14e:	f7e1 fa61 	bl	8000614 <__aeabi_dmul>
 801f152:	2200      	movs	r2, #0
 801f154:	2300      	movs	r3, #0
 801f156:	4604      	mov	r4, r0
 801f158:	460d      	mov	r5, r1
 801f15a:	f7e1 fcc3 	bl	8000ae4 <__aeabi_dcmpeq>
 801f15e:	2800      	cmp	r0, #0
 801f160:	f43f aebb 	beq.w	801eeda <_dtoa_r+0x472>
 801f164:	e6f0      	b.n	801ef48 <_dtoa_r+0x4e0>
 801f166:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f168:	2a00      	cmp	r2, #0
 801f16a:	f000 80db 	beq.w	801f324 <_dtoa_r+0x8bc>
 801f16e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f170:	2a01      	cmp	r2, #1
 801f172:	f300 80bf 	bgt.w	801f2f4 <_dtoa_r+0x88c>
 801f176:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f178:	2a00      	cmp	r2, #0
 801f17a:	f000 80b7 	beq.w	801f2ec <_dtoa_r+0x884>
 801f17e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801f182:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f184:	4646      	mov	r6, r8
 801f186:	9a08      	ldr	r2, [sp, #32]
 801f188:	2101      	movs	r1, #1
 801f18a:	4658      	mov	r0, fp
 801f18c:	4498      	add	r8, r3
 801f18e:	441a      	add	r2, r3
 801f190:	9208      	str	r2, [sp, #32]
 801f192:	f000 feff 	bl	801ff94 <__i2b>
 801f196:	4605      	mov	r5, r0
 801f198:	b15e      	cbz	r6, 801f1b2 <_dtoa_r+0x74a>
 801f19a:	9b08      	ldr	r3, [sp, #32]
 801f19c:	2b00      	cmp	r3, #0
 801f19e:	dd08      	ble.n	801f1b2 <_dtoa_r+0x74a>
 801f1a0:	42b3      	cmp	r3, r6
 801f1a2:	9a08      	ldr	r2, [sp, #32]
 801f1a4:	bfa8      	it	ge
 801f1a6:	4633      	movge	r3, r6
 801f1a8:	eba8 0803 	sub.w	r8, r8, r3
 801f1ac:	1af6      	subs	r6, r6, r3
 801f1ae:	1ad3      	subs	r3, r2, r3
 801f1b0:	9308      	str	r3, [sp, #32]
 801f1b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f1b4:	b1f3      	cbz	r3, 801f1f4 <_dtoa_r+0x78c>
 801f1b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	f000 80b7 	beq.w	801f32c <_dtoa_r+0x8c4>
 801f1be:	b18c      	cbz	r4, 801f1e4 <_dtoa_r+0x77c>
 801f1c0:	4629      	mov	r1, r5
 801f1c2:	4622      	mov	r2, r4
 801f1c4:	4658      	mov	r0, fp
 801f1c6:	f000 ffa5 	bl	8020114 <__pow5mult>
 801f1ca:	464a      	mov	r2, r9
 801f1cc:	4601      	mov	r1, r0
 801f1ce:	4605      	mov	r5, r0
 801f1d0:	4658      	mov	r0, fp
 801f1d2:	f000 fef5 	bl	801ffc0 <__multiply>
 801f1d6:	4649      	mov	r1, r9
 801f1d8:	9004      	str	r0, [sp, #16]
 801f1da:	4658      	mov	r0, fp
 801f1dc:	f000 fdda 	bl	801fd94 <_Bfree>
 801f1e0:	9b04      	ldr	r3, [sp, #16]
 801f1e2:	4699      	mov	r9, r3
 801f1e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f1e6:	1b1a      	subs	r2, r3, r4
 801f1e8:	d004      	beq.n	801f1f4 <_dtoa_r+0x78c>
 801f1ea:	4649      	mov	r1, r9
 801f1ec:	4658      	mov	r0, fp
 801f1ee:	f000 ff91 	bl	8020114 <__pow5mult>
 801f1f2:	4681      	mov	r9, r0
 801f1f4:	2101      	movs	r1, #1
 801f1f6:	4658      	mov	r0, fp
 801f1f8:	f000 fecc 	bl	801ff94 <__i2b>
 801f1fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f1fe:	4604      	mov	r4, r0
 801f200:	2b00      	cmp	r3, #0
 801f202:	f000 81cf 	beq.w	801f5a4 <_dtoa_r+0xb3c>
 801f206:	461a      	mov	r2, r3
 801f208:	4601      	mov	r1, r0
 801f20a:	4658      	mov	r0, fp
 801f20c:	f000 ff82 	bl	8020114 <__pow5mult>
 801f210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f212:	4604      	mov	r4, r0
 801f214:	2b01      	cmp	r3, #1
 801f216:	f300 8095 	bgt.w	801f344 <_dtoa_r+0x8dc>
 801f21a:	9b02      	ldr	r3, [sp, #8]
 801f21c:	2b00      	cmp	r3, #0
 801f21e:	f040 8087 	bne.w	801f330 <_dtoa_r+0x8c8>
 801f222:	9b03      	ldr	r3, [sp, #12]
 801f224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f228:	2b00      	cmp	r3, #0
 801f22a:	f040 8089 	bne.w	801f340 <_dtoa_r+0x8d8>
 801f22e:	9b03      	ldr	r3, [sp, #12]
 801f230:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f234:	0d1b      	lsrs	r3, r3, #20
 801f236:	051b      	lsls	r3, r3, #20
 801f238:	b12b      	cbz	r3, 801f246 <_dtoa_r+0x7de>
 801f23a:	9b08      	ldr	r3, [sp, #32]
 801f23c:	f108 0801 	add.w	r8, r8, #1
 801f240:	3301      	adds	r3, #1
 801f242:	9308      	str	r3, [sp, #32]
 801f244:	2301      	movs	r3, #1
 801f246:	930a      	str	r3, [sp, #40]	@ 0x28
 801f248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f24a:	2b00      	cmp	r3, #0
 801f24c:	f000 81b0 	beq.w	801f5b0 <_dtoa_r+0xb48>
 801f250:	6923      	ldr	r3, [r4, #16]
 801f252:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f256:	6918      	ldr	r0, [r3, #16]
 801f258:	f000 fe50 	bl	801fefc <__hi0bits>
 801f25c:	f1c0 0020 	rsb	r0, r0, #32
 801f260:	9b08      	ldr	r3, [sp, #32]
 801f262:	4418      	add	r0, r3
 801f264:	f010 001f 	ands.w	r0, r0, #31
 801f268:	d077      	beq.n	801f35a <_dtoa_r+0x8f2>
 801f26a:	f1c0 0320 	rsb	r3, r0, #32
 801f26e:	2b04      	cmp	r3, #4
 801f270:	dd6b      	ble.n	801f34a <_dtoa_r+0x8e2>
 801f272:	f1c0 001c 	rsb	r0, r0, #28
 801f276:	9b08      	ldr	r3, [sp, #32]
 801f278:	4480      	add	r8, r0
 801f27a:	4403      	add	r3, r0
 801f27c:	4406      	add	r6, r0
 801f27e:	9308      	str	r3, [sp, #32]
 801f280:	f1b8 0f00 	cmp.w	r8, #0
 801f284:	dd05      	ble.n	801f292 <_dtoa_r+0x82a>
 801f286:	4649      	mov	r1, r9
 801f288:	4642      	mov	r2, r8
 801f28a:	4658      	mov	r0, fp
 801f28c:	f000 ff9c 	bl	80201c8 <__lshift>
 801f290:	4681      	mov	r9, r0
 801f292:	9b08      	ldr	r3, [sp, #32]
 801f294:	2b00      	cmp	r3, #0
 801f296:	dd05      	ble.n	801f2a4 <_dtoa_r+0x83c>
 801f298:	4621      	mov	r1, r4
 801f29a:	461a      	mov	r2, r3
 801f29c:	4658      	mov	r0, fp
 801f29e:	f000 ff93 	bl	80201c8 <__lshift>
 801f2a2:	4604      	mov	r4, r0
 801f2a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f2a6:	2b00      	cmp	r3, #0
 801f2a8:	d059      	beq.n	801f35e <_dtoa_r+0x8f6>
 801f2aa:	4621      	mov	r1, r4
 801f2ac:	4648      	mov	r0, r9
 801f2ae:	f000 fff7 	bl	80202a0 <__mcmp>
 801f2b2:	2800      	cmp	r0, #0
 801f2b4:	da53      	bge.n	801f35e <_dtoa_r+0x8f6>
 801f2b6:	1e7b      	subs	r3, r7, #1
 801f2b8:	4649      	mov	r1, r9
 801f2ba:	220a      	movs	r2, #10
 801f2bc:	4658      	mov	r0, fp
 801f2be:	9304      	str	r3, [sp, #16]
 801f2c0:	2300      	movs	r3, #0
 801f2c2:	f000 fd89 	bl	801fdd8 <__multadd>
 801f2c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f2c8:	4681      	mov	r9, r0
 801f2ca:	2b00      	cmp	r3, #0
 801f2cc:	f000 8172 	beq.w	801f5b4 <_dtoa_r+0xb4c>
 801f2d0:	2300      	movs	r3, #0
 801f2d2:	4629      	mov	r1, r5
 801f2d4:	220a      	movs	r2, #10
 801f2d6:	4658      	mov	r0, fp
 801f2d8:	f000 fd7e 	bl	801fdd8 <__multadd>
 801f2dc:	9b00      	ldr	r3, [sp, #0]
 801f2de:	4605      	mov	r5, r0
 801f2e0:	2b00      	cmp	r3, #0
 801f2e2:	dc67      	bgt.n	801f3b4 <_dtoa_r+0x94c>
 801f2e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f2e6:	2b02      	cmp	r3, #2
 801f2e8:	dc41      	bgt.n	801f36e <_dtoa_r+0x906>
 801f2ea:	e063      	b.n	801f3b4 <_dtoa_r+0x94c>
 801f2ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f2ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801f2f2:	e746      	b.n	801f182 <_dtoa_r+0x71a>
 801f2f4:	9b07      	ldr	r3, [sp, #28]
 801f2f6:	1e5c      	subs	r4, r3, #1
 801f2f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f2fa:	42a3      	cmp	r3, r4
 801f2fc:	bfb7      	itett	lt
 801f2fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801f300:	1b1c      	subge	r4, r3, r4
 801f302:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801f304:	1ae3      	sublt	r3, r4, r3
 801f306:	bfbe      	ittt	lt
 801f308:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801f30a:	2400      	movlt	r4, #0
 801f30c:	18d2      	addlt	r2, r2, r3
 801f30e:	9b07      	ldr	r3, [sp, #28]
 801f310:	bfb8      	it	lt
 801f312:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801f314:	2b00      	cmp	r3, #0
 801f316:	bfb5      	itete	lt
 801f318:	eba8 0603 	sublt.w	r6, r8, r3
 801f31c:	4646      	movge	r6, r8
 801f31e:	2300      	movlt	r3, #0
 801f320:	9b07      	ldrge	r3, [sp, #28]
 801f322:	e730      	b.n	801f186 <_dtoa_r+0x71e>
 801f324:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f326:	4646      	mov	r6, r8
 801f328:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801f32a:	e735      	b.n	801f198 <_dtoa_r+0x730>
 801f32c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f32e:	e75c      	b.n	801f1ea <_dtoa_r+0x782>
 801f330:	2300      	movs	r3, #0
 801f332:	e788      	b.n	801f246 <_dtoa_r+0x7de>
 801f334:	3fe00000 	.word	0x3fe00000
 801f338:	40240000 	.word	0x40240000
 801f33c:	40140000 	.word	0x40140000
 801f340:	9b02      	ldr	r3, [sp, #8]
 801f342:	e780      	b.n	801f246 <_dtoa_r+0x7de>
 801f344:	2300      	movs	r3, #0
 801f346:	930a      	str	r3, [sp, #40]	@ 0x28
 801f348:	e782      	b.n	801f250 <_dtoa_r+0x7e8>
 801f34a:	d099      	beq.n	801f280 <_dtoa_r+0x818>
 801f34c:	331c      	adds	r3, #28
 801f34e:	9a08      	ldr	r2, [sp, #32]
 801f350:	441a      	add	r2, r3
 801f352:	4498      	add	r8, r3
 801f354:	441e      	add	r6, r3
 801f356:	9208      	str	r2, [sp, #32]
 801f358:	e792      	b.n	801f280 <_dtoa_r+0x818>
 801f35a:	4603      	mov	r3, r0
 801f35c:	e7f6      	b.n	801f34c <_dtoa_r+0x8e4>
 801f35e:	9b07      	ldr	r3, [sp, #28]
 801f360:	9704      	str	r7, [sp, #16]
 801f362:	2b00      	cmp	r3, #0
 801f364:	dc20      	bgt.n	801f3a8 <_dtoa_r+0x940>
 801f366:	9300      	str	r3, [sp, #0]
 801f368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f36a:	2b02      	cmp	r3, #2
 801f36c:	dd1e      	ble.n	801f3ac <_dtoa_r+0x944>
 801f36e:	9b00      	ldr	r3, [sp, #0]
 801f370:	2b00      	cmp	r3, #0
 801f372:	f47f aec0 	bne.w	801f0f6 <_dtoa_r+0x68e>
 801f376:	4621      	mov	r1, r4
 801f378:	2205      	movs	r2, #5
 801f37a:	4658      	mov	r0, fp
 801f37c:	f000 fd2c 	bl	801fdd8 <__multadd>
 801f380:	4601      	mov	r1, r0
 801f382:	4604      	mov	r4, r0
 801f384:	4648      	mov	r0, r9
 801f386:	f000 ff8b 	bl	80202a0 <__mcmp>
 801f38a:	2800      	cmp	r0, #0
 801f38c:	f77f aeb3 	ble.w	801f0f6 <_dtoa_r+0x68e>
 801f390:	2331      	movs	r3, #49	@ 0x31
 801f392:	4656      	mov	r6, sl
 801f394:	f806 3b01 	strb.w	r3, [r6], #1
 801f398:	9b04      	ldr	r3, [sp, #16]
 801f39a:	3301      	adds	r3, #1
 801f39c:	9304      	str	r3, [sp, #16]
 801f39e:	e6ae      	b.n	801f0fe <_dtoa_r+0x696>
 801f3a0:	9c07      	ldr	r4, [sp, #28]
 801f3a2:	9704      	str	r7, [sp, #16]
 801f3a4:	4625      	mov	r5, r4
 801f3a6:	e7f3      	b.n	801f390 <_dtoa_r+0x928>
 801f3a8:	9b07      	ldr	r3, [sp, #28]
 801f3aa:	9300      	str	r3, [sp, #0]
 801f3ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f3ae:	2b00      	cmp	r3, #0
 801f3b0:	f000 8104 	beq.w	801f5bc <_dtoa_r+0xb54>
 801f3b4:	2e00      	cmp	r6, #0
 801f3b6:	dd05      	ble.n	801f3c4 <_dtoa_r+0x95c>
 801f3b8:	4629      	mov	r1, r5
 801f3ba:	4632      	mov	r2, r6
 801f3bc:	4658      	mov	r0, fp
 801f3be:	f000 ff03 	bl	80201c8 <__lshift>
 801f3c2:	4605      	mov	r5, r0
 801f3c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f3c6:	2b00      	cmp	r3, #0
 801f3c8:	d05a      	beq.n	801f480 <_dtoa_r+0xa18>
 801f3ca:	6869      	ldr	r1, [r5, #4]
 801f3cc:	4658      	mov	r0, fp
 801f3ce:	f000 fca1 	bl	801fd14 <_Balloc>
 801f3d2:	4606      	mov	r6, r0
 801f3d4:	b928      	cbnz	r0, 801f3e2 <_dtoa_r+0x97a>
 801f3d6:	4b84      	ldr	r3, [pc, #528]	@ (801f5e8 <_dtoa_r+0xb80>)
 801f3d8:	4602      	mov	r2, r0
 801f3da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801f3de:	f7ff bb5a 	b.w	801ea96 <_dtoa_r+0x2e>
 801f3e2:	692a      	ldr	r2, [r5, #16]
 801f3e4:	f105 010c 	add.w	r1, r5, #12
 801f3e8:	300c      	adds	r0, #12
 801f3ea:	3202      	adds	r2, #2
 801f3ec:	0092      	lsls	r2, r2, #2
 801f3ee:	f7ff fa70 	bl	801e8d2 <memcpy>
 801f3f2:	2201      	movs	r2, #1
 801f3f4:	4631      	mov	r1, r6
 801f3f6:	4658      	mov	r0, fp
 801f3f8:	f000 fee6 	bl	80201c8 <__lshift>
 801f3fc:	f10a 0301 	add.w	r3, sl, #1
 801f400:	462f      	mov	r7, r5
 801f402:	4605      	mov	r5, r0
 801f404:	9307      	str	r3, [sp, #28]
 801f406:	9b00      	ldr	r3, [sp, #0]
 801f408:	4453      	add	r3, sl
 801f40a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f40c:	9b02      	ldr	r3, [sp, #8]
 801f40e:	f003 0301 	and.w	r3, r3, #1
 801f412:	930a      	str	r3, [sp, #40]	@ 0x28
 801f414:	9b07      	ldr	r3, [sp, #28]
 801f416:	4621      	mov	r1, r4
 801f418:	4648      	mov	r0, r9
 801f41a:	3b01      	subs	r3, #1
 801f41c:	9300      	str	r3, [sp, #0]
 801f41e:	f7ff fa93 	bl	801e948 <quorem>
 801f422:	4639      	mov	r1, r7
 801f424:	9002      	str	r0, [sp, #8]
 801f426:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801f42a:	4648      	mov	r0, r9
 801f42c:	f000 ff38 	bl	80202a0 <__mcmp>
 801f430:	462a      	mov	r2, r5
 801f432:	9008      	str	r0, [sp, #32]
 801f434:	4621      	mov	r1, r4
 801f436:	4658      	mov	r0, fp
 801f438:	f000 ff4e 	bl	80202d8 <__mdiff>
 801f43c:	68c2      	ldr	r2, [r0, #12]
 801f43e:	4606      	mov	r6, r0
 801f440:	bb02      	cbnz	r2, 801f484 <_dtoa_r+0xa1c>
 801f442:	4601      	mov	r1, r0
 801f444:	4648      	mov	r0, r9
 801f446:	f000 ff2b 	bl	80202a0 <__mcmp>
 801f44a:	4602      	mov	r2, r0
 801f44c:	4631      	mov	r1, r6
 801f44e:	4658      	mov	r0, fp
 801f450:	920e      	str	r2, [sp, #56]	@ 0x38
 801f452:	f000 fc9f 	bl	801fd94 <_Bfree>
 801f456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f458:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f45a:	9e07      	ldr	r6, [sp, #28]
 801f45c:	ea43 0102 	orr.w	r1, r3, r2
 801f460:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f462:	4319      	orrs	r1, r3
 801f464:	d110      	bne.n	801f488 <_dtoa_r+0xa20>
 801f466:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f46a:	d029      	beq.n	801f4c0 <_dtoa_r+0xa58>
 801f46c:	9b08      	ldr	r3, [sp, #32]
 801f46e:	2b00      	cmp	r3, #0
 801f470:	dd02      	ble.n	801f478 <_dtoa_r+0xa10>
 801f472:	9b02      	ldr	r3, [sp, #8]
 801f474:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801f478:	9b00      	ldr	r3, [sp, #0]
 801f47a:	f883 8000 	strb.w	r8, [r3]
 801f47e:	e63f      	b.n	801f100 <_dtoa_r+0x698>
 801f480:	4628      	mov	r0, r5
 801f482:	e7bb      	b.n	801f3fc <_dtoa_r+0x994>
 801f484:	2201      	movs	r2, #1
 801f486:	e7e1      	b.n	801f44c <_dtoa_r+0x9e4>
 801f488:	9b08      	ldr	r3, [sp, #32]
 801f48a:	2b00      	cmp	r3, #0
 801f48c:	db04      	blt.n	801f498 <_dtoa_r+0xa30>
 801f48e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f490:	430b      	orrs	r3, r1
 801f492:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f494:	430b      	orrs	r3, r1
 801f496:	d120      	bne.n	801f4da <_dtoa_r+0xa72>
 801f498:	2a00      	cmp	r2, #0
 801f49a:	dded      	ble.n	801f478 <_dtoa_r+0xa10>
 801f49c:	4649      	mov	r1, r9
 801f49e:	2201      	movs	r2, #1
 801f4a0:	4658      	mov	r0, fp
 801f4a2:	f000 fe91 	bl	80201c8 <__lshift>
 801f4a6:	4621      	mov	r1, r4
 801f4a8:	4681      	mov	r9, r0
 801f4aa:	f000 fef9 	bl	80202a0 <__mcmp>
 801f4ae:	2800      	cmp	r0, #0
 801f4b0:	dc03      	bgt.n	801f4ba <_dtoa_r+0xa52>
 801f4b2:	d1e1      	bne.n	801f478 <_dtoa_r+0xa10>
 801f4b4:	f018 0f01 	tst.w	r8, #1
 801f4b8:	d0de      	beq.n	801f478 <_dtoa_r+0xa10>
 801f4ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f4be:	d1d8      	bne.n	801f472 <_dtoa_r+0xa0a>
 801f4c0:	2339      	movs	r3, #57	@ 0x39
 801f4c2:	9a00      	ldr	r2, [sp, #0]
 801f4c4:	7013      	strb	r3, [r2, #0]
 801f4c6:	4633      	mov	r3, r6
 801f4c8:	461e      	mov	r6, r3
 801f4ca:	3b01      	subs	r3, #1
 801f4cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801f4d0:	2a39      	cmp	r2, #57	@ 0x39
 801f4d2:	d052      	beq.n	801f57a <_dtoa_r+0xb12>
 801f4d4:	3201      	adds	r2, #1
 801f4d6:	701a      	strb	r2, [r3, #0]
 801f4d8:	e612      	b.n	801f100 <_dtoa_r+0x698>
 801f4da:	2a00      	cmp	r2, #0
 801f4dc:	dd07      	ble.n	801f4ee <_dtoa_r+0xa86>
 801f4de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f4e2:	d0ed      	beq.n	801f4c0 <_dtoa_r+0xa58>
 801f4e4:	f108 0301 	add.w	r3, r8, #1
 801f4e8:	9a00      	ldr	r2, [sp, #0]
 801f4ea:	7013      	strb	r3, [r2, #0]
 801f4ec:	e608      	b.n	801f100 <_dtoa_r+0x698>
 801f4ee:	9b07      	ldr	r3, [sp, #28]
 801f4f0:	9a07      	ldr	r2, [sp, #28]
 801f4f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 801f4f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f4f8:	4293      	cmp	r3, r2
 801f4fa:	d028      	beq.n	801f54e <_dtoa_r+0xae6>
 801f4fc:	4649      	mov	r1, r9
 801f4fe:	2300      	movs	r3, #0
 801f500:	220a      	movs	r2, #10
 801f502:	4658      	mov	r0, fp
 801f504:	f000 fc68 	bl	801fdd8 <__multadd>
 801f508:	42af      	cmp	r7, r5
 801f50a:	4681      	mov	r9, r0
 801f50c:	f04f 0300 	mov.w	r3, #0
 801f510:	f04f 020a 	mov.w	r2, #10
 801f514:	4639      	mov	r1, r7
 801f516:	4658      	mov	r0, fp
 801f518:	d107      	bne.n	801f52a <_dtoa_r+0xac2>
 801f51a:	f000 fc5d 	bl	801fdd8 <__multadd>
 801f51e:	4607      	mov	r7, r0
 801f520:	4605      	mov	r5, r0
 801f522:	9b07      	ldr	r3, [sp, #28]
 801f524:	3301      	adds	r3, #1
 801f526:	9307      	str	r3, [sp, #28]
 801f528:	e774      	b.n	801f414 <_dtoa_r+0x9ac>
 801f52a:	f000 fc55 	bl	801fdd8 <__multadd>
 801f52e:	4629      	mov	r1, r5
 801f530:	4607      	mov	r7, r0
 801f532:	2300      	movs	r3, #0
 801f534:	220a      	movs	r2, #10
 801f536:	4658      	mov	r0, fp
 801f538:	f000 fc4e 	bl	801fdd8 <__multadd>
 801f53c:	4605      	mov	r5, r0
 801f53e:	e7f0      	b.n	801f522 <_dtoa_r+0xaba>
 801f540:	9b00      	ldr	r3, [sp, #0]
 801f542:	2700      	movs	r7, #0
 801f544:	2b00      	cmp	r3, #0
 801f546:	bfcc      	ite	gt
 801f548:	461e      	movgt	r6, r3
 801f54a:	2601      	movle	r6, #1
 801f54c:	4456      	add	r6, sl
 801f54e:	4649      	mov	r1, r9
 801f550:	2201      	movs	r2, #1
 801f552:	4658      	mov	r0, fp
 801f554:	f000 fe38 	bl	80201c8 <__lshift>
 801f558:	4621      	mov	r1, r4
 801f55a:	4681      	mov	r9, r0
 801f55c:	f000 fea0 	bl	80202a0 <__mcmp>
 801f560:	2800      	cmp	r0, #0
 801f562:	dcb0      	bgt.n	801f4c6 <_dtoa_r+0xa5e>
 801f564:	d102      	bne.n	801f56c <_dtoa_r+0xb04>
 801f566:	f018 0f01 	tst.w	r8, #1
 801f56a:	d1ac      	bne.n	801f4c6 <_dtoa_r+0xa5e>
 801f56c:	4633      	mov	r3, r6
 801f56e:	461e      	mov	r6, r3
 801f570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f574:	2a30      	cmp	r2, #48	@ 0x30
 801f576:	d0fa      	beq.n	801f56e <_dtoa_r+0xb06>
 801f578:	e5c2      	b.n	801f100 <_dtoa_r+0x698>
 801f57a:	459a      	cmp	sl, r3
 801f57c:	d1a4      	bne.n	801f4c8 <_dtoa_r+0xa60>
 801f57e:	9b04      	ldr	r3, [sp, #16]
 801f580:	3301      	adds	r3, #1
 801f582:	9304      	str	r3, [sp, #16]
 801f584:	2331      	movs	r3, #49	@ 0x31
 801f586:	f88a 3000 	strb.w	r3, [sl]
 801f58a:	e5b9      	b.n	801f100 <_dtoa_r+0x698>
 801f58c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f58e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801f5ec <_dtoa_r+0xb84>
 801f592:	b11b      	cbz	r3, 801f59c <_dtoa_r+0xb34>
 801f594:	f10a 0308 	add.w	r3, sl, #8
 801f598:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f59a:	6013      	str	r3, [r2, #0]
 801f59c:	4650      	mov	r0, sl
 801f59e:	b019      	add	sp, #100	@ 0x64
 801f5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f5a6:	2b01      	cmp	r3, #1
 801f5a8:	f77f ae37 	ble.w	801f21a <_dtoa_r+0x7b2>
 801f5ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f5ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801f5b0:	2001      	movs	r0, #1
 801f5b2:	e655      	b.n	801f260 <_dtoa_r+0x7f8>
 801f5b4:	9b00      	ldr	r3, [sp, #0]
 801f5b6:	2b00      	cmp	r3, #0
 801f5b8:	f77f aed6 	ble.w	801f368 <_dtoa_r+0x900>
 801f5bc:	4656      	mov	r6, sl
 801f5be:	4621      	mov	r1, r4
 801f5c0:	4648      	mov	r0, r9
 801f5c2:	f7ff f9c1 	bl	801e948 <quorem>
 801f5c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801f5ca:	9b00      	ldr	r3, [sp, #0]
 801f5cc:	f806 8b01 	strb.w	r8, [r6], #1
 801f5d0:	eba6 020a 	sub.w	r2, r6, sl
 801f5d4:	4293      	cmp	r3, r2
 801f5d6:	ddb3      	ble.n	801f540 <_dtoa_r+0xad8>
 801f5d8:	4649      	mov	r1, r9
 801f5da:	2300      	movs	r3, #0
 801f5dc:	220a      	movs	r2, #10
 801f5de:	4658      	mov	r0, fp
 801f5e0:	f000 fbfa 	bl	801fdd8 <__multadd>
 801f5e4:	4681      	mov	r9, r0
 801f5e6:	e7ea      	b.n	801f5be <_dtoa_r+0xb56>
 801f5e8:	080825f4 	.word	0x080825f4
 801f5ec:	0808258f 	.word	0x0808258f

0801f5f0 <_free_r>:
 801f5f0:	b538      	push	{r3, r4, r5, lr}
 801f5f2:	4605      	mov	r5, r0
 801f5f4:	2900      	cmp	r1, #0
 801f5f6:	d041      	beq.n	801f67c <_free_r+0x8c>
 801f5f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f5fc:	1f0c      	subs	r4, r1, #4
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	bfb8      	it	lt
 801f602:	18e4      	addlt	r4, r4, r3
 801f604:	f7fd f816 	bl	801c634 <__malloc_lock>
 801f608:	4a1d      	ldr	r2, [pc, #116]	@ (801f680 <_free_r+0x90>)
 801f60a:	6813      	ldr	r3, [r2, #0]
 801f60c:	b933      	cbnz	r3, 801f61c <_free_r+0x2c>
 801f60e:	6063      	str	r3, [r4, #4]
 801f610:	6014      	str	r4, [r2, #0]
 801f612:	4628      	mov	r0, r5
 801f614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f618:	f7fd b812 	b.w	801c640 <__malloc_unlock>
 801f61c:	42a3      	cmp	r3, r4
 801f61e:	d908      	bls.n	801f632 <_free_r+0x42>
 801f620:	6820      	ldr	r0, [r4, #0]
 801f622:	1821      	adds	r1, r4, r0
 801f624:	428b      	cmp	r3, r1
 801f626:	bf01      	itttt	eq
 801f628:	6819      	ldreq	r1, [r3, #0]
 801f62a:	685b      	ldreq	r3, [r3, #4]
 801f62c:	1809      	addeq	r1, r1, r0
 801f62e:	6021      	streq	r1, [r4, #0]
 801f630:	e7ed      	b.n	801f60e <_free_r+0x1e>
 801f632:	461a      	mov	r2, r3
 801f634:	685b      	ldr	r3, [r3, #4]
 801f636:	b10b      	cbz	r3, 801f63c <_free_r+0x4c>
 801f638:	42a3      	cmp	r3, r4
 801f63a:	d9fa      	bls.n	801f632 <_free_r+0x42>
 801f63c:	6811      	ldr	r1, [r2, #0]
 801f63e:	1850      	adds	r0, r2, r1
 801f640:	42a0      	cmp	r0, r4
 801f642:	d10b      	bne.n	801f65c <_free_r+0x6c>
 801f644:	6820      	ldr	r0, [r4, #0]
 801f646:	4401      	add	r1, r0
 801f648:	1850      	adds	r0, r2, r1
 801f64a:	6011      	str	r1, [r2, #0]
 801f64c:	4283      	cmp	r3, r0
 801f64e:	d1e0      	bne.n	801f612 <_free_r+0x22>
 801f650:	6818      	ldr	r0, [r3, #0]
 801f652:	685b      	ldr	r3, [r3, #4]
 801f654:	4408      	add	r0, r1
 801f656:	6053      	str	r3, [r2, #4]
 801f658:	6010      	str	r0, [r2, #0]
 801f65a:	e7da      	b.n	801f612 <_free_r+0x22>
 801f65c:	d902      	bls.n	801f664 <_free_r+0x74>
 801f65e:	230c      	movs	r3, #12
 801f660:	602b      	str	r3, [r5, #0]
 801f662:	e7d6      	b.n	801f612 <_free_r+0x22>
 801f664:	6820      	ldr	r0, [r4, #0]
 801f666:	1821      	adds	r1, r4, r0
 801f668:	428b      	cmp	r3, r1
 801f66a:	bf02      	ittt	eq
 801f66c:	6819      	ldreq	r1, [r3, #0]
 801f66e:	685b      	ldreq	r3, [r3, #4]
 801f670:	1809      	addeq	r1, r1, r0
 801f672:	6063      	str	r3, [r4, #4]
 801f674:	bf08      	it	eq
 801f676:	6021      	streq	r1, [r4, #0]
 801f678:	6054      	str	r4, [r2, #4]
 801f67a:	e7ca      	b.n	801f612 <_free_r+0x22>
 801f67c:	bd38      	pop	{r3, r4, r5, pc}
 801f67e:	bf00      	nop
 801f680:	2004581c 	.word	0x2004581c

0801f684 <rshift>:
 801f684:	6903      	ldr	r3, [r0, #16]
 801f686:	114a      	asrs	r2, r1, #5
 801f688:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801f68c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f690:	f100 0414 	add.w	r4, r0, #20
 801f694:	dd45      	ble.n	801f722 <rshift+0x9e>
 801f696:	f011 011f 	ands.w	r1, r1, #31
 801f69a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801f69e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801f6a2:	d10c      	bne.n	801f6be <rshift+0x3a>
 801f6a4:	f100 0710 	add.w	r7, r0, #16
 801f6a8:	4629      	mov	r1, r5
 801f6aa:	42b1      	cmp	r1, r6
 801f6ac:	d334      	bcc.n	801f718 <rshift+0x94>
 801f6ae:	1a9b      	subs	r3, r3, r2
 801f6b0:	1eea      	subs	r2, r5, #3
 801f6b2:	009b      	lsls	r3, r3, #2
 801f6b4:	4296      	cmp	r6, r2
 801f6b6:	bf38      	it	cc
 801f6b8:	2300      	movcc	r3, #0
 801f6ba:	4423      	add	r3, r4
 801f6bc:	e015      	b.n	801f6ea <rshift+0x66>
 801f6be:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801f6c2:	f1c1 0820 	rsb	r8, r1, #32
 801f6c6:	f105 0e04 	add.w	lr, r5, #4
 801f6ca:	46a1      	mov	r9, r4
 801f6cc:	40cf      	lsrs	r7, r1
 801f6ce:	4576      	cmp	r6, lr
 801f6d0:	46f4      	mov	ip, lr
 801f6d2:	d815      	bhi.n	801f700 <rshift+0x7c>
 801f6d4:	1a9a      	subs	r2, r3, r2
 801f6d6:	3501      	adds	r5, #1
 801f6d8:	0092      	lsls	r2, r2, #2
 801f6da:	3a04      	subs	r2, #4
 801f6dc:	42ae      	cmp	r6, r5
 801f6de:	bf38      	it	cc
 801f6e0:	2200      	movcc	r2, #0
 801f6e2:	18a3      	adds	r3, r4, r2
 801f6e4:	50a7      	str	r7, [r4, r2]
 801f6e6:	b107      	cbz	r7, 801f6ea <rshift+0x66>
 801f6e8:	3304      	adds	r3, #4
 801f6ea:	1b1a      	subs	r2, r3, r4
 801f6ec:	42a3      	cmp	r3, r4
 801f6ee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801f6f2:	bf08      	it	eq
 801f6f4:	2300      	moveq	r3, #0
 801f6f6:	6102      	str	r2, [r0, #16]
 801f6f8:	bf08      	it	eq
 801f6fa:	6143      	streq	r3, [r0, #20]
 801f6fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f700:	f8dc c000 	ldr.w	ip, [ip]
 801f704:	fa0c fc08 	lsl.w	ip, ip, r8
 801f708:	ea4c 0707 	orr.w	r7, ip, r7
 801f70c:	f849 7b04 	str.w	r7, [r9], #4
 801f710:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f714:	40cf      	lsrs	r7, r1
 801f716:	e7da      	b.n	801f6ce <rshift+0x4a>
 801f718:	f851 cb04 	ldr.w	ip, [r1], #4
 801f71c:	f847 cf04 	str.w	ip, [r7, #4]!
 801f720:	e7c3      	b.n	801f6aa <rshift+0x26>
 801f722:	4623      	mov	r3, r4
 801f724:	e7e1      	b.n	801f6ea <rshift+0x66>

0801f726 <__hexdig_fun>:
 801f726:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801f72a:	2b09      	cmp	r3, #9
 801f72c:	d802      	bhi.n	801f734 <__hexdig_fun+0xe>
 801f72e:	3820      	subs	r0, #32
 801f730:	b2c0      	uxtb	r0, r0
 801f732:	4770      	bx	lr
 801f734:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801f738:	2b05      	cmp	r3, #5
 801f73a:	d801      	bhi.n	801f740 <__hexdig_fun+0x1a>
 801f73c:	3847      	subs	r0, #71	@ 0x47
 801f73e:	e7f7      	b.n	801f730 <__hexdig_fun+0xa>
 801f740:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801f744:	2b05      	cmp	r3, #5
 801f746:	d801      	bhi.n	801f74c <__hexdig_fun+0x26>
 801f748:	3827      	subs	r0, #39	@ 0x27
 801f74a:	e7f1      	b.n	801f730 <__hexdig_fun+0xa>
 801f74c:	2000      	movs	r0, #0
 801f74e:	4770      	bx	lr

0801f750 <__gethex>:
 801f750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f754:	b085      	sub	sp, #20
 801f756:	468a      	mov	sl, r1
 801f758:	4690      	mov	r8, r2
 801f75a:	9302      	str	r3, [sp, #8]
 801f75c:	680b      	ldr	r3, [r1, #0]
 801f75e:	9001      	str	r0, [sp, #4]
 801f760:	1c9c      	adds	r4, r3, #2
 801f762:	46a1      	mov	r9, r4
 801f764:	f814 0b01 	ldrb.w	r0, [r4], #1
 801f768:	2830      	cmp	r0, #48	@ 0x30
 801f76a:	d0fa      	beq.n	801f762 <__gethex+0x12>
 801f76c:	eba9 0303 	sub.w	r3, r9, r3
 801f770:	f1a3 0b02 	sub.w	fp, r3, #2
 801f774:	f7ff ffd7 	bl	801f726 <__hexdig_fun>
 801f778:	4605      	mov	r5, r0
 801f77a:	2800      	cmp	r0, #0
 801f77c:	d166      	bne.n	801f84c <__gethex+0xfc>
 801f77e:	2201      	movs	r2, #1
 801f780:	499e      	ldr	r1, [pc, #632]	@ (801f9fc <__gethex+0x2ac>)
 801f782:	4648      	mov	r0, r9
 801f784:	f7fe ff70 	bl	801e668 <strncmp>
 801f788:	4607      	mov	r7, r0
 801f78a:	2800      	cmp	r0, #0
 801f78c:	d165      	bne.n	801f85a <__gethex+0x10a>
 801f78e:	f899 0001 	ldrb.w	r0, [r9, #1]
 801f792:	4626      	mov	r6, r4
 801f794:	f7ff ffc7 	bl	801f726 <__hexdig_fun>
 801f798:	2800      	cmp	r0, #0
 801f79a:	d060      	beq.n	801f85e <__gethex+0x10e>
 801f79c:	4623      	mov	r3, r4
 801f79e:	7818      	ldrb	r0, [r3, #0]
 801f7a0:	4699      	mov	r9, r3
 801f7a2:	3301      	adds	r3, #1
 801f7a4:	2830      	cmp	r0, #48	@ 0x30
 801f7a6:	d0fa      	beq.n	801f79e <__gethex+0x4e>
 801f7a8:	f7ff ffbd 	bl	801f726 <__hexdig_fun>
 801f7ac:	fab0 f580 	clz	r5, r0
 801f7b0:	f04f 0b01 	mov.w	fp, #1
 801f7b4:	096d      	lsrs	r5, r5, #5
 801f7b6:	464a      	mov	r2, r9
 801f7b8:	4616      	mov	r6, r2
 801f7ba:	3201      	adds	r2, #1
 801f7bc:	7830      	ldrb	r0, [r6, #0]
 801f7be:	f7ff ffb2 	bl	801f726 <__hexdig_fun>
 801f7c2:	2800      	cmp	r0, #0
 801f7c4:	d1f8      	bne.n	801f7b8 <__gethex+0x68>
 801f7c6:	2201      	movs	r2, #1
 801f7c8:	498c      	ldr	r1, [pc, #560]	@ (801f9fc <__gethex+0x2ac>)
 801f7ca:	4630      	mov	r0, r6
 801f7cc:	f7fe ff4c 	bl	801e668 <strncmp>
 801f7d0:	2800      	cmp	r0, #0
 801f7d2:	d13e      	bne.n	801f852 <__gethex+0x102>
 801f7d4:	b944      	cbnz	r4, 801f7e8 <__gethex+0x98>
 801f7d6:	1c74      	adds	r4, r6, #1
 801f7d8:	4622      	mov	r2, r4
 801f7da:	4616      	mov	r6, r2
 801f7dc:	3201      	adds	r2, #1
 801f7de:	7830      	ldrb	r0, [r6, #0]
 801f7e0:	f7ff ffa1 	bl	801f726 <__hexdig_fun>
 801f7e4:	2800      	cmp	r0, #0
 801f7e6:	d1f8      	bne.n	801f7da <__gethex+0x8a>
 801f7e8:	1ba4      	subs	r4, r4, r6
 801f7ea:	00a7      	lsls	r7, r4, #2
 801f7ec:	7833      	ldrb	r3, [r6, #0]
 801f7ee:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801f7f2:	2b50      	cmp	r3, #80	@ 0x50
 801f7f4:	d13d      	bne.n	801f872 <__gethex+0x122>
 801f7f6:	7873      	ldrb	r3, [r6, #1]
 801f7f8:	2b2b      	cmp	r3, #43	@ 0x2b
 801f7fa:	d032      	beq.n	801f862 <__gethex+0x112>
 801f7fc:	2b2d      	cmp	r3, #45	@ 0x2d
 801f7fe:	d033      	beq.n	801f868 <__gethex+0x118>
 801f800:	1c71      	adds	r1, r6, #1
 801f802:	2400      	movs	r4, #0
 801f804:	7808      	ldrb	r0, [r1, #0]
 801f806:	f7ff ff8e 	bl	801f726 <__hexdig_fun>
 801f80a:	1e43      	subs	r3, r0, #1
 801f80c:	b2db      	uxtb	r3, r3
 801f80e:	2b18      	cmp	r3, #24
 801f810:	d82f      	bhi.n	801f872 <__gethex+0x122>
 801f812:	f1a0 0210 	sub.w	r2, r0, #16
 801f816:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f81a:	f7ff ff84 	bl	801f726 <__hexdig_fun>
 801f81e:	f100 3cff 	add.w	ip, r0, #4294967295
 801f822:	230a      	movs	r3, #10
 801f824:	fa5f fc8c 	uxtb.w	ip, ip
 801f828:	f1bc 0f18 	cmp.w	ip, #24
 801f82c:	d91e      	bls.n	801f86c <__gethex+0x11c>
 801f82e:	b104      	cbz	r4, 801f832 <__gethex+0xe2>
 801f830:	4252      	negs	r2, r2
 801f832:	4417      	add	r7, r2
 801f834:	f8ca 1000 	str.w	r1, [sl]
 801f838:	b1ed      	cbz	r5, 801f876 <__gethex+0x126>
 801f83a:	f1bb 0f00 	cmp.w	fp, #0
 801f83e:	bf0c      	ite	eq
 801f840:	2506      	moveq	r5, #6
 801f842:	2500      	movne	r5, #0
 801f844:	4628      	mov	r0, r5
 801f846:	b005      	add	sp, #20
 801f848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f84c:	2500      	movs	r5, #0
 801f84e:	462c      	mov	r4, r5
 801f850:	e7b1      	b.n	801f7b6 <__gethex+0x66>
 801f852:	2c00      	cmp	r4, #0
 801f854:	d1c8      	bne.n	801f7e8 <__gethex+0x98>
 801f856:	4627      	mov	r7, r4
 801f858:	e7c8      	b.n	801f7ec <__gethex+0x9c>
 801f85a:	464e      	mov	r6, r9
 801f85c:	462f      	mov	r7, r5
 801f85e:	2501      	movs	r5, #1
 801f860:	e7c4      	b.n	801f7ec <__gethex+0x9c>
 801f862:	2400      	movs	r4, #0
 801f864:	1cb1      	adds	r1, r6, #2
 801f866:	e7cd      	b.n	801f804 <__gethex+0xb4>
 801f868:	2401      	movs	r4, #1
 801f86a:	e7fb      	b.n	801f864 <__gethex+0x114>
 801f86c:	fb03 0002 	mla	r0, r3, r2, r0
 801f870:	e7cf      	b.n	801f812 <__gethex+0xc2>
 801f872:	4631      	mov	r1, r6
 801f874:	e7de      	b.n	801f834 <__gethex+0xe4>
 801f876:	eba6 0309 	sub.w	r3, r6, r9
 801f87a:	4629      	mov	r1, r5
 801f87c:	3b01      	subs	r3, #1
 801f87e:	2b07      	cmp	r3, #7
 801f880:	dc0a      	bgt.n	801f898 <__gethex+0x148>
 801f882:	9801      	ldr	r0, [sp, #4]
 801f884:	f000 fa46 	bl	801fd14 <_Balloc>
 801f888:	4604      	mov	r4, r0
 801f88a:	b940      	cbnz	r0, 801f89e <__gethex+0x14e>
 801f88c:	4b5c      	ldr	r3, [pc, #368]	@ (801fa00 <__gethex+0x2b0>)
 801f88e:	4602      	mov	r2, r0
 801f890:	21e4      	movs	r1, #228	@ 0xe4
 801f892:	485c      	ldr	r0, [pc, #368]	@ (801fa04 <__gethex+0x2b4>)
 801f894:	f7ff f83a 	bl	801e90c <__assert_func>
 801f898:	3101      	adds	r1, #1
 801f89a:	105b      	asrs	r3, r3, #1
 801f89c:	e7ef      	b.n	801f87e <__gethex+0x12e>
 801f89e:	f100 0a14 	add.w	sl, r0, #20
 801f8a2:	2300      	movs	r3, #0
 801f8a4:	4655      	mov	r5, sl
 801f8a6:	469b      	mov	fp, r3
 801f8a8:	45b1      	cmp	r9, r6
 801f8aa:	d337      	bcc.n	801f91c <__gethex+0x1cc>
 801f8ac:	f845 bb04 	str.w	fp, [r5], #4
 801f8b0:	eba5 050a 	sub.w	r5, r5, sl
 801f8b4:	4658      	mov	r0, fp
 801f8b6:	10ad      	asrs	r5, r5, #2
 801f8b8:	6125      	str	r5, [r4, #16]
 801f8ba:	016d      	lsls	r5, r5, #5
 801f8bc:	f000 fb1e 	bl	801fefc <__hi0bits>
 801f8c0:	f8d8 6000 	ldr.w	r6, [r8]
 801f8c4:	1a2d      	subs	r5, r5, r0
 801f8c6:	42b5      	cmp	r5, r6
 801f8c8:	dd54      	ble.n	801f974 <__gethex+0x224>
 801f8ca:	1bad      	subs	r5, r5, r6
 801f8cc:	4620      	mov	r0, r4
 801f8ce:	4629      	mov	r1, r5
 801f8d0:	f000 febb 	bl	802064a <__any_on>
 801f8d4:	4681      	mov	r9, r0
 801f8d6:	b178      	cbz	r0, 801f8f8 <__gethex+0x1a8>
 801f8d8:	1e6b      	subs	r3, r5, #1
 801f8da:	f04f 0901 	mov.w	r9, #1
 801f8de:	1159      	asrs	r1, r3, #5
 801f8e0:	f003 021f 	and.w	r2, r3, #31
 801f8e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801f8e8:	fa09 f202 	lsl.w	r2, r9, r2
 801f8ec:	420a      	tst	r2, r1
 801f8ee:	d003      	beq.n	801f8f8 <__gethex+0x1a8>
 801f8f0:	454b      	cmp	r3, r9
 801f8f2:	dc36      	bgt.n	801f962 <__gethex+0x212>
 801f8f4:	f04f 0902 	mov.w	r9, #2
 801f8f8:	442f      	add	r7, r5
 801f8fa:	4629      	mov	r1, r5
 801f8fc:	4620      	mov	r0, r4
 801f8fe:	f7ff fec1 	bl	801f684 <rshift>
 801f902:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f906:	42bb      	cmp	r3, r7
 801f908:	da42      	bge.n	801f990 <__gethex+0x240>
 801f90a:	4621      	mov	r1, r4
 801f90c:	9801      	ldr	r0, [sp, #4]
 801f90e:	f000 fa41 	bl	801fd94 <_Bfree>
 801f912:	2300      	movs	r3, #0
 801f914:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f916:	25a3      	movs	r5, #163	@ 0xa3
 801f918:	6013      	str	r3, [r2, #0]
 801f91a:	e793      	b.n	801f844 <__gethex+0xf4>
 801f91c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801f920:	2a2e      	cmp	r2, #46	@ 0x2e
 801f922:	d012      	beq.n	801f94a <__gethex+0x1fa>
 801f924:	2b20      	cmp	r3, #32
 801f926:	d104      	bne.n	801f932 <__gethex+0x1e2>
 801f928:	f845 bb04 	str.w	fp, [r5], #4
 801f92c:	f04f 0b00 	mov.w	fp, #0
 801f930:	465b      	mov	r3, fp
 801f932:	7830      	ldrb	r0, [r6, #0]
 801f934:	9303      	str	r3, [sp, #12]
 801f936:	f7ff fef6 	bl	801f726 <__hexdig_fun>
 801f93a:	9b03      	ldr	r3, [sp, #12]
 801f93c:	f000 000f 	and.w	r0, r0, #15
 801f940:	4098      	lsls	r0, r3
 801f942:	3304      	adds	r3, #4
 801f944:	ea4b 0b00 	orr.w	fp, fp, r0
 801f948:	e7ae      	b.n	801f8a8 <__gethex+0x158>
 801f94a:	45b1      	cmp	r9, r6
 801f94c:	d8ea      	bhi.n	801f924 <__gethex+0x1d4>
 801f94e:	2201      	movs	r2, #1
 801f950:	492a      	ldr	r1, [pc, #168]	@ (801f9fc <__gethex+0x2ac>)
 801f952:	4630      	mov	r0, r6
 801f954:	9303      	str	r3, [sp, #12]
 801f956:	f7fe fe87 	bl	801e668 <strncmp>
 801f95a:	9b03      	ldr	r3, [sp, #12]
 801f95c:	2800      	cmp	r0, #0
 801f95e:	d1e1      	bne.n	801f924 <__gethex+0x1d4>
 801f960:	e7a2      	b.n	801f8a8 <__gethex+0x158>
 801f962:	1ea9      	subs	r1, r5, #2
 801f964:	4620      	mov	r0, r4
 801f966:	f000 fe70 	bl	802064a <__any_on>
 801f96a:	2800      	cmp	r0, #0
 801f96c:	d0c2      	beq.n	801f8f4 <__gethex+0x1a4>
 801f96e:	f04f 0903 	mov.w	r9, #3
 801f972:	e7c1      	b.n	801f8f8 <__gethex+0x1a8>
 801f974:	da09      	bge.n	801f98a <__gethex+0x23a>
 801f976:	1b75      	subs	r5, r6, r5
 801f978:	4621      	mov	r1, r4
 801f97a:	9801      	ldr	r0, [sp, #4]
 801f97c:	462a      	mov	r2, r5
 801f97e:	1b7f      	subs	r7, r7, r5
 801f980:	f000 fc22 	bl	80201c8 <__lshift>
 801f984:	4604      	mov	r4, r0
 801f986:	f100 0a14 	add.w	sl, r0, #20
 801f98a:	f04f 0900 	mov.w	r9, #0
 801f98e:	e7b8      	b.n	801f902 <__gethex+0x1b2>
 801f990:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801f994:	42bd      	cmp	r5, r7
 801f996:	dd6f      	ble.n	801fa78 <__gethex+0x328>
 801f998:	1bed      	subs	r5, r5, r7
 801f99a:	42ae      	cmp	r6, r5
 801f99c:	dc34      	bgt.n	801fa08 <__gethex+0x2b8>
 801f99e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f9a2:	2b02      	cmp	r3, #2
 801f9a4:	d022      	beq.n	801f9ec <__gethex+0x29c>
 801f9a6:	2b03      	cmp	r3, #3
 801f9a8:	d024      	beq.n	801f9f4 <__gethex+0x2a4>
 801f9aa:	2b01      	cmp	r3, #1
 801f9ac:	d115      	bne.n	801f9da <__gethex+0x28a>
 801f9ae:	42ae      	cmp	r6, r5
 801f9b0:	d113      	bne.n	801f9da <__gethex+0x28a>
 801f9b2:	2e01      	cmp	r6, #1
 801f9b4:	d10b      	bne.n	801f9ce <__gethex+0x27e>
 801f9b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801f9ba:	2562      	movs	r5, #98	@ 0x62
 801f9bc:	9a02      	ldr	r2, [sp, #8]
 801f9be:	6013      	str	r3, [r2, #0]
 801f9c0:	2301      	movs	r3, #1
 801f9c2:	6123      	str	r3, [r4, #16]
 801f9c4:	f8ca 3000 	str.w	r3, [sl]
 801f9c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f9ca:	601c      	str	r4, [r3, #0]
 801f9cc:	e73a      	b.n	801f844 <__gethex+0xf4>
 801f9ce:	1e71      	subs	r1, r6, #1
 801f9d0:	4620      	mov	r0, r4
 801f9d2:	f000 fe3a 	bl	802064a <__any_on>
 801f9d6:	2800      	cmp	r0, #0
 801f9d8:	d1ed      	bne.n	801f9b6 <__gethex+0x266>
 801f9da:	4621      	mov	r1, r4
 801f9dc:	9801      	ldr	r0, [sp, #4]
 801f9de:	f000 f9d9 	bl	801fd94 <_Bfree>
 801f9e2:	2300      	movs	r3, #0
 801f9e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f9e6:	2550      	movs	r5, #80	@ 0x50
 801f9e8:	6013      	str	r3, [r2, #0]
 801f9ea:	e72b      	b.n	801f844 <__gethex+0xf4>
 801f9ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f9ee:	2b00      	cmp	r3, #0
 801f9f0:	d1f3      	bne.n	801f9da <__gethex+0x28a>
 801f9f2:	e7e0      	b.n	801f9b6 <__gethex+0x266>
 801f9f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f9f6:	2b00      	cmp	r3, #0
 801f9f8:	d1dd      	bne.n	801f9b6 <__gethex+0x266>
 801f9fa:	e7ee      	b.n	801f9da <__gethex+0x28a>
 801f9fc:	08082348 	.word	0x08082348
 801fa00:	080825f4 	.word	0x080825f4
 801fa04:	08082605 	.word	0x08082605
 801fa08:	1e6f      	subs	r7, r5, #1
 801fa0a:	f1b9 0f00 	cmp.w	r9, #0
 801fa0e:	d130      	bne.n	801fa72 <__gethex+0x322>
 801fa10:	b127      	cbz	r7, 801fa1c <__gethex+0x2cc>
 801fa12:	4639      	mov	r1, r7
 801fa14:	4620      	mov	r0, r4
 801fa16:	f000 fe18 	bl	802064a <__any_on>
 801fa1a:	4681      	mov	r9, r0
 801fa1c:	117a      	asrs	r2, r7, #5
 801fa1e:	2301      	movs	r3, #1
 801fa20:	f007 071f 	and.w	r7, r7, #31
 801fa24:	4629      	mov	r1, r5
 801fa26:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801fa2a:	4620      	mov	r0, r4
 801fa2c:	40bb      	lsls	r3, r7
 801fa2e:	1b76      	subs	r6, r6, r5
 801fa30:	2502      	movs	r5, #2
 801fa32:	4213      	tst	r3, r2
 801fa34:	bf18      	it	ne
 801fa36:	f049 0902 	orrne.w	r9, r9, #2
 801fa3a:	f7ff fe23 	bl	801f684 <rshift>
 801fa3e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801fa42:	f1b9 0f00 	cmp.w	r9, #0
 801fa46:	d047      	beq.n	801fad8 <__gethex+0x388>
 801fa48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801fa4c:	2b02      	cmp	r3, #2
 801fa4e:	d015      	beq.n	801fa7c <__gethex+0x32c>
 801fa50:	2b03      	cmp	r3, #3
 801fa52:	d017      	beq.n	801fa84 <__gethex+0x334>
 801fa54:	2b01      	cmp	r3, #1
 801fa56:	d109      	bne.n	801fa6c <__gethex+0x31c>
 801fa58:	f019 0f02 	tst.w	r9, #2
 801fa5c:	d006      	beq.n	801fa6c <__gethex+0x31c>
 801fa5e:	f8da 3000 	ldr.w	r3, [sl]
 801fa62:	ea49 0903 	orr.w	r9, r9, r3
 801fa66:	f019 0f01 	tst.w	r9, #1
 801fa6a:	d10e      	bne.n	801fa8a <__gethex+0x33a>
 801fa6c:	f045 0510 	orr.w	r5, r5, #16
 801fa70:	e032      	b.n	801fad8 <__gethex+0x388>
 801fa72:	f04f 0901 	mov.w	r9, #1
 801fa76:	e7d1      	b.n	801fa1c <__gethex+0x2cc>
 801fa78:	2501      	movs	r5, #1
 801fa7a:	e7e2      	b.n	801fa42 <__gethex+0x2f2>
 801fa7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fa7e:	f1c3 0301 	rsb	r3, r3, #1
 801fa82:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fa84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fa86:	2b00      	cmp	r3, #0
 801fa88:	d0f0      	beq.n	801fa6c <__gethex+0x31c>
 801fa8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801fa8e:	f104 0314 	add.w	r3, r4, #20
 801fa92:	f04f 0c00 	mov.w	ip, #0
 801fa96:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801fa9a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801fa9e:	4618      	mov	r0, r3
 801faa0:	f853 2b04 	ldr.w	r2, [r3], #4
 801faa4:	f1b2 3fff 	cmp.w	r2, #4294967295
 801faa8:	d01b      	beq.n	801fae2 <__gethex+0x392>
 801faaa:	3201      	adds	r2, #1
 801faac:	6002      	str	r2, [r0, #0]
 801faae:	2d02      	cmp	r5, #2
 801fab0:	f104 0314 	add.w	r3, r4, #20
 801fab4:	d13c      	bne.n	801fb30 <__gethex+0x3e0>
 801fab6:	f8d8 2000 	ldr.w	r2, [r8]
 801faba:	3a01      	subs	r2, #1
 801fabc:	42b2      	cmp	r2, r6
 801fabe:	d109      	bne.n	801fad4 <__gethex+0x384>
 801fac0:	1171      	asrs	r1, r6, #5
 801fac2:	2201      	movs	r2, #1
 801fac4:	f006 061f 	and.w	r6, r6, #31
 801fac8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801facc:	fa02 f606 	lsl.w	r6, r2, r6
 801fad0:	421e      	tst	r6, r3
 801fad2:	d13a      	bne.n	801fb4a <__gethex+0x3fa>
 801fad4:	f045 0520 	orr.w	r5, r5, #32
 801fad8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fada:	601c      	str	r4, [r3, #0]
 801fadc:	9b02      	ldr	r3, [sp, #8]
 801fade:	601f      	str	r7, [r3, #0]
 801fae0:	e6b0      	b.n	801f844 <__gethex+0xf4>
 801fae2:	4299      	cmp	r1, r3
 801fae4:	f843 cc04 	str.w	ip, [r3, #-4]
 801fae8:	d8d9      	bhi.n	801fa9e <__gethex+0x34e>
 801faea:	68a3      	ldr	r3, [r4, #8]
 801faec:	459b      	cmp	fp, r3
 801faee:	db17      	blt.n	801fb20 <__gethex+0x3d0>
 801faf0:	6861      	ldr	r1, [r4, #4]
 801faf2:	9801      	ldr	r0, [sp, #4]
 801faf4:	3101      	adds	r1, #1
 801faf6:	f000 f90d 	bl	801fd14 <_Balloc>
 801fafa:	4681      	mov	r9, r0
 801fafc:	b918      	cbnz	r0, 801fb06 <__gethex+0x3b6>
 801fafe:	4b1a      	ldr	r3, [pc, #104]	@ (801fb68 <__gethex+0x418>)
 801fb00:	4602      	mov	r2, r0
 801fb02:	2184      	movs	r1, #132	@ 0x84
 801fb04:	e6c5      	b.n	801f892 <__gethex+0x142>
 801fb06:	6922      	ldr	r2, [r4, #16]
 801fb08:	f104 010c 	add.w	r1, r4, #12
 801fb0c:	300c      	adds	r0, #12
 801fb0e:	3202      	adds	r2, #2
 801fb10:	0092      	lsls	r2, r2, #2
 801fb12:	f7fe fede 	bl	801e8d2 <memcpy>
 801fb16:	4621      	mov	r1, r4
 801fb18:	464c      	mov	r4, r9
 801fb1a:	9801      	ldr	r0, [sp, #4]
 801fb1c:	f000 f93a 	bl	801fd94 <_Bfree>
 801fb20:	6923      	ldr	r3, [r4, #16]
 801fb22:	1c5a      	adds	r2, r3, #1
 801fb24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801fb28:	6122      	str	r2, [r4, #16]
 801fb2a:	2201      	movs	r2, #1
 801fb2c:	615a      	str	r2, [r3, #20]
 801fb2e:	e7be      	b.n	801faae <__gethex+0x35e>
 801fb30:	6922      	ldr	r2, [r4, #16]
 801fb32:	455a      	cmp	r2, fp
 801fb34:	dd0b      	ble.n	801fb4e <__gethex+0x3fe>
 801fb36:	2101      	movs	r1, #1
 801fb38:	4620      	mov	r0, r4
 801fb3a:	f7ff fda3 	bl	801f684 <rshift>
 801fb3e:	3701      	adds	r7, #1
 801fb40:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801fb44:	42bb      	cmp	r3, r7
 801fb46:	f6ff aee0 	blt.w	801f90a <__gethex+0x1ba>
 801fb4a:	2501      	movs	r5, #1
 801fb4c:	e7c2      	b.n	801fad4 <__gethex+0x384>
 801fb4e:	f016 061f 	ands.w	r6, r6, #31
 801fb52:	d0fa      	beq.n	801fb4a <__gethex+0x3fa>
 801fb54:	4453      	add	r3, sl
 801fb56:	f1c6 0620 	rsb	r6, r6, #32
 801fb5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801fb5e:	f000 f9cd 	bl	801fefc <__hi0bits>
 801fb62:	42b0      	cmp	r0, r6
 801fb64:	dbe7      	blt.n	801fb36 <__gethex+0x3e6>
 801fb66:	e7f0      	b.n	801fb4a <__gethex+0x3fa>
 801fb68:	080825f4 	.word	0x080825f4

0801fb6c <L_shift>:
 801fb6c:	f1c2 0208 	rsb	r2, r2, #8
 801fb70:	0092      	lsls	r2, r2, #2
 801fb72:	b570      	push	{r4, r5, r6, lr}
 801fb74:	f1c2 0620 	rsb	r6, r2, #32
 801fb78:	6843      	ldr	r3, [r0, #4]
 801fb7a:	6804      	ldr	r4, [r0, #0]
 801fb7c:	fa03 f506 	lsl.w	r5, r3, r6
 801fb80:	40d3      	lsrs	r3, r2
 801fb82:	432c      	orrs	r4, r5
 801fb84:	6004      	str	r4, [r0, #0]
 801fb86:	f840 3f04 	str.w	r3, [r0, #4]!
 801fb8a:	4288      	cmp	r0, r1
 801fb8c:	d3f4      	bcc.n	801fb78 <L_shift+0xc>
 801fb8e:	bd70      	pop	{r4, r5, r6, pc}

0801fb90 <__match>:
 801fb90:	6803      	ldr	r3, [r0, #0]
 801fb92:	3301      	adds	r3, #1
 801fb94:	b530      	push	{r4, r5, lr}
 801fb96:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fb9a:	b914      	cbnz	r4, 801fba2 <__match+0x12>
 801fb9c:	6003      	str	r3, [r0, #0]
 801fb9e:	2001      	movs	r0, #1
 801fba0:	bd30      	pop	{r4, r5, pc}
 801fba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fba6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801fbaa:	2d19      	cmp	r5, #25
 801fbac:	bf98      	it	ls
 801fbae:	3220      	addls	r2, #32
 801fbb0:	42a2      	cmp	r2, r4
 801fbb2:	d0f0      	beq.n	801fb96 <__match+0x6>
 801fbb4:	2000      	movs	r0, #0
 801fbb6:	e7f3      	b.n	801fba0 <__match+0x10>

0801fbb8 <__hexnan>:
 801fbb8:	680b      	ldr	r3, [r1, #0]
 801fbba:	6801      	ldr	r1, [r0, #0]
 801fbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbc0:	115e      	asrs	r6, r3, #5
 801fbc2:	f013 031f 	ands.w	r3, r3, #31
 801fbc6:	f04f 0500 	mov.w	r5, #0
 801fbca:	b087      	sub	sp, #28
 801fbcc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801fbd0:	4682      	mov	sl, r0
 801fbd2:	4690      	mov	r8, r2
 801fbd4:	46ab      	mov	fp, r5
 801fbd6:	bf18      	it	ne
 801fbd8:	3604      	addne	r6, #4
 801fbda:	9301      	str	r3, [sp, #4]
 801fbdc:	9502      	str	r5, [sp, #8]
 801fbde:	1f37      	subs	r7, r6, #4
 801fbe0:	f846 5c04 	str.w	r5, [r6, #-4]
 801fbe4:	46b9      	mov	r9, r7
 801fbe6:	463c      	mov	r4, r7
 801fbe8:	1c4b      	adds	r3, r1, #1
 801fbea:	784a      	ldrb	r2, [r1, #1]
 801fbec:	9303      	str	r3, [sp, #12]
 801fbee:	b342      	cbz	r2, 801fc42 <__hexnan+0x8a>
 801fbf0:	4610      	mov	r0, r2
 801fbf2:	9105      	str	r1, [sp, #20]
 801fbf4:	9204      	str	r2, [sp, #16]
 801fbf6:	f7ff fd96 	bl	801f726 <__hexdig_fun>
 801fbfa:	2800      	cmp	r0, #0
 801fbfc:	d151      	bne.n	801fca2 <__hexnan+0xea>
 801fbfe:	9a04      	ldr	r2, [sp, #16]
 801fc00:	9905      	ldr	r1, [sp, #20]
 801fc02:	2a20      	cmp	r2, #32
 801fc04:	d818      	bhi.n	801fc38 <__hexnan+0x80>
 801fc06:	9b02      	ldr	r3, [sp, #8]
 801fc08:	459b      	cmp	fp, r3
 801fc0a:	dd13      	ble.n	801fc34 <__hexnan+0x7c>
 801fc0c:	454c      	cmp	r4, r9
 801fc0e:	d206      	bcs.n	801fc1e <__hexnan+0x66>
 801fc10:	2d07      	cmp	r5, #7
 801fc12:	dc04      	bgt.n	801fc1e <__hexnan+0x66>
 801fc14:	462a      	mov	r2, r5
 801fc16:	4649      	mov	r1, r9
 801fc18:	4620      	mov	r0, r4
 801fc1a:	f7ff ffa7 	bl	801fb6c <L_shift>
 801fc1e:	4544      	cmp	r4, r8
 801fc20:	d951      	bls.n	801fcc6 <__hexnan+0x10e>
 801fc22:	2300      	movs	r3, #0
 801fc24:	f1a4 0904 	sub.w	r9, r4, #4
 801fc28:	f8cd b008 	str.w	fp, [sp, #8]
 801fc2c:	f844 3c04 	str.w	r3, [r4, #-4]
 801fc30:	461d      	mov	r5, r3
 801fc32:	464c      	mov	r4, r9
 801fc34:	9903      	ldr	r1, [sp, #12]
 801fc36:	e7d7      	b.n	801fbe8 <__hexnan+0x30>
 801fc38:	2a29      	cmp	r2, #41	@ 0x29
 801fc3a:	d156      	bne.n	801fcea <__hexnan+0x132>
 801fc3c:	3102      	adds	r1, #2
 801fc3e:	f8ca 1000 	str.w	r1, [sl]
 801fc42:	f1bb 0f00 	cmp.w	fp, #0
 801fc46:	d050      	beq.n	801fcea <__hexnan+0x132>
 801fc48:	454c      	cmp	r4, r9
 801fc4a:	d206      	bcs.n	801fc5a <__hexnan+0xa2>
 801fc4c:	2d07      	cmp	r5, #7
 801fc4e:	dc04      	bgt.n	801fc5a <__hexnan+0xa2>
 801fc50:	462a      	mov	r2, r5
 801fc52:	4649      	mov	r1, r9
 801fc54:	4620      	mov	r0, r4
 801fc56:	f7ff ff89 	bl	801fb6c <L_shift>
 801fc5a:	4544      	cmp	r4, r8
 801fc5c:	d935      	bls.n	801fcca <__hexnan+0x112>
 801fc5e:	f1a8 0204 	sub.w	r2, r8, #4
 801fc62:	4623      	mov	r3, r4
 801fc64:	f853 1b04 	ldr.w	r1, [r3], #4
 801fc68:	429f      	cmp	r7, r3
 801fc6a:	f842 1f04 	str.w	r1, [r2, #4]!
 801fc6e:	d2f9      	bcs.n	801fc64 <__hexnan+0xac>
 801fc70:	1b3b      	subs	r3, r7, r4
 801fc72:	3e03      	subs	r6, #3
 801fc74:	3401      	adds	r4, #1
 801fc76:	2200      	movs	r2, #0
 801fc78:	f023 0303 	bic.w	r3, r3, #3
 801fc7c:	3304      	adds	r3, #4
 801fc7e:	42b4      	cmp	r4, r6
 801fc80:	bf88      	it	hi
 801fc82:	2304      	movhi	r3, #4
 801fc84:	4443      	add	r3, r8
 801fc86:	f843 2b04 	str.w	r2, [r3], #4
 801fc8a:	429f      	cmp	r7, r3
 801fc8c:	d2fb      	bcs.n	801fc86 <__hexnan+0xce>
 801fc8e:	683b      	ldr	r3, [r7, #0]
 801fc90:	b91b      	cbnz	r3, 801fc9a <__hexnan+0xe2>
 801fc92:	4547      	cmp	r7, r8
 801fc94:	d127      	bne.n	801fce6 <__hexnan+0x12e>
 801fc96:	2301      	movs	r3, #1
 801fc98:	603b      	str	r3, [r7, #0]
 801fc9a:	2005      	movs	r0, #5
 801fc9c:	b007      	add	sp, #28
 801fc9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fca2:	3501      	adds	r5, #1
 801fca4:	f10b 0b01 	add.w	fp, fp, #1
 801fca8:	2d08      	cmp	r5, #8
 801fcaa:	dd05      	ble.n	801fcb8 <__hexnan+0x100>
 801fcac:	4544      	cmp	r4, r8
 801fcae:	d9c1      	bls.n	801fc34 <__hexnan+0x7c>
 801fcb0:	2300      	movs	r3, #0
 801fcb2:	3c04      	subs	r4, #4
 801fcb4:	2501      	movs	r5, #1
 801fcb6:	6023      	str	r3, [r4, #0]
 801fcb8:	6822      	ldr	r2, [r4, #0]
 801fcba:	f000 000f 	and.w	r0, r0, #15
 801fcbe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801fcc2:	6020      	str	r0, [r4, #0]
 801fcc4:	e7b6      	b.n	801fc34 <__hexnan+0x7c>
 801fcc6:	2508      	movs	r5, #8
 801fcc8:	e7b4      	b.n	801fc34 <__hexnan+0x7c>
 801fcca:	9b01      	ldr	r3, [sp, #4]
 801fccc:	2b00      	cmp	r3, #0
 801fcce:	d0de      	beq.n	801fc8e <__hexnan+0xd6>
 801fcd0:	f1c3 0320 	rsb	r3, r3, #32
 801fcd4:	f04f 32ff 	mov.w	r2, #4294967295
 801fcd8:	40da      	lsrs	r2, r3
 801fcda:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801fcde:	4013      	ands	r3, r2
 801fce0:	f846 3c04 	str.w	r3, [r6, #-4]
 801fce4:	e7d3      	b.n	801fc8e <__hexnan+0xd6>
 801fce6:	3f04      	subs	r7, #4
 801fce8:	e7d1      	b.n	801fc8e <__hexnan+0xd6>
 801fcea:	2004      	movs	r0, #4
 801fcec:	e7d6      	b.n	801fc9c <__hexnan+0xe4>

0801fcee <__ascii_mbtowc>:
 801fcee:	b082      	sub	sp, #8
 801fcf0:	b901      	cbnz	r1, 801fcf4 <__ascii_mbtowc+0x6>
 801fcf2:	a901      	add	r1, sp, #4
 801fcf4:	b142      	cbz	r2, 801fd08 <__ascii_mbtowc+0x1a>
 801fcf6:	b14b      	cbz	r3, 801fd0c <__ascii_mbtowc+0x1e>
 801fcf8:	7813      	ldrb	r3, [r2, #0]
 801fcfa:	600b      	str	r3, [r1, #0]
 801fcfc:	7812      	ldrb	r2, [r2, #0]
 801fcfe:	1e10      	subs	r0, r2, #0
 801fd00:	bf18      	it	ne
 801fd02:	2001      	movne	r0, #1
 801fd04:	b002      	add	sp, #8
 801fd06:	4770      	bx	lr
 801fd08:	4610      	mov	r0, r2
 801fd0a:	e7fb      	b.n	801fd04 <__ascii_mbtowc+0x16>
 801fd0c:	f06f 0001 	mvn.w	r0, #1
 801fd10:	e7f8      	b.n	801fd04 <__ascii_mbtowc+0x16>
	...

0801fd14 <_Balloc>:
 801fd14:	b570      	push	{r4, r5, r6, lr}
 801fd16:	69c6      	ldr	r6, [r0, #28]
 801fd18:	4604      	mov	r4, r0
 801fd1a:	460d      	mov	r5, r1
 801fd1c:	b976      	cbnz	r6, 801fd3c <_Balloc+0x28>
 801fd1e:	2010      	movs	r0, #16
 801fd20:	f7fc fbd6 	bl	801c4d0 <malloc>
 801fd24:	4602      	mov	r2, r0
 801fd26:	61e0      	str	r0, [r4, #28]
 801fd28:	b920      	cbnz	r0, 801fd34 <_Balloc+0x20>
 801fd2a:	4b18      	ldr	r3, [pc, #96]	@ (801fd8c <_Balloc+0x78>)
 801fd2c:	216b      	movs	r1, #107	@ 0x6b
 801fd2e:	4818      	ldr	r0, [pc, #96]	@ (801fd90 <_Balloc+0x7c>)
 801fd30:	f7fe fdec 	bl	801e90c <__assert_func>
 801fd34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fd38:	6006      	str	r6, [r0, #0]
 801fd3a:	60c6      	str	r6, [r0, #12]
 801fd3c:	69e6      	ldr	r6, [r4, #28]
 801fd3e:	68f3      	ldr	r3, [r6, #12]
 801fd40:	b183      	cbz	r3, 801fd64 <_Balloc+0x50>
 801fd42:	69e3      	ldr	r3, [r4, #28]
 801fd44:	68db      	ldr	r3, [r3, #12]
 801fd46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801fd4a:	b9b8      	cbnz	r0, 801fd7c <_Balloc+0x68>
 801fd4c:	2101      	movs	r1, #1
 801fd4e:	4620      	mov	r0, r4
 801fd50:	fa01 f605 	lsl.w	r6, r1, r5
 801fd54:	1d72      	adds	r2, r6, #5
 801fd56:	0092      	lsls	r2, r2, #2
 801fd58:	f7fc fba6 	bl	801c4a8 <_calloc_r>
 801fd5c:	b160      	cbz	r0, 801fd78 <_Balloc+0x64>
 801fd5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801fd62:	e00e      	b.n	801fd82 <_Balloc+0x6e>
 801fd64:	2221      	movs	r2, #33	@ 0x21
 801fd66:	2104      	movs	r1, #4
 801fd68:	4620      	mov	r0, r4
 801fd6a:	f7fc fb9d 	bl	801c4a8 <_calloc_r>
 801fd6e:	69e3      	ldr	r3, [r4, #28]
 801fd70:	60f0      	str	r0, [r6, #12]
 801fd72:	68db      	ldr	r3, [r3, #12]
 801fd74:	2b00      	cmp	r3, #0
 801fd76:	d1e4      	bne.n	801fd42 <_Balloc+0x2e>
 801fd78:	2000      	movs	r0, #0
 801fd7a:	bd70      	pop	{r4, r5, r6, pc}
 801fd7c:	6802      	ldr	r2, [r0, #0]
 801fd7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fd82:	2300      	movs	r3, #0
 801fd84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801fd88:	e7f7      	b.n	801fd7a <_Balloc+0x66>
 801fd8a:	bf00      	nop
 801fd8c:	080824da 	.word	0x080824da
 801fd90:	08082665 	.word	0x08082665

0801fd94 <_Bfree>:
 801fd94:	b570      	push	{r4, r5, r6, lr}
 801fd96:	69c6      	ldr	r6, [r0, #28]
 801fd98:	4605      	mov	r5, r0
 801fd9a:	460c      	mov	r4, r1
 801fd9c:	b976      	cbnz	r6, 801fdbc <_Bfree+0x28>
 801fd9e:	2010      	movs	r0, #16
 801fda0:	f7fc fb96 	bl	801c4d0 <malloc>
 801fda4:	4602      	mov	r2, r0
 801fda6:	61e8      	str	r0, [r5, #28]
 801fda8:	b920      	cbnz	r0, 801fdb4 <_Bfree+0x20>
 801fdaa:	4b09      	ldr	r3, [pc, #36]	@ (801fdd0 <_Bfree+0x3c>)
 801fdac:	218f      	movs	r1, #143	@ 0x8f
 801fdae:	4809      	ldr	r0, [pc, #36]	@ (801fdd4 <_Bfree+0x40>)
 801fdb0:	f7fe fdac 	bl	801e90c <__assert_func>
 801fdb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fdb8:	6006      	str	r6, [r0, #0]
 801fdba:	60c6      	str	r6, [r0, #12]
 801fdbc:	b13c      	cbz	r4, 801fdce <_Bfree+0x3a>
 801fdbe:	69eb      	ldr	r3, [r5, #28]
 801fdc0:	6862      	ldr	r2, [r4, #4]
 801fdc2:	68db      	ldr	r3, [r3, #12]
 801fdc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fdc8:	6021      	str	r1, [r4, #0]
 801fdca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801fdce:	bd70      	pop	{r4, r5, r6, pc}
 801fdd0:	080824da 	.word	0x080824da
 801fdd4:	08082665 	.word	0x08082665

0801fdd8 <__multadd>:
 801fdd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fddc:	f101 0c14 	add.w	ip, r1, #20
 801fde0:	4607      	mov	r7, r0
 801fde2:	460c      	mov	r4, r1
 801fde4:	461e      	mov	r6, r3
 801fde6:	690d      	ldr	r5, [r1, #16]
 801fde8:	2000      	movs	r0, #0
 801fdea:	f8dc 3000 	ldr.w	r3, [ip]
 801fdee:	3001      	adds	r0, #1
 801fdf0:	b299      	uxth	r1, r3
 801fdf2:	4285      	cmp	r5, r0
 801fdf4:	fb02 6101 	mla	r1, r2, r1, r6
 801fdf8:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801fdfc:	ea4f 4311 	mov.w	r3, r1, lsr #16
 801fe00:	b289      	uxth	r1, r1
 801fe02:	fb02 3306 	mla	r3, r2, r6, r3
 801fe06:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801fe0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801fe0e:	f84c 1b04 	str.w	r1, [ip], #4
 801fe12:	dcea      	bgt.n	801fdea <__multadd+0x12>
 801fe14:	b30e      	cbz	r6, 801fe5a <__multadd+0x82>
 801fe16:	68a3      	ldr	r3, [r4, #8]
 801fe18:	42ab      	cmp	r3, r5
 801fe1a:	dc19      	bgt.n	801fe50 <__multadd+0x78>
 801fe1c:	6861      	ldr	r1, [r4, #4]
 801fe1e:	4638      	mov	r0, r7
 801fe20:	3101      	adds	r1, #1
 801fe22:	f7ff ff77 	bl	801fd14 <_Balloc>
 801fe26:	4680      	mov	r8, r0
 801fe28:	b928      	cbnz	r0, 801fe36 <__multadd+0x5e>
 801fe2a:	4602      	mov	r2, r0
 801fe2c:	4b0c      	ldr	r3, [pc, #48]	@ (801fe60 <__multadd+0x88>)
 801fe2e:	21ba      	movs	r1, #186	@ 0xba
 801fe30:	480c      	ldr	r0, [pc, #48]	@ (801fe64 <__multadd+0x8c>)
 801fe32:	f7fe fd6b 	bl	801e90c <__assert_func>
 801fe36:	6922      	ldr	r2, [r4, #16]
 801fe38:	f104 010c 	add.w	r1, r4, #12
 801fe3c:	300c      	adds	r0, #12
 801fe3e:	3202      	adds	r2, #2
 801fe40:	0092      	lsls	r2, r2, #2
 801fe42:	f7fe fd46 	bl	801e8d2 <memcpy>
 801fe46:	4621      	mov	r1, r4
 801fe48:	4644      	mov	r4, r8
 801fe4a:	4638      	mov	r0, r7
 801fe4c:	f7ff ffa2 	bl	801fd94 <_Bfree>
 801fe50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801fe54:	3501      	adds	r5, #1
 801fe56:	615e      	str	r6, [r3, #20]
 801fe58:	6125      	str	r5, [r4, #16]
 801fe5a:	4620      	mov	r0, r4
 801fe5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fe60:	080825f4 	.word	0x080825f4
 801fe64:	08082665 	.word	0x08082665

0801fe68 <__s2b>:
 801fe68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe6c:	4615      	mov	r5, r2
 801fe6e:	461f      	mov	r7, r3
 801fe70:	2209      	movs	r2, #9
 801fe72:	3308      	adds	r3, #8
 801fe74:	460c      	mov	r4, r1
 801fe76:	4606      	mov	r6, r0
 801fe78:	2100      	movs	r1, #0
 801fe7a:	fb93 f3f2 	sdiv	r3, r3, r2
 801fe7e:	2201      	movs	r2, #1
 801fe80:	429a      	cmp	r2, r3
 801fe82:	db09      	blt.n	801fe98 <__s2b+0x30>
 801fe84:	4630      	mov	r0, r6
 801fe86:	f7ff ff45 	bl	801fd14 <_Balloc>
 801fe8a:	b940      	cbnz	r0, 801fe9e <__s2b+0x36>
 801fe8c:	4602      	mov	r2, r0
 801fe8e:	4b19      	ldr	r3, [pc, #100]	@ (801fef4 <__s2b+0x8c>)
 801fe90:	21d3      	movs	r1, #211	@ 0xd3
 801fe92:	4819      	ldr	r0, [pc, #100]	@ (801fef8 <__s2b+0x90>)
 801fe94:	f7fe fd3a 	bl	801e90c <__assert_func>
 801fe98:	0052      	lsls	r2, r2, #1
 801fe9a:	3101      	adds	r1, #1
 801fe9c:	e7f0      	b.n	801fe80 <__s2b+0x18>
 801fe9e:	9b08      	ldr	r3, [sp, #32]
 801fea0:	2d09      	cmp	r5, #9
 801fea2:	6143      	str	r3, [r0, #20]
 801fea4:	f04f 0301 	mov.w	r3, #1
 801fea8:	6103      	str	r3, [r0, #16]
 801feaa:	dd16      	ble.n	801feda <__s2b+0x72>
 801feac:	f104 0909 	add.w	r9, r4, #9
 801feb0:	442c      	add	r4, r5
 801feb2:	46c8      	mov	r8, r9
 801feb4:	f818 3b01 	ldrb.w	r3, [r8], #1
 801feb8:	4601      	mov	r1, r0
 801feba:	220a      	movs	r2, #10
 801febc:	4630      	mov	r0, r6
 801febe:	3b30      	subs	r3, #48	@ 0x30
 801fec0:	f7ff ff8a 	bl	801fdd8 <__multadd>
 801fec4:	45a0      	cmp	r8, r4
 801fec6:	d1f5      	bne.n	801feb4 <__s2b+0x4c>
 801fec8:	f1a5 0408 	sub.w	r4, r5, #8
 801fecc:	444c      	add	r4, r9
 801fece:	1b2d      	subs	r5, r5, r4
 801fed0:	1963      	adds	r3, r4, r5
 801fed2:	42bb      	cmp	r3, r7
 801fed4:	db04      	blt.n	801fee0 <__s2b+0x78>
 801fed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801feda:	340a      	adds	r4, #10
 801fedc:	2509      	movs	r5, #9
 801fede:	e7f6      	b.n	801fece <__s2b+0x66>
 801fee0:	f814 3b01 	ldrb.w	r3, [r4], #1
 801fee4:	4601      	mov	r1, r0
 801fee6:	220a      	movs	r2, #10
 801fee8:	4630      	mov	r0, r6
 801feea:	3b30      	subs	r3, #48	@ 0x30
 801feec:	f7ff ff74 	bl	801fdd8 <__multadd>
 801fef0:	e7ee      	b.n	801fed0 <__s2b+0x68>
 801fef2:	bf00      	nop
 801fef4:	080825f4 	.word	0x080825f4
 801fef8:	08082665 	.word	0x08082665

0801fefc <__hi0bits>:
 801fefc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801ff00:	4603      	mov	r3, r0
 801ff02:	bf36      	itet	cc
 801ff04:	0403      	lslcc	r3, r0, #16
 801ff06:	2000      	movcs	r0, #0
 801ff08:	2010      	movcc	r0, #16
 801ff0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ff0e:	bf3c      	itt	cc
 801ff10:	021b      	lslcc	r3, r3, #8
 801ff12:	3008      	addcc	r0, #8
 801ff14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ff18:	bf3c      	itt	cc
 801ff1a:	011b      	lslcc	r3, r3, #4
 801ff1c:	3004      	addcc	r0, #4
 801ff1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ff22:	bf3c      	itt	cc
 801ff24:	009b      	lslcc	r3, r3, #2
 801ff26:	3002      	addcc	r0, #2
 801ff28:	2b00      	cmp	r3, #0
 801ff2a:	db05      	blt.n	801ff38 <__hi0bits+0x3c>
 801ff2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801ff30:	f100 0001 	add.w	r0, r0, #1
 801ff34:	bf08      	it	eq
 801ff36:	2020      	moveq	r0, #32
 801ff38:	4770      	bx	lr

0801ff3a <__lo0bits>:
 801ff3a:	6803      	ldr	r3, [r0, #0]
 801ff3c:	4602      	mov	r2, r0
 801ff3e:	f013 0007 	ands.w	r0, r3, #7
 801ff42:	d00b      	beq.n	801ff5c <__lo0bits+0x22>
 801ff44:	07d9      	lsls	r1, r3, #31
 801ff46:	d421      	bmi.n	801ff8c <__lo0bits+0x52>
 801ff48:	0798      	lsls	r0, r3, #30
 801ff4a:	bf47      	ittee	mi
 801ff4c:	085b      	lsrmi	r3, r3, #1
 801ff4e:	2001      	movmi	r0, #1
 801ff50:	089b      	lsrpl	r3, r3, #2
 801ff52:	2002      	movpl	r0, #2
 801ff54:	bf4c      	ite	mi
 801ff56:	6013      	strmi	r3, [r2, #0]
 801ff58:	6013      	strpl	r3, [r2, #0]
 801ff5a:	4770      	bx	lr
 801ff5c:	b299      	uxth	r1, r3
 801ff5e:	b909      	cbnz	r1, 801ff64 <__lo0bits+0x2a>
 801ff60:	0c1b      	lsrs	r3, r3, #16
 801ff62:	2010      	movs	r0, #16
 801ff64:	b2d9      	uxtb	r1, r3
 801ff66:	b909      	cbnz	r1, 801ff6c <__lo0bits+0x32>
 801ff68:	3008      	adds	r0, #8
 801ff6a:	0a1b      	lsrs	r3, r3, #8
 801ff6c:	0719      	lsls	r1, r3, #28
 801ff6e:	bf04      	itt	eq
 801ff70:	091b      	lsreq	r3, r3, #4
 801ff72:	3004      	addeq	r0, #4
 801ff74:	0799      	lsls	r1, r3, #30
 801ff76:	bf04      	itt	eq
 801ff78:	089b      	lsreq	r3, r3, #2
 801ff7a:	3002      	addeq	r0, #2
 801ff7c:	07d9      	lsls	r1, r3, #31
 801ff7e:	d403      	bmi.n	801ff88 <__lo0bits+0x4e>
 801ff80:	085b      	lsrs	r3, r3, #1
 801ff82:	f100 0001 	add.w	r0, r0, #1
 801ff86:	d003      	beq.n	801ff90 <__lo0bits+0x56>
 801ff88:	6013      	str	r3, [r2, #0]
 801ff8a:	4770      	bx	lr
 801ff8c:	2000      	movs	r0, #0
 801ff8e:	4770      	bx	lr
 801ff90:	2020      	movs	r0, #32
 801ff92:	4770      	bx	lr

0801ff94 <__i2b>:
 801ff94:	b510      	push	{r4, lr}
 801ff96:	460c      	mov	r4, r1
 801ff98:	2101      	movs	r1, #1
 801ff9a:	f7ff febb 	bl	801fd14 <_Balloc>
 801ff9e:	4602      	mov	r2, r0
 801ffa0:	b928      	cbnz	r0, 801ffae <__i2b+0x1a>
 801ffa2:	4b05      	ldr	r3, [pc, #20]	@ (801ffb8 <__i2b+0x24>)
 801ffa4:	f240 1145 	movw	r1, #325	@ 0x145
 801ffa8:	4804      	ldr	r0, [pc, #16]	@ (801ffbc <__i2b+0x28>)
 801ffaa:	f7fe fcaf 	bl	801e90c <__assert_func>
 801ffae:	2301      	movs	r3, #1
 801ffb0:	6144      	str	r4, [r0, #20]
 801ffb2:	6103      	str	r3, [r0, #16]
 801ffb4:	bd10      	pop	{r4, pc}
 801ffb6:	bf00      	nop
 801ffb8:	080825f4 	.word	0x080825f4
 801ffbc:	08082665 	.word	0x08082665

0801ffc0 <__multiply>:
 801ffc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffc4:	4614      	mov	r4, r2
 801ffc6:	690a      	ldr	r2, [r1, #16]
 801ffc8:	460f      	mov	r7, r1
 801ffca:	b085      	sub	sp, #20
 801ffcc:	6923      	ldr	r3, [r4, #16]
 801ffce:	429a      	cmp	r2, r3
 801ffd0:	bfa2      	ittt	ge
 801ffd2:	4623      	movge	r3, r4
 801ffd4:	460c      	movge	r4, r1
 801ffd6:	461f      	movge	r7, r3
 801ffd8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801ffdc:	68a3      	ldr	r3, [r4, #8]
 801ffde:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801ffe2:	6861      	ldr	r1, [r4, #4]
 801ffe4:	eb0a 0609 	add.w	r6, sl, r9
 801ffe8:	42b3      	cmp	r3, r6
 801ffea:	bfb8      	it	lt
 801ffec:	3101      	addlt	r1, #1
 801ffee:	f7ff fe91 	bl	801fd14 <_Balloc>
 801fff2:	b930      	cbnz	r0, 8020002 <__multiply+0x42>
 801fff4:	4602      	mov	r2, r0
 801fff6:	4b45      	ldr	r3, [pc, #276]	@ (802010c <__multiply+0x14c>)
 801fff8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801fffc:	4844      	ldr	r0, [pc, #272]	@ (8020110 <__multiply+0x150>)
 801fffe:	f7fe fc85 	bl	801e90c <__assert_func>
 8020002:	f100 0514 	add.w	r5, r0, #20
 8020006:	2200      	movs	r2, #0
 8020008:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802000c:	462b      	mov	r3, r5
 802000e:	4543      	cmp	r3, r8
 8020010:	d321      	bcc.n	8020056 <__multiply+0x96>
 8020012:	f107 0114 	add.w	r1, r7, #20
 8020016:	f104 0214 	add.w	r2, r4, #20
 802001a:	f104 0715 	add.w	r7, r4, #21
 802001e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8020022:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8020026:	9302      	str	r3, [sp, #8]
 8020028:	1b13      	subs	r3, r2, r4
 802002a:	3b15      	subs	r3, #21
 802002c:	f023 0303 	bic.w	r3, r3, #3
 8020030:	3304      	adds	r3, #4
 8020032:	42ba      	cmp	r2, r7
 8020034:	bf38      	it	cc
 8020036:	2304      	movcc	r3, #4
 8020038:	9301      	str	r3, [sp, #4]
 802003a:	9b02      	ldr	r3, [sp, #8]
 802003c:	9103      	str	r1, [sp, #12]
 802003e:	428b      	cmp	r3, r1
 8020040:	d80c      	bhi.n	802005c <__multiply+0x9c>
 8020042:	2e00      	cmp	r6, #0
 8020044:	dd03      	ble.n	802004e <__multiply+0x8e>
 8020046:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802004a:	2b00      	cmp	r3, #0
 802004c:	d05b      	beq.n	8020106 <__multiply+0x146>
 802004e:	6106      	str	r6, [r0, #16]
 8020050:	b005      	add	sp, #20
 8020052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020056:	f843 2b04 	str.w	r2, [r3], #4
 802005a:	e7d8      	b.n	802000e <__multiply+0x4e>
 802005c:	f8b1 a000 	ldrh.w	sl, [r1]
 8020060:	f1ba 0f00 	cmp.w	sl, #0
 8020064:	d024      	beq.n	80200b0 <__multiply+0xf0>
 8020066:	f104 0e14 	add.w	lr, r4, #20
 802006a:	46a9      	mov	r9, r5
 802006c:	f04f 0c00 	mov.w	ip, #0
 8020070:	f85e 7b04 	ldr.w	r7, [lr], #4
 8020074:	f8d9 3000 	ldr.w	r3, [r9]
 8020078:	fa1f fb87 	uxth.w	fp, r7
 802007c:	4572      	cmp	r2, lr
 802007e:	b29b      	uxth	r3, r3
 8020080:	fb0a 330b 	mla	r3, sl, fp, r3
 8020084:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8020088:	f8d9 7000 	ldr.w	r7, [r9]
 802008c:	4463      	add	r3, ip
 802008e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8020092:	fb0a c70b 	mla	r7, sl, fp, ip
 8020096:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802009a:	b29b      	uxth	r3, r3
 802009c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80200a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80200a4:	f849 3b04 	str.w	r3, [r9], #4
 80200a8:	d8e2      	bhi.n	8020070 <__multiply+0xb0>
 80200aa:	9b01      	ldr	r3, [sp, #4]
 80200ac:	f845 c003 	str.w	ip, [r5, r3]
 80200b0:	9b03      	ldr	r3, [sp, #12]
 80200b2:	3104      	adds	r1, #4
 80200b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80200b8:	f1b9 0f00 	cmp.w	r9, #0
 80200bc:	d021      	beq.n	8020102 <__multiply+0x142>
 80200be:	682b      	ldr	r3, [r5, #0]
 80200c0:	f104 0c14 	add.w	ip, r4, #20
 80200c4:	46ae      	mov	lr, r5
 80200c6:	f04f 0a00 	mov.w	sl, #0
 80200ca:	f8bc b000 	ldrh.w	fp, [ip]
 80200ce:	b29b      	uxth	r3, r3
 80200d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80200d4:	fb09 770b 	mla	r7, r9, fp, r7
 80200d8:	4457      	add	r7, sl
 80200da:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80200de:	f84e 3b04 	str.w	r3, [lr], #4
 80200e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80200e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80200ea:	f8be 3000 	ldrh.w	r3, [lr]
 80200ee:	4562      	cmp	r2, ip
 80200f0:	fb09 330a 	mla	r3, r9, sl, r3
 80200f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80200f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80200fc:	d8e5      	bhi.n	80200ca <__multiply+0x10a>
 80200fe:	9f01      	ldr	r7, [sp, #4]
 8020100:	51eb      	str	r3, [r5, r7]
 8020102:	3504      	adds	r5, #4
 8020104:	e799      	b.n	802003a <__multiply+0x7a>
 8020106:	3e01      	subs	r6, #1
 8020108:	e79b      	b.n	8020042 <__multiply+0x82>
 802010a:	bf00      	nop
 802010c:	080825f4 	.word	0x080825f4
 8020110:	08082665 	.word	0x08082665

08020114 <__pow5mult>:
 8020114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020118:	4615      	mov	r5, r2
 802011a:	f012 0203 	ands.w	r2, r2, #3
 802011e:	4607      	mov	r7, r0
 8020120:	460e      	mov	r6, r1
 8020122:	d007      	beq.n	8020134 <__pow5mult+0x20>
 8020124:	3a01      	subs	r2, #1
 8020126:	4c25      	ldr	r4, [pc, #148]	@ (80201bc <__pow5mult+0xa8>)
 8020128:	2300      	movs	r3, #0
 802012a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802012e:	f7ff fe53 	bl	801fdd8 <__multadd>
 8020132:	4606      	mov	r6, r0
 8020134:	10ad      	asrs	r5, r5, #2
 8020136:	d03d      	beq.n	80201b4 <__pow5mult+0xa0>
 8020138:	69fc      	ldr	r4, [r7, #28]
 802013a:	b97c      	cbnz	r4, 802015c <__pow5mult+0x48>
 802013c:	2010      	movs	r0, #16
 802013e:	f7fc f9c7 	bl	801c4d0 <malloc>
 8020142:	4602      	mov	r2, r0
 8020144:	61f8      	str	r0, [r7, #28]
 8020146:	b928      	cbnz	r0, 8020154 <__pow5mult+0x40>
 8020148:	4b1d      	ldr	r3, [pc, #116]	@ (80201c0 <__pow5mult+0xac>)
 802014a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802014e:	481d      	ldr	r0, [pc, #116]	@ (80201c4 <__pow5mult+0xb0>)
 8020150:	f7fe fbdc 	bl	801e90c <__assert_func>
 8020154:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020158:	6004      	str	r4, [r0, #0]
 802015a:	60c4      	str	r4, [r0, #12]
 802015c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8020160:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020164:	b94c      	cbnz	r4, 802017a <__pow5mult+0x66>
 8020166:	f240 2171 	movw	r1, #625	@ 0x271
 802016a:	4638      	mov	r0, r7
 802016c:	f7ff ff12 	bl	801ff94 <__i2b>
 8020170:	2300      	movs	r3, #0
 8020172:	4604      	mov	r4, r0
 8020174:	f8c8 0008 	str.w	r0, [r8, #8]
 8020178:	6003      	str	r3, [r0, #0]
 802017a:	f04f 0900 	mov.w	r9, #0
 802017e:	07eb      	lsls	r3, r5, #31
 8020180:	d50a      	bpl.n	8020198 <__pow5mult+0x84>
 8020182:	4631      	mov	r1, r6
 8020184:	4622      	mov	r2, r4
 8020186:	4638      	mov	r0, r7
 8020188:	f7ff ff1a 	bl	801ffc0 <__multiply>
 802018c:	4680      	mov	r8, r0
 802018e:	4631      	mov	r1, r6
 8020190:	4638      	mov	r0, r7
 8020192:	4646      	mov	r6, r8
 8020194:	f7ff fdfe 	bl	801fd94 <_Bfree>
 8020198:	106d      	asrs	r5, r5, #1
 802019a:	d00b      	beq.n	80201b4 <__pow5mult+0xa0>
 802019c:	6820      	ldr	r0, [r4, #0]
 802019e:	b938      	cbnz	r0, 80201b0 <__pow5mult+0x9c>
 80201a0:	4622      	mov	r2, r4
 80201a2:	4621      	mov	r1, r4
 80201a4:	4638      	mov	r0, r7
 80201a6:	f7ff ff0b 	bl	801ffc0 <__multiply>
 80201aa:	6020      	str	r0, [r4, #0]
 80201ac:	f8c0 9000 	str.w	r9, [r0]
 80201b0:	4604      	mov	r4, r0
 80201b2:	e7e4      	b.n	802017e <__pow5mult+0x6a>
 80201b4:	4630      	mov	r0, r6
 80201b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80201ba:	bf00      	nop
 80201bc:	080826c0 	.word	0x080826c0
 80201c0:	080824da 	.word	0x080824da
 80201c4:	08082665 	.word	0x08082665

080201c8 <__lshift>:
 80201c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80201cc:	460c      	mov	r4, r1
 80201ce:	4607      	mov	r7, r0
 80201d0:	4691      	mov	r9, r2
 80201d2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80201d6:	6923      	ldr	r3, [r4, #16]
 80201d8:	6849      	ldr	r1, [r1, #4]
 80201da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80201de:	68a3      	ldr	r3, [r4, #8]
 80201e0:	f108 0601 	add.w	r6, r8, #1
 80201e4:	42b3      	cmp	r3, r6
 80201e6:	db0b      	blt.n	8020200 <__lshift+0x38>
 80201e8:	4638      	mov	r0, r7
 80201ea:	f7ff fd93 	bl	801fd14 <_Balloc>
 80201ee:	4605      	mov	r5, r0
 80201f0:	b948      	cbnz	r0, 8020206 <__lshift+0x3e>
 80201f2:	4602      	mov	r2, r0
 80201f4:	4b28      	ldr	r3, [pc, #160]	@ (8020298 <__lshift+0xd0>)
 80201f6:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80201fa:	4828      	ldr	r0, [pc, #160]	@ (802029c <__lshift+0xd4>)
 80201fc:	f7fe fb86 	bl	801e90c <__assert_func>
 8020200:	3101      	adds	r1, #1
 8020202:	005b      	lsls	r3, r3, #1
 8020204:	e7ee      	b.n	80201e4 <__lshift+0x1c>
 8020206:	2300      	movs	r3, #0
 8020208:	f100 0114 	add.w	r1, r0, #20
 802020c:	f100 0210 	add.w	r2, r0, #16
 8020210:	4618      	mov	r0, r3
 8020212:	4553      	cmp	r3, sl
 8020214:	db33      	blt.n	802027e <__lshift+0xb6>
 8020216:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802021a:	f104 0314 	add.w	r3, r4, #20
 802021e:	6920      	ldr	r0, [r4, #16]
 8020220:	f019 091f 	ands.w	r9, r9, #31
 8020224:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020228:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802022c:	d02b      	beq.n	8020286 <__lshift+0xbe>
 802022e:	f1c9 0e20 	rsb	lr, r9, #32
 8020232:	468a      	mov	sl, r1
 8020234:	2200      	movs	r2, #0
 8020236:	6818      	ldr	r0, [r3, #0]
 8020238:	fa00 f009 	lsl.w	r0, r0, r9
 802023c:	4310      	orrs	r0, r2
 802023e:	f84a 0b04 	str.w	r0, [sl], #4
 8020242:	f853 2b04 	ldr.w	r2, [r3], #4
 8020246:	459c      	cmp	ip, r3
 8020248:	fa22 f20e 	lsr.w	r2, r2, lr
 802024c:	d8f3      	bhi.n	8020236 <__lshift+0x6e>
 802024e:	ebac 0304 	sub.w	r3, ip, r4
 8020252:	f104 0015 	add.w	r0, r4, #21
 8020256:	3b15      	subs	r3, #21
 8020258:	f023 0303 	bic.w	r3, r3, #3
 802025c:	3304      	adds	r3, #4
 802025e:	4584      	cmp	ip, r0
 8020260:	bf38      	it	cc
 8020262:	2304      	movcc	r3, #4
 8020264:	50ca      	str	r2, [r1, r3]
 8020266:	b10a      	cbz	r2, 802026c <__lshift+0xa4>
 8020268:	f108 0602 	add.w	r6, r8, #2
 802026c:	3e01      	subs	r6, #1
 802026e:	4638      	mov	r0, r7
 8020270:	4621      	mov	r1, r4
 8020272:	612e      	str	r6, [r5, #16]
 8020274:	f7ff fd8e 	bl	801fd94 <_Bfree>
 8020278:	4628      	mov	r0, r5
 802027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802027e:	3301      	adds	r3, #1
 8020280:	f842 0f04 	str.w	r0, [r2, #4]!
 8020284:	e7c5      	b.n	8020212 <__lshift+0x4a>
 8020286:	3904      	subs	r1, #4
 8020288:	f853 2b04 	ldr.w	r2, [r3], #4
 802028c:	459c      	cmp	ip, r3
 802028e:	f841 2f04 	str.w	r2, [r1, #4]!
 8020292:	d8f9      	bhi.n	8020288 <__lshift+0xc0>
 8020294:	e7ea      	b.n	802026c <__lshift+0xa4>
 8020296:	bf00      	nop
 8020298:	080825f4 	.word	0x080825f4
 802029c:	08082665 	.word	0x08082665

080202a0 <__mcmp>:
 80202a0:	4603      	mov	r3, r0
 80202a2:	690a      	ldr	r2, [r1, #16]
 80202a4:	6900      	ldr	r0, [r0, #16]
 80202a6:	1a80      	subs	r0, r0, r2
 80202a8:	b530      	push	{r4, r5, lr}
 80202aa:	d10e      	bne.n	80202ca <__mcmp+0x2a>
 80202ac:	3314      	adds	r3, #20
 80202ae:	3114      	adds	r1, #20
 80202b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80202b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80202b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80202bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80202c0:	4295      	cmp	r5, r2
 80202c2:	d003      	beq.n	80202cc <__mcmp+0x2c>
 80202c4:	d205      	bcs.n	80202d2 <__mcmp+0x32>
 80202c6:	f04f 30ff 	mov.w	r0, #4294967295
 80202ca:	bd30      	pop	{r4, r5, pc}
 80202cc:	42a3      	cmp	r3, r4
 80202ce:	d3f3      	bcc.n	80202b8 <__mcmp+0x18>
 80202d0:	e7fb      	b.n	80202ca <__mcmp+0x2a>
 80202d2:	2001      	movs	r0, #1
 80202d4:	e7f9      	b.n	80202ca <__mcmp+0x2a>
	...

080202d8 <__mdiff>:
 80202d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202dc:	4689      	mov	r9, r1
 80202de:	4606      	mov	r6, r0
 80202e0:	4611      	mov	r1, r2
 80202e2:	4614      	mov	r4, r2
 80202e4:	4648      	mov	r0, r9
 80202e6:	f7ff ffdb 	bl	80202a0 <__mcmp>
 80202ea:	1e05      	subs	r5, r0, #0
 80202ec:	d112      	bne.n	8020314 <__mdiff+0x3c>
 80202ee:	4629      	mov	r1, r5
 80202f0:	4630      	mov	r0, r6
 80202f2:	f7ff fd0f 	bl	801fd14 <_Balloc>
 80202f6:	4602      	mov	r2, r0
 80202f8:	b928      	cbnz	r0, 8020306 <__mdiff+0x2e>
 80202fa:	4b41      	ldr	r3, [pc, #260]	@ (8020400 <__mdiff+0x128>)
 80202fc:	f240 2137 	movw	r1, #567	@ 0x237
 8020300:	4840      	ldr	r0, [pc, #256]	@ (8020404 <__mdiff+0x12c>)
 8020302:	f7fe fb03 	bl	801e90c <__assert_func>
 8020306:	2301      	movs	r3, #1
 8020308:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802030c:	4610      	mov	r0, r2
 802030e:	b003      	add	sp, #12
 8020310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020314:	bfbc      	itt	lt
 8020316:	464b      	movlt	r3, r9
 8020318:	46a1      	movlt	r9, r4
 802031a:	4630      	mov	r0, r6
 802031c:	bfb8      	it	lt
 802031e:	2501      	movlt	r5, #1
 8020320:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8020324:	bfb4      	ite	lt
 8020326:	461c      	movlt	r4, r3
 8020328:	2500      	movge	r5, #0
 802032a:	f7ff fcf3 	bl	801fd14 <_Balloc>
 802032e:	4602      	mov	r2, r0
 8020330:	b918      	cbnz	r0, 802033a <__mdiff+0x62>
 8020332:	4b33      	ldr	r3, [pc, #204]	@ (8020400 <__mdiff+0x128>)
 8020334:	f240 2145 	movw	r1, #581	@ 0x245
 8020338:	e7e2      	b.n	8020300 <__mdiff+0x28>
 802033a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802033e:	f104 0e14 	add.w	lr, r4, #20
 8020342:	6926      	ldr	r6, [r4, #16]
 8020344:	f100 0b14 	add.w	fp, r0, #20
 8020348:	60c5      	str	r5, [r0, #12]
 802034a:	f109 0514 	add.w	r5, r9, #20
 802034e:	f109 0310 	add.w	r3, r9, #16
 8020352:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8020356:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802035a:	46d9      	mov	r9, fp
 802035c:	f04f 0c00 	mov.w	ip, #0
 8020360:	9301      	str	r3, [sp, #4]
 8020362:	9b01      	ldr	r3, [sp, #4]
 8020364:	f85e 0b04 	ldr.w	r0, [lr], #4
 8020368:	f853 af04 	ldr.w	sl, [r3, #4]!
 802036c:	4576      	cmp	r6, lr
 802036e:	9301      	str	r3, [sp, #4]
 8020370:	fa1f f38a 	uxth.w	r3, sl
 8020374:	4619      	mov	r1, r3
 8020376:	b283      	uxth	r3, r0
 8020378:	ea4f 4010 	mov.w	r0, r0, lsr #16
 802037c:	eba1 0303 	sub.w	r3, r1, r3
 8020380:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8020384:	4463      	add	r3, ip
 8020386:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802038a:	b29b      	uxth	r3, r3
 802038c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8020390:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8020394:	f849 3b04 	str.w	r3, [r9], #4
 8020398:	d8e3      	bhi.n	8020362 <__mdiff+0x8a>
 802039a:	1b33      	subs	r3, r6, r4
 802039c:	3415      	adds	r4, #21
 802039e:	3b15      	subs	r3, #21
 80203a0:	f023 0303 	bic.w	r3, r3, #3
 80203a4:	3304      	adds	r3, #4
 80203a6:	42a6      	cmp	r6, r4
 80203a8:	bf38      	it	cc
 80203aa:	2304      	movcc	r3, #4
 80203ac:	441d      	add	r5, r3
 80203ae:	445b      	add	r3, fp
 80203b0:	462c      	mov	r4, r5
 80203b2:	461e      	mov	r6, r3
 80203b4:	4544      	cmp	r4, r8
 80203b6:	d30e      	bcc.n	80203d6 <__mdiff+0xfe>
 80203b8:	f108 0103 	add.w	r1, r8, #3
 80203bc:	1b49      	subs	r1, r1, r5
 80203be:	3d03      	subs	r5, #3
 80203c0:	f021 0103 	bic.w	r1, r1, #3
 80203c4:	45a8      	cmp	r8, r5
 80203c6:	bf38      	it	cc
 80203c8:	2100      	movcc	r1, #0
 80203ca:	440b      	add	r3, r1
 80203cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80203d0:	b199      	cbz	r1, 80203fa <__mdiff+0x122>
 80203d2:	6117      	str	r7, [r2, #16]
 80203d4:	e79a      	b.n	802030c <__mdiff+0x34>
 80203d6:	f854 1b04 	ldr.w	r1, [r4], #4
 80203da:	46e6      	mov	lr, ip
 80203dc:	fa1f fc81 	uxth.w	ip, r1
 80203e0:	0c08      	lsrs	r0, r1, #16
 80203e2:	4471      	add	r1, lr
 80203e4:	44f4      	add	ip, lr
 80203e6:	b289      	uxth	r1, r1
 80203e8:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80203ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80203f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80203f4:	f846 1b04 	str.w	r1, [r6], #4
 80203f8:	e7dc      	b.n	80203b4 <__mdiff+0xdc>
 80203fa:	3f01      	subs	r7, #1
 80203fc:	e7e6      	b.n	80203cc <__mdiff+0xf4>
 80203fe:	bf00      	nop
 8020400:	080825f4 	.word	0x080825f4
 8020404:	08082665 	.word	0x08082665

08020408 <__ulp>:
 8020408:	b082      	sub	sp, #8
 802040a:	4b11      	ldr	r3, [pc, #68]	@ (8020450 <__ulp+0x48>)
 802040c:	ed8d 0b00 	vstr	d0, [sp]
 8020410:	9a01      	ldr	r2, [sp, #4]
 8020412:	4013      	ands	r3, r2
 8020414:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8020418:	2b00      	cmp	r3, #0
 802041a:	dc08      	bgt.n	802042e <__ulp+0x26>
 802041c:	425b      	negs	r3, r3
 802041e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8020422:	ea4f 5223 	mov.w	r2, r3, asr #20
 8020426:	da04      	bge.n	8020432 <__ulp+0x2a>
 8020428:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802042c:	4113      	asrs	r3, r2
 802042e:	2200      	movs	r2, #0
 8020430:	e008      	b.n	8020444 <__ulp+0x3c>
 8020432:	f1a2 0314 	sub.w	r3, r2, #20
 8020436:	2b1e      	cmp	r3, #30
 8020438:	bfd6      	itet	le
 802043a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 802043e:	2201      	movgt	r2, #1
 8020440:	40da      	lsrle	r2, r3
 8020442:	2300      	movs	r3, #0
 8020444:	4619      	mov	r1, r3
 8020446:	4610      	mov	r0, r2
 8020448:	ec41 0b10 	vmov	d0, r0, r1
 802044c:	b002      	add	sp, #8
 802044e:	4770      	bx	lr
 8020450:	7ff00000 	.word	0x7ff00000

08020454 <__b2d>:
 8020454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020458:	6906      	ldr	r6, [r0, #16]
 802045a:	f100 0814 	add.w	r8, r0, #20
 802045e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8020462:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8020466:	1f37      	subs	r7, r6, #4
 8020468:	4610      	mov	r0, r2
 802046a:	f7ff fd47 	bl	801fefc <__hi0bits>
 802046e:	f1c0 0320 	rsb	r3, r0, #32
 8020472:	280a      	cmp	r0, #10
 8020474:	600b      	str	r3, [r1, #0]
 8020476:	491d      	ldr	r1, [pc, #116]	@ (80204ec <__b2d+0x98>)
 8020478:	dc16      	bgt.n	80204a8 <__b2d+0x54>
 802047a:	f1c0 0c0b 	rsb	ip, r0, #11
 802047e:	45b8      	cmp	r8, r7
 8020480:	f100 0015 	add.w	r0, r0, #21
 8020484:	fa22 f30c 	lsr.w	r3, r2, ip
 8020488:	fa02 f000 	lsl.w	r0, r2, r0
 802048c:	ea43 0501 	orr.w	r5, r3, r1
 8020490:	bf34      	ite	cc
 8020492:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8020496:	2300      	movcs	r3, #0
 8020498:	fa23 f30c 	lsr.w	r3, r3, ip
 802049c:	4303      	orrs	r3, r0
 802049e:	461c      	mov	r4, r3
 80204a0:	ec45 4b10 	vmov	d0, r4, r5
 80204a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80204a8:	45b8      	cmp	r8, r7
 80204aa:	bf3a      	itte	cc
 80204ac:	f1a6 0708 	subcc.w	r7, r6, #8
 80204b0:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80204b4:	2300      	movcs	r3, #0
 80204b6:	380b      	subs	r0, #11
 80204b8:	d014      	beq.n	80204e4 <__b2d+0x90>
 80204ba:	f1c0 0120 	rsb	r1, r0, #32
 80204be:	4082      	lsls	r2, r0
 80204c0:	4547      	cmp	r7, r8
 80204c2:	fa23 f401 	lsr.w	r4, r3, r1
 80204c6:	fa03 f300 	lsl.w	r3, r3, r0
 80204ca:	ea42 0204 	orr.w	r2, r2, r4
 80204ce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80204d2:	bf8c      	ite	hi
 80204d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80204d8:	2200      	movls	r2, #0
 80204da:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80204de:	40ca      	lsrs	r2, r1
 80204e0:	4313      	orrs	r3, r2
 80204e2:	e7dc      	b.n	802049e <__b2d+0x4a>
 80204e4:	ea42 0501 	orr.w	r5, r2, r1
 80204e8:	e7d9      	b.n	802049e <__b2d+0x4a>
 80204ea:	bf00      	nop
 80204ec:	3ff00000 	.word	0x3ff00000

080204f0 <__d2b>:
 80204f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80204f4:	460f      	mov	r7, r1
 80204f6:	2101      	movs	r1, #1
 80204f8:	4616      	mov	r6, r2
 80204fa:	ec59 8b10 	vmov	r8, r9, d0
 80204fe:	f7ff fc09 	bl	801fd14 <_Balloc>
 8020502:	4604      	mov	r4, r0
 8020504:	b930      	cbnz	r0, 8020514 <__d2b+0x24>
 8020506:	4602      	mov	r2, r0
 8020508:	4b23      	ldr	r3, [pc, #140]	@ (8020598 <__d2b+0xa8>)
 802050a:	f240 310f 	movw	r1, #783	@ 0x30f
 802050e:	4823      	ldr	r0, [pc, #140]	@ (802059c <__d2b+0xac>)
 8020510:	f7fe f9fc 	bl	801e90c <__assert_func>
 8020514:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8020518:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802051c:	b10d      	cbz	r5, 8020522 <__d2b+0x32>
 802051e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8020522:	9301      	str	r3, [sp, #4]
 8020524:	f1b8 0300 	subs.w	r3, r8, #0
 8020528:	d023      	beq.n	8020572 <__d2b+0x82>
 802052a:	4668      	mov	r0, sp
 802052c:	9300      	str	r3, [sp, #0]
 802052e:	f7ff fd04 	bl	801ff3a <__lo0bits>
 8020532:	e9dd 1200 	ldrd	r1, r2, [sp]
 8020536:	b1d0      	cbz	r0, 802056e <__d2b+0x7e>
 8020538:	f1c0 0320 	rsb	r3, r0, #32
 802053c:	fa02 f303 	lsl.w	r3, r2, r3
 8020540:	40c2      	lsrs	r2, r0
 8020542:	430b      	orrs	r3, r1
 8020544:	9201      	str	r2, [sp, #4]
 8020546:	6163      	str	r3, [r4, #20]
 8020548:	9b01      	ldr	r3, [sp, #4]
 802054a:	2b00      	cmp	r3, #0
 802054c:	61a3      	str	r3, [r4, #24]
 802054e:	bf0c      	ite	eq
 8020550:	2201      	moveq	r2, #1
 8020552:	2202      	movne	r2, #2
 8020554:	6122      	str	r2, [r4, #16]
 8020556:	b1a5      	cbz	r5, 8020582 <__d2b+0x92>
 8020558:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802055c:	4405      	add	r5, r0
 802055e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8020562:	603d      	str	r5, [r7, #0]
 8020564:	6030      	str	r0, [r6, #0]
 8020566:	4620      	mov	r0, r4
 8020568:	b003      	add	sp, #12
 802056a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802056e:	6161      	str	r1, [r4, #20]
 8020570:	e7ea      	b.n	8020548 <__d2b+0x58>
 8020572:	a801      	add	r0, sp, #4
 8020574:	f7ff fce1 	bl	801ff3a <__lo0bits>
 8020578:	9b01      	ldr	r3, [sp, #4]
 802057a:	3020      	adds	r0, #32
 802057c:	2201      	movs	r2, #1
 802057e:	6163      	str	r3, [r4, #20]
 8020580:	e7e8      	b.n	8020554 <__d2b+0x64>
 8020582:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8020586:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802058a:	6038      	str	r0, [r7, #0]
 802058c:	6918      	ldr	r0, [r3, #16]
 802058e:	f7ff fcb5 	bl	801fefc <__hi0bits>
 8020592:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020596:	e7e5      	b.n	8020564 <__d2b+0x74>
 8020598:	080825f4 	.word	0x080825f4
 802059c:	08082665 	.word	0x08082665

080205a0 <__ratio>:
 80205a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205a4:	b085      	sub	sp, #20
 80205a6:	e9cd 1000 	strd	r1, r0, [sp]
 80205aa:	a902      	add	r1, sp, #8
 80205ac:	f7ff ff52 	bl	8020454 <__b2d>
 80205b0:	a903      	add	r1, sp, #12
 80205b2:	9800      	ldr	r0, [sp, #0]
 80205b4:	ec55 4b10 	vmov	r4, r5, d0
 80205b8:	f7ff ff4c 	bl	8020454 <__b2d>
 80205bc:	9b01      	ldr	r3, [sp, #4]
 80205be:	462f      	mov	r7, r5
 80205c0:	4620      	mov	r0, r4
 80205c2:	6919      	ldr	r1, [r3, #16]
 80205c4:	9b00      	ldr	r3, [sp, #0]
 80205c6:	691b      	ldr	r3, [r3, #16]
 80205c8:	1ac9      	subs	r1, r1, r3
 80205ca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80205ce:	ec5b ab10 	vmov	sl, fp, d0
 80205d2:	1a9b      	subs	r3, r3, r2
 80205d4:	46d9      	mov	r9, fp
 80205d6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80205da:	2b00      	cmp	r3, #0
 80205dc:	bfcd      	iteet	gt
 80205de:	462a      	movgt	r2, r5
 80205e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80205e4:	465a      	movle	r2, fp
 80205e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80205ea:	bfd8      	it	le
 80205ec:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80205f0:	4652      	mov	r2, sl
 80205f2:	4639      	mov	r1, r7
 80205f4:	464b      	mov	r3, r9
 80205f6:	f7e0 f937 	bl	8000868 <__aeabi_ddiv>
 80205fa:	ec41 0b10 	vmov	d0, r0, r1
 80205fe:	b005      	add	sp, #20
 8020600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020604 <__copybits>:
 8020604:	3901      	subs	r1, #1
 8020606:	f102 0314 	add.w	r3, r2, #20
 802060a:	1149      	asrs	r1, r1, #5
 802060c:	b570      	push	{r4, r5, r6, lr}
 802060e:	3101      	adds	r1, #1
 8020610:	6914      	ldr	r4, [r2, #16]
 8020612:	1f05      	subs	r5, r0, #4
 8020614:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8020618:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802061c:	42a3      	cmp	r3, r4
 802061e:	d30c      	bcc.n	802063a <__copybits+0x36>
 8020620:	1aa3      	subs	r3, r4, r2
 8020622:	3211      	adds	r2, #17
 8020624:	3b11      	subs	r3, #17
 8020626:	f023 0303 	bic.w	r3, r3, #3
 802062a:	42a2      	cmp	r2, r4
 802062c:	bf88      	it	hi
 802062e:	2300      	movhi	r3, #0
 8020630:	4418      	add	r0, r3
 8020632:	2300      	movs	r3, #0
 8020634:	4288      	cmp	r0, r1
 8020636:	d305      	bcc.n	8020644 <__copybits+0x40>
 8020638:	bd70      	pop	{r4, r5, r6, pc}
 802063a:	f853 6b04 	ldr.w	r6, [r3], #4
 802063e:	f845 6f04 	str.w	r6, [r5, #4]!
 8020642:	e7eb      	b.n	802061c <__copybits+0x18>
 8020644:	f840 3b04 	str.w	r3, [r0], #4
 8020648:	e7f4      	b.n	8020634 <__copybits+0x30>

0802064a <__any_on>:
 802064a:	f100 0214 	add.w	r2, r0, #20
 802064e:	114b      	asrs	r3, r1, #5
 8020650:	6900      	ldr	r0, [r0, #16]
 8020652:	4298      	cmp	r0, r3
 8020654:	b510      	push	{r4, lr}
 8020656:	db11      	blt.n	802067c <__any_on+0x32>
 8020658:	dd0a      	ble.n	8020670 <__any_on+0x26>
 802065a:	f011 011f 	ands.w	r1, r1, #31
 802065e:	d007      	beq.n	8020670 <__any_on+0x26>
 8020660:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8020664:	fa24 f001 	lsr.w	r0, r4, r1
 8020668:	fa00 f101 	lsl.w	r1, r0, r1
 802066c:	428c      	cmp	r4, r1
 802066e:	d10b      	bne.n	8020688 <__any_on+0x3e>
 8020670:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020674:	4293      	cmp	r3, r2
 8020676:	d803      	bhi.n	8020680 <__any_on+0x36>
 8020678:	2000      	movs	r0, #0
 802067a:	bd10      	pop	{r4, pc}
 802067c:	4603      	mov	r3, r0
 802067e:	e7f7      	b.n	8020670 <__any_on+0x26>
 8020680:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020684:	2900      	cmp	r1, #0
 8020686:	d0f5      	beq.n	8020674 <__any_on+0x2a>
 8020688:	2001      	movs	r0, #1
 802068a:	e7f6      	b.n	802067a <__any_on+0x30>

0802068c <_malloc_usable_size_r>:
 802068c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020690:	1f18      	subs	r0, r3, #4
 8020692:	2b00      	cmp	r3, #0
 8020694:	bfbc      	itt	lt
 8020696:	580b      	ldrlt	r3, [r1, r0]
 8020698:	18c0      	addlt	r0, r0, r3
 802069a:	4770      	bx	lr

0802069c <__ascii_wctomb>:
 802069c:	4603      	mov	r3, r0
 802069e:	4608      	mov	r0, r1
 80206a0:	b141      	cbz	r1, 80206b4 <__ascii_wctomb+0x18>
 80206a2:	2aff      	cmp	r2, #255	@ 0xff
 80206a4:	d904      	bls.n	80206b0 <__ascii_wctomb+0x14>
 80206a6:	228a      	movs	r2, #138	@ 0x8a
 80206a8:	f04f 30ff 	mov.w	r0, #4294967295
 80206ac:	601a      	str	r2, [r3, #0]
 80206ae:	4770      	bx	lr
 80206b0:	2001      	movs	r0, #1
 80206b2:	700a      	strb	r2, [r1, #0]
 80206b4:	4770      	bx	lr

080206b6 <__ssputs_r>:
 80206b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80206ba:	461f      	mov	r7, r3
 80206bc:	688e      	ldr	r6, [r1, #8]
 80206be:	4682      	mov	sl, r0
 80206c0:	460c      	mov	r4, r1
 80206c2:	42be      	cmp	r6, r7
 80206c4:	4690      	mov	r8, r2
 80206c6:	680b      	ldr	r3, [r1, #0]
 80206c8:	d82d      	bhi.n	8020726 <__ssputs_r+0x70>
 80206ca:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80206ce:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80206d2:	d026      	beq.n	8020722 <__ssputs_r+0x6c>
 80206d4:	6965      	ldr	r5, [r4, #20]
 80206d6:	6909      	ldr	r1, [r1, #16]
 80206d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80206dc:	eba3 0901 	sub.w	r9, r3, r1
 80206e0:	1c7b      	adds	r3, r7, #1
 80206e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80206e6:	444b      	add	r3, r9
 80206e8:	106d      	asrs	r5, r5, #1
 80206ea:	429d      	cmp	r5, r3
 80206ec:	bf38      	it	cc
 80206ee:	461d      	movcc	r5, r3
 80206f0:	0553      	lsls	r3, r2, #21
 80206f2:	d527      	bpl.n	8020744 <__ssputs_r+0x8e>
 80206f4:	4629      	mov	r1, r5
 80206f6:	f7fb ff1d 	bl	801c534 <_malloc_r>
 80206fa:	4606      	mov	r6, r0
 80206fc:	b360      	cbz	r0, 8020758 <__ssputs_r+0xa2>
 80206fe:	464a      	mov	r2, r9
 8020700:	6921      	ldr	r1, [r4, #16]
 8020702:	f7fe f8e6 	bl	801e8d2 <memcpy>
 8020706:	89a3      	ldrh	r3, [r4, #12]
 8020708:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802070c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020710:	81a3      	strh	r3, [r4, #12]
 8020712:	6126      	str	r6, [r4, #16]
 8020714:	444e      	add	r6, r9
 8020716:	6165      	str	r5, [r4, #20]
 8020718:	eba5 0509 	sub.w	r5, r5, r9
 802071c:	6026      	str	r6, [r4, #0]
 802071e:	463e      	mov	r6, r7
 8020720:	60a5      	str	r5, [r4, #8]
 8020722:	42be      	cmp	r6, r7
 8020724:	d900      	bls.n	8020728 <__ssputs_r+0x72>
 8020726:	463e      	mov	r6, r7
 8020728:	4632      	mov	r2, r6
 802072a:	4641      	mov	r1, r8
 802072c:	6820      	ldr	r0, [r4, #0]
 802072e:	f7fd ff5d 	bl	801e5ec <memmove>
 8020732:	68a3      	ldr	r3, [r4, #8]
 8020734:	2000      	movs	r0, #0
 8020736:	1b9b      	subs	r3, r3, r6
 8020738:	60a3      	str	r3, [r4, #8]
 802073a:	6823      	ldr	r3, [r4, #0]
 802073c:	4433      	add	r3, r6
 802073e:	6023      	str	r3, [r4, #0]
 8020740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020744:	462a      	mov	r2, r5
 8020746:	f7fb ff81 	bl	801c64c <_realloc_r>
 802074a:	4606      	mov	r6, r0
 802074c:	2800      	cmp	r0, #0
 802074e:	d1e0      	bne.n	8020712 <__ssputs_r+0x5c>
 8020750:	6921      	ldr	r1, [r4, #16]
 8020752:	4650      	mov	r0, sl
 8020754:	f7fe ff4c 	bl	801f5f0 <_free_r>
 8020758:	230c      	movs	r3, #12
 802075a:	f04f 30ff 	mov.w	r0, #4294967295
 802075e:	f8ca 3000 	str.w	r3, [sl]
 8020762:	89a3      	ldrh	r3, [r4, #12]
 8020764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020768:	81a3      	strh	r3, [r4, #12]
 802076a:	e7e9      	b.n	8020740 <__ssputs_r+0x8a>

0802076c <_svfiprintf_r>:
 802076c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020770:	4698      	mov	r8, r3
 8020772:	898b      	ldrh	r3, [r1, #12]
 8020774:	b09d      	sub	sp, #116	@ 0x74
 8020776:	4607      	mov	r7, r0
 8020778:	061b      	lsls	r3, r3, #24
 802077a:	460d      	mov	r5, r1
 802077c:	4614      	mov	r4, r2
 802077e:	d510      	bpl.n	80207a2 <_svfiprintf_r+0x36>
 8020780:	690b      	ldr	r3, [r1, #16]
 8020782:	b973      	cbnz	r3, 80207a2 <_svfiprintf_r+0x36>
 8020784:	2140      	movs	r1, #64	@ 0x40
 8020786:	f7fb fed5 	bl	801c534 <_malloc_r>
 802078a:	6028      	str	r0, [r5, #0]
 802078c:	6128      	str	r0, [r5, #16]
 802078e:	b930      	cbnz	r0, 802079e <_svfiprintf_r+0x32>
 8020790:	230c      	movs	r3, #12
 8020792:	603b      	str	r3, [r7, #0]
 8020794:	f04f 30ff 	mov.w	r0, #4294967295
 8020798:	b01d      	add	sp, #116	@ 0x74
 802079a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802079e:	2340      	movs	r3, #64	@ 0x40
 80207a0:	616b      	str	r3, [r5, #20]
 80207a2:	2300      	movs	r3, #0
 80207a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80207a8:	f04f 0901 	mov.w	r9, #1
 80207ac:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8020950 <_svfiprintf_r+0x1e4>
 80207b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80207b2:	2320      	movs	r3, #32
 80207b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80207b8:	2330      	movs	r3, #48	@ 0x30
 80207ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80207be:	4623      	mov	r3, r4
 80207c0:	469a      	mov	sl, r3
 80207c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80207c6:	b10a      	cbz	r2, 80207cc <_svfiprintf_r+0x60>
 80207c8:	2a25      	cmp	r2, #37	@ 0x25
 80207ca:	d1f9      	bne.n	80207c0 <_svfiprintf_r+0x54>
 80207cc:	ebba 0b04 	subs.w	fp, sl, r4
 80207d0:	d00b      	beq.n	80207ea <_svfiprintf_r+0x7e>
 80207d2:	465b      	mov	r3, fp
 80207d4:	4622      	mov	r2, r4
 80207d6:	4629      	mov	r1, r5
 80207d8:	4638      	mov	r0, r7
 80207da:	f7ff ff6c 	bl	80206b6 <__ssputs_r>
 80207de:	3001      	adds	r0, #1
 80207e0:	f000 80a7 	beq.w	8020932 <_svfiprintf_r+0x1c6>
 80207e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80207e6:	445a      	add	r2, fp
 80207e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80207ea:	f89a 3000 	ldrb.w	r3, [sl]
 80207ee:	2b00      	cmp	r3, #0
 80207f0:	f000 809f 	beq.w	8020932 <_svfiprintf_r+0x1c6>
 80207f4:	2300      	movs	r3, #0
 80207f6:	f04f 32ff 	mov.w	r2, #4294967295
 80207fa:	f10a 0a01 	add.w	sl, sl, #1
 80207fe:	9304      	str	r3, [sp, #16]
 8020800:	9307      	str	r3, [sp, #28]
 8020802:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020806:	931a      	str	r3, [sp, #104]	@ 0x68
 8020808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802080c:	4654      	mov	r4, sl
 802080e:	2205      	movs	r2, #5
 8020810:	484f      	ldr	r0, [pc, #316]	@ (8020950 <_svfiprintf_r+0x1e4>)
 8020812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020816:	f7fe f84e 	bl	801e8b6 <memchr>
 802081a:	9a04      	ldr	r2, [sp, #16]
 802081c:	b9d8      	cbnz	r0, 8020856 <_svfiprintf_r+0xea>
 802081e:	06d0      	lsls	r0, r2, #27
 8020820:	bf44      	itt	mi
 8020822:	2320      	movmi	r3, #32
 8020824:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020828:	0711      	lsls	r1, r2, #28
 802082a:	bf44      	itt	mi
 802082c:	232b      	movmi	r3, #43	@ 0x2b
 802082e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020832:	f89a 3000 	ldrb.w	r3, [sl]
 8020836:	2b2a      	cmp	r3, #42	@ 0x2a
 8020838:	d015      	beq.n	8020866 <_svfiprintf_r+0xfa>
 802083a:	9a07      	ldr	r2, [sp, #28]
 802083c:	4654      	mov	r4, sl
 802083e:	2000      	movs	r0, #0
 8020840:	f04f 0c0a 	mov.w	ip, #10
 8020844:	4621      	mov	r1, r4
 8020846:	f811 3b01 	ldrb.w	r3, [r1], #1
 802084a:	3b30      	subs	r3, #48	@ 0x30
 802084c:	2b09      	cmp	r3, #9
 802084e:	d94b      	bls.n	80208e8 <_svfiprintf_r+0x17c>
 8020850:	b1b0      	cbz	r0, 8020880 <_svfiprintf_r+0x114>
 8020852:	9207      	str	r2, [sp, #28]
 8020854:	e014      	b.n	8020880 <_svfiprintf_r+0x114>
 8020856:	eba0 0308 	sub.w	r3, r0, r8
 802085a:	46a2      	mov	sl, r4
 802085c:	fa09 f303 	lsl.w	r3, r9, r3
 8020860:	4313      	orrs	r3, r2
 8020862:	9304      	str	r3, [sp, #16]
 8020864:	e7d2      	b.n	802080c <_svfiprintf_r+0xa0>
 8020866:	9b03      	ldr	r3, [sp, #12]
 8020868:	1d19      	adds	r1, r3, #4
 802086a:	681b      	ldr	r3, [r3, #0]
 802086c:	2b00      	cmp	r3, #0
 802086e:	9103      	str	r1, [sp, #12]
 8020870:	bfbb      	ittet	lt
 8020872:	425b      	neglt	r3, r3
 8020874:	f042 0202 	orrlt.w	r2, r2, #2
 8020878:	9307      	strge	r3, [sp, #28]
 802087a:	9307      	strlt	r3, [sp, #28]
 802087c:	bfb8      	it	lt
 802087e:	9204      	strlt	r2, [sp, #16]
 8020880:	7823      	ldrb	r3, [r4, #0]
 8020882:	2b2e      	cmp	r3, #46	@ 0x2e
 8020884:	d10a      	bne.n	802089c <_svfiprintf_r+0x130>
 8020886:	7863      	ldrb	r3, [r4, #1]
 8020888:	2b2a      	cmp	r3, #42	@ 0x2a
 802088a:	d132      	bne.n	80208f2 <_svfiprintf_r+0x186>
 802088c:	9b03      	ldr	r3, [sp, #12]
 802088e:	3402      	adds	r4, #2
 8020890:	1d1a      	adds	r2, r3, #4
 8020892:	681b      	ldr	r3, [r3, #0]
 8020894:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020898:	9203      	str	r2, [sp, #12]
 802089a:	9305      	str	r3, [sp, #20]
 802089c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8020960 <_svfiprintf_r+0x1f4>
 80208a0:	2203      	movs	r2, #3
 80208a2:	7821      	ldrb	r1, [r4, #0]
 80208a4:	4650      	mov	r0, sl
 80208a6:	f7fe f806 	bl	801e8b6 <memchr>
 80208aa:	b138      	cbz	r0, 80208bc <_svfiprintf_r+0x150>
 80208ac:	eba0 000a 	sub.w	r0, r0, sl
 80208b0:	2240      	movs	r2, #64	@ 0x40
 80208b2:	9b04      	ldr	r3, [sp, #16]
 80208b4:	3401      	adds	r4, #1
 80208b6:	4082      	lsls	r2, r0
 80208b8:	4313      	orrs	r3, r2
 80208ba:	9304      	str	r3, [sp, #16]
 80208bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80208c0:	2206      	movs	r2, #6
 80208c2:	4824      	ldr	r0, [pc, #144]	@ (8020954 <_svfiprintf_r+0x1e8>)
 80208c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80208c8:	f7fd fff5 	bl	801e8b6 <memchr>
 80208cc:	2800      	cmp	r0, #0
 80208ce:	d036      	beq.n	802093e <_svfiprintf_r+0x1d2>
 80208d0:	4b21      	ldr	r3, [pc, #132]	@ (8020958 <_svfiprintf_r+0x1ec>)
 80208d2:	bb1b      	cbnz	r3, 802091c <_svfiprintf_r+0x1b0>
 80208d4:	9b03      	ldr	r3, [sp, #12]
 80208d6:	3307      	adds	r3, #7
 80208d8:	f023 0307 	bic.w	r3, r3, #7
 80208dc:	3308      	adds	r3, #8
 80208de:	9303      	str	r3, [sp, #12]
 80208e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80208e2:	4433      	add	r3, r6
 80208e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80208e6:	e76a      	b.n	80207be <_svfiprintf_r+0x52>
 80208e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80208ec:	460c      	mov	r4, r1
 80208ee:	2001      	movs	r0, #1
 80208f0:	e7a8      	b.n	8020844 <_svfiprintf_r+0xd8>
 80208f2:	2300      	movs	r3, #0
 80208f4:	3401      	adds	r4, #1
 80208f6:	f04f 0c0a 	mov.w	ip, #10
 80208fa:	4619      	mov	r1, r3
 80208fc:	9305      	str	r3, [sp, #20]
 80208fe:	4620      	mov	r0, r4
 8020900:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020904:	3a30      	subs	r2, #48	@ 0x30
 8020906:	2a09      	cmp	r2, #9
 8020908:	d903      	bls.n	8020912 <_svfiprintf_r+0x1a6>
 802090a:	2b00      	cmp	r3, #0
 802090c:	d0c6      	beq.n	802089c <_svfiprintf_r+0x130>
 802090e:	9105      	str	r1, [sp, #20]
 8020910:	e7c4      	b.n	802089c <_svfiprintf_r+0x130>
 8020912:	fb0c 2101 	mla	r1, ip, r1, r2
 8020916:	4604      	mov	r4, r0
 8020918:	2301      	movs	r3, #1
 802091a:	e7f0      	b.n	80208fe <_svfiprintf_r+0x192>
 802091c:	ab03      	add	r3, sp, #12
 802091e:	462a      	mov	r2, r5
 8020920:	a904      	add	r1, sp, #16
 8020922:	4638      	mov	r0, r7
 8020924:	9300      	str	r3, [sp, #0]
 8020926:	4b0d      	ldr	r3, [pc, #52]	@ (802095c <_svfiprintf_r+0x1f0>)
 8020928:	f7fc fdf8 	bl	801d51c <_printf_float>
 802092c:	1c42      	adds	r2, r0, #1
 802092e:	4606      	mov	r6, r0
 8020930:	d1d6      	bne.n	80208e0 <_svfiprintf_r+0x174>
 8020932:	89ab      	ldrh	r3, [r5, #12]
 8020934:	065b      	lsls	r3, r3, #25
 8020936:	f53f af2d 	bmi.w	8020794 <_svfiprintf_r+0x28>
 802093a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802093c:	e72c      	b.n	8020798 <_svfiprintf_r+0x2c>
 802093e:	ab03      	add	r3, sp, #12
 8020940:	462a      	mov	r2, r5
 8020942:	a904      	add	r1, sp, #16
 8020944:	4638      	mov	r0, r7
 8020946:	9300      	str	r3, [sp, #0]
 8020948:	4b04      	ldr	r3, [pc, #16]	@ (802095c <_svfiprintf_r+0x1f0>)
 802094a:	f7fd f883 	bl	801da54 <_printf_i>
 802094e:	e7ed      	b.n	802092c <_svfiprintf_r+0x1c0>
 8020950:	080827c0 	.word	0x080827c0
 8020954:	080827ca 	.word	0x080827ca
 8020958:	0801d51d 	.word	0x0801d51d
 802095c:	080206b7 	.word	0x080206b7
 8020960:	080827c6 	.word	0x080827c6

08020964 <fiprintf>:
 8020964:	b40e      	push	{r1, r2, r3}
 8020966:	b503      	push	{r0, r1, lr}
 8020968:	ab03      	add	r3, sp, #12
 802096a:	4601      	mov	r1, r0
 802096c:	4805      	ldr	r0, [pc, #20]	@ (8020984 <fiprintf+0x20>)
 802096e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020972:	6800      	ldr	r0, [r0, #0]
 8020974:	9301      	str	r3, [sp, #4]
 8020976:	f000 f8bb 	bl	8020af0 <_vfiprintf_r>
 802097a:	b002      	add	sp, #8
 802097c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020980:	b003      	add	sp, #12
 8020982:	4770      	bx	lr
 8020984:	20000b28 	.word	0x20000b28

08020988 <__swhatbuf_r>:
 8020988:	b570      	push	{r4, r5, r6, lr}
 802098a:	460c      	mov	r4, r1
 802098c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020990:	b096      	sub	sp, #88	@ 0x58
 8020992:	4615      	mov	r5, r2
 8020994:	2900      	cmp	r1, #0
 8020996:	461e      	mov	r6, r3
 8020998:	da0c      	bge.n	80209b4 <__swhatbuf_r+0x2c>
 802099a:	89a3      	ldrh	r3, [r4, #12]
 802099c:	2100      	movs	r1, #0
 802099e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80209a2:	bf14      	ite	ne
 80209a4:	2340      	movne	r3, #64	@ 0x40
 80209a6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80209aa:	2000      	movs	r0, #0
 80209ac:	6031      	str	r1, [r6, #0]
 80209ae:	602b      	str	r3, [r5, #0]
 80209b0:	b016      	add	sp, #88	@ 0x58
 80209b2:	bd70      	pop	{r4, r5, r6, pc}
 80209b4:	466a      	mov	r2, sp
 80209b6:	f000 f849 	bl	8020a4c <_fstat_r>
 80209ba:	2800      	cmp	r0, #0
 80209bc:	dbed      	blt.n	802099a <__swhatbuf_r+0x12>
 80209be:	9901      	ldr	r1, [sp, #4]
 80209c0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80209c4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80209c8:	4259      	negs	r1, r3
 80209ca:	4159      	adcs	r1, r3
 80209cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80209d0:	e7eb      	b.n	80209aa <__swhatbuf_r+0x22>

080209d2 <__smakebuf_r>:
 80209d2:	898b      	ldrh	r3, [r1, #12]
 80209d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80209d6:	079d      	lsls	r5, r3, #30
 80209d8:	4606      	mov	r6, r0
 80209da:	460c      	mov	r4, r1
 80209dc:	d507      	bpl.n	80209ee <__smakebuf_r+0x1c>
 80209de:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80209e2:	6023      	str	r3, [r4, #0]
 80209e4:	6123      	str	r3, [r4, #16]
 80209e6:	2301      	movs	r3, #1
 80209e8:	6163      	str	r3, [r4, #20]
 80209ea:	b003      	add	sp, #12
 80209ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80209ee:	ab01      	add	r3, sp, #4
 80209f0:	466a      	mov	r2, sp
 80209f2:	f7ff ffc9 	bl	8020988 <__swhatbuf_r>
 80209f6:	9f00      	ldr	r7, [sp, #0]
 80209f8:	4605      	mov	r5, r0
 80209fa:	4630      	mov	r0, r6
 80209fc:	4639      	mov	r1, r7
 80209fe:	f7fb fd99 	bl	801c534 <_malloc_r>
 8020a02:	b948      	cbnz	r0, 8020a18 <__smakebuf_r+0x46>
 8020a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020a08:	059a      	lsls	r2, r3, #22
 8020a0a:	d4ee      	bmi.n	80209ea <__smakebuf_r+0x18>
 8020a0c:	f023 0303 	bic.w	r3, r3, #3
 8020a10:	f043 0302 	orr.w	r3, r3, #2
 8020a14:	81a3      	strh	r3, [r4, #12]
 8020a16:	e7e2      	b.n	80209de <__smakebuf_r+0xc>
 8020a18:	89a3      	ldrh	r3, [r4, #12]
 8020a1a:	6020      	str	r0, [r4, #0]
 8020a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020a20:	81a3      	strh	r3, [r4, #12]
 8020a22:	9b01      	ldr	r3, [sp, #4]
 8020a24:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8020a28:	b15b      	cbz	r3, 8020a42 <__smakebuf_r+0x70>
 8020a2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020a2e:	4630      	mov	r0, r6
 8020a30:	f000 f81e 	bl	8020a70 <_isatty_r>
 8020a34:	b128      	cbz	r0, 8020a42 <__smakebuf_r+0x70>
 8020a36:	89a3      	ldrh	r3, [r4, #12]
 8020a38:	f023 0303 	bic.w	r3, r3, #3
 8020a3c:	f043 0301 	orr.w	r3, r3, #1
 8020a40:	81a3      	strh	r3, [r4, #12]
 8020a42:	89a3      	ldrh	r3, [r4, #12]
 8020a44:	431d      	orrs	r5, r3
 8020a46:	81a5      	strh	r5, [r4, #12]
 8020a48:	e7cf      	b.n	80209ea <__smakebuf_r+0x18>
	...

08020a4c <_fstat_r>:
 8020a4c:	b538      	push	{r3, r4, r5, lr}
 8020a4e:	2300      	movs	r3, #0
 8020a50:	4d06      	ldr	r5, [pc, #24]	@ (8020a6c <_fstat_r+0x20>)
 8020a52:	4604      	mov	r4, r0
 8020a54:	4608      	mov	r0, r1
 8020a56:	4611      	mov	r1, r2
 8020a58:	602b      	str	r3, [r5, #0]
 8020a5a:	f7e1 f88f 	bl	8001b7c <_fstat>
 8020a5e:	1c43      	adds	r3, r0, #1
 8020a60:	d102      	bne.n	8020a68 <_fstat_r+0x1c>
 8020a62:	682b      	ldr	r3, [r5, #0]
 8020a64:	b103      	cbz	r3, 8020a68 <_fstat_r+0x1c>
 8020a66:	6023      	str	r3, [r4, #0]
 8020a68:	bd38      	pop	{r3, r4, r5, pc}
 8020a6a:	bf00      	nop
 8020a6c:	2004595c 	.word	0x2004595c

08020a70 <_isatty_r>:
 8020a70:	b538      	push	{r3, r4, r5, lr}
 8020a72:	2300      	movs	r3, #0
 8020a74:	4d05      	ldr	r5, [pc, #20]	@ (8020a8c <_isatty_r+0x1c>)
 8020a76:	4604      	mov	r4, r0
 8020a78:	4608      	mov	r0, r1
 8020a7a:	602b      	str	r3, [r5, #0]
 8020a7c:	f7e1 f88e 	bl	8001b9c <_isatty>
 8020a80:	1c43      	adds	r3, r0, #1
 8020a82:	d102      	bne.n	8020a8a <_isatty_r+0x1a>
 8020a84:	682b      	ldr	r3, [r5, #0]
 8020a86:	b103      	cbz	r3, 8020a8a <_isatty_r+0x1a>
 8020a88:	6023      	str	r3, [r4, #0]
 8020a8a:	bd38      	pop	{r3, r4, r5, pc}
 8020a8c:	2004595c 	.word	0x2004595c

08020a90 <abort>:
 8020a90:	2006      	movs	r0, #6
 8020a92:	b508      	push	{r3, lr}
 8020a94:	f000 f96c 	bl	8020d70 <raise>
 8020a98:	2001      	movs	r0, #1
 8020a9a:	f7e1 f81f 	bl	8001adc <_exit>

08020a9e <__sfputc_r>:
 8020a9e:	6893      	ldr	r3, [r2, #8]
 8020aa0:	3b01      	subs	r3, #1
 8020aa2:	2b00      	cmp	r3, #0
 8020aa4:	6093      	str	r3, [r2, #8]
 8020aa6:	b410      	push	{r4}
 8020aa8:	da08      	bge.n	8020abc <__sfputc_r+0x1e>
 8020aaa:	6994      	ldr	r4, [r2, #24]
 8020aac:	42a3      	cmp	r3, r4
 8020aae:	db01      	blt.n	8020ab4 <__sfputc_r+0x16>
 8020ab0:	290a      	cmp	r1, #10
 8020ab2:	d103      	bne.n	8020abc <__sfputc_r+0x1e>
 8020ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020ab8:	f7fd bd03 	b.w	801e4c2 <__swbuf_r>
 8020abc:	6813      	ldr	r3, [r2, #0]
 8020abe:	1c58      	adds	r0, r3, #1
 8020ac0:	6010      	str	r0, [r2, #0]
 8020ac2:	4608      	mov	r0, r1
 8020ac4:	7019      	strb	r1, [r3, #0]
 8020ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020aca:	4770      	bx	lr

08020acc <__sfputs_r>:
 8020acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ace:	4606      	mov	r6, r0
 8020ad0:	460f      	mov	r7, r1
 8020ad2:	4614      	mov	r4, r2
 8020ad4:	18d5      	adds	r5, r2, r3
 8020ad6:	42ac      	cmp	r4, r5
 8020ad8:	d101      	bne.n	8020ade <__sfputs_r+0x12>
 8020ada:	2000      	movs	r0, #0
 8020adc:	e007      	b.n	8020aee <__sfputs_r+0x22>
 8020ade:	463a      	mov	r2, r7
 8020ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020ae4:	4630      	mov	r0, r6
 8020ae6:	f7ff ffda 	bl	8020a9e <__sfputc_r>
 8020aea:	1c43      	adds	r3, r0, #1
 8020aec:	d1f3      	bne.n	8020ad6 <__sfputs_r+0xa>
 8020aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020af0 <_vfiprintf_r>:
 8020af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020af4:	460d      	mov	r5, r1
 8020af6:	b09d      	sub	sp, #116	@ 0x74
 8020af8:	4614      	mov	r4, r2
 8020afa:	4698      	mov	r8, r3
 8020afc:	4606      	mov	r6, r0
 8020afe:	b118      	cbz	r0, 8020b08 <_vfiprintf_r+0x18>
 8020b00:	6a03      	ldr	r3, [r0, #32]
 8020b02:	b90b      	cbnz	r3, 8020b08 <_vfiprintf_r+0x18>
 8020b04:	f7fd fc10 	bl	801e328 <__sinit>
 8020b08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020b0a:	07d9      	lsls	r1, r3, #31
 8020b0c:	d405      	bmi.n	8020b1a <_vfiprintf_r+0x2a>
 8020b0e:	89ab      	ldrh	r3, [r5, #12]
 8020b10:	059a      	lsls	r2, r3, #22
 8020b12:	d402      	bmi.n	8020b1a <_vfiprintf_r+0x2a>
 8020b14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020b16:	f7fd fec4 	bl	801e8a2 <__retarget_lock_acquire_recursive>
 8020b1a:	89ab      	ldrh	r3, [r5, #12]
 8020b1c:	071b      	lsls	r3, r3, #28
 8020b1e:	d501      	bpl.n	8020b24 <_vfiprintf_r+0x34>
 8020b20:	692b      	ldr	r3, [r5, #16]
 8020b22:	b99b      	cbnz	r3, 8020b4c <_vfiprintf_r+0x5c>
 8020b24:	4629      	mov	r1, r5
 8020b26:	4630      	mov	r0, r6
 8020b28:	f7fd fd0a 	bl	801e540 <__swsetup_r>
 8020b2c:	b170      	cbz	r0, 8020b4c <_vfiprintf_r+0x5c>
 8020b2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020b30:	07dc      	lsls	r4, r3, #31
 8020b32:	d504      	bpl.n	8020b3e <_vfiprintf_r+0x4e>
 8020b34:	f04f 30ff 	mov.w	r0, #4294967295
 8020b38:	b01d      	add	sp, #116	@ 0x74
 8020b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b3e:	89ab      	ldrh	r3, [r5, #12]
 8020b40:	0598      	lsls	r0, r3, #22
 8020b42:	d4f7      	bmi.n	8020b34 <_vfiprintf_r+0x44>
 8020b44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020b46:	f7fd fead 	bl	801e8a4 <__retarget_lock_release_recursive>
 8020b4a:	e7f3      	b.n	8020b34 <_vfiprintf_r+0x44>
 8020b4c:	2300      	movs	r3, #0
 8020b4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8020b52:	f04f 0901 	mov.w	r9, #1
 8020b56:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8020d0c <_vfiprintf_r+0x21c>
 8020b5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b5c:	2320      	movs	r3, #32
 8020b5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020b62:	2330      	movs	r3, #48	@ 0x30
 8020b64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020b68:	4623      	mov	r3, r4
 8020b6a:	469a      	mov	sl, r3
 8020b6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020b70:	b10a      	cbz	r2, 8020b76 <_vfiprintf_r+0x86>
 8020b72:	2a25      	cmp	r2, #37	@ 0x25
 8020b74:	d1f9      	bne.n	8020b6a <_vfiprintf_r+0x7a>
 8020b76:	ebba 0b04 	subs.w	fp, sl, r4
 8020b7a:	d00b      	beq.n	8020b94 <_vfiprintf_r+0xa4>
 8020b7c:	465b      	mov	r3, fp
 8020b7e:	4622      	mov	r2, r4
 8020b80:	4629      	mov	r1, r5
 8020b82:	4630      	mov	r0, r6
 8020b84:	f7ff ffa2 	bl	8020acc <__sfputs_r>
 8020b88:	3001      	adds	r0, #1
 8020b8a:	f000 80a7 	beq.w	8020cdc <_vfiprintf_r+0x1ec>
 8020b8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020b90:	445a      	add	r2, fp
 8020b92:	9209      	str	r2, [sp, #36]	@ 0x24
 8020b94:	f89a 3000 	ldrb.w	r3, [sl]
 8020b98:	2b00      	cmp	r3, #0
 8020b9a:	f000 809f 	beq.w	8020cdc <_vfiprintf_r+0x1ec>
 8020b9e:	2300      	movs	r3, #0
 8020ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8020ba4:	f10a 0a01 	add.w	sl, sl, #1
 8020ba8:	9304      	str	r3, [sp, #16]
 8020baa:	9307      	str	r3, [sp, #28]
 8020bac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020bb0:	931a      	str	r3, [sp, #104]	@ 0x68
 8020bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020bb6:	4654      	mov	r4, sl
 8020bb8:	2205      	movs	r2, #5
 8020bba:	4854      	ldr	r0, [pc, #336]	@ (8020d0c <_vfiprintf_r+0x21c>)
 8020bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020bc0:	f7fd fe79 	bl	801e8b6 <memchr>
 8020bc4:	9a04      	ldr	r2, [sp, #16]
 8020bc6:	b9d8      	cbnz	r0, 8020c00 <_vfiprintf_r+0x110>
 8020bc8:	06d1      	lsls	r1, r2, #27
 8020bca:	bf44      	itt	mi
 8020bcc:	2320      	movmi	r3, #32
 8020bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020bd2:	0713      	lsls	r3, r2, #28
 8020bd4:	bf44      	itt	mi
 8020bd6:	232b      	movmi	r3, #43	@ 0x2b
 8020bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8020be0:	2b2a      	cmp	r3, #42	@ 0x2a
 8020be2:	d015      	beq.n	8020c10 <_vfiprintf_r+0x120>
 8020be4:	9a07      	ldr	r2, [sp, #28]
 8020be6:	4654      	mov	r4, sl
 8020be8:	2000      	movs	r0, #0
 8020bea:	f04f 0c0a 	mov.w	ip, #10
 8020bee:	4621      	mov	r1, r4
 8020bf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020bf4:	3b30      	subs	r3, #48	@ 0x30
 8020bf6:	2b09      	cmp	r3, #9
 8020bf8:	d94b      	bls.n	8020c92 <_vfiprintf_r+0x1a2>
 8020bfa:	b1b0      	cbz	r0, 8020c2a <_vfiprintf_r+0x13a>
 8020bfc:	9207      	str	r2, [sp, #28]
 8020bfe:	e014      	b.n	8020c2a <_vfiprintf_r+0x13a>
 8020c00:	eba0 0308 	sub.w	r3, r0, r8
 8020c04:	46a2      	mov	sl, r4
 8020c06:	fa09 f303 	lsl.w	r3, r9, r3
 8020c0a:	4313      	orrs	r3, r2
 8020c0c:	9304      	str	r3, [sp, #16]
 8020c0e:	e7d2      	b.n	8020bb6 <_vfiprintf_r+0xc6>
 8020c10:	9b03      	ldr	r3, [sp, #12]
 8020c12:	1d19      	adds	r1, r3, #4
 8020c14:	681b      	ldr	r3, [r3, #0]
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	9103      	str	r1, [sp, #12]
 8020c1a:	bfbb      	ittet	lt
 8020c1c:	425b      	neglt	r3, r3
 8020c1e:	f042 0202 	orrlt.w	r2, r2, #2
 8020c22:	9307      	strge	r3, [sp, #28]
 8020c24:	9307      	strlt	r3, [sp, #28]
 8020c26:	bfb8      	it	lt
 8020c28:	9204      	strlt	r2, [sp, #16]
 8020c2a:	7823      	ldrb	r3, [r4, #0]
 8020c2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8020c2e:	d10a      	bne.n	8020c46 <_vfiprintf_r+0x156>
 8020c30:	7863      	ldrb	r3, [r4, #1]
 8020c32:	2b2a      	cmp	r3, #42	@ 0x2a
 8020c34:	d132      	bne.n	8020c9c <_vfiprintf_r+0x1ac>
 8020c36:	9b03      	ldr	r3, [sp, #12]
 8020c38:	3402      	adds	r4, #2
 8020c3a:	1d1a      	adds	r2, r3, #4
 8020c3c:	681b      	ldr	r3, [r3, #0]
 8020c3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020c42:	9203      	str	r2, [sp, #12]
 8020c44:	9305      	str	r3, [sp, #20]
 8020c46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8020d1c <_vfiprintf_r+0x22c>
 8020c4a:	2203      	movs	r2, #3
 8020c4c:	7821      	ldrb	r1, [r4, #0]
 8020c4e:	4650      	mov	r0, sl
 8020c50:	f7fd fe31 	bl	801e8b6 <memchr>
 8020c54:	b138      	cbz	r0, 8020c66 <_vfiprintf_r+0x176>
 8020c56:	eba0 000a 	sub.w	r0, r0, sl
 8020c5a:	2240      	movs	r2, #64	@ 0x40
 8020c5c:	9b04      	ldr	r3, [sp, #16]
 8020c5e:	3401      	adds	r4, #1
 8020c60:	4082      	lsls	r2, r0
 8020c62:	4313      	orrs	r3, r2
 8020c64:	9304      	str	r3, [sp, #16]
 8020c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020c6a:	2206      	movs	r2, #6
 8020c6c:	4828      	ldr	r0, [pc, #160]	@ (8020d10 <_vfiprintf_r+0x220>)
 8020c6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020c72:	f7fd fe20 	bl	801e8b6 <memchr>
 8020c76:	2800      	cmp	r0, #0
 8020c78:	d03f      	beq.n	8020cfa <_vfiprintf_r+0x20a>
 8020c7a:	4b26      	ldr	r3, [pc, #152]	@ (8020d14 <_vfiprintf_r+0x224>)
 8020c7c:	bb1b      	cbnz	r3, 8020cc6 <_vfiprintf_r+0x1d6>
 8020c7e:	9b03      	ldr	r3, [sp, #12]
 8020c80:	3307      	adds	r3, #7
 8020c82:	f023 0307 	bic.w	r3, r3, #7
 8020c86:	3308      	adds	r3, #8
 8020c88:	9303      	str	r3, [sp, #12]
 8020c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020c8c:	443b      	add	r3, r7
 8020c8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020c90:	e76a      	b.n	8020b68 <_vfiprintf_r+0x78>
 8020c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8020c96:	460c      	mov	r4, r1
 8020c98:	2001      	movs	r0, #1
 8020c9a:	e7a8      	b.n	8020bee <_vfiprintf_r+0xfe>
 8020c9c:	2300      	movs	r3, #0
 8020c9e:	3401      	adds	r4, #1
 8020ca0:	f04f 0c0a 	mov.w	ip, #10
 8020ca4:	4619      	mov	r1, r3
 8020ca6:	9305      	str	r3, [sp, #20]
 8020ca8:	4620      	mov	r0, r4
 8020caa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020cae:	3a30      	subs	r2, #48	@ 0x30
 8020cb0:	2a09      	cmp	r2, #9
 8020cb2:	d903      	bls.n	8020cbc <_vfiprintf_r+0x1cc>
 8020cb4:	2b00      	cmp	r3, #0
 8020cb6:	d0c6      	beq.n	8020c46 <_vfiprintf_r+0x156>
 8020cb8:	9105      	str	r1, [sp, #20]
 8020cba:	e7c4      	b.n	8020c46 <_vfiprintf_r+0x156>
 8020cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8020cc0:	4604      	mov	r4, r0
 8020cc2:	2301      	movs	r3, #1
 8020cc4:	e7f0      	b.n	8020ca8 <_vfiprintf_r+0x1b8>
 8020cc6:	ab03      	add	r3, sp, #12
 8020cc8:	462a      	mov	r2, r5
 8020cca:	a904      	add	r1, sp, #16
 8020ccc:	4630      	mov	r0, r6
 8020cce:	9300      	str	r3, [sp, #0]
 8020cd0:	4b11      	ldr	r3, [pc, #68]	@ (8020d18 <_vfiprintf_r+0x228>)
 8020cd2:	f7fc fc23 	bl	801d51c <_printf_float>
 8020cd6:	4607      	mov	r7, r0
 8020cd8:	1c78      	adds	r0, r7, #1
 8020cda:	d1d6      	bne.n	8020c8a <_vfiprintf_r+0x19a>
 8020cdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020cde:	07d9      	lsls	r1, r3, #31
 8020ce0:	d405      	bmi.n	8020cee <_vfiprintf_r+0x1fe>
 8020ce2:	89ab      	ldrh	r3, [r5, #12]
 8020ce4:	059a      	lsls	r2, r3, #22
 8020ce6:	d402      	bmi.n	8020cee <_vfiprintf_r+0x1fe>
 8020ce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020cea:	f7fd fddb 	bl	801e8a4 <__retarget_lock_release_recursive>
 8020cee:	89ab      	ldrh	r3, [r5, #12]
 8020cf0:	065b      	lsls	r3, r3, #25
 8020cf2:	f53f af1f 	bmi.w	8020b34 <_vfiprintf_r+0x44>
 8020cf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020cf8:	e71e      	b.n	8020b38 <_vfiprintf_r+0x48>
 8020cfa:	ab03      	add	r3, sp, #12
 8020cfc:	462a      	mov	r2, r5
 8020cfe:	a904      	add	r1, sp, #16
 8020d00:	4630      	mov	r0, r6
 8020d02:	9300      	str	r3, [sp, #0]
 8020d04:	4b04      	ldr	r3, [pc, #16]	@ (8020d18 <_vfiprintf_r+0x228>)
 8020d06:	f7fc fea5 	bl	801da54 <_printf_i>
 8020d0a:	e7e4      	b.n	8020cd6 <_vfiprintf_r+0x1e6>
 8020d0c:	080827c0 	.word	0x080827c0
 8020d10:	080827ca 	.word	0x080827ca
 8020d14:	0801d51d 	.word	0x0801d51d
 8020d18:	08020acd 	.word	0x08020acd
 8020d1c:	080827c6 	.word	0x080827c6

08020d20 <_raise_r>:
 8020d20:	291f      	cmp	r1, #31
 8020d22:	b538      	push	{r3, r4, r5, lr}
 8020d24:	4605      	mov	r5, r0
 8020d26:	460c      	mov	r4, r1
 8020d28:	d904      	bls.n	8020d34 <_raise_r+0x14>
 8020d2a:	2316      	movs	r3, #22
 8020d2c:	6003      	str	r3, [r0, #0]
 8020d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8020d32:	bd38      	pop	{r3, r4, r5, pc}
 8020d34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8020d36:	b112      	cbz	r2, 8020d3e <_raise_r+0x1e>
 8020d38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020d3c:	b94b      	cbnz	r3, 8020d52 <_raise_r+0x32>
 8020d3e:	4628      	mov	r0, r5
 8020d40:	f000 f830 	bl	8020da4 <_getpid_r>
 8020d44:	4622      	mov	r2, r4
 8020d46:	4601      	mov	r1, r0
 8020d48:	4628      	mov	r0, r5
 8020d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020d4e:	f000 b817 	b.w	8020d80 <_kill_r>
 8020d52:	2b01      	cmp	r3, #1
 8020d54:	d00a      	beq.n	8020d6c <_raise_r+0x4c>
 8020d56:	1c59      	adds	r1, r3, #1
 8020d58:	d103      	bne.n	8020d62 <_raise_r+0x42>
 8020d5a:	2316      	movs	r3, #22
 8020d5c:	6003      	str	r3, [r0, #0]
 8020d5e:	2001      	movs	r0, #1
 8020d60:	e7e7      	b.n	8020d32 <_raise_r+0x12>
 8020d62:	2100      	movs	r1, #0
 8020d64:	4620      	mov	r0, r4
 8020d66:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8020d6a:	4798      	blx	r3
 8020d6c:	2000      	movs	r0, #0
 8020d6e:	e7e0      	b.n	8020d32 <_raise_r+0x12>

08020d70 <raise>:
 8020d70:	4b02      	ldr	r3, [pc, #8]	@ (8020d7c <raise+0xc>)
 8020d72:	4601      	mov	r1, r0
 8020d74:	6818      	ldr	r0, [r3, #0]
 8020d76:	f7ff bfd3 	b.w	8020d20 <_raise_r>
 8020d7a:	bf00      	nop
 8020d7c:	20000b28 	.word	0x20000b28

08020d80 <_kill_r>:
 8020d80:	b538      	push	{r3, r4, r5, lr}
 8020d82:	2300      	movs	r3, #0
 8020d84:	4d06      	ldr	r5, [pc, #24]	@ (8020da0 <_kill_r+0x20>)
 8020d86:	4604      	mov	r4, r0
 8020d88:	4608      	mov	r0, r1
 8020d8a:	4611      	mov	r1, r2
 8020d8c:	602b      	str	r3, [r5, #0]
 8020d8e:	f7e0 fe95 	bl	8001abc <_kill>
 8020d92:	1c43      	adds	r3, r0, #1
 8020d94:	d102      	bne.n	8020d9c <_kill_r+0x1c>
 8020d96:	682b      	ldr	r3, [r5, #0]
 8020d98:	b103      	cbz	r3, 8020d9c <_kill_r+0x1c>
 8020d9a:	6023      	str	r3, [r4, #0]
 8020d9c:	bd38      	pop	{r3, r4, r5, pc}
 8020d9e:	bf00      	nop
 8020da0:	2004595c 	.word	0x2004595c

08020da4 <_getpid_r>:
 8020da4:	f7e0 be82 	b.w	8001aac <_getpid>

08020da8 <log10>:
 8020da8:	b538      	push	{r3, r4, r5, lr}
 8020daa:	ec55 4b10 	vmov	r4, r5, d0
 8020dae:	ed2d 8b02 	vpush	{d8}
 8020db2:	f000 f9f5 	bl	80211a0 <__ieee754_log10>
 8020db6:	4622      	mov	r2, r4
 8020db8:	462b      	mov	r3, r5
 8020dba:	4620      	mov	r0, r4
 8020dbc:	4629      	mov	r1, r5
 8020dbe:	eeb0 8a40 	vmov.f32	s16, s0
 8020dc2:	eef0 8a60 	vmov.f32	s17, s1
 8020dc6:	f7df febf 	bl	8000b48 <__aeabi_dcmpun>
 8020dca:	b998      	cbnz	r0, 8020df4 <log10+0x4c>
 8020dcc:	2200      	movs	r2, #0
 8020dce:	2300      	movs	r3, #0
 8020dd0:	4620      	mov	r0, r4
 8020dd2:	4629      	mov	r1, r5
 8020dd4:	f7df fe9a 	bl	8000b0c <__aeabi_dcmple>
 8020dd8:	b160      	cbz	r0, 8020df4 <log10+0x4c>
 8020dda:	2200      	movs	r2, #0
 8020ddc:	2300      	movs	r3, #0
 8020dde:	4620      	mov	r0, r4
 8020de0:	4629      	mov	r1, r5
 8020de2:	f7df fe7f 	bl	8000ae4 <__aeabi_dcmpeq>
 8020de6:	b160      	cbz	r0, 8020e02 <log10+0x5a>
 8020de8:	f7fd fd30 	bl	801e84c <__errno>
 8020dec:	2322      	movs	r3, #34	@ 0x22
 8020dee:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8020e18 <log10+0x70>
 8020df2:	6003      	str	r3, [r0, #0]
 8020df4:	eeb0 0a48 	vmov.f32	s0, s16
 8020df8:	eef0 0a68 	vmov.f32	s1, s17
 8020dfc:	ecbd 8b02 	vpop	{d8}
 8020e00:	bd38      	pop	{r3, r4, r5, pc}
 8020e02:	f7fd fd23 	bl	801e84c <__errno>
 8020e06:	2321      	movs	r3, #33	@ 0x21
 8020e08:	ecbd 8b02 	vpop	{d8}
 8020e0c:	6003      	str	r3, [r0, #0]
 8020e0e:	4804      	ldr	r0, [pc, #16]	@ (8020e20 <log10+0x78>)
 8020e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020e14:	f7fd bd6c 	b.w	801e8f0 <nan>
 8020e18:	00000000 	.word	0x00000000
 8020e1c:	fff00000 	.word	0xfff00000
 8020e20:	0808258e 	.word	0x0808258e

08020e24 <pow>:
 8020e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e26:	ec55 4b11 	vmov	r4, r5, d1
 8020e2a:	ed2d 8b02 	vpush	{d8}
 8020e2e:	eeb0 8a40 	vmov.f32	s16, s0
 8020e32:	eef0 8a60 	vmov.f32	s17, s1
 8020e36:	f000 fa3f 	bl	80212b8 <__ieee754_pow>
 8020e3a:	4622      	mov	r2, r4
 8020e3c:	462b      	mov	r3, r5
 8020e3e:	4620      	mov	r0, r4
 8020e40:	4629      	mov	r1, r5
 8020e42:	ec57 6b10 	vmov	r6, r7, d0
 8020e46:	f7df fe7f 	bl	8000b48 <__aeabi_dcmpun>
 8020e4a:	2800      	cmp	r0, #0
 8020e4c:	d13b      	bne.n	8020ec6 <pow+0xa2>
 8020e4e:	2200      	movs	r2, #0
 8020e50:	2300      	movs	r3, #0
 8020e52:	ec51 0b18 	vmov	r0, r1, d8
 8020e56:	f7df fe45 	bl	8000ae4 <__aeabi_dcmpeq>
 8020e5a:	b1b8      	cbz	r0, 8020e8c <pow+0x68>
 8020e5c:	2200      	movs	r2, #0
 8020e5e:	2300      	movs	r3, #0
 8020e60:	4620      	mov	r0, r4
 8020e62:	4629      	mov	r1, r5
 8020e64:	f7df fe3e 	bl	8000ae4 <__aeabi_dcmpeq>
 8020e68:	2800      	cmp	r0, #0
 8020e6a:	d146      	bne.n	8020efa <pow+0xd6>
 8020e6c:	ec45 4b10 	vmov	d0, r4, r5
 8020e70:	f000 f89c 	bl	8020fac <finite>
 8020e74:	b338      	cbz	r0, 8020ec6 <pow+0xa2>
 8020e76:	2200      	movs	r2, #0
 8020e78:	2300      	movs	r3, #0
 8020e7a:	4620      	mov	r0, r4
 8020e7c:	4629      	mov	r1, r5
 8020e7e:	f7df fe3b 	bl	8000af8 <__aeabi_dcmplt>
 8020e82:	b300      	cbz	r0, 8020ec6 <pow+0xa2>
 8020e84:	f7fd fce2 	bl	801e84c <__errno>
 8020e88:	2322      	movs	r3, #34	@ 0x22
 8020e8a:	e01b      	b.n	8020ec4 <pow+0xa0>
 8020e8c:	ec47 6b10 	vmov	d0, r6, r7
 8020e90:	f000 f88c 	bl	8020fac <finite>
 8020e94:	b9e0      	cbnz	r0, 8020ed0 <pow+0xac>
 8020e96:	eeb0 0a48 	vmov.f32	s0, s16
 8020e9a:	eef0 0a68 	vmov.f32	s1, s17
 8020e9e:	f000 f885 	bl	8020fac <finite>
 8020ea2:	b1a8      	cbz	r0, 8020ed0 <pow+0xac>
 8020ea4:	ec45 4b10 	vmov	d0, r4, r5
 8020ea8:	f000 f880 	bl	8020fac <finite>
 8020eac:	b180      	cbz	r0, 8020ed0 <pow+0xac>
 8020eae:	4632      	mov	r2, r6
 8020eb0:	463b      	mov	r3, r7
 8020eb2:	4630      	mov	r0, r6
 8020eb4:	4639      	mov	r1, r7
 8020eb6:	f7df fe47 	bl	8000b48 <__aeabi_dcmpun>
 8020eba:	2800      	cmp	r0, #0
 8020ebc:	d0e2      	beq.n	8020e84 <pow+0x60>
 8020ebe:	f7fd fcc5 	bl	801e84c <__errno>
 8020ec2:	2321      	movs	r3, #33	@ 0x21
 8020ec4:	6003      	str	r3, [r0, #0]
 8020ec6:	ecbd 8b02 	vpop	{d8}
 8020eca:	ec47 6b10 	vmov	d0, r6, r7
 8020ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020ed0:	2200      	movs	r2, #0
 8020ed2:	2300      	movs	r3, #0
 8020ed4:	4630      	mov	r0, r6
 8020ed6:	4639      	mov	r1, r7
 8020ed8:	f7df fe04 	bl	8000ae4 <__aeabi_dcmpeq>
 8020edc:	2800      	cmp	r0, #0
 8020ede:	d0f2      	beq.n	8020ec6 <pow+0xa2>
 8020ee0:	eeb0 0a48 	vmov.f32	s0, s16
 8020ee4:	eef0 0a68 	vmov.f32	s1, s17
 8020ee8:	f000 f860 	bl	8020fac <finite>
 8020eec:	2800      	cmp	r0, #0
 8020eee:	d0ea      	beq.n	8020ec6 <pow+0xa2>
 8020ef0:	ec45 4b10 	vmov	d0, r4, r5
 8020ef4:	f000 f85a 	bl	8020fac <finite>
 8020ef8:	e7c3      	b.n	8020e82 <pow+0x5e>
 8020efa:	2600      	movs	r6, #0
 8020efc:	4f00      	ldr	r7, [pc, #0]	@ (8020f00 <pow+0xdc>)
 8020efe:	e7e2      	b.n	8020ec6 <pow+0xa2>
 8020f00:	3ff00000 	.word	0x3ff00000

08020f04 <expf>:
 8020f04:	b508      	push	{r3, lr}
 8020f06:	ed2d 8b02 	vpush	{d8}
 8020f0a:	eef0 8a40 	vmov.f32	s17, s0
 8020f0e:	f000 ff1b 	bl	8021d48 <__ieee754_expf>
 8020f12:	eeb0 8a40 	vmov.f32	s16, s0
 8020f16:	eeb0 0a68 	vmov.f32	s0, s17
 8020f1a:	f000 f88d 	bl	8021038 <finitef>
 8020f1e:	b160      	cbz	r0, 8020f3a <expf+0x36>
 8020f20:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8020f60 <expf+0x5c>
 8020f24:	eef4 8ae7 	vcmpe.f32	s17, s15
 8020f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f2c:	dd0a      	ble.n	8020f44 <expf+0x40>
 8020f2e:	f7fd fc8d 	bl	801e84c <__errno>
 8020f32:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8020f64 <expf+0x60>
 8020f36:	2322      	movs	r3, #34	@ 0x22
 8020f38:	6003      	str	r3, [r0, #0]
 8020f3a:	eeb0 0a48 	vmov.f32	s0, s16
 8020f3e:	ecbd 8b02 	vpop	{d8}
 8020f42:	bd08      	pop	{r3, pc}
 8020f44:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8020f68 <expf+0x64>
 8020f48:	eef4 8ae7 	vcmpe.f32	s17, s15
 8020f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f50:	d5f3      	bpl.n	8020f3a <expf+0x36>
 8020f52:	f7fd fc7b 	bl	801e84c <__errno>
 8020f56:	2322      	movs	r3, #34	@ 0x22
 8020f58:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8020f6c <expf+0x68>
 8020f5c:	6003      	str	r3, [r0, #0]
 8020f5e:	e7ec      	b.n	8020f3a <expf+0x36>
 8020f60:	42b17217 	.word	0x42b17217
 8020f64:	7f800000 	.word	0x7f800000
 8020f68:	c2cff1b5 	.word	0xc2cff1b5
 8020f6c:	00000000 	.word	0x00000000

08020f70 <sqrtf>:
 8020f70:	b508      	push	{r3, lr}
 8020f72:	ed2d 8b02 	vpush	{d8}
 8020f76:	eeb0 8a40 	vmov.f32	s16, s0
 8020f7a:	f000 f88d 	bl	8021098 <__ieee754_sqrtf>
 8020f7e:	eeb4 8a48 	vcmp.f32	s16, s16
 8020f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f86:	d60c      	bvs.n	8020fa2 <sqrtf+0x32>
 8020f88:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8020fa8 <sqrtf+0x38>
 8020f8c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8020f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f94:	d505      	bpl.n	8020fa2 <sqrtf+0x32>
 8020f96:	f7fd fc59 	bl	801e84c <__errno>
 8020f9a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8020f9e:	2321      	movs	r3, #33	@ 0x21
 8020fa0:	6003      	str	r3, [r0, #0]
 8020fa2:	ecbd 8b02 	vpop	{d8}
 8020fa6:	bd08      	pop	{r3, pc}
 8020fa8:	00000000 	.word	0x00000000

08020fac <finite>:
 8020fac:	b082      	sub	sp, #8
 8020fae:	ed8d 0b00 	vstr	d0, [sp]
 8020fb2:	9801      	ldr	r0, [sp, #4]
 8020fb4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8020fb8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8020fbc:	0fc0      	lsrs	r0, r0, #31
 8020fbe:	b002      	add	sp, #8
 8020fc0:	4770      	bx	lr

08020fc2 <with_errno>:
 8020fc2:	b510      	push	{r4, lr}
 8020fc4:	ed2d 8b02 	vpush	{d8}
 8020fc8:	eeb0 8a40 	vmov.f32	s16, s0
 8020fcc:	eef0 8a60 	vmov.f32	s17, s1
 8020fd0:	4604      	mov	r4, r0
 8020fd2:	f7fd fc3b 	bl	801e84c <__errno>
 8020fd6:	6004      	str	r4, [r0, #0]
 8020fd8:	eeb0 0a48 	vmov.f32	s0, s16
 8020fdc:	eef0 0a68 	vmov.f32	s1, s17
 8020fe0:	ecbd 8b02 	vpop	{d8}
 8020fe4:	bd10      	pop	{r4, pc}

08020fe6 <xflow>:
 8020fe6:	4603      	mov	r3, r0
 8020fe8:	b507      	push	{r0, r1, r2, lr}
 8020fea:	ec51 0b10 	vmov	r0, r1, d0
 8020fee:	b183      	cbz	r3, 8021012 <xflow+0x2c>
 8020ff0:	4602      	mov	r2, r0
 8020ff2:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020ff6:	e9cd 2300 	strd	r2, r3, [sp]
 8020ffa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020ffe:	f7df fb09 	bl	8000614 <__aeabi_dmul>
 8021002:	ec41 0b10 	vmov	d0, r0, r1
 8021006:	2022      	movs	r0, #34	@ 0x22
 8021008:	b003      	add	sp, #12
 802100a:	f85d eb04 	ldr.w	lr, [sp], #4
 802100e:	f7ff bfd8 	b.w	8020fc2 <with_errno>
 8021012:	4602      	mov	r2, r0
 8021014:	460b      	mov	r3, r1
 8021016:	e7ee      	b.n	8020ff6 <xflow+0x10>

08021018 <__math_uflow>:
 8021018:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8021020 <__math_uflow+0x8>
 802101c:	f7ff bfe3 	b.w	8020fe6 <xflow>
 8021020:	00000000 	.word	0x00000000
 8021024:	10000000 	.word	0x10000000

08021028 <__math_oflow>:
 8021028:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8021030 <__math_oflow+0x8>
 802102c:	f7ff bfdb 	b.w	8020fe6 <xflow>
 8021030:	00000000 	.word	0x00000000
 8021034:	70000000 	.word	0x70000000

08021038 <finitef>:
 8021038:	ee10 3a10 	vmov	r3, s0
 802103c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8021040:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8021044:	bfac      	ite	ge
 8021046:	2000      	movge	r0, #0
 8021048:	2001      	movlt	r0, #1
 802104a:	4770      	bx	lr

0802104c <with_errnof>:
 802104c:	b510      	push	{r4, lr}
 802104e:	ed2d 8b02 	vpush	{d8}
 8021052:	eeb0 8a40 	vmov.f32	s16, s0
 8021056:	4604      	mov	r4, r0
 8021058:	f7fd fbf8 	bl	801e84c <__errno>
 802105c:	6004      	str	r4, [r0, #0]
 802105e:	eeb0 0a48 	vmov.f32	s0, s16
 8021062:	ecbd 8b02 	vpop	{d8}
 8021066:	bd10      	pop	{r4, pc}

08021068 <xflowf>:
 8021068:	b130      	cbz	r0, 8021078 <xflowf+0x10>
 802106a:	eef1 7a40 	vneg.f32	s15, s0
 802106e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8021072:	2022      	movs	r0, #34	@ 0x22
 8021074:	f7ff bfea 	b.w	802104c <with_errnof>
 8021078:	eef0 7a40 	vmov.f32	s15, s0
 802107c:	e7f7      	b.n	802106e <xflowf+0x6>
	...

08021080 <__math_uflowf>:
 8021080:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8021088 <__math_uflowf+0x8>
 8021084:	f7ff bff0 	b.w	8021068 <xflowf>
 8021088:	10000000 	.word	0x10000000

0802108c <__math_oflowf>:
 802108c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8021094 <__math_oflowf+0x8>
 8021090:	f7ff bfea 	b.w	8021068 <xflowf>
 8021094:	70000000 	.word	0x70000000

08021098 <__ieee754_sqrtf>:
 8021098:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802109c:	4770      	bx	lr
	...

080210a0 <floor>:
 80210a0:	ec51 0b10 	vmov	r0, r1, d0
 80210a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80210a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80210ac:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80210b0:	460c      	mov	r4, r1
 80210b2:	4605      	mov	r5, r0
 80210b4:	4680      	mov	r8, r0
 80210b6:	2e13      	cmp	r6, #19
 80210b8:	dc35      	bgt.n	8021126 <floor+0x86>
 80210ba:	2e00      	cmp	r6, #0
 80210bc:	da17      	bge.n	80210ee <floor+0x4e>
 80210be:	a334      	add	r3, pc, #208	@ (adr r3, 8021190 <floor+0xf0>)
 80210c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210c4:	f7df f8f0 	bl	80002a8 <__adddf3>
 80210c8:	2200      	movs	r2, #0
 80210ca:	2300      	movs	r3, #0
 80210cc:	f7df fd32 	bl	8000b34 <__aeabi_dcmpgt>
 80210d0:	b150      	cbz	r0, 80210e8 <floor+0x48>
 80210d2:	2c00      	cmp	r4, #0
 80210d4:	da56      	bge.n	8021184 <floor+0xe4>
 80210d6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80210da:	432c      	orrs	r4, r5
 80210dc:	2500      	movs	r5, #0
 80210de:	42ac      	cmp	r4, r5
 80210e0:	4c2d      	ldr	r4, [pc, #180]	@ (8021198 <floor+0xf8>)
 80210e2:	bf08      	it	eq
 80210e4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80210e8:	4621      	mov	r1, r4
 80210ea:	4628      	mov	r0, r5
 80210ec:	e024      	b.n	8021138 <floor+0x98>
 80210ee:	4f2b      	ldr	r7, [pc, #172]	@ (802119c <floor+0xfc>)
 80210f0:	4137      	asrs	r7, r6
 80210f2:	ea01 0307 	and.w	r3, r1, r7
 80210f6:	4303      	orrs	r3, r0
 80210f8:	d01e      	beq.n	8021138 <floor+0x98>
 80210fa:	a325      	add	r3, pc, #148	@ (adr r3, 8021190 <floor+0xf0>)
 80210fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021100:	f7df f8d2 	bl	80002a8 <__adddf3>
 8021104:	2200      	movs	r2, #0
 8021106:	2300      	movs	r3, #0
 8021108:	f7df fd14 	bl	8000b34 <__aeabi_dcmpgt>
 802110c:	2800      	cmp	r0, #0
 802110e:	d0eb      	beq.n	80210e8 <floor+0x48>
 8021110:	2c00      	cmp	r4, #0
 8021112:	f04f 0500 	mov.w	r5, #0
 8021116:	bfbe      	ittt	lt
 8021118:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 802111c:	4133      	asrlt	r3, r6
 802111e:	18e4      	addlt	r4, r4, r3
 8021120:	ea24 0407 	bic.w	r4, r4, r7
 8021124:	e7e0      	b.n	80210e8 <floor+0x48>
 8021126:	2e33      	cmp	r6, #51	@ 0x33
 8021128:	dd0a      	ble.n	8021140 <floor+0xa0>
 802112a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 802112e:	d103      	bne.n	8021138 <floor+0x98>
 8021130:	4602      	mov	r2, r0
 8021132:	460b      	mov	r3, r1
 8021134:	f7df f8b8 	bl	80002a8 <__adddf3>
 8021138:	ec41 0b10 	vmov	d0, r0, r1
 802113c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021140:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8021144:	f04f 37ff 	mov.w	r7, #4294967295
 8021148:	40df      	lsrs	r7, r3
 802114a:	4207      	tst	r7, r0
 802114c:	d0f4      	beq.n	8021138 <floor+0x98>
 802114e:	a310      	add	r3, pc, #64	@ (adr r3, 8021190 <floor+0xf0>)
 8021150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021154:	f7df f8a8 	bl	80002a8 <__adddf3>
 8021158:	2200      	movs	r2, #0
 802115a:	2300      	movs	r3, #0
 802115c:	f7df fcea 	bl	8000b34 <__aeabi_dcmpgt>
 8021160:	2800      	cmp	r0, #0
 8021162:	d0c1      	beq.n	80210e8 <floor+0x48>
 8021164:	2c00      	cmp	r4, #0
 8021166:	da0a      	bge.n	802117e <floor+0xde>
 8021168:	2e14      	cmp	r6, #20
 802116a:	d101      	bne.n	8021170 <floor+0xd0>
 802116c:	3401      	adds	r4, #1
 802116e:	e006      	b.n	802117e <floor+0xde>
 8021170:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8021174:	2301      	movs	r3, #1
 8021176:	40b3      	lsls	r3, r6
 8021178:	441d      	add	r5, r3
 802117a:	4545      	cmp	r5, r8
 802117c:	d3f6      	bcc.n	802116c <floor+0xcc>
 802117e:	ea25 0507 	bic.w	r5, r5, r7
 8021182:	e7b1      	b.n	80210e8 <floor+0x48>
 8021184:	2500      	movs	r5, #0
 8021186:	462c      	mov	r4, r5
 8021188:	e7ae      	b.n	80210e8 <floor+0x48>
 802118a:	bf00      	nop
 802118c:	f3af 8000 	nop.w
 8021190:	8800759c 	.word	0x8800759c
 8021194:	7e37e43c 	.word	0x7e37e43c
 8021198:	bff00000 	.word	0xbff00000
 802119c:	000fffff 	.word	0x000fffff

080211a0 <__ieee754_log10>:
 80211a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80211a4:	ec55 4b10 	vmov	r4, r5, d0
 80211a8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80211ac:	462b      	mov	r3, r5
 80211ae:	ed2d 8b02 	vpush	{d8}
 80211b2:	da2e      	bge.n	8021212 <__ieee754_log10+0x72>
 80211b4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80211b8:	4322      	orrs	r2, r4
 80211ba:	d10b      	bne.n	80211d4 <__ieee754_log10+0x34>
 80211bc:	2200      	movs	r2, #0
 80211be:	2300      	movs	r3, #0
 80211c0:	2000      	movs	r0, #0
 80211c2:	4939      	ldr	r1, [pc, #228]	@ (80212a8 <__ieee754_log10+0x108>)
 80211c4:	f7df fb50 	bl	8000868 <__aeabi_ddiv>
 80211c8:	ecbd 8b02 	vpop	{d8}
 80211cc:	ec41 0b10 	vmov	d0, r0, r1
 80211d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80211d4:	2d00      	cmp	r5, #0
 80211d6:	da07      	bge.n	80211e8 <__ieee754_log10+0x48>
 80211d8:	4622      	mov	r2, r4
 80211da:	4620      	mov	r0, r4
 80211dc:	4629      	mov	r1, r5
 80211de:	f7df f861 	bl	80002a4 <__aeabi_dsub>
 80211e2:	2200      	movs	r2, #0
 80211e4:	2300      	movs	r3, #0
 80211e6:	e7ed      	b.n	80211c4 <__ieee754_log10+0x24>
 80211e8:	2200      	movs	r2, #0
 80211ea:	4b30      	ldr	r3, [pc, #192]	@ (80212ac <__ieee754_log10+0x10c>)
 80211ec:	4620      	mov	r0, r4
 80211ee:	4629      	mov	r1, r5
 80211f0:	f7df fa10 	bl	8000614 <__aeabi_dmul>
 80211f4:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 80211f8:	4604      	mov	r4, r0
 80211fa:	460d      	mov	r5, r1
 80211fc:	460b      	mov	r3, r1
 80211fe:	492c      	ldr	r1, [pc, #176]	@ (80212b0 <__ieee754_log10+0x110>)
 8021200:	428b      	cmp	r3, r1
 8021202:	dd08      	ble.n	8021216 <__ieee754_log10+0x76>
 8021204:	4622      	mov	r2, r4
 8021206:	462b      	mov	r3, r5
 8021208:	4620      	mov	r0, r4
 802120a:	4629      	mov	r1, r5
 802120c:	f7df f84c 	bl	80002a8 <__adddf3>
 8021210:	e7da      	b.n	80211c8 <__ieee754_log10+0x28>
 8021212:	2200      	movs	r2, #0
 8021214:	e7f3      	b.n	80211fe <__ieee754_log10+0x5e>
 8021216:	1518      	asrs	r0, r3, #20
 8021218:	f3c3 0813 	ubfx	r8, r3, #0, #20
 802121c:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8021220:	4410      	add	r0, r2
 8021222:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8021226:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 802122a:	f7df f989 	bl	8000540 <__aeabi_i2d>
 802122e:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 8021232:	4606      	mov	r6, r0
 8021234:	460f      	mov	r7, r1
 8021236:	3303      	adds	r3, #3
 8021238:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 802123c:	a314      	add	r3, pc, #80	@ (adr r3, 8021290 <__ieee754_log10+0xf0>)
 802123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021242:	ec45 4b18 	vmov	d8, r4, r5
 8021246:	f7df f9e5 	bl	8000614 <__aeabi_dmul>
 802124a:	eeb0 0a48 	vmov.f32	s0, s16
 802124e:	eef0 0a68 	vmov.f32	s1, s17
 8021252:	4604      	mov	r4, r0
 8021254:	460d      	mov	r5, r1
 8021256:	f000 ffa3 	bl	80221a0 <__ieee754_log>
 802125a:	a30f      	add	r3, pc, #60	@ (adr r3, 8021298 <__ieee754_log10+0xf8>)
 802125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021260:	ec51 0b10 	vmov	r0, r1, d0
 8021264:	f7df f9d6 	bl	8000614 <__aeabi_dmul>
 8021268:	4622      	mov	r2, r4
 802126a:	462b      	mov	r3, r5
 802126c:	f7df f81c 	bl	80002a8 <__adddf3>
 8021270:	4604      	mov	r4, r0
 8021272:	460d      	mov	r5, r1
 8021274:	4630      	mov	r0, r6
 8021276:	4639      	mov	r1, r7
 8021278:	a309      	add	r3, pc, #36	@ (adr r3, 80212a0 <__ieee754_log10+0x100>)
 802127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802127e:	f7df f9c9 	bl	8000614 <__aeabi_dmul>
 8021282:	4602      	mov	r2, r0
 8021284:	460b      	mov	r3, r1
 8021286:	4620      	mov	r0, r4
 8021288:	4629      	mov	r1, r5
 802128a:	e7bf      	b.n	802120c <__ieee754_log10+0x6c>
 802128c:	f3af 8000 	nop.w
 8021290:	11f12b36 	.word	0x11f12b36
 8021294:	3d59fef3 	.word	0x3d59fef3
 8021298:	1526e50e 	.word	0x1526e50e
 802129c:	3fdbcb7b 	.word	0x3fdbcb7b
 80212a0:	509f6000 	.word	0x509f6000
 80212a4:	3fd34413 	.word	0x3fd34413
 80212a8:	c3500000 	.word	0xc3500000
 80212ac:	43500000 	.word	0x43500000
 80212b0:	7fefffff 	.word	0x7fefffff
 80212b4:	00000000 	.word	0x00000000

080212b8 <__ieee754_pow>:
 80212b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212bc:	b091      	sub	sp, #68	@ 0x44
 80212be:	ed8d 1b00 	vstr	d1, [sp]
 80212c2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80212c6:	ec57 6b10 	vmov	r6, r7, d0
 80212ca:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80212ce:	ea5a 0001 	orrs.w	r0, sl, r1
 80212d2:	d113      	bne.n	80212fc <__ieee754_pow+0x44>
 80212d4:	19b3      	adds	r3, r6, r6
 80212d6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80212da:	4152      	adcs	r2, r2
 80212dc:	4298      	cmp	r0, r3
 80212de:	4b96      	ldr	r3, [pc, #600]	@ (8021538 <__ieee754_pow+0x280>)
 80212e0:	4193      	sbcs	r3, r2
 80212e2:	f080 84e7 	bcs.w	8021cb4 <__ieee754_pow+0x9fc>
 80212e6:	4630      	mov	r0, r6
 80212e8:	4639      	mov	r1, r7
 80212ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80212ee:	f7de ffdb 	bl	80002a8 <__adddf3>
 80212f2:	ec41 0b10 	vmov	d0, r0, r1
 80212f6:	b011      	add	sp, #68	@ 0x44
 80212f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212fc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8021300:	4a8e      	ldr	r2, [pc, #568]	@ (802153c <__ieee754_pow+0x284>)
 8021302:	463d      	mov	r5, r7
 8021304:	4633      	mov	r3, r6
 8021306:	4590      	cmp	r8, r2
 8021308:	d806      	bhi.n	8021318 <__ieee754_pow+0x60>
 802130a:	d101      	bne.n	8021310 <__ieee754_pow+0x58>
 802130c:	2e00      	cmp	r6, #0
 802130e:	d1ea      	bne.n	80212e6 <__ieee754_pow+0x2e>
 8021310:	4592      	cmp	sl, r2
 8021312:	d801      	bhi.n	8021318 <__ieee754_pow+0x60>
 8021314:	d10e      	bne.n	8021334 <__ieee754_pow+0x7c>
 8021316:	b169      	cbz	r1, 8021334 <__ieee754_pow+0x7c>
 8021318:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 802131c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8021320:	431d      	orrs	r5, r3
 8021322:	d1e0      	bne.n	80212e6 <__ieee754_pow+0x2e>
 8021324:	e9dd 3200 	ldrd	r3, r2, [sp]
 8021328:	18db      	adds	r3, r3, r3
 802132a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 802132e:	4152      	adcs	r2, r2
 8021330:	429d      	cmp	r5, r3
 8021332:	e7d4      	b.n	80212de <__ieee754_pow+0x26>
 8021334:	2d00      	cmp	r5, #0
 8021336:	46c3      	mov	fp, r8
 8021338:	da3a      	bge.n	80213b0 <__ieee754_pow+0xf8>
 802133a:	4a81      	ldr	r2, [pc, #516]	@ (8021540 <__ieee754_pow+0x288>)
 802133c:	4592      	cmp	sl, r2
 802133e:	d84d      	bhi.n	80213dc <__ieee754_pow+0x124>
 8021340:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8021344:	4592      	cmp	sl, r2
 8021346:	f240 84c4 	bls.w	8021cd2 <__ieee754_pow+0xa1a>
 802134a:	ea4f 522a 	mov.w	r2, sl, asr #20
 802134e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8021352:	2a14      	cmp	r2, #20
 8021354:	dd0f      	ble.n	8021376 <__ieee754_pow+0xbe>
 8021356:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 802135a:	fa21 f402 	lsr.w	r4, r1, r2
 802135e:	fa04 f202 	lsl.w	r2, r4, r2
 8021362:	428a      	cmp	r2, r1
 8021364:	f040 84b5 	bne.w	8021cd2 <__ieee754_pow+0xa1a>
 8021368:	f004 0401 	and.w	r4, r4, #1
 802136c:	f1c4 0402 	rsb	r4, r4, #2
 8021370:	2900      	cmp	r1, #0
 8021372:	d158      	bne.n	8021426 <__ieee754_pow+0x16e>
 8021374:	e00e      	b.n	8021394 <__ieee754_pow+0xdc>
 8021376:	2900      	cmp	r1, #0
 8021378:	d154      	bne.n	8021424 <__ieee754_pow+0x16c>
 802137a:	f1c2 0214 	rsb	r2, r2, #20
 802137e:	fa4a f402 	asr.w	r4, sl, r2
 8021382:	fa04 f202 	lsl.w	r2, r4, r2
 8021386:	4552      	cmp	r2, sl
 8021388:	f040 84a0 	bne.w	8021ccc <__ieee754_pow+0xa14>
 802138c:	f004 0401 	and.w	r4, r4, #1
 8021390:	f1c4 0402 	rsb	r4, r4, #2
 8021394:	4a6b      	ldr	r2, [pc, #428]	@ (8021544 <__ieee754_pow+0x28c>)
 8021396:	4592      	cmp	sl, r2
 8021398:	d12e      	bne.n	80213f8 <__ieee754_pow+0x140>
 802139a:	f1b9 0f00 	cmp.w	r9, #0
 802139e:	f280 8491 	bge.w	8021cc4 <__ieee754_pow+0xa0c>
 80213a2:	4632      	mov	r2, r6
 80213a4:	463b      	mov	r3, r7
 80213a6:	2000      	movs	r0, #0
 80213a8:	4966      	ldr	r1, [pc, #408]	@ (8021544 <__ieee754_pow+0x28c>)
 80213aa:	f7df fa5d 	bl	8000868 <__aeabi_ddiv>
 80213ae:	e7a0      	b.n	80212f2 <__ieee754_pow+0x3a>
 80213b0:	2400      	movs	r4, #0
 80213b2:	bbc1      	cbnz	r1, 8021426 <__ieee754_pow+0x16e>
 80213b4:	4a61      	ldr	r2, [pc, #388]	@ (802153c <__ieee754_pow+0x284>)
 80213b6:	4592      	cmp	sl, r2
 80213b8:	d1ec      	bne.n	8021394 <__ieee754_pow+0xdc>
 80213ba:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80213be:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80213c2:	431a      	orrs	r2, r3
 80213c4:	f000 8476 	beq.w	8021cb4 <__ieee754_pow+0x9fc>
 80213c8:	4b5f      	ldr	r3, [pc, #380]	@ (8021548 <__ieee754_pow+0x290>)
 80213ca:	4598      	cmp	r8, r3
 80213cc:	d908      	bls.n	80213e0 <__ieee754_pow+0x128>
 80213ce:	f1b9 0f00 	cmp.w	r9, #0
 80213d2:	f2c0 8473 	blt.w	8021cbc <__ieee754_pow+0xa04>
 80213d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80213da:	e78a      	b.n	80212f2 <__ieee754_pow+0x3a>
 80213dc:	2402      	movs	r4, #2
 80213de:	e7e8      	b.n	80213b2 <__ieee754_pow+0xfa>
 80213e0:	f1b9 0f00 	cmp.w	r9, #0
 80213e4:	f04f 0000 	mov.w	r0, #0
 80213e8:	f04f 0100 	mov.w	r1, #0
 80213ec:	da81      	bge.n	80212f2 <__ieee754_pow+0x3a>
 80213ee:	e9dd 0300 	ldrd	r0, r3, [sp]
 80213f2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80213f6:	e77c      	b.n	80212f2 <__ieee754_pow+0x3a>
 80213f8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80213fc:	d106      	bne.n	802140c <__ieee754_pow+0x154>
 80213fe:	4632      	mov	r2, r6
 8021400:	463b      	mov	r3, r7
 8021402:	4630      	mov	r0, r6
 8021404:	4639      	mov	r1, r7
 8021406:	f7df f905 	bl	8000614 <__aeabi_dmul>
 802140a:	e772      	b.n	80212f2 <__ieee754_pow+0x3a>
 802140c:	4a4f      	ldr	r2, [pc, #316]	@ (802154c <__ieee754_pow+0x294>)
 802140e:	4591      	cmp	r9, r2
 8021410:	d109      	bne.n	8021426 <__ieee754_pow+0x16e>
 8021412:	2d00      	cmp	r5, #0
 8021414:	db07      	blt.n	8021426 <__ieee754_pow+0x16e>
 8021416:	ec47 6b10 	vmov	d0, r6, r7
 802141a:	b011      	add	sp, #68	@ 0x44
 802141c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021420:	f000 bde0 	b.w	8021fe4 <__ieee754_sqrt>
 8021424:	2400      	movs	r4, #0
 8021426:	9302      	str	r3, [sp, #8]
 8021428:	ec47 6b10 	vmov	d0, r6, r7
 802142c:	f000 fc84 	bl	8021d38 <fabs>
 8021430:	9b02      	ldr	r3, [sp, #8]
 8021432:	ec51 0b10 	vmov	r0, r1, d0
 8021436:	bb53      	cbnz	r3, 802148e <__ieee754_pow+0x1d6>
 8021438:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 802143c:	4b41      	ldr	r3, [pc, #260]	@ (8021544 <__ieee754_pow+0x28c>)
 802143e:	429a      	cmp	r2, r3
 8021440:	d002      	beq.n	8021448 <__ieee754_pow+0x190>
 8021442:	f1b8 0f00 	cmp.w	r8, #0
 8021446:	d122      	bne.n	802148e <__ieee754_pow+0x1d6>
 8021448:	f1b9 0f00 	cmp.w	r9, #0
 802144c:	da05      	bge.n	802145a <__ieee754_pow+0x1a2>
 802144e:	4602      	mov	r2, r0
 8021450:	460b      	mov	r3, r1
 8021452:	2000      	movs	r0, #0
 8021454:	493b      	ldr	r1, [pc, #236]	@ (8021544 <__ieee754_pow+0x28c>)
 8021456:	f7df fa07 	bl	8000868 <__aeabi_ddiv>
 802145a:	2d00      	cmp	r5, #0
 802145c:	f6bf af49 	bge.w	80212f2 <__ieee754_pow+0x3a>
 8021460:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8021464:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8021468:	ea58 0804 	orrs.w	r8, r8, r4
 802146c:	d108      	bne.n	8021480 <__ieee754_pow+0x1c8>
 802146e:	4602      	mov	r2, r0
 8021470:	460b      	mov	r3, r1
 8021472:	4610      	mov	r0, r2
 8021474:	4619      	mov	r1, r3
 8021476:	f7de ff15 	bl	80002a4 <__aeabi_dsub>
 802147a:	4602      	mov	r2, r0
 802147c:	460b      	mov	r3, r1
 802147e:	e794      	b.n	80213aa <__ieee754_pow+0xf2>
 8021480:	2c01      	cmp	r4, #1
 8021482:	f47f af36 	bne.w	80212f2 <__ieee754_pow+0x3a>
 8021486:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802148a:	4619      	mov	r1, r3
 802148c:	e731      	b.n	80212f2 <__ieee754_pow+0x3a>
 802148e:	0feb      	lsrs	r3, r5, #31
 8021490:	3b01      	subs	r3, #1
 8021492:	ea53 0204 	orrs.w	r2, r3, r4
 8021496:	d102      	bne.n	802149e <__ieee754_pow+0x1e6>
 8021498:	4632      	mov	r2, r6
 802149a:	463b      	mov	r3, r7
 802149c:	e7e9      	b.n	8021472 <__ieee754_pow+0x1ba>
 802149e:	3c01      	subs	r4, #1
 80214a0:	431c      	orrs	r4, r3
 80214a2:	d016      	beq.n	80214d2 <__ieee754_pow+0x21a>
 80214a4:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8021528 <__ieee754_pow+0x270>
 80214a8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80214ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80214b0:	f240 810e 	bls.w	80216d0 <__ieee754_pow+0x418>
 80214b4:	4b26      	ldr	r3, [pc, #152]	@ (8021550 <__ieee754_pow+0x298>)
 80214b6:	459a      	cmp	sl, r3
 80214b8:	4b23      	ldr	r3, [pc, #140]	@ (8021548 <__ieee754_pow+0x290>)
 80214ba:	d916      	bls.n	80214ea <__ieee754_pow+0x232>
 80214bc:	4598      	cmp	r8, r3
 80214be:	d80b      	bhi.n	80214d8 <__ieee754_pow+0x220>
 80214c0:	f1b9 0f00 	cmp.w	r9, #0
 80214c4:	da0b      	bge.n	80214de <__ieee754_pow+0x226>
 80214c6:	2000      	movs	r0, #0
 80214c8:	b011      	add	sp, #68	@ 0x44
 80214ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214ce:	f7ff bdab 	b.w	8021028 <__math_oflow>
 80214d2:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8021530 <__ieee754_pow+0x278>
 80214d6:	e7e7      	b.n	80214a8 <__ieee754_pow+0x1f0>
 80214d8:	f1b9 0f00 	cmp.w	r9, #0
 80214dc:	dcf3      	bgt.n	80214c6 <__ieee754_pow+0x20e>
 80214de:	2000      	movs	r0, #0
 80214e0:	b011      	add	sp, #68	@ 0x44
 80214e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214e6:	f7ff bd97 	b.w	8021018 <__math_uflow>
 80214ea:	4598      	cmp	r8, r3
 80214ec:	d20c      	bcs.n	8021508 <__ieee754_pow+0x250>
 80214ee:	2200      	movs	r2, #0
 80214f0:	2300      	movs	r3, #0
 80214f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80214f6:	f7df faff 	bl	8000af8 <__aeabi_dcmplt>
 80214fa:	3800      	subs	r0, #0
 80214fc:	bf18      	it	ne
 80214fe:	2001      	movne	r0, #1
 8021500:	f1b9 0f00 	cmp.w	r9, #0
 8021504:	daec      	bge.n	80214e0 <__ieee754_pow+0x228>
 8021506:	e7df      	b.n	80214c8 <__ieee754_pow+0x210>
 8021508:	4b0e      	ldr	r3, [pc, #56]	@ (8021544 <__ieee754_pow+0x28c>)
 802150a:	2200      	movs	r2, #0
 802150c:	4598      	cmp	r8, r3
 802150e:	d921      	bls.n	8021554 <__ieee754_pow+0x29c>
 8021510:	2300      	movs	r3, #0
 8021512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021516:	f7df faef 	bl	8000af8 <__aeabi_dcmplt>
 802151a:	3800      	subs	r0, #0
 802151c:	bf18      	it	ne
 802151e:	2001      	movne	r0, #1
 8021520:	f1b9 0f00 	cmp.w	r9, #0
 8021524:	dcd0      	bgt.n	80214c8 <__ieee754_pow+0x210>
 8021526:	e7db      	b.n	80214e0 <__ieee754_pow+0x228>
 8021528:	00000000 	.word	0x00000000
 802152c:	3ff00000 	.word	0x3ff00000
 8021530:	00000000 	.word	0x00000000
 8021534:	bff00000 	.word	0xbff00000
 8021538:	fff00000 	.word	0xfff00000
 802153c:	7ff00000 	.word	0x7ff00000
 8021540:	433fffff 	.word	0x433fffff
 8021544:	3ff00000 	.word	0x3ff00000
 8021548:	3fefffff 	.word	0x3fefffff
 802154c:	3fe00000 	.word	0x3fe00000
 8021550:	43f00000 	.word	0x43f00000
 8021554:	4b5a      	ldr	r3, [pc, #360]	@ (80216c0 <__ieee754_pow+0x408>)
 8021556:	f7de fea5 	bl	80002a4 <__aeabi_dsub>
 802155a:	4604      	mov	r4, r0
 802155c:	460d      	mov	r5, r1
 802155e:	a350      	add	r3, pc, #320	@ (adr r3, 80216a0 <__ieee754_pow+0x3e8>)
 8021560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021564:	f7df f856 	bl	8000614 <__aeabi_dmul>
 8021568:	4606      	mov	r6, r0
 802156a:	460f      	mov	r7, r1
 802156c:	4620      	mov	r0, r4
 802156e:	4629      	mov	r1, r5
 8021570:	a34d      	add	r3, pc, #308	@ (adr r3, 80216a8 <__ieee754_pow+0x3f0>)
 8021572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021576:	f7df f84d 	bl	8000614 <__aeabi_dmul>
 802157a:	2200      	movs	r2, #0
 802157c:	4682      	mov	sl, r0
 802157e:	468b      	mov	fp, r1
 8021580:	4b50      	ldr	r3, [pc, #320]	@ (80216c4 <__ieee754_pow+0x40c>)
 8021582:	4620      	mov	r0, r4
 8021584:	4629      	mov	r1, r5
 8021586:	f7df f845 	bl	8000614 <__aeabi_dmul>
 802158a:	4602      	mov	r2, r0
 802158c:	460b      	mov	r3, r1
 802158e:	a148      	add	r1, pc, #288	@ (adr r1, 80216b0 <__ieee754_pow+0x3f8>)
 8021590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021594:	f7de fe86 	bl	80002a4 <__aeabi_dsub>
 8021598:	4622      	mov	r2, r4
 802159a:	462b      	mov	r3, r5
 802159c:	f7df f83a 	bl	8000614 <__aeabi_dmul>
 80215a0:	4602      	mov	r2, r0
 80215a2:	460b      	mov	r3, r1
 80215a4:	2000      	movs	r0, #0
 80215a6:	4948      	ldr	r1, [pc, #288]	@ (80216c8 <__ieee754_pow+0x410>)
 80215a8:	f7de fe7c 	bl	80002a4 <__aeabi_dsub>
 80215ac:	4680      	mov	r8, r0
 80215ae:	4689      	mov	r9, r1
 80215b0:	4622      	mov	r2, r4
 80215b2:	462b      	mov	r3, r5
 80215b4:	4620      	mov	r0, r4
 80215b6:	4629      	mov	r1, r5
 80215b8:	2400      	movs	r4, #0
 80215ba:	f7df f82b 	bl	8000614 <__aeabi_dmul>
 80215be:	4602      	mov	r2, r0
 80215c0:	460b      	mov	r3, r1
 80215c2:	4640      	mov	r0, r8
 80215c4:	4649      	mov	r1, r9
 80215c6:	f7df f825 	bl	8000614 <__aeabi_dmul>
 80215ca:	a33b      	add	r3, pc, #236	@ (adr r3, 80216b8 <__ieee754_pow+0x400>)
 80215cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215d0:	f7df f820 	bl	8000614 <__aeabi_dmul>
 80215d4:	4602      	mov	r2, r0
 80215d6:	460b      	mov	r3, r1
 80215d8:	4650      	mov	r0, sl
 80215da:	4659      	mov	r1, fp
 80215dc:	f7de fe62 	bl	80002a4 <__aeabi_dsub>
 80215e0:	4602      	mov	r2, r0
 80215e2:	460b      	mov	r3, r1
 80215e4:	4680      	mov	r8, r0
 80215e6:	4689      	mov	r9, r1
 80215e8:	4630      	mov	r0, r6
 80215ea:	4639      	mov	r1, r7
 80215ec:	f7de fe5c 	bl	80002a8 <__adddf3>
 80215f0:	4632      	mov	r2, r6
 80215f2:	463b      	mov	r3, r7
 80215f4:	4620      	mov	r0, r4
 80215f6:	460d      	mov	r5, r1
 80215f8:	f7de fe54 	bl	80002a4 <__aeabi_dsub>
 80215fc:	4602      	mov	r2, r0
 80215fe:	460b      	mov	r3, r1
 8021600:	4640      	mov	r0, r8
 8021602:	4649      	mov	r1, r9
 8021604:	f7de fe4e 	bl	80002a4 <__aeabi_dsub>
 8021608:	4606      	mov	r6, r0
 802160a:	460f      	mov	r7, r1
 802160c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021610:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021614:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8021618:	2300      	movs	r3, #0
 802161a:	9304      	str	r3, [sp, #16]
 802161c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8021620:	4652      	mov	r2, sl
 8021622:	465b      	mov	r3, fp
 8021624:	f7de fe3e 	bl	80002a4 <__aeabi_dsub>
 8021628:	4622      	mov	r2, r4
 802162a:	462b      	mov	r3, r5
 802162c:	f7de fff2 	bl	8000614 <__aeabi_dmul>
 8021630:	4680      	mov	r8, r0
 8021632:	4689      	mov	r9, r1
 8021634:	4630      	mov	r0, r6
 8021636:	4639      	mov	r1, r7
 8021638:	e9dd 2300 	ldrd	r2, r3, [sp]
 802163c:	f7de ffea 	bl	8000614 <__aeabi_dmul>
 8021640:	4602      	mov	r2, r0
 8021642:	460b      	mov	r3, r1
 8021644:	4640      	mov	r0, r8
 8021646:	4649      	mov	r1, r9
 8021648:	f7de fe2e 	bl	80002a8 <__adddf3>
 802164c:	4606      	mov	r6, r0
 802164e:	460f      	mov	r7, r1
 8021650:	4652      	mov	r2, sl
 8021652:	465b      	mov	r3, fp
 8021654:	4620      	mov	r0, r4
 8021656:	4629      	mov	r1, r5
 8021658:	f7de ffdc 	bl	8000614 <__aeabi_dmul>
 802165c:	460b      	mov	r3, r1
 802165e:	4602      	mov	r2, r0
 8021660:	4680      	mov	r8, r0
 8021662:	4689      	mov	r9, r1
 8021664:	4630      	mov	r0, r6
 8021666:	4639      	mov	r1, r7
 8021668:	f7de fe1e 	bl	80002a8 <__adddf3>
 802166c:	4b17      	ldr	r3, [pc, #92]	@ (80216cc <__ieee754_pow+0x414>)
 802166e:	4604      	mov	r4, r0
 8021670:	460d      	mov	r5, r1
 8021672:	4299      	cmp	r1, r3
 8021674:	468a      	mov	sl, r1
 8021676:	468b      	mov	fp, r1
 8021678:	f340 82f0 	ble.w	8021c5c <__ieee754_pow+0x9a4>
 802167c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8021680:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8021684:	4303      	orrs	r3, r0
 8021686:	f000 81e8 	beq.w	8021a5a <__ieee754_pow+0x7a2>
 802168a:	2200      	movs	r2, #0
 802168c:	2300      	movs	r3, #0
 802168e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021692:	f7df fa31 	bl	8000af8 <__aeabi_dcmplt>
 8021696:	3800      	subs	r0, #0
 8021698:	bf18      	it	ne
 802169a:	2001      	movne	r0, #1
 802169c:	e714      	b.n	80214c8 <__ieee754_pow+0x210>
 802169e:	bf00      	nop
 80216a0:	60000000 	.word	0x60000000
 80216a4:	3ff71547 	.word	0x3ff71547
 80216a8:	f85ddf44 	.word	0xf85ddf44
 80216ac:	3e54ae0b 	.word	0x3e54ae0b
 80216b0:	55555555 	.word	0x55555555
 80216b4:	3fd55555 	.word	0x3fd55555
 80216b8:	652b82fe 	.word	0x652b82fe
 80216bc:	3ff71547 	.word	0x3ff71547
 80216c0:	3ff00000 	.word	0x3ff00000
 80216c4:	3fd00000 	.word	0x3fd00000
 80216c8:	3fe00000 	.word	0x3fe00000
 80216cc:	408fffff 	.word	0x408fffff
 80216d0:	4bd5      	ldr	r3, [pc, #852]	@ (8021a28 <__ieee754_pow+0x770>)
 80216d2:	2200      	movs	r2, #0
 80216d4:	402b      	ands	r3, r5
 80216d6:	b92b      	cbnz	r3, 80216e4 <__ieee754_pow+0x42c>
 80216d8:	4bd4      	ldr	r3, [pc, #848]	@ (8021a2c <__ieee754_pow+0x774>)
 80216da:	f7de ff9b 	bl	8000614 <__aeabi_dmul>
 80216de:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80216e2:	468b      	mov	fp, r1
 80216e4:	ea4f 532b 	mov.w	r3, fp, asr #20
 80216e8:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80216ec:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80216f0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80216f4:	4413      	add	r3, r2
 80216f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80216fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80216fc:	4bcc      	ldr	r3, [pc, #816]	@ (8021a30 <__ieee754_pow+0x778>)
 80216fe:	459b      	cmp	fp, r3
 8021700:	dd08      	ble.n	8021714 <__ieee754_pow+0x45c>
 8021702:	4bcc      	ldr	r3, [pc, #816]	@ (8021a34 <__ieee754_pow+0x77c>)
 8021704:	459b      	cmp	fp, r3
 8021706:	f340 81a5 	ble.w	8021a54 <__ieee754_pow+0x79c>
 802170a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802170c:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8021710:	3301      	adds	r3, #1
 8021712:	930a      	str	r3, [sp, #40]	@ 0x28
 8021714:	f04f 0a00 	mov.w	sl, #0
 8021718:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 802171c:	4629      	mov	r1, r5
 802171e:	106d      	asrs	r5, r5, #1
 8021720:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021722:	4bc5      	ldr	r3, [pc, #788]	@ (8021a38 <__ieee754_pow+0x780>)
 8021724:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8021728:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802172c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8021730:	ed93 7b00 	vldr	d7, [r3]
 8021734:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8021738:	ec53 2b17 	vmov	r2, r3, d7
 802173c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8021740:	f7de fdb0 	bl	80002a4 <__aeabi_dsub>
 8021744:	4606      	mov	r6, r0
 8021746:	460f      	mov	r7, r1
 8021748:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802174c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8021750:	f7de fdaa 	bl	80002a8 <__adddf3>
 8021754:	4602      	mov	r2, r0
 8021756:	460b      	mov	r3, r1
 8021758:	2000      	movs	r0, #0
 802175a:	49b8      	ldr	r1, [pc, #736]	@ (8021a3c <__ieee754_pow+0x784>)
 802175c:	f7df f884 	bl	8000868 <__aeabi_ddiv>
 8021760:	4602      	mov	r2, r0
 8021762:	460b      	mov	r3, r1
 8021764:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8021768:	4630      	mov	r0, r6
 802176a:	4639      	mov	r1, r7
 802176c:	f7de ff52 	bl	8000614 <__aeabi_dmul>
 8021770:	2200      	movs	r2, #0
 8021772:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8021776:	4614      	mov	r4, r2
 8021778:	461d      	mov	r5, r3
 802177a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802177e:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8021782:	f04f 0b00 	mov.w	fp, #0
 8021786:	4661      	mov	r1, ip
 8021788:	46e1      	mov	r9, ip
 802178a:	4658      	mov	r0, fp
 802178c:	46d8      	mov	r8, fp
 802178e:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8021792:	f7de ff3f 	bl	8000614 <__aeabi_dmul>
 8021796:	4602      	mov	r2, r0
 8021798:	460b      	mov	r3, r1
 802179a:	4630      	mov	r0, r6
 802179c:	4639      	mov	r1, r7
 802179e:	f7de fd81 	bl	80002a4 <__aeabi_dsub>
 80217a2:	4606      	mov	r6, r0
 80217a4:	460f      	mov	r7, r1
 80217a6:	4620      	mov	r0, r4
 80217a8:	4629      	mov	r1, r5
 80217aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80217ae:	f7de fd79 	bl	80002a4 <__aeabi_dsub>
 80217b2:	4602      	mov	r2, r0
 80217b4:	460b      	mov	r3, r1
 80217b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80217ba:	f7de fd73 	bl	80002a4 <__aeabi_dsub>
 80217be:	465a      	mov	r2, fp
 80217c0:	464b      	mov	r3, r9
 80217c2:	f7de ff27 	bl	8000614 <__aeabi_dmul>
 80217c6:	4602      	mov	r2, r0
 80217c8:	460b      	mov	r3, r1
 80217ca:	4630      	mov	r0, r6
 80217cc:	4639      	mov	r1, r7
 80217ce:	f7de fd69 	bl	80002a4 <__aeabi_dsub>
 80217d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80217d6:	f7de ff1d 	bl	8000614 <__aeabi_dmul>
 80217da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80217de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80217e2:	4610      	mov	r0, r2
 80217e4:	4619      	mov	r1, r3
 80217e6:	f7de ff15 	bl	8000614 <__aeabi_dmul>
 80217ea:	4604      	mov	r4, r0
 80217ec:	460d      	mov	r5, r1
 80217ee:	a37c      	add	r3, pc, #496	@ (adr r3, 80219e0 <__ieee754_pow+0x728>)
 80217f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217f4:	f7de ff0e 	bl	8000614 <__aeabi_dmul>
 80217f8:	a37b      	add	r3, pc, #492	@ (adr r3, 80219e8 <__ieee754_pow+0x730>)
 80217fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217fe:	f7de fd53 	bl	80002a8 <__adddf3>
 8021802:	4622      	mov	r2, r4
 8021804:	462b      	mov	r3, r5
 8021806:	f7de ff05 	bl	8000614 <__aeabi_dmul>
 802180a:	a379      	add	r3, pc, #484	@ (adr r3, 80219f0 <__ieee754_pow+0x738>)
 802180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021810:	f7de fd4a 	bl	80002a8 <__adddf3>
 8021814:	4622      	mov	r2, r4
 8021816:	462b      	mov	r3, r5
 8021818:	f7de fefc 	bl	8000614 <__aeabi_dmul>
 802181c:	a376      	add	r3, pc, #472	@ (adr r3, 80219f8 <__ieee754_pow+0x740>)
 802181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021822:	f7de fd41 	bl	80002a8 <__adddf3>
 8021826:	4622      	mov	r2, r4
 8021828:	462b      	mov	r3, r5
 802182a:	f7de fef3 	bl	8000614 <__aeabi_dmul>
 802182e:	a374      	add	r3, pc, #464	@ (adr r3, 8021a00 <__ieee754_pow+0x748>)
 8021830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021834:	f7de fd38 	bl	80002a8 <__adddf3>
 8021838:	4622      	mov	r2, r4
 802183a:	462b      	mov	r3, r5
 802183c:	f7de feea 	bl	8000614 <__aeabi_dmul>
 8021840:	a371      	add	r3, pc, #452	@ (adr r3, 8021a08 <__ieee754_pow+0x750>)
 8021842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021846:	f7de fd2f 	bl	80002a8 <__adddf3>
 802184a:	4606      	mov	r6, r0
 802184c:	460f      	mov	r7, r1
 802184e:	4622      	mov	r2, r4
 8021850:	462b      	mov	r3, r5
 8021852:	4620      	mov	r0, r4
 8021854:	4629      	mov	r1, r5
 8021856:	f7de fedd 	bl	8000614 <__aeabi_dmul>
 802185a:	4602      	mov	r2, r0
 802185c:	460b      	mov	r3, r1
 802185e:	4630      	mov	r0, r6
 8021860:	4639      	mov	r1, r7
 8021862:	f7de fed7 	bl	8000614 <__aeabi_dmul>
 8021866:	465a      	mov	r2, fp
 8021868:	4604      	mov	r4, r0
 802186a:	460d      	mov	r5, r1
 802186c:	464b      	mov	r3, r9
 802186e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8021872:	f7de fd19 	bl	80002a8 <__adddf3>
 8021876:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802187a:	f7de fecb 	bl	8000614 <__aeabi_dmul>
 802187e:	4622      	mov	r2, r4
 8021880:	462b      	mov	r3, r5
 8021882:	f7de fd11 	bl	80002a8 <__adddf3>
 8021886:	465a      	mov	r2, fp
 8021888:	464b      	mov	r3, r9
 802188a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802188e:	4658      	mov	r0, fp
 8021890:	4649      	mov	r1, r9
 8021892:	f7de febf 	bl	8000614 <__aeabi_dmul>
 8021896:	2200      	movs	r2, #0
 8021898:	4b69      	ldr	r3, [pc, #420]	@ (8021a40 <__ieee754_pow+0x788>)
 802189a:	4606      	mov	r6, r0
 802189c:	460f      	mov	r7, r1
 802189e:	f7de fd03 	bl	80002a8 <__adddf3>
 80218a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80218a6:	f7de fcff 	bl	80002a8 <__adddf3>
 80218aa:	460d      	mov	r5, r1
 80218ac:	460b      	mov	r3, r1
 80218ae:	4640      	mov	r0, r8
 80218b0:	4649      	mov	r1, r9
 80218b2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80218b6:	465c      	mov	r4, fp
 80218b8:	465a      	mov	r2, fp
 80218ba:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80218be:	f7de fea9 	bl	8000614 <__aeabi_dmul>
 80218c2:	2200      	movs	r2, #0
 80218c4:	4680      	mov	r8, r0
 80218c6:	4689      	mov	r9, r1
 80218c8:	4b5d      	ldr	r3, [pc, #372]	@ (8021a40 <__ieee754_pow+0x788>)
 80218ca:	4620      	mov	r0, r4
 80218cc:	4629      	mov	r1, r5
 80218ce:	f7de fce9 	bl	80002a4 <__aeabi_dsub>
 80218d2:	4632      	mov	r2, r6
 80218d4:	463b      	mov	r3, r7
 80218d6:	f7de fce5 	bl	80002a4 <__aeabi_dsub>
 80218da:	4602      	mov	r2, r0
 80218dc:	460b      	mov	r3, r1
 80218de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80218e2:	f7de fcdf 	bl	80002a4 <__aeabi_dsub>
 80218e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80218ea:	f7de fe93 	bl	8000614 <__aeabi_dmul>
 80218ee:	4606      	mov	r6, r0
 80218f0:	460f      	mov	r7, r1
 80218f2:	4622      	mov	r2, r4
 80218f4:	462b      	mov	r3, r5
 80218f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80218fa:	f7de fe8b 	bl	8000614 <__aeabi_dmul>
 80218fe:	4602      	mov	r2, r0
 8021900:	460b      	mov	r3, r1
 8021902:	4630      	mov	r0, r6
 8021904:	4639      	mov	r1, r7
 8021906:	f7de fccf 	bl	80002a8 <__adddf3>
 802190a:	4606      	mov	r6, r0
 802190c:	460f      	mov	r7, r1
 802190e:	4602      	mov	r2, r0
 8021910:	460b      	mov	r3, r1
 8021912:	4640      	mov	r0, r8
 8021914:	4649      	mov	r1, r9
 8021916:	f7de fcc7 	bl	80002a8 <__adddf3>
 802191a:	460d      	mov	r5, r1
 802191c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8021920:	a33b      	add	r3, pc, #236	@ (adr r3, 8021a10 <__ieee754_pow+0x758>)
 8021922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021926:	465c      	mov	r4, fp
 8021928:	4658      	mov	r0, fp
 802192a:	e9cd bc08 	strd	fp, ip, [sp, #32]
 802192e:	f7de fe71 	bl	8000614 <__aeabi_dmul>
 8021932:	4642      	mov	r2, r8
 8021934:	464b      	mov	r3, r9
 8021936:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802193a:	4620      	mov	r0, r4
 802193c:	4629      	mov	r1, r5
 802193e:	f7de fcb1 	bl	80002a4 <__aeabi_dsub>
 8021942:	4602      	mov	r2, r0
 8021944:	460b      	mov	r3, r1
 8021946:	4630      	mov	r0, r6
 8021948:	4639      	mov	r1, r7
 802194a:	f7de fcab 	bl	80002a4 <__aeabi_dsub>
 802194e:	a332      	add	r3, pc, #200	@ (adr r3, 8021a18 <__ieee754_pow+0x760>)
 8021950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021954:	f7de fe5e 	bl	8000614 <__aeabi_dmul>
 8021958:	4606      	mov	r6, r0
 802195a:	460f      	mov	r7, r1
 802195c:	4620      	mov	r0, r4
 802195e:	4629      	mov	r1, r5
 8021960:	a32f      	add	r3, pc, #188	@ (adr r3, 8021a20 <__ieee754_pow+0x768>)
 8021962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021966:	f7de fe55 	bl	8000614 <__aeabi_dmul>
 802196a:	4602      	mov	r2, r0
 802196c:	460b      	mov	r3, r1
 802196e:	4630      	mov	r0, r6
 8021970:	4639      	mov	r1, r7
 8021972:	f7de fc99 	bl	80002a8 <__adddf3>
 8021976:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021978:	4b32      	ldr	r3, [pc, #200]	@ (8021a44 <__ieee754_pow+0x78c>)
 802197a:	4413      	add	r3, r2
 802197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021980:	f7de fc92 	bl	80002a8 <__adddf3>
 8021984:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8021988:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802198a:	f7de fdd9 	bl	8000540 <__aeabi_i2d>
 802198e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021990:	4b2d      	ldr	r3, [pc, #180]	@ (8021a48 <__ieee754_pow+0x790>)
 8021992:	4606      	mov	r6, r0
 8021994:	460f      	mov	r7, r1
 8021996:	4413      	add	r3, r2
 8021998:	e9d3 8900 	ldrd	r8, r9, [r3]
 802199c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80219a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80219a4:	f7de fc80 	bl	80002a8 <__adddf3>
 80219a8:	4642      	mov	r2, r8
 80219aa:	464b      	mov	r3, r9
 80219ac:	f7de fc7c 	bl	80002a8 <__adddf3>
 80219b0:	4632      	mov	r2, r6
 80219b2:	463b      	mov	r3, r7
 80219b4:	f7de fc78 	bl	80002a8 <__adddf3>
 80219b8:	4632      	mov	r2, r6
 80219ba:	463b      	mov	r3, r7
 80219bc:	460d      	mov	r5, r1
 80219be:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80219c2:	4658      	mov	r0, fp
 80219c4:	465c      	mov	r4, fp
 80219c6:	f7de fc6d 	bl	80002a4 <__aeabi_dsub>
 80219ca:	4642      	mov	r2, r8
 80219cc:	464b      	mov	r3, r9
 80219ce:	f7de fc69 	bl	80002a4 <__aeabi_dsub>
 80219d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80219d6:	f7de fc65 	bl	80002a4 <__aeabi_dsub>
 80219da:	4602      	mov	r2, r0
 80219dc:	e036      	b.n	8021a4c <__ieee754_pow+0x794>
 80219de:	bf00      	nop
 80219e0:	4a454eef 	.word	0x4a454eef
 80219e4:	3fca7e28 	.word	0x3fca7e28
 80219e8:	93c9db65 	.word	0x93c9db65
 80219ec:	3fcd864a 	.word	0x3fcd864a
 80219f0:	a91d4101 	.word	0xa91d4101
 80219f4:	3fd17460 	.word	0x3fd17460
 80219f8:	518f264d 	.word	0x518f264d
 80219fc:	3fd55555 	.word	0x3fd55555
 8021a00:	db6fabff 	.word	0xdb6fabff
 8021a04:	3fdb6db6 	.word	0x3fdb6db6
 8021a08:	33333303 	.word	0x33333303
 8021a0c:	3fe33333 	.word	0x3fe33333
 8021a10:	e0000000 	.word	0xe0000000
 8021a14:	3feec709 	.word	0x3feec709
 8021a18:	dc3a03fd 	.word	0xdc3a03fd
 8021a1c:	3feec709 	.word	0x3feec709
 8021a20:	145b01f5 	.word	0x145b01f5
 8021a24:	be3e2fe0 	.word	0xbe3e2fe0
 8021a28:	7ff00000 	.word	0x7ff00000
 8021a2c:	43400000 	.word	0x43400000
 8021a30:	0003988e 	.word	0x0003988e
 8021a34:	000bb679 	.word	0x000bb679
 8021a38:	080827f8 	.word	0x080827f8
 8021a3c:	3ff00000 	.word	0x3ff00000
 8021a40:	40080000 	.word	0x40080000
 8021a44:	080827d8 	.word	0x080827d8
 8021a48:	080827e8 	.word	0x080827e8
 8021a4c:	460b      	mov	r3, r1
 8021a4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8021a52:	e5d7      	b.n	8021604 <__ieee754_pow+0x34c>
 8021a54:	f04f 0a01 	mov.w	sl, #1
 8021a58:	e65e      	b.n	8021718 <__ieee754_pow+0x460>
 8021a5a:	a3b4      	add	r3, pc, #720	@ (adr r3, 8021d2c <__ieee754_pow+0xa74>)
 8021a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a60:	4630      	mov	r0, r6
 8021a62:	4639      	mov	r1, r7
 8021a64:	f7de fc20 	bl	80002a8 <__adddf3>
 8021a68:	4642      	mov	r2, r8
 8021a6a:	464b      	mov	r3, r9
 8021a6c:	e9cd 0100 	strd	r0, r1, [sp]
 8021a70:	4620      	mov	r0, r4
 8021a72:	4629      	mov	r1, r5
 8021a74:	f7de fc16 	bl	80002a4 <__aeabi_dsub>
 8021a78:	4602      	mov	r2, r0
 8021a7a:	460b      	mov	r3, r1
 8021a7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021a80:	f7df f858 	bl	8000b34 <__aeabi_dcmpgt>
 8021a84:	2800      	cmp	r0, #0
 8021a86:	f47f ae00 	bne.w	802168a <__ieee754_pow+0x3d2>
 8021a8a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8021a8e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8021a92:	48a1      	ldr	r0, [pc, #644]	@ (8021d18 <__ieee754_pow+0xa60>)
 8021a94:	f1bb 0f00 	cmp.w	fp, #0
 8021a98:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8021a9c:	f04f 0200 	mov.w	r2, #0
 8021aa0:	fa43 fa0a 	asr.w	sl, r3, sl
 8021aa4:	44da      	add	sl, fp
 8021aa6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8021aaa:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8021aae:	fa40 f001 	asr.w	r0, r0, r1
 8021ab2:	f1c1 0114 	rsb	r1, r1, #20
 8021ab6:	ea00 030a 	and.w	r3, r0, sl
 8021aba:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8021abe:	4640      	mov	r0, r8
 8021ac0:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8021ac4:	fa4a fa01 	asr.w	sl, sl, r1
 8021ac8:	4649      	mov	r1, r9
 8021aca:	bfb8      	it	lt
 8021acc:	f1ca 0a00 	rsblt	sl, sl, #0
 8021ad0:	f7de fbe8 	bl	80002a4 <__aeabi_dsub>
 8021ad4:	4680      	mov	r8, r0
 8021ad6:	4689      	mov	r9, r1
 8021ad8:	2400      	movs	r4, #0
 8021ada:	4632      	mov	r2, r6
 8021adc:	463b      	mov	r3, r7
 8021ade:	4640      	mov	r0, r8
 8021ae0:	4649      	mov	r1, r9
 8021ae2:	f7de fbe1 	bl	80002a8 <__adddf3>
 8021ae6:	460d      	mov	r5, r1
 8021ae8:	4620      	mov	r0, r4
 8021aea:	a37b      	add	r3, pc, #492	@ (adr r3, 8021cd8 <__ieee754_pow+0xa20>)
 8021aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021af0:	f7de fd90 	bl	8000614 <__aeabi_dmul>
 8021af4:	4642      	mov	r2, r8
 8021af6:	464b      	mov	r3, r9
 8021af8:	e9cd 0100 	strd	r0, r1, [sp]
 8021afc:	4620      	mov	r0, r4
 8021afe:	4629      	mov	r1, r5
 8021b00:	f7de fbd0 	bl	80002a4 <__aeabi_dsub>
 8021b04:	4602      	mov	r2, r0
 8021b06:	460b      	mov	r3, r1
 8021b08:	4630      	mov	r0, r6
 8021b0a:	4639      	mov	r1, r7
 8021b0c:	f7de fbca 	bl	80002a4 <__aeabi_dsub>
 8021b10:	a373      	add	r3, pc, #460	@ (adr r3, 8021ce0 <__ieee754_pow+0xa28>)
 8021b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b16:	f7de fd7d 	bl	8000614 <__aeabi_dmul>
 8021b1a:	4680      	mov	r8, r0
 8021b1c:	4689      	mov	r9, r1
 8021b1e:	4620      	mov	r0, r4
 8021b20:	4629      	mov	r1, r5
 8021b22:	a371      	add	r3, pc, #452	@ (adr r3, 8021ce8 <__ieee754_pow+0xa30>)
 8021b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b28:	f7de fd74 	bl	8000614 <__aeabi_dmul>
 8021b2c:	4602      	mov	r2, r0
 8021b2e:	460b      	mov	r3, r1
 8021b30:	4640      	mov	r0, r8
 8021b32:	4649      	mov	r1, r9
 8021b34:	f7de fbb8 	bl	80002a8 <__adddf3>
 8021b38:	4604      	mov	r4, r0
 8021b3a:	460d      	mov	r5, r1
 8021b3c:	4602      	mov	r2, r0
 8021b3e:	460b      	mov	r3, r1
 8021b40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021b44:	f7de fbb0 	bl	80002a8 <__adddf3>
 8021b48:	4680      	mov	r8, r0
 8021b4a:	4689      	mov	r9, r1
 8021b4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021b50:	f7de fba8 	bl	80002a4 <__aeabi_dsub>
 8021b54:	4602      	mov	r2, r0
 8021b56:	460b      	mov	r3, r1
 8021b58:	4620      	mov	r0, r4
 8021b5a:	4629      	mov	r1, r5
 8021b5c:	f7de fba2 	bl	80002a4 <__aeabi_dsub>
 8021b60:	4642      	mov	r2, r8
 8021b62:	4606      	mov	r6, r0
 8021b64:	460f      	mov	r7, r1
 8021b66:	464b      	mov	r3, r9
 8021b68:	4640      	mov	r0, r8
 8021b6a:	4649      	mov	r1, r9
 8021b6c:	f7de fd52 	bl	8000614 <__aeabi_dmul>
 8021b70:	4604      	mov	r4, r0
 8021b72:	460d      	mov	r5, r1
 8021b74:	a35e      	add	r3, pc, #376	@ (adr r3, 8021cf0 <__ieee754_pow+0xa38>)
 8021b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b7a:	f7de fd4b 	bl	8000614 <__aeabi_dmul>
 8021b7e:	a35e      	add	r3, pc, #376	@ (adr r3, 8021cf8 <__ieee754_pow+0xa40>)
 8021b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b84:	f7de fb8e 	bl	80002a4 <__aeabi_dsub>
 8021b88:	4622      	mov	r2, r4
 8021b8a:	462b      	mov	r3, r5
 8021b8c:	f7de fd42 	bl	8000614 <__aeabi_dmul>
 8021b90:	a35b      	add	r3, pc, #364	@ (adr r3, 8021d00 <__ieee754_pow+0xa48>)
 8021b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b96:	f7de fb87 	bl	80002a8 <__adddf3>
 8021b9a:	4622      	mov	r2, r4
 8021b9c:	462b      	mov	r3, r5
 8021b9e:	f7de fd39 	bl	8000614 <__aeabi_dmul>
 8021ba2:	a359      	add	r3, pc, #356	@ (adr r3, 8021d08 <__ieee754_pow+0xa50>)
 8021ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ba8:	f7de fb7c 	bl	80002a4 <__aeabi_dsub>
 8021bac:	4622      	mov	r2, r4
 8021bae:	462b      	mov	r3, r5
 8021bb0:	f7de fd30 	bl	8000614 <__aeabi_dmul>
 8021bb4:	a356      	add	r3, pc, #344	@ (adr r3, 8021d10 <__ieee754_pow+0xa58>)
 8021bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bba:	f7de fb75 	bl	80002a8 <__adddf3>
 8021bbe:	4622      	mov	r2, r4
 8021bc0:	462b      	mov	r3, r5
 8021bc2:	f7de fd27 	bl	8000614 <__aeabi_dmul>
 8021bc6:	4602      	mov	r2, r0
 8021bc8:	460b      	mov	r3, r1
 8021bca:	4640      	mov	r0, r8
 8021bcc:	4649      	mov	r1, r9
 8021bce:	f7de fb69 	bl	80002a4 <__aeabi_dsub>
 8021bd2:	4604      	mov	r4, r0
 8021bd4:	460d      	mov	r5, r1
 8021bd6:	4602      	mov	r2, r0
 8021bd8:	460b      	mov	r3, r1
 8021bda:	4640      	mov	r0, r8
 8021bdc:	4649      	mov	r1, r9
 8021bde:	f7de fd19 	bl	8000614 <__aeabi_dmul>
 8021be2:	2200      	movs	r2, #0
 8021be4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8021be8:	e9cd 0100 	strd	r0, r1, [sp]
 8021bec:	4620      	mov	r0, r4
 8021bee:	4629      	mov	r1, r5
 8021bf0:	f7de fb58 	bl	80002a4 <__aeabi_dsub>
 8021bf4:	4602      	mov	r2, r0
 8021bf6:	460b      	mov	r3, r1
 8021bf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021bfc:	f7de fe34 	bl	8000868 <__aeabi_ddiv>
 8021c00:	4632      	mov	r2, r6
 8021c02:	4604      	mov	r4, r0
 8021c04:	460d      	mov	r5, r1
 8021c06:	463b      	mov	r3, r7
 8021c08:	4640      	mov	r0, r8
 8021c0a:	4649      	mov	r1, r9
 8021c0c:	f7de fd02 	bl	8000614 <__aeabi_dmul>
 8021c10:	4632      	mov	r2, r6
 8021c12:	463b      	mov	r3, r7
 8021c14:	f7de fb48 	bl	80002a8 <__adddf3>
 8021c18:	4602      	mov	r2, r0
 8021c1a:	460b      	mov	r3, r1
 8021c1c:	4620      	mov	r0, r4
 8021c1e:	4629      	mov	r1, r5
 8021c20:	f7de fb40 	bl	80002a4 <__aeabi_dsub>
 8021c24:	4642      	mov	r2, r8
 8021c26:	464b      	mov	r3, r9
 8021c28:	f7de fb3c 	bl	80002a4 <__aeabi_dsub>
 8021c2c:	460b      	mov	r3, r1
 8021c2e:	4602      	mov	r2, r0
 8021c30:	493a      	ldr	r1, [pc, #232]	@ (8021d1c <__ieee754_pow+0xa64>)
 8021c32:	2000      	movs	r0, #0
 8021c34:	f7de fb36 	bl	80002a4 <__aeabi_dsub>
 8021c38:	ec41 0b10 	vmov	d0, r0, r1
 8021c3c:	ee10 3a90 	vmov	r3, s1
 8021c40:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8021c44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8021c48:	da30      	bge.n	8021cac <__ieee754_pow+0x9f4>
 8021c4a:	4650      	mov	r0, sl
 8021c4c:	f000 f94c 	bl	8021ee8 <scalbn>
 8021c50:	ec51 0b10 	vmov	r0, r1, d0
 8021c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8021c58:	f7ff bbd5 	b.w	8021406 <__ieee754_pow+0x14e>
 8021c5c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8021c60:	4c2f      	ldr	r4, [pc, #188]	@ (8021d20 <__ieee754_pow+0xa68>)
 8021c62:	42a3      	cmp	r3, r4
 8021c64:	d91a      	bls.n	8021c9c <__ieee754_pow+0x9e4>
 8021c66:	4b2f      	ldr	r3, [pc, #188]	@ (8021d24 <__ieee754_pow+0xa6c>)
 8021c68:	440b      	add	r3, r1
 8021c6a:	4303      	orrs	r3, r0
 8021c6c:	d009      	beq.n	8021c82 <__ieee754_pow+0x9ca>
 8021c6e:	2200      	movs	r2, #0
 8021c70:	2300      	movs	r3, #0
 8021c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021c76:	f7de ff3f 	bl	8000af8 <__aeabi_dcmplt>
 8021c7a:	3800      	subs	r0, #0
 8021c7c:	bf18      	it	ne
 8021c7e:	2001      	movne	r0, #1
 8021c80:	e42e      	b.n	80214e0 <__ieee754_pow+0x228>
 8021c82:	4642      	mov	r2, r8
 8021c84:	464b      	mov	r3, r9
 8021c86:	f7de fb0d 	bl	80002a4 <__aeabi_dsub>
 8021c8a:	4632      	mov	r2, r6
 8021c8c:	463b      	mov	r3, r7
 8021c8e:	f7de ff47 	bl	8000b20 <__aeabi_dcmpge>
 8021c92:	2800      	cmp	r0, #0
 8021c94:	d1eb      	bne.n	8021c6e <__ieee754_pow+0x9b6>
 8021c96:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8021d34 <__ieee754_pow+0xa7c>
 8021c9a:	e6f6      	b.n	8021a8a <__ieee754_pow+0x7d2>
 8021c9c:	469a      	mov	sl, r3
 8021c9e:	4b22      	ldr	r3, [pc, #136]	@ (8021d28 <__ieee754_pow+0xa70>)
 8021ca0:	459a      	cmp	sl, r3
 8021ca2:	f63f aef2 	bhi.w	8021a8a <__ieee754_pow+0x7d2>
 8021ca6:	f8dd a010 	ldr.w	sl, [sp, #16]
 8021caa:	e715      	b.n	8021ad8 <__ieee754_pow+0x820>
 8021cac:	ec51 0b10 	vmov	r0, r1, d0
 8021cb0:	4619      	mov	r1, r3
 8021cb2:	e7cf      	b.n	8021c54 <__ieee754_pow+0x99c>
 8021cb4:	2000      	movs	r0, #0
 8021cb6:	4919      	ldr	r1, [pc, #100]	@ (8021d1c <__ieee754_pow+0xa64>)
 8021cb8:	f7ff bb1b 	b.w	80212f2 <__ieee754_pow+0x3a>
 8021cbc:	2000      	movs	r0, #0
 8021cbe:	2100      	movs	r1, #0
 8021cc0:	f7ff bb17 	b.w	80212f2 <__ieee754_pow+0x3a>
 8021cc4:	4630      	mov	r0, r6
 8021cc6:	4639      	mov	r1, r7
 8021cc8:	f7ff bb13 	b.w	80212f2 <__ieee754_pow+0x3a>
 8021ccc:	460c      	mov	r4, r1
 8021cce:	f7ff bb61 	b.w	8021394 <__ieee754_pow+0xdc>
 8021cd2:	2400      	movs	r4, #0
 8021cd4:	f7ff bb4c 	b.w	8021370 <__ieee754_pow+0xb8>
 8021cd8:	00000000 	.word	0x00000000
 8021cdc:	3fe62e43 	.word	0x3fe62e43
 8021ce0:	fefa39ef 	.word	0xfefa39ef
 8021ce4:	3fe62e42 	.word	0x3fe62e42
 8021ce8:	0ca86c39 	.word	0x0ca86c39
 8021cec:	be205c61 	.word	0xbe205c61
 8021cf0:	72bea4d0 	.word	0x72bea4d0
 8021cf4:	3e663769 	.word	0x3e663769
 8021cf8:	c5d26bf1 	.word	0xc5d26bf1
 8021cfc:	3ebbbd41 	.word	0x3ebbbd41
 8021d00:	af25de2c 	.word	0xaf25de2c
 8021d04:	3f11566a 	.word	0x3f11566a
 8021d08:	16bebd93 	.word	0x16bebd93
 8021d0c:	3f66c16c 	.word	0x3f66c16c
 8021d10:	5555553e 	.word	0x5555553e
 8021d14:	3fc55555 	.word	0x3fc55555
 8021d18:	fff00000 	.word	0xfff00000
 8021d1c:	3ff00000 	.word	0x3ff00000
 8021d20:	4090cbff 	.word	0x4090cbff
 8021d24:	3f6f3400 	.word	0x3f6f3400
 8021d28:	3fe00000 	.word	0x3fe00000
 8021d2c:	652b82fe 	.word	0x652b82fe
 8021d30:	3c971547 	.word	0x3c971547
 8021d34:	4090cc00 	.word	0x4090cc00

08021d38 <fabs>:
 8021d38:	ec51 0b10 	vmov	r0, r1, d0
 8021d3c:	4602      	mov	r2, r0
 8021d3e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8021d42:	ec43 2b10 	vmov	d0, r2, r3
 8021d46:	4770      	bx	lr

08021d48 <__ieee754_expf>:
 8021d48:	ee10 2a10 	vmov	r2, s0
 8021d4c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8021d50:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8021d54:	d902      	bls.n	8021d5c <__ieee754_expf+0x14>
 8021d56:	ee30 0a00 	vadd.f32	s0, s0, s0
 8021d5a:	4770      	bx	lr
 8021d5c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8021d60:	d105      	bne.n	8021d6e <__ieee754_expf+0x26>
 8021d62:	2900      	cmp	r1, #0
 8021d64:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8021e9c <__ieee754_expf+0x154>
 8021d68:	fe00 0a27 	vseleq.f32	s0, s0, s15
 8021d6c:	4770      	bx	lr
 8021d6e:	484c      	ldr	r0, [pc, #304]	@ (8021ea0 <__ieee754_expf+0x158>)
 8021d70:	4282      	cmp	r2, r0
 8021d72:	dd02      	ble.n	8021d7a <__ieee754_expf+0x32>
 8021d74:	2000      	movs	r0, #0
 8021d76:	f7ff b989 	b.w	802108c <__math_oflowf>
 8021d7a:	2a00      	cmp	r2, #0
 8021d7c:	da05      	bge.n	8021d8a <__ieee754_expf+0x42>
 8021d7e:	4a49      	ldr	r2, [pc, #292]	@ (8021ea4 <__ieee754_expf+0x15c>)
 8021d80:	4293      	cmp	r3, r2
 8021d82:	d902      	bls.n	8021d8a <__ieee754_expf+0x42>
 8021d84:	2000      	movs	r0, #0
 8021d86:	f7ff b97b 	b.w	8021080 <__math_uflowf>
 8021d8a:	4a47      	ldr	r2, [pc, #284]	@ (8021ea8 <__ieee754_expf+0x160>)
 8021d8c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8021d90:	4293      	cmp	r3, r2
 8021d92:	d952      	bls.n	8021e3a <__ieee754_expf+0xf2>
 8021d94:	4a45      	ldr	r2, [pc, #276]	@ (8021eac <__ieee754_expf+0x164>)
 8021d96:	4293      	cmp	r3, r2
 8021d98:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8021d9c:	d834      	bhi.n	8021e08 <__ieee754_expf+0xc0>
 8021d9e:	4b44      	ldr	r3, [pc, #272]	@ (8021eb0 <__ieee754_expf+0x168>)
 8021da0:	4413      	add	r3, r2
 8021da2:	ed93 7a00 	vldr	s14, [r3]
 8021da6:	4b43      	ldr	r3, [pc, #268]	@ (8021eb4 <__ieee754_expf+0x16c>)
 8021da8:	ee30 7a47 	vsub.f32	s14, s0, s14
 8021dac:	4413      	add	r3, r2
 8021dae:	f1c1 0201 	rsb	r2, r1, #1
 8021db2:	edd3 7a00 	vldr	s15, [r3]
 8021db6:	1a52      	subs	r2, r2, r1
 8021db8:	ee37 0a67 	vsub.f32	s0, s14, s15
 8021dbc:	ee20 6a00 	vmul.f32	s12, s0, s0
 8021dc0:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8021eb8 <__ieee754_expf+0x170>
 8021dc4:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8021ebc <__ieee754_expf+0x174>
 8021dc8:	eee6 6a05 	vfma.f32	s13, s12, s10
 8021dcc:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8021ec0 <__ieee754_expf+0x178>
 8021dd0:	eea6 5a86 	vfma.f32	s10, s13, s12
 8021dd4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8021ec4 <__ieee754_expf+0x17c>
 8021dd8:	eee5 6a06 	vfma.f32	s13, s10, s12
 8021ddc:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8021ec8 <__ieee754_expf+0x180>
 8021de0:	eea6 5a86 	vfma.f32	s10, s13, s12
 8021de4:	eef0 6a40 	vmov.f32	s13, s0
 8021de8:	eee5 6a46 	vfms.f32	s13, s10, s12
 8021dec:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8021df0:	ee20 5a26 	vmul.f32	s10, s0, s13
 8021df4:	bb92      	cbnz	r2, 8021e5c <__ieee754_expf+0x114>
 8021df6:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8021dfa:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8021dfe:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8021e02:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8021e06:	4770      	bx	lr
 8021e08:	4b30      	ldr	r3, [pc, #192]	@ (8021ecc <__ieee754_expf+0x184>)
 8021e0a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8021ed0 <__ieee754_expf+0x188>
 8021e0e:	4413      	add	r3, r2
 8021e10:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8021ed4 <__ieee754_expf+0x18c>
 8021e14:	edd3 7a00 	vldr	s15, [r3]
 8021e18:	eee0 7a07 	vfma.f32	s15, s0, s14
 8021e1c:	eeb0 7a40 	vmov.f32	s14, s0
 8021e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021e24:	ee17 2a90 	vmov	r2, s15
 8021e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021e2c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8021e30:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8021ed8 <__ieee754_expf+0x190>
 8021e34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8021e38:	e7be      	b.n	8021db8 <__ieee754_expf+0x70>
 8021e3a:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8021e3e:	d20b      	bcs.n	8021e58 <__ieee754_expf+0x110>
 8021e40:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8021edc <__ieee754_expf+0x194>
 8021e44:	ee70 6a26 	vadd.f32	s13, s0, s13
 8021e48:	eef4 6ae5 	vcmpe.f32	s13, s11
 8021e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e50:	dd02      	ble.n	8021e58 <__ieee754_expf+0x110>
 8021e52:	ee30 0a25 	vadd.f32	s0, s0, s11
 8021e56:	4770      	bx	lr
 8021e58:	2200      	movs	r2, #0
 8021e5a:	e7af      	b.n	8021dbc <__ieee754_expf+0x74>
 8021e5c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8021e60:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8021e64:	bfb8      	it	lt
 8021e66:	3264      	addlt	r2, #100	@ 0x64
 8021e68:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8021e6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8021e70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021e74:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8021e78:	ee17 3a90 	vmov	r3, s15
 8021e7c:	bfb5      	itete	lt
 8021e7e:	eddf 7a18 	vldrlt	s15, [pc, #96]	@ 8021ee0 <__ieee754_expf+0x198>
 8021e82:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8021e86:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8021e8a:	ee00 3a10 	vmovge	s0, r3
 8021e8e:	bfbc      	itt	lt
 8021e90:	ee00 3a10 	vmovlt	s0, r3
 8021e94:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8021e98:	4770      	bx	lr
 8021e9a:	bf00      	nop
 8021e9c:	00000000 	.word	0x00000000
 8021ea0:	42b17217 	.word	0x42b17217
 8021ea4:	42cff1b5 	.word	0x42cff1b5
 8021ea8:	3eb17218 	.word	0x3eb17218
 8021eac:	3f851591 	.word	0x3f851591
 8021eb0:	08082810 	.word	0x08082810
 8021eb4:	08082808 	.word	0x08082808
 8021eb8:	3331bb4c 	.word	0x3331bb4c
 8021ebc:	b5ddea0e 	.word	0xb5ddea0e
 8021ec0:	388ab355 	.word	0x388ab355
 8021ec4:	bb360b61 	.word	0xbb360b61
 8021ec8:	3e2aaaab 	.word	0x3e2aaaab
 8021ecc:	08082818 	.word	0x08082818
 8021ed0:	3fb8aa3b 	.word	0x3fb8aa3b
 8021ed4:	3f317180 	.word	0x3f317180
 8021ed8:	3717f7d1 	.word	0x3717f7d1
 8021edc:	7149f2ca 	.word	0x7149f2ca
 8021ee0:	0d800000 	.word	0x0d800000
 8021ee4:	00000000 	.word	0x00000000

08021ee8 <scalbn>:
 8021ee8:	b570      	push	{r4, r5, r6, lr}
 8021eea:	ec55 4b10 	vmov	r4, r5, d0
 8021eee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8021ef2:	4606      	mov	r6, r0
 8021ef4:	462b      	mov	r3, r5
 8021ef6:	b991      	cbnz	r1, 8021f1e <scalbn+0x36>
 8021ef8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8021efc:	4323      	orrs	r3, r4
 8021efe:	d03d      	beq.n	8021f7c <scalbn+0x94>
 8021f00:	4b35      	ldr	r3, [pc, #212]	@ (8021fd8 <scalbn+0xf0>)
 8021f02:	4620      	mov	r0, r4
 8021f04:	4629      	mov	r1, r5
 8021f06:	2200      	movs	r2, #0
 8021f08:	f7de fb84 	bl	8000614 <__aeabi_dmul>
 8021f0c:	4b33      	ldr	r3, [pc, #204]	@ (8021fdc <scalbn+0xf4>)
 8021f0e:	4604      	mov	r4, r0
 8021f10:	460d      	mov	r5, r1
 8021f12:	429e      	cmp	r6, r3
 8021f14:	da0f      	bge.n	8021f36 <scalbn+0x4e>
 8021f16:	a328      	add	r3, pc, #160	@ (adr r3, 8021fb8 <scalbn+0xd0>)
 8021f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f1c:	e01e      	b.n	8021f5c <scalbn+0x74>
 8021f1e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8021f22:	4291      	cmp	r1, r2
 8021f24:	d10b      	bne.n	8021f3e <scalbn+0x56>
 8021f26:	4622      	mov	r2, r4
 8021f28:	4620      	mov	r0, r4
 8021f2a:	4629      	mov	r1, r5
 8021f2c:	f7de f9bc 	bl	80002a8 <__adddf3>
 8021f30:	4604      	mov	r4, r0
 8021f32:	460d      	mov	r5, r1
 8021f34:	e022      	b.n	8021f7c <scalbn+0x94>
 8021f36:	460b      	mov	r3, r1
 8021f38:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8021f3c:	3936      	subs	r1, #54	@ 0x36
 8021f3e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8021f42:	4296      	cmp	r6, r2
 8021f44:	dd0d      	ble.n	8021f62 <scalbn+0x7a>
 8021f46:	2d00      	cmp	r5, #0
 8021f48:	a11d      	add	r1, pc, #116	@ (adr r1, 8021fc0 <scalbn+0xd8>)
 8021f4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021f4e:	da02      	bge.n	8021f56 <scalbn+0x6e>
 8021f50:	a11d      	add	r1, pc, #116	@ (adr r1, 8021fc8 <scalbn+0xe0>)
 8021f52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021f56:	a31a      	add	r3, pc, #104	@ (adr r3, 8021fc0 <scalbn+0xd8>)
 8021f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f5c:	f7de fb5a 	bl	8000614 <__aeabi_dmul>
 8021f60:	e7e6      	b.n	8021f30 <scalbn+0x48>
 8021f62:	1872      	adds	r2, r6, r1
 8021f64:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8021f68:	428a      	cmp	r2, r1
 8021f6a:	dcec      	bgt.n	8021f46 <scalbn+0x5e>
 8021f6c:	2a00      	cmp	r2, #0
 8021f6e:	dd08      	ble.n	8021f82 <scalbn+0x9a>
 8021f70:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8021f74:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8021f78:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8021f7c:	ec45 4b10 	vmov	d0, r4, r5
 8021f80:	bd70      	pop	{r4, r5, r6, pc}
 8021f82:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8021f86:	da08      	bge.n	8021f9a <scalbn+0xb2>
 8021f88:	2d00      	cmp	r5, #0
 8021f8a:	a10b      	add	r1, pc, #44	@ (adr r1, 8021fb8 <scalbn+0xd0>)
 8021f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021f90:	dac1      	bge.n	8021f16 <scalbn+0x2e>
 8021f92:	a10f      	add	r1, pc, #60	@ (adr r1, 8021fd0 <scalbn+0xe8>)
 8021f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021f98:	e7bd      	b.n	8021f16 <scalbn+0x2e>
 8021f9a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8021f9e:	3236      	adds	r2, #54	@ 0x36
 8021fa0:	4620      	mov	r0, r4
 8021fa2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8021fa6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8021faa:	2200      	movs	r2, #0
 8021fac:	4b0c      	ldr	r3, [pc, #48]	@ (8021fe0 <scalbn+0xf8>)
 8021fae:	4629      	mov	r1, r5
 8021fb0:	e7d4      	b.n	8021f5c <scalbn+0x74>
 8021fb2:	bf00      	nop
 8021fb4:	f3af 8000 	nop.w
 8021fb8:	c2f8f359 	.word	0xc2f8f359
 8021fbc:	01a56e1f 	.word	0x01a56e1f
 8021fc0:	8800759c 	.word	0x8800759c
 8021fc4:	7e37e43c 	.word	0x7e37e43c
 8021fc8:	8800759c 	.word	0x8800759c
 8021fcc:	fe37e43c 	.word	0xfe37e43c
 8021fd0:	c2f8f359 	.word	0xc2f8f359
 8021fd4:	81a56e1f 	.word	0x81a56e1f
 8021fd8:	43500000 	.word	0x43500000
 8021fdc:	ffff3cb0 	.word	0xffff3cb0
 8021fe0:	3c900000 	.word	0x3c900000

08021fe4 <__ieee754_sqrt>:
 8021fe4:	4a6b      	ldr	r2, [pc, #428]	@ (8022194 <__ieee754_sqrt+0x1b0>)
 8021fe6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fea:	ec55 4b10 	vmov	r4, r5, d0
 8021fee:	43aa      	bics	r2, r5
 8021ff0:	462b      	mov	r3, r5
 8021ff2:	4621      	mov	r1, r4
 8021ff4:	d110      	bne.n	8022018 <__ieee754_sqrt+0x34>
 8021ff6:	4622      	mov	r2, r4
 8021ff8:	4620      	mov	r0, r4
 8021ffa:	4629      	mov	r1, r5
 8021ffc:	f7de fb0a 	bl	8000614 <__aeabi_dmul>
 8022000:	4602      	mov	r2, r0
 8022002:	460b      	mov	r3, r1
 8022004:	4620      	mov	r0, r4
 8022006:	4629      	mov	r1, r5
 8022008:	f7de f94e 	bl	80002a8 <__adddf3>
 802200c:	4604      	mov	r4, r0
 802200e:	460d      	mov	r5, r1
 8022010:	ec45 4b10 	vmov	d0, r4, r5
 8022014:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022018:	2d00      	cmp	r5, #0
 802201a:	dc0e      	bgt.n	802203a <__ieee754_sqrt+0x56>
 802201c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8022020:	4322      	orrs	r2, r4
 8022022:	d0f5      	beq.n	8022010 <__ieee754_sqrt+0x2c>
 8022024:	b19d      	cbz	r5, 802204e <__ieee754_sqrt+0x6a>
 8022026:	4622      	mov	r2, r4
 8022028:	4620      	mov	r0, r4
 802202a:	4629      	mov	r1, r5
 802202c:	f7de f93a 	bl	80002a4 <__aeabi_dsub>
 8022030:	4602      	mov	r2, r0
 8022032:	460b      	mov	r3, r1
 8022034:	f7de fc18 	bl	8000868 <__aeabi_ddiv>
 8022038:	e7e8      	b.n	802200c <__ieee754_sqrt+0x28>
 802203a:	152a      	asrs	r2, r5, #20
 802203c:	d115      	bne.n	802206a <__ieee754_sqrt+0x86>
 802203e:	2000      	movs	r0, #0
 8022040:	e009      	b.n	8022056 <__ieee754_sqrt+0x72>
 8022042:	0acb      	lsrs	r3, r1, #11
 8022044:	3a15      	subs	r2, #21
 8022046:	0549      	lsls	r1, r1, #21
 8022048:	2b00      	cmp	r3, #0
 802204a:	d0fa      	beq.n	8022042 <__ieee754_sqrt+0x5e>
 802204c:	e7f7      	b.n	802203e <__ieee754_sqrt+0x5a>
 802204e:	462a      	mov	r2, r5
 8022050:	e7fa      	b.n	8022048 <__ieee754_sqrt+0x64>
 8022052:	005b      	lsls	r3, r3, #1
 8022054:	3001      	adds	r0, #1
 8022056:	02dc      	lsls	r4, r3, #11
 8022058:	d5fb      	bpl.n	8022052 <__ieee754_sqrt+0x6e>
 802205a:	1e44      	subs	r4, r0, #1
 802205c:	1b12      	subs	r2, r2, r4
 802205e:	f1c0 0420 	rsb	r4, r0, #32
 8022062:	fa21 f404 	lsr.w	r4, r1, r4
 8022066:	4081      	lsls	r1, r0
 8022068:	4323      	orrs	r3, r4
 802206a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802206e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8022072:	07d2      	lsls	r2, r2, #31
 8022074:	f04f 0600 	mov.w	r6, #0
 8022078:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802207c:	ea4f 0565 	mov.w	r5, r5, asr #1
 8022080:	f04f 0016 	mov.w	r0, #22
 8022084:	4632      	mov	r2, r6
 8022086:	bf58      	it	pl
 8022088:	005b      	lslpl	r3, r3, #1
 802208a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 802208e:	bf5c      	itt	pl
 8022090:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8022094:	0049      	lslpl	r1, r1, #1
 8022096:	005b      	lsls	r3, r3, #1
 8022098:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 802209c:	0049      	lsls	r1, r1, #1
 802209e:	1917      	adds	r7, r2, r4
 80220a0:	429f      	cmp	r7, r3
 80220a2:	bfde      	ittt	le
 80220a4:	193a      	addle	r2, r7, r4
 80220a6:	1bdb      	suble	r3, r3, r7
 80220a8:	1936      	addle	r6, r6, r4
 80220aa:	0fcf      	lsrs	r7, r1, #31
 80220ac:	3801      	subs	r0, #1
 80220ae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80220b2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80220b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80220ba:	d1f0      	bne.n	802209e <__ieee754_sqrt+0xba>
 80220bc:	4604      	mov	r4, r0
 80220be:	2720      	movs	r7, #32
 80220c0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80220c4:	429a      	cmp	r2, r3
 80220c6:	eb00 0e0c 	add.w	lr, r0, ip
 80220ca:	db02      	blt.n	80220d2 <__ieee754_sqrt+0xee>
 80220cc:	d113      	bne.n	80220f6 <__ieee754_sqrt+0x112>
 80220ce:	458e      	cmp	lr, r1
 80220d0:	d811      	bhi.n	80220f6 <__ieee754_sqrt+0x112>
 80220d2:	f1be 0f00 	cmp.w	lr, #0
 80220d6:	eb0e 000c 	add.w	r0, lr, ip
 80220da:	da43      	bge.n	8022164 <__ieee754_sqrt+0x180>
 80220dc:	2800      	cmp	r0, #0
 80220de:	db41      	blt.n	8022164 <__ieee754_sqrt+0x180>
 80220e0:	f102 0801 	add.w	r8, r2, #1
 80220e4:	1a9b      	subs	r3, r3, r2
 80220e6:	458e      	cmp	lr, r1
 80220e8:	4464      	add	r4, ip
 80220ea:	eba1 010e 	sub.w	r1, r1, lr
 80220ee:	bf88      	it	hi
 80220f0:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80220f4:	4642      	mov	r2, r8
 80220f6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80220fa:	3f01      	subs	r7, #1
 80220fc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8022100:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8022104:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8022108:	d1dc      	bne.n	80220c4 <__ieee754_sqrt+0xe0>
 802210a:	4319      	orrs	r1, r3
 802210c:	d01b      	beq.n	8022146 <__ieee754_sqrt+0x162>
 802210e:	f8df a088 	ldr.w	sl, [pc, #136]	@ 8022198 <__ieee754_sqrt+0x1b4>
 8022112:	f8df b088 	ldr.w	fp, [pc, #136]	@ 802219c <__ieee754_sqrt+0x1b8>
 8022116:	e9da 0100 	ldrd	r0, r1, [sl]
 802211a:	e9db 2300 	ldrd	r2, r3, [fp]
 802211e:	e9da 8900 	ldrd	r8, r9, [sl]
 8022122:	f7de f8bf 	bl	80002a4 <__aeabi_dsub>
 8022126:	4602      	mov	r2, r0
 8022128:	460b      	mov	r3, r1
 802212a:	4640      	mov	r0, r8
 802212c:	4649      	mov	r1, r9
 802212e:	f7de fced 	bl	8000b0c <__aeabi_dcmple>
 8022132:	b140      	cbz	r0, 8022146 <__ieee754_sqrt+0x162>
 8022134:	f1b4 3fff 	cmp.w	r4, #4294967295
 8022138:	e9da 0100 	ldrd	r0, r1, [sl]
 802213c:	e9db 2300 	ldrd	r2, r3, [fp]
 8022140:	d112      	bne.n	8022168 <__ieee754_sqrt+0x184>
 8022142:	3601      	adds	r6, #1
 8022144:	463c      	mov	r4, r7
 8022146:	1072      	asrs	r2, r6, #1
 8022148:	07f1      	lsls	r1, r6, #31
 802214a:	ea4f 0354 	mov.w	r3, r4, lsr #1
 802214e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8022152:	bf48      	it	mi
 8022154:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8022158:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 802215c:	4618      	mov	r0, r3
 802215e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8022162:	e753      	b.n	802200c <__ieee754_sqrt+0x28>
 8022164:	4690      	mov	r8, r2
 8022166:	e7bd      	b.n	80220e4 <__ieee754_sqrt+0x100>
 8022168:	e9da 8900 	ldrd	r8, r9, [sl]
 802216c:	f7de f89c 	bl	80002a8 <__adddf3>
 8022170:	4602      	mov	r2, r0
 8022172:	460b      	mov	r3, r1
 8022174:	4640      	mov	r0, r8
 8022176:	4649      	mov	r1, r9
 8022178:	f7de fcbe 	bl	8000af8 <__aeabi_dcmplt>
 802217c:	b128      	cbz	r0, 802218a <__ieee754_sqrt+0x1a6>
 802217e:	1ca0      	adds	r0, r4, #2
 8022180:	f104 0402 	add.w	r4, r4, #2
 8022184:	bf08      	it	eq
 8022186:	3601      	addeq	r6, #1
 8022188:	e7dd      	b.n	8022146 <__ieee754_sqrt+0x162>
 802218a:	1c63      	adds	r3, r4, #1
 802218c:	f023 0401 	bic.w	r4, r3, #1
 8022190:	e7d9      	b.n	8022146 <__ieee754_sqrt+0x162>
 8022192:	bf00      	nop
 8022194:	7ff00000 	.word	0x7ff00000
 8022198:	20000b80 	.word	0x20000b80
 802219c:	20000b78 	.word	0x20000b78

080221a0 <__ieee754_log>:
 80221a0:	ec51 0b10 	vmov	r0, r1, d0
 80221a4:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80221a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221ac:	460d      	mov	r5, r1
 80221ae:	b087      	sub	sp, #28
 80221b0:	da26      	bge.n	8022200 <__ieee754_log+0x60>
 80221b2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80221b6:	4602      	mov	r2, r0
 80221b8:	4303      	orrs	r3, r0
 80221ba:	d10a      	bne.n	80221d2 <__ieee754_log+0x32>
 80221bc:	2200      	movs	r2, #0
 80221be:	2300      	movs	r3, #0
 80221c0:	2000      	movs	r0, #0
 80221c2:	49cb      	ldr	r1, [pc, #812]	@ (80224f0 <__ieee754_log+0x350>)
 80221c4:	f7de fb50 	bl	8000868 <__aeabi_ddiv>
 80221c8:	ec41 0b10 	vmov	d0, r0, r1
 80221cc:	b007      	add	sp, #28
 80221ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221d2:	2900      	cmp	r1, #0
 80221d4:	da05      	bge.n	80221e2 <__ieee754_log+0x42>
 80221d6:	460b      	mov	r3, r1
 80221d8:	f7de f864 	bl	80002a4 <__aeabi_dsub>
 80221dc:	2200      	movs	r2, #0
 80221de:	2300      	movs	r3, #0
 80221e0:	e7f0      	b.n	80221c4 <__ieee754_log+0x24>
 80221e2:	4bc4      	ldr	r3, [pc, #784]	@ (80224f4 <__ieee754_log+0x354>)
 80221e4:	2200      	movs	r2, #0
 80221e6:	f7de fa15 	bl	8000614 <__aeabi_dmul>
 80221ea:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 80221ee:	460d      	mov	r5, r1
 80221f0:	4ac1      	ldr	r2, [pc, #772]	@ (80224f8 <__ieee754_log+0x358>)
 80221f2:	4295      	cmp	r5, r2
 80221f4:	dd06      	ble.n	8022204 <__ieee754_log+0x64>
 80221f6:	4602      	mov	r2, r0
 80221f8:	460b      	mov	r3, r1
 80221fa:	f7de f855 	bl	80002a8 <__adddf3>
 80221fe:	e7e3      	b.n	80221c8 <__ieee754_log+0x28>
 8022200:	2300      	movs	r3, #0
 8022202:	e7f5      	b.n	80221f0 <__ieee754_log+0x50>
 8022204:	152c      	asrs	r4, r5, #20
 8022206:	f3c5 0513 	ubfx	r5, r5, #0, #20
 802220a:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 802220e:	441c      	add	r4, r3
 8022210:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8022214:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8022218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802221c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8022220:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8022224:	4bb5      	ldr	r3, [pc, #724]	@ (80224fc <__ieee754_log+0x35c>)
 8022226:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 802222a:	ea42 0105 	orr.w	r1, r2, r5
 802222e:	2200      	movs	r2, #0
 8022230:	f7de f838 	bl	80002a4 <__aeabi_dsub>
 8022234:	1cab      	adds	r3, r5, #2
 8022236:	4682      	mov	sl, r0
 8022238:	468b      	mov	fp, r1
 802223a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802223e:	2200      	movs	r2, #0
 8022240:	2b02      	cmp	r3, #2
 8022242:	dc53      	bgt.n	80222ec <__ieee754_log+0x14c>
 8022244:	2300      	movs	r3, #0
 8022246:	f7de fc4d 	bl	8000ae4 <__aeabi_dcmpeq>
 802224a:	b1d0      	cbz	r0, 8022282 <__ieee754_log+0xe2>
 802224c:	2c00      	cmp	r4, #0
 802224e:	f000 8120 	beq.w	8022492 <__ieee754_log+0x2f2>
 8022252:	4620      	mov	r0, r4
 8022254:	f7de f974 	bl	8000540 <__aeabi_i2d>
 8022258:	4606      	mov	r6, r0
 802225a:	460f      	mov	r7, r1
 802225c:	a38e      	add	r3, pc, #568	@ (adr r3, 8022498 <__ieee754_log+0x2f8>)
 802225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022262:	f7de f9d7 	bl	8000614 <__aeabi_dmul>
 8022266:	4604      	mov	r4, r0
 8022268:	460d      	mov	r5, r1
 802226a:	4630      	mov	r0, r6
 802226c:	4639      	mov	r1, r7
 802226e:	a38c      	add	r3, pc, #560	@ (adr r3, 80224a0 <__ieee754_log+0x300>)
 8022270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022274:	f7de f9ce 	bl	8000614 <__aeabi_dmul>
 8022278:	4602      	mov	r2, r0
 802227a:	460b      	mov	r3, r1
 802227c:	4620      	mov	r0, r4
 802227e:	4629      	mov	r1, r5
 8022280:	e7bb      	b.n	80221fa <__ieee754_log+0x5a>
 8022282:	a389      	add	r3, pc, #548	@ (adr r3, 80224a8 <__ieee754_log+0x308>)
 8022284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022288:	4650      	mov	r0, sl
 802228a:	4659      	mov	r1, fp
 802228c:	f7de f9c2 	bl	8000614 <__aeabi_dmul>
 8022290:	4602      	mov	r2, r0
 8022292:	460b      	mov	r3, r1
 8022294:	2000      	movs	r0, #0
 8022296:	499a      	ldr	r1, [pc, #616]	@ (8022500 <__ieee754_log+0x360>)
 8022298:	f7de f804 	bl	80002a4 <__aeabi_dsub>
 802229c:	4606      	mov	r6, r0
 802229e:	460f      	mov	r7, r1
 80222a0:	4652      	mov	r2, sl
 80222a2:	465b      	mov	r3, fp
 80222a4:	4650      	mov	r0, sl
 80222a6:	4659      	mov	r1, fp
 80222a8:	f7de f9b4 	bl	8000614 <__aeabi_dmul>
 80222ac:	4602      	mov	r2, r0
 80222ae:	460b      	mov	r3, r1
 80222b0:	4630      	mov	r0, r6
 80222b2:	4639      	mov	r1, r7
 80222b4:	f7de f9ae 	bl	8000614 <__aeabi_dmul>
 80222b8:	4606      	mov	r6, r0
 80222ba:	460f      	mov	r7, r1
 80222bc:	b914      	cbnz	r4, 80222c4 <__ieee754_log+0x124>
 80222be:	4632      	mov	r2, r6
 80222c0:	463b      	mov	r3, r7
 80222c2:	e0a0      	b.n	8022406 <__ieee754_log+0x266>
 80222c4:	4620      	mov	r0, r4
 80222c6:	f7de f93b 	bl	8000540 <__aeabi_i2d>
 80222ca:	4680      	mov	r8, r0
 80222cc:	4689      	mov	r9, r1
 80222ce:	a372      	add	r3, pc, #456	@ (adr r3, 8022498 <__ieee754_log+0x2f8>)
 80222d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222d4:	f7de f99e 	bl	8000614 <__aeabi_dmul>
 80222d8:	4604      	mov	r4, r0
 80222da:	460d      	mov	r5, r1
 80222dc:	4640      	mov	r0, r8
 80222de:	4649      	mov	r1, r9
 80222e0:	a36f      	add	r3, pc, #444	@ (adr r3, 80224a0 <__ieee754_log+0x300>)
 80222e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222e6:	f7de f995 	bl	8000614 <__aeabi_dmul>
 80222ea:	e0a5      	b.n	8022438 <__ieee754_log+0x298>
 80222ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80222f0:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80222f4:	f7dd ffd8 	bl	80002a8 <__adddf3>
 80222f8:	4602      	mov	r2, r0
 80222fa:	460b      	mov	r3, r1
 80222fc:	4650      	mov	r0, sl
 80222fe:	4659      	mov	r1, fp
 8022300:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8022304:	f7de fab0 	bl	8000868 <__aeabi_ddiv>
 8022308:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 802230c:	3551      	adds	r5, #81	@ 0x51
 802230e:	e9cd 0100 	strd	r0, r1, [sp]
 8022312:	4620      	mov	r0, r4
 8022314:	4335      	orrs	r5, r6
 8022316:	f7de f913 	bl	8000540 <__aeabi_i2d>
 802231a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802231e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022322:	4610      	mov	r0, r2
 8022324:	4619      	mov	r1, r3
 8022326:	f7de f975 	bl	8000614 <__aeabi_dmul>
 802232a:	4602      	mov	r2, r0
 802232c:	460b      	mov	r3, r1
 802232e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8022332:	f7de f96f 	bl	8000614 <__aeabi_dmul>
 8022336:	4680      	mov	r8, r0
 8022338:	4689      	mov	r9, r1
 802233a:	a35d      	add	r3, pc, #372	@ (adr r3, 80224b0 <__ieee754_log+0x310>)
 802233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022340:	f7de f968 	bl	8000614 <__aeabi_dmul>
 8022344:	a35c      	add	r3, pc, #368	@ (adr r3, 80224b8 <__ieee754_log+0x318>)
 8022346:	e9d3 2300 	ldrd	r2, r3, [r3]
 802234a:	f7dd ffad 	bl	80002a8 <__adddf3>
 802234e:	4642      	mov	r2, r8
 8022350:	464b      	mov	r3, r9
 8022352:	f7de f95f 	bl	8000614 <__aeabi_dmul>
 8022356:	a35a      	add	r3, pc, #360	@ (adr r3, 80224c0 <__ieee754_log+0x320>)
 8022358:	e9d3 2300 	ldrd	r2, r3, [r3]
 802235c:	f7dd ffa4 	bl	80002a8 <__adddf3>
 8022360:	4642      	mov	r2, r8
 8022362:	464b      	mov	r3, r9
 8022364:	f7de f956 	bl	8000614 <__aeabi_dmul>
 8022368:	a357      	add	r3, pc, #348	@ (adr r3, 80224c8 <__ieee754_log+0x328>)
 802236a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802236e:	f7dd ff9b 	bl	80002a8 <__adddf3>
 8022372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022376:	f7de f94d 	bl	8000614 <__aeabi_dmul>
 802237a:	a355      	add	r3, pc, #340	@ (adr r3, 80224d0 <__ieee754_log+0x330>)
 802237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022380:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022384:	4640      	mov	r0, r8
 8022386:	4649      	mov	r1, r9
 8022388:	f7de f944 	bl	8000614 <__aeabi_dmul>
 802238c:	a352      	add	r3, pc, #328	@ (adr r3, 80224d8 <__ieee754_log+0x338>)
 802238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022392:	f7dd ff89 	bl	80002a8 <__adddf3>
 8022396:	4642      	mov	r2, r8
 8022398:	464b      	mov	r3, r9
 802239a:	f7de f93b 	bl	8000614 <__aeabi_dmul>
 802239e:	a350      	add	r3, pc, #320	@ (adr r3, 80224e0 <__ieee754_log+0x340>)
 80223a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223a4:	f7dd ff80 	bl	80002a8 <__adddf3>
 80223a8:	4642      	mov	r2, r8
 80223aa:	464b      	mov	r3, r9
 80223ac:	f7de f932 	bl	8000614 <__aeabi_dmul>
 80223b0:	4602      	mov	r2, r0
 80223b2:	460b      	mov	r3, r1
 80223b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80223b8:	f7dd ff76 	bl	80002a8 <__adddf3>
 80223bc:	2d00      	cmp	r5, #0
 80223be:	4680      	mov	r8, r0
 80223c0:	4689      	mov	r9, r1
 80223c2:	dd48      	ble.n	8022456 <__ieee754_log+0x2b6>
 80223c4:	2200      	movs	r2, #0
 80223c6:	4b4e      	ldr	r3, [pc, #312]	@ (8022500 <__ieee754_log+0x360>)
 80223c8:	4650      	mov	r0, sl
 80223ca:	4659      	mov	r1, fp
 80223cc:	f7de f922 	bl	8000614 <__aeabi_dmul>
 80223d0:	4652      	mov	r2, sl
 80223d2:	465b      	mov	r3, fp
 80223d4:	f7de f91e 	bl	8000614 <__aeabi_dmul>
 80223d8:	4602      	mov	r2, r0
 80223da:	460b      	mov	r3, r1
 80223dc:	4606      	mov	r6, r0
 80223de:	460f      	mov	r7, r1
 80223e0:	4640      	mov	r0, r8
 80223e2:	4649      	mov	r1, r9
 80223e4:	f7dd ff60 	bl	80002a8 <__adddf3>
 80223e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80223ec:	f7de f912 	bl	8000614 <__aeabi_dmul>
 80223f0:	4680      	mov	r8, r0
 80223f2:	4689      	mov	r9, r1
 80223f4:	b964      	cbnz	r4, 8022410 <__ieee754_log+0x270>
 80223f6:	4602      	mov	r2, r0
 80223f8:	460b      	mov	r3, r1
 80223fa:	4630      	mov	r0, r6
 80223fc:	4639      	mov	r1, r7
 80223fe:	f7dd ff51 	bl	80002a4 <__aeabi_dsub>
 8022402:	4602      	mov	r2, r0
 8022404:	460b      	mov	r3, r1
 8022406:	4650      	mov	r0, sl
 8022408:	4659      	mov	r1, fp
 802240a:	f7dd ff4b 	bl	80002a4 <__aeabi_dsub>
 802240e:	e6db      	b.n	80221c8 <__ieee754_log+0x28>
 8022410:	a321      	add	r3, pc, #132	@ (adr r3, 8022498 <__ieee754_log+0x2f8>)
 8022412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802241a:	f7de f8fb 	bl	8000614 <__aeabi_dmul>
 802241e:	4604      	mov	r4, r0
 8022420:	460d      	mov	r5, r1
 8022422:	a31f      	add	r3, pc, #124	@ (adr r3, 80224a0 <__ieee754_log+0x300>)
 8022424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802242c:	f7de f8f2 	bl	8000614 <__aeabi_dmul>
 8022430:	4642      	mov	r2, r8
 8022432:	464b      	mov	r3, r9
 8022434:	f7dd ff38 	bl	80002a8 <__adddf3>
 8022438:	4602      	mov	r2, r0
 802243a:	460b      	mov	r3, r1
 802243c:	4630      	mov	r0, r6
 802243e:	4639      	mov	r1, r7
 8022440:	f7dd ff30 	bl	80002a4 <__aeabi_dsub>
 8022444:	4652      	mov	r2, sl
 8022446:	465b      	mov	r3, fp
 8022448:	f7dd ff2c 	bl	80002a4 <__aeabi_dsub>
 802244c:	4602      	mov	r2, r0
 802244e:	460b      	mov	r3, r1
 8022450:	4620      	mov	r0, r4
 8022452:	4629      	mov	r1, r5
 8022454:	e7d9      	b.n	802240a <__ieee754_log+0x26a>
 8022456:	4602      	mov	r2, r0
 8022458:	460b      	mov	r3, r1
 802245a:	4650      	mov	r0, sl
 802245c:	4659      	mov	r1, fp
 802245e:	f7dd ff21 	bl	80002a4 <__aeabi_dsub>
 8022462:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022466:	f7de f8d5 	bl	8000614 <__aeabi_dmul>
 802246a:	4606      	mov	r6, r0
 802246c:	460f      	mov	r7, r1
 802246e:	2c00      	cmp	r4, #0
 8022470:	f43f af25 	beq.w	80222be <__ieee754_log+0x11e>
 8022474:	a308      	add	r3, pc, #32	@ (adr r3, 8022498 <__ieee754_log+0x2f8>)
 8022476:	e9d3 2300 	ldrd	r2, r3, [r3]
 802247a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802247e:	f7de f8c9 	bl	8000614 <__aeabi_dmul>
 8022482:	4604      	mov	r4, r0
 8022484:	460d      	mov	r5, r1
 8022486:	a306      	add	r3, pc, #24	@ (adr r3, 80224a0 <__ieee754_log+0x300>)
 8022488:	e9d3 2300 	ldrd	r2, r3, [r3]
 802248c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022490:	e729      	b.n	80222e6 <__ieee754_log+0x146>
 8022492:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 80224e8 <__ieee754_log+0x348>
 8022496:	e699      	b.n	80221cc <__ieee754_log+0x2c>
 8022498:	fee00000 	.word	0xfee00000
 802249c:	3fe62e42 	.word	0x3fe62e42
 80224a0:	35793c76 	.word	0x35793c76
 80224a4:	3dea39ef 	.word	0x3dea39ef
 80224a8:	55555555 	.word	0x55555555
 80224ac:	3fd55555 	.word	0x3fd55555
 80224b0:	df3e5244 	.word	0xdf3e5244
 80224b4:	3fc2f112 	.word	0x3fc2f112
 80224b8:	96cb03de 	.word	0x96cb03de
 80224bc:	3fc74664 	.word	0x3fc74664
 80224c0:	94229359 	.word	0x94229359
 80224c4:	3fd24924 	.word	0x3fd24924
 80224c8:	55555593 	.word	0x55555593
 80224cc:	3fe55555 	.word	0x3fe55555
 80224d0:	d078c69f 	.word	0xd078c69f
 80224d4:	3fc39a09 	.word	0x3fc39a09
 80224d8:	1d8e78af 	.word	0x1d8e78af
 80224dc:	3fcc71c5 	.word	0x3fcc71c5
 80224e0:	9997fa04 	.word	0x9997fa04
 80224e4:	3fd99999 	.word	0x3fd99999
	...
 80224f0:	c3500000 	.word	0xc3500000
 80224f4:	43500000 	.word	0x43500000
 80224f8:	7fefffff 	.word	0x7fefffff
 80224fc:	3ff00000 	.word	0x3ff00000
 8022500:	3fe00000 	.word	0x3fe00000

08022504 <_init>:
 8022504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022506:	bf00      	nop
 8022508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802250a:	bc08      	pop	{r3}
 802250c:	469e      	mov	lr, r3
 802250e:	4770      	bx	lr

08022510 <_fini>:
 8022510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022512:	bf00      	nop
 8022514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022516:	bc08      	pop	{r3}
 8022518:	469e      	mov	lr, r3
 802251a:	4770      	bx	lr
